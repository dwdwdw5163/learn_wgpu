(undo-tree-save-format-version . 1)
"36e0b34e9fdb1607115381fec7192d7e472626d2"
[nil nil nil nil (26006 39703 109844 0) 0 nil]
([nil nil ((1 . 2) (t 26006 39471 44700 689000)) nil (26006 39703 109843 0) 0 nil])
([nil nil ((1 . 2)) nil (26006 39703 109842 0) 0 nil])
([nil nil ((1 . 4)) nil (26006 39703 109841 0) 0 nil])
([nil nil ((4 . 7)) nil (26006 39703 109840 0) 0 nil])
([nil nil ((#("use tr" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 6 (face font-lock-constant-face fontified t)) . 1)) nil (26006 39703 109839 0) 0 nil])
([nil nil ((1 . 6)) nil (26006 39703 109838 0) 0 nil])
([nil nil ((6 . 8)) nil (26006 39703 109837 0) 0 nil])
([nil nil ((5 . 12) (#("tra" 0 3 (fontified nil)) . 5) (5 . 8) (#("tracing" 0 7 (fontified nil)) . -5) (5 . 12) (#("tra" 0 3 (face font-lock-constant-face fontified t)) . -5) (undo-tree-id16 . -3) 8) nil (26006 39703 109835 0) 0 nil])
([nil nil ((12 . 14)) nil (26006 39703 109832 0) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -12) (undo-tree-id14 . -1) (#(":" 0 1 (fontified t)) . -13) (undo-tree-id15 . -1) 14) nil (26006 39703 109830 0) 0 nil])
([nil nil ((12 . 14)) nil (26006 39703 109827 0) 0 nil])
([nil nil ((#("use tracing::" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 11 (face font-lock-constant-face fontified t) 11 13 (fontified t)) . 1) (undo-tree-id13 . -11)) nil (26006 39703 109826 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1)) nil (26006 39703 109824 0) 0 nil])
([nil nil ((13 . 18)) nil (26006 39703 109823 0) 0 nil])
([nil nil ((18 . 22)) nil (26006 39703 109822 0) 0 nil])
([nil nil ((18 . 36) (#("trac" 0 4 (fontified nil)) . 18) (18 . 22) (#("tracing_subscriber" 0 18 (fontified nil)) . -18) (18 . 36) (#("trac" 0 4 (fontified t)) . -18) (undo-tree-id12 . -4) 22) nil (26006 39703 109820 0) 0 nil])
([nil nil ((36 . 45)) nil (26006 39703 109817 0) 0 nil])
([nil nil ((45 . 47)) nil (26006 39703 109816 0) 0 nil])
([nil nil ((43 . 51) (#("init" 0 4 (fontified nil)) . 43) (43 . 47) (#("init()" 0 6 (fontified nil)) . -43) (43 . 49) (#("init" 0 4 (fontified t)) . -43) (undo-tree-id11 . -4) 47) nil (26006 39703 109814 0) 0 nil])
([nil nil ((#("$" 0 1 (fontified t)) . -49) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (#("0" 0 1 (fontified t)) . -50) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) 51) nil (26006 39703 109810 0) 0 nil])
([nil nil ((49 . 50)) nil (26006 39703 109801 0) 0 nil])
([nil nil ((#("'" 0 1 (fontified t)) . -49) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) 50) nil (26006 39703 109799 0) 0 nil])
([nil nil ((49 . 50)) nil (26006 39703 109772 0) 0 nil])
([nil nil ((52 . 56) (#("    " 0 4 (fontified nil)) . 51) (undo-tree-id25 . -4) (undo-tree-id26 . -4) (undo-tree-id27 . -4) (undo-tree-id28 . -4) (50 . 56) (t 26006 39703 113824 737000)) nil (26006 39708 181191 0) 0 nil])
([nil nil ((#("println!(\"Hello, world!\");" 0 8 (face rust-builtin-formatting-macro fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t) 9 24 (face font-lock-string-face fontified t) 24 25 (face (rainbow-delimiters-depth-2-face) fontified t) 25 26 (fontified t)) . 61) (undo-tree-id24 . -26)) nil (26006 39708 181186 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 61) (undo-tree-id23 . -1)) nil (26006 39708 181183 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -57) (undo-tree-id17 . -4) (undo-tree-id18 . -4) (undo-tree-id19 . -4) (undo-tree-id20 . -4) (undo-tree-id21 . -4) (undo-tree-id22 . -4) 61) nil (26006 39708 181179 0) 0 nil])
([nil nil ((51 . 55) (t 26006 39708 184289 286000)) nil (26006 39751 770781 0) 0 nil])
([nil nil ((1 . 2)) nil (26006 39751 770780 0) 0 nil])
([nil nil ((1 . 9)) nil (26006 39751 770779 0) 0 nil])
([nil nil ((5 . 12) (#("trac" 0 4 (fontified nil)) . 5) (5 . 9) (#("tracing" 0 7 (fontified nil)) . -5) (5 . 12) (#("trac" 0 4 (face font-lock-constant-face fontified t)) . -5) (undo-tree-id36 . -4) 9) nil (26006 39751 770777 0) 0 nil])
([nil nil ((12 . 16)) nil (26006 39751 770774 0) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -12) (undo-tree-id32 . -1) (#(":" 0 1 (fontified t)) . -13) (undo-tree-id33 . -1) (#("i" 0 1 (fontified t)) . -14) (undo-tree-id34 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -15) (undo-tree-id35 . -1) 16) nil (26006 39751 770772 0) 0 nil])
([nil nil ((12 . 14)) nil (26006 39751 770766 0) 0 nil])
([nil nil ((#("use tracing::" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 11 (face font-lock-constant-face fontified t) 11 13 (fontified t)) . 1) (undo-tree-id31 . -13)) nil (26006 39751 770765 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1) (undo-tree-id29 . 1) (undo-tree-id30 . -1)) nil (26006 39751 770761 0) 0 nil])
([nil nil ((55 . 57) (t 26006 39751 774821 915000)) nil (26006 40484 777860 0) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -56) (undo-tree-id210 . -1) 57) nil (26006 40484 777858 0) 0 nil])
([nil nil ((56 . 57)) nil (26006 40484 777856 0) 0 nil])
([nil nil ((#("w" 0 1 (fontified t)) . -55) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (#("g" 0 1 (fontified t)) . -56) (undo-tree-id208 . -1) (undo-tree-id209 . -1) 57) nil (26006 40484 777855 0) 0 nil])
([nil nil ((55 . 56)) nil (26006 40484 777849 0) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -55) (undo-tree-id205 . -1) 56) nil (26006 40484 777848 0) 0 nil])
([nil nil ((55 . 58)) nil (26006 40484 777846 0) 0 nil])
([nil nil ((55 . 59) (#("wgp" 0 3 (fontified nil)) . 55) (55 . 58) (#("wgpu" 0 4 (fontified nil)) . -55) (55 . 59) (#("wgp" 0 3 (fontified t)) . -55) (undo-tree-id199 . -3) (undo-tree-id200 . -2) (undo-tree-id201 . -3) (undo-tree-id202 . -3) (undo-tree-id203 . -3) (undo-tree-id204 . -3) 58) nil (26006 40484 777844 0) 0 nil])
([nil nil ((59 . 65)) nil (26006 40484 777836 0) 0 nil])
([nil nil ((65 . 66)) nil (26006 40484 777835 0) 0 nil])
([nil nil ((61 . 69) (#("Backe" 0 5 (fontified nil)) . 61) (61 . 66) (#("Backends" 0 8 (fontified nil)) . -61) (61 . 69) (#("Backe" 0 5 (face font-lock-type-face fontified t)) . -61) (undo-tree-id184 . -5) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -2) (undo-tree-id188 . -2) (undo-tree-id189 . -3) (undo-tree-id190 . -3) (undo-tree-id191 . -4) (undo-tree-id192 . -4) (undo-tree-id193 . -4) (undo-tree-id194 . -4) (undo-tree-id195 . -5) (undo-tree-id196 . -5) (undo-tree-id197 . -5) (undo-tree-id198 . -5) 66) nil (26006 40484 777832 0) 0 nil])
([nil nil ((69 . 74)) nil (26006 40484 777816 0) 0 nil])
([nil nil ((apply yas--snippet-revive 71 76 #s(yas--snippet nil nil #s(yas--exit 76 nil) 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 76 nil) 0 nil nil nil nil)) (71 . 76) (#("all()$0" 0 7 (fontified nil)) . 71) (71 . 78) (#("all" 0 3 (fontified nil)) . 71) (71 . 74) (#("all()" 0 5 (fontified nil)) . -71) (71 . 76) (#("all" 0 3 (fontified t)) . -71) (undo-tree-id174 . -3) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -2) (undo-tree-id179 . -2) (undo-tree-id180 . -3) (undo-tree-id181 . -3) (undo-tree-id182 . -3) (undo-tree-id183 . -3) 74) nil (26006 40484 777814 0) 0 nil])
([nil nil ((#("    wgpu::Backends::all()" 0 4 (fontified t) 4 8 (face font-lock-constant-face fontified t) 8 10 (fontified t) 10 18 (face font-lock-type-face fontified t) 18 20 (fontified t) 20 23 (fontified t) 23 24 (face (rainbow-delimiters-depth-2-face) fontified t) 24 25 (face (rainbow-delimiters-depth-2-face) fontified t)) . 51) (undo-tree-id113 . -25) (undo-tree-id114 . -4) (undo-tree-id115 . -4) (undo-tree-id116 . -4) (undo-tree-id117 . -4) (undo-tree-id118 . -4) (undo-tree-id119 . -4) (undo-tree-id120 . -4) (undo-tree-id121 . -8) (undo-tree-id122 . -8) (undo-tree-id123 . -8) (undo-tree-id124 . -9) (undo-tree-id125 . -9) (undo-tree-id126 . -10) (undo-tree-id127 . -10) (undo-tree-id128 . -10) (undo-tree-id129 . -10) (undo-tree-id130 . -10) (undo-tree-id131 . -10) (undo-tree-id132 . -10) (undo-tree-id133 . -10) (undo-tree-id134 . -10) (undo-tree-id135 . -10) (undo-tree-id136 . -10) (undo-tree-id137 . -10) (undo-tree-id138 . -10) (undo-tree-id139 . -10) (undo-tree-id140 . -10) (undo-tree-id141 . -10) (undo-tree-id142 . -10) (undo-tree-id143 . -10) (undo-tree-id144 . -18) (undo-tree-id145 . -18) (undo-tree-id146 . -18) (undo-tree-id147 . -19) (undo-tree-id148 . -19) (undo-tree-id149 . -20) (undo-tree-id150 . -20) (undo-tree-id151 . -20) (undo-tree-id152 . -20) (undo-tree-id153 . -20) (undo-tree-id154 . -20) (undo-tree-id155 . -20) (undo-tree-id156 . -20) (undo-tree-id157 . -20) (undo-tree-id158 . -20) (undo-tree-id159 . -20) (undo-tree-id160 . -20) (undo-tree-id161 . -20) (undo-tree-id162 . -25) (undo-tree-id163 . -25) (undo-tree-id164 . -25) (undo-tree-id165 . -25) (undo-tree-id166 . -25) (undo-tree-id167 . -25) (undo-tree-id168 . -25) (undo-tree-id169 . -25) (undo-tree-id170 . -25) (undo-tree-id171 . -25) (undo-tree-id172 . -25) (undo-tree-id173 . -25)) nil (26006 40484 777798 0) 0 nil])
([nil nil ((51 . 55)) nil (26006 40484 777735 0) 0 nil])
([nil nil ((52 . 56) (#("    " 0 4 (fontified nil)) . 51) (undo-tree-id104 . -4) (undo-tree-id105 . -4) (undo-tree-id106 . -4) (undo-tree-id107 . -4) (undo-tree-id108 . -4) (undo-tree-id109 . -4) (undo-tree-id110 . -4) (undo-tree-id111 . -4) (undo-tree-id112 . -4) (55 . 56)) nil (26006 40484 777733 0) 0 nil])
([nil nil ((56 . 74)) nil (26006 40484 777723 0) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -72) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (#("g" 0 1 (fontified t)) . -73) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) 74) nil (26006 40484 777721 0) 0 nil])
([nil nil ((72 . 74)) nil (26006 40484 777700 0) 0 nil])
([nil nil ((71 . 75) (#("wgp" 0 3 (fontified nil)) . 71) (71 . 74) (#("wgpu" 0 4 (fontified nil)) . -71) (71 . 75) (#("wgp" 0 3 (fontified t)) . -71) (undo-tree-id70 . -3) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -2) (undo-tree-id86 . -2) (undo-tree-id87 . -3) (undo-tree-id88 . -3) 74) nil (26006 40484 777698 0) 0 nil])
([nil nil ((75 . 80)) nil (26006 40484 777677 0) 0 nil])
([nil nil ((77 . 85) (#("Ins" 0 3 (fontified nil)) . 77) (77 . 80) (#("Instance" 0 8 (fontified nil)) . -77) (77 . 85) (#("Ins" 0 3 (face font-lock-type-face fontified t)) . -77) (undo-tree-id60 . -3) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -2) (undo-tree-id65 . -2) (undo-tree-id66 . -2) (undo-tree-id67 . -3) (undo-tree-id68 . -3) (undo-tree-id69 . -3) 80) nil (26006 40484 777676 0) 0 nil])
([nil nil ((85 . 90)) nil (26006 40484 777659 0) 0 nil])
([nil nil ((87 . 90) (#("new" 0 3 (fontified nil)) . 87) (87 . 90) (#("new" 0 3 (fontified t)) . -87) (undo-tree-id52 . -3) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -2) (undo-tree-id57 . -2) (undo-tree-id58 . -3) (undo-tree-id59 . -3) 90) nil (26006 40484 777657 0) 0 nil])
([nil nil ((90 . 92)) nil (26006 40484 777648 0) 0 nil])
([nil nil ((91 . 92)) nil (26006 40484 777646 0) 0 nil])
([nil nil ((#("W" 0 1 (face font-lock-type-face fontified t)) . -91) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) 92) nil (26006 40484 777645 0) 0 nil])
([nil nil ((91 . 95)) nil (26006 40484 777638 0) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -92) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (#("g" 0 1 (fontified t)) . -93) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (#("\\" 0 1 (fontified t)) . -94) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) 95) nil (26006 40484 777635 0) 0 nil])
([nil nil ((92 . 99)) nil (26006 40484 777606 0) 0 nil])
([nil nil ((97 . 105) (#("Ba" 0 2 (fontified nil)) . 97) (97 . 99) (#("Backends" 0 8 (fontified nil)) . -97) (97 . 105) (#("Ba" 0 2 (face font-lock-type-face fontified t)) . -97) (undo-tree-id8 . -2) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -2) (undo-tree-id13 . -2) (undo-tree-id14 . -2) (undo-tree-id15 . -2) (undo-tree-id16 . -2) 99) nil (26006 40484 777604 0) 0 nil])
([nil nil ((105 . 109)) nil (26006 40484 777593 0) 0 nil])
([nil nil ((apply yas--snippet-revive 107 112 #s(yas--snippet nil nil #s(yas--exit 112 nil) 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 112 nil) 1 nil nil nil nil)) (107 . 112) (#("all()$0" 0 7 (fontified nil)) . 107) (107 . 114) (#("al" 0 2 (fontified nil)) . 107) (107 . 109) (#("all()" 0 5 (fontified nil)) . -107) (107 . 112) (#("al" 0 2 (fontified t)) . -107) (undo-tree-id0 . -2) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -2) (undo-tree-id5 . -2) (undo-tree-id6 . -2) (undo-tree-id7 . -2) 109) nil (26006 40484 777591 0) 0 nil])
([nil nil ((113 . 114)) nil (26006 40484 777549 0) 0 nil])
([nil nil ((68 . 69) (t 26006 40484 782236 621000)) nil (26006 40693 321070 0) 0 nil])
([nil nil ((#("all()" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-3-face) fontified t) 4 5 (face (rainbow-delimiters-depth-3-face) fontified t)) . -108) (undo-tree-id1019 . -1) (undo-tree-id1020 . -5) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -2) (undo-tree-id1046 . -3) (undo-tree-id1047 . -4) (undo-tree-id1048 . -5) 113) nil (26006 40693 321067 0) 0 nil])
([nil nil ((#("Backends::" 0 8 (face font-lock-type-face fontified t) 8 10 (fontified t)) . -98) (undo-tree-id956 . -10) (undo-tree-id957 . -10) (undo-tree-id958 . -10) (undo-tree-id959 . -10) (undo-tree-id960 . -10) (undo-tree-id961 . -10) (undo-tree-id962 . -10) (undo-tree-id963 . -10) (undo-tree-id964 . -10) (undo-tree-id965 . -8) (undo-tree-id966 . -8) (undo-tree-id967 . -9) (undo-tree-id968 . -9) (undo-tree-id969 . -9) (undo-tree-id970 . -9) (undo-tree-id971 . -9) (undo-tree-id972 . -9) (undo-tree-id973 . -9) (undo-tree-id974 . -9) (undo-tree-id975 . -9) (undo-tree-id976 . -9) (undo-tree-id977 . -9) (undo-tree-id978 . -9) (undo-tree-id979 . -9) (undo-tree-id980 . -9) (undo-tree-id981 . -9) (undo-tree-id982 . -9) (undo-tree-id983 . -9) (undo-tree-id984 . -9) (undo-tree-id985 . -9) (undo-tree-id986 . -9) (undo-tree-id987 . -9) (undo-tree-id988 . -9) (undo-tree-id989 . -10) (undo-tree-id990 . -10) (undo-tree-id991 . -10) (undo-tree-id992 . -10) (undo-tree-id993 . -10) (undo-tree-id994 . -10) (undo-tree-id995 . -10) (undo-tree-id996 . -10) (undo-tree-id997 . -10) (undo-tree-id998 . -10) (undo-tree-id999 . -10) (undo-tree-id1000 . -10) (undo-tree-id1001 . -10) (undo-tree-id1002 . -10) (undo-tree-id1003 . -10) (undo-tree-id1004 . -10) (undo-tree-id1005 . -10) (undo-tree-id1006 . -10) (undo-tree-id1007 . -10) (undo-tree-id1008 . -10) (undo-tree-id1009 . -10) (undo-tree-id1010 . -10) (undo-tree-id1011 . -10) (undo-tree-id1012 . -10) (undo-tree-id1013 . -10) (undo-tree-id1014 . -10) (undo-tree-id1015 . -10) (undo-tree-id1016 . -10) (undo-tree-id1017 . -10) (undo-tree-id1018 . -10) 108) nil (26006 40693 321034 0) 0 nil])
([nil nil ((#("wgpu::" 0 4 (face font-lock-constant-face fontified t) 4 6 (fontified t)) . -92) (undo-tree-id843 . -6) (undo-tree-id844 . -6) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -6) (undo-tree-id860 . -6) (undo-tree-id861 . -6) (undo-tree-id862 . -6) (undo-tree-id863 . -6) (undo-tree-id864 . -6) (undo-tree-id865 . -6) (undo-tree-id866 . -6) (undo-tree-id867 . -6) (undo-tree-id868 . -6) (undo-tree-id869 . -6) (undo-tree-id870 . -6) (undo-tree-id871 . -6) (undo-tree-id872 . -6) (undo-tree-id873 . -6) (undo-tree-id874 . -6) (undo-tree-id875 . -6) (undo-tree-id876 . -6) (undo-tree-id877 . -6) (undo-tree-id878 . -6) (undo-tree-id879 . -6) (undo-tree-id880 . -6) (undo-tree-id881 . -6) (undo-tree-id882 . -6) (undo-tree-id883 . -6) (undo-tree-id884 . -6) (undo-tree-id885 . -6) (undo-tree-id886 . -6) (undo-tree-id887 . -6) (undo-tree-id888 . -6) (undo-tree-id889 . -6) (undo-tree-id890 . -6) (undo-tree-id891 . -6) (undo-tree-id892 . -6) (undo-tree-id893 . -6) (undo-tree-id894 . -6) (undo-tree-id895 . -6) (undo-tree-id896 . -6) (undo-tree-id897 . -6) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -6) (undo-tree-id925 . -6) (undo-tree-id926 . -6) (undo-tree-id927 . -6) (undo-tree-id928 . -6) (undo-tree-id929 . -6) (undo-tree-id930 . -6) (undo-tree-id931 . -6) (undo-tree-id932 . -6) (undo-tree-id933 . -6) (undo-tree-id934 . -6) (undo-tree-id935 . -6) (undo-tree-id936 . -6) (undo-tree-id937 . -6) (undo-tree-id938 . -6) (undo-tree-id939 . -6) (undo-tree-id940 . -6) (undo-tree-id941 . -6) (undo-tree-id942 . -6) (undo-tree-id943 . -6) (undo-tree-id944 . -6) (undo-tree-id945 . -6) (undo-tree-id946 . -6) (undo-tree-id947 . -6) (undo-tree-id948 . -6) (undo-tree-id949 . -6) (undo-tree-id950 . -6) (undo-tree-id951 . -6) (undo-tree-id952 . -6) (undo-tree-id953 . -6) (undo-tree-id954 . -6) (undo-tree-id955 . -6) 98) nil (26006 40693 320969 0) 0 nil])
([nil nil ((92 . 94)) nil (26006 40693 320839 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 129 131 nil nil nil nil #s(yas--field 2 140 142 nil nil nil nil #s(yas--field 3 166 168 nil nil nil nil #s(yas--field 4 190 192 nil nil nil nil #s(yas--exit 194 nil))))) #s(yas--field 2 140 142 nil nil nil nil #s(yas--field 3 166 168 nil nil nil nil #s(yas--field 4 190 192 nil nil nil nil #s(yas--exit 194 nil)))) #s(yas--field 3 166 168 nil nil nil nil #s(yas--field 4 190 192 nil nil nil nil #s(yas--exit 194 nil))) #s(yas--field 4 190 192 nil nil nil nil #s(yas--exit 194 nil))) #s(yas--exit 194 nil) 2 nil #s(yas--field 1 129 131 nil nil nil nil #s(yas--field 2 140 142 nil nil nil nil #s(yas--field 3 166 168 nil nil nil nil #s(yas--field 4 190 192 nil nil nil nil #s(yas--exit 194 nil))))) nil nil)) (92 . 194) (#("wgpu::InstanceDescriptor { backends: ${1:()}, flags: ${2:()}, dx12_shader_compiler: ${3:()}, gles_minor_version: ${4:()} }$0" 0 124 (fontified nil)) . 92) (92 . 216) (#("wp" 0 2 (fontified nil)) . 92) (92 . 94) (#("wgpu::InstanceDescriptor {…}" 0 28 (fontified nil)) . -92) (92 . 120) (#("wp" 0 2 (fontified t)) . -92) (undo-tree-id834 . -2) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -2) (undo-tree-id839 . -2) (undo-tree-id840 . -2) (undo-tree-id841 . -2) (undo-tree-id842 . -2) 94) nil (26006 40693 320837 0) 0 nil])
([nil nil ((apply yas--snippet-revive 92 194 #s(yas--snippet nil (#s(yas--field 1 129 131 nil nil nil nil #s(yas--field 2 140 142 nil nil nil nil #s(yas--field 3 166 168 nil nil nil nil #s(yas--field 4 190 192 nil nil nil nil #s(yas--exit 194 nil))))) #s(yas--field 2 140 142 nil nil nil nil #s(yas--field 3 166 168 nil nil nil nil #s(yas--field 4 190 192 nil nil nil nil #s(yas--exit 194 nil)))) #s(yas--field 3 166 168 nil nil nil nil #s(yas--field 4 190 192 nil nil nil nil #s(yas--exit 194 nil))) #s(yas--field 4 190 192 nil nil nil nil #s(yas--exit 194 nil))) #s(yas--exit 194 nil) 2 nil #s(yas--field 1 129 131 nil nil nil nil #s(yas--field 2 140 142 nil nil nil nil #s(yas--field 3 166 168 nil nil nil nil #s(yas--field 4 190 192 nil nil nil nil #s(yas--exit 194 nil))))) nil nil))) nil (26006 40693 320825 0) 0 nil])
([nil nil ((#("version: () " 0 7 (face font-lock-variable-name-face fontified t) 7 9 (fontified t) 9 10 (face (rainbow-delimiters-depth-4-face) fontified t) 10 11 (face (rainbow-delimiters-depth-4-face) fontified t) 11 12 (fontified t)) . -181) (undo-tree-id818 . -12) (undo-tree-id819 . -12) (undo-tree-id820 . -7) (undo-tree-id821 . -8) (undo-tree-id822 . -9) (undo-tree-id823 . -10) (undo-tree-id824 . -10) (undo-tree-id825 . -10) (undo-tree-id826 . -11) (undo-tree-id827 . -11) (undo-tree-id828 . -11) (undo-tree-id829 . -12) (undo-tree-id830 . -12) (undo-tree-id831 . -12) (undo-tree-id832 . -12) (undo-tree-id833 . -12) 193) nil (26006 40693 320824 0) 0 nil])
([nil nil ((#("minor_" 0 6 (fontified t)) . -175) (undo-tree-id799 . -6) (undo-tree-id800 . -6) (undo-tree-id801 . -5) (undo-tree-id802 . -6) (undo-tree-id803 . -6) (undo-tree-id804 . -6) (undo-tree-id805 . -6) (undo-tree-id806 . -6) (undo-tree-id807 . -6) (undo-tree-id808 . -6) (undo-tree-id809 . -6) (undo-tree-id810 . -6) (undo-tree-id811 . -6) (undo-tree-id812 . -6) (undo-tree-id813 . -6) (undo-tree-id814 . -6) (undo-tree-id815 . -6) (undo-tree-id816 . -6) (undo-tree-id817 . -6) 181) nil (26006 40693 320806 0) 0 nil])
([nil nil ((#("gles_" 0 5 (fontified t)) . -170) (undo-tree-id777 . -5) (undo-tree-id778 . -5) (undo-tree-id779 . -4) (undo-tree-id780 . -5) (undo-tree-id781 . -5) (undo-tree-id782 . -5) (undo-tree-id783 . -5) (undo-tree-id784 . -5) (undo-tree-id785 . -5) (undo-tree-id786 . -5) (undo-tree-id787 . -5) (undo-tree-id788 . -5) (undo-tree-id789 . -5) (undo-tree-id790 . -5) (undo-tree-id791 . -5) (undo-tree-id792 . -5) (undo-tree-id793 . -5) (undo-tree-id794 . -5) (undo-tree-id795 . -5) (undo-tree-id796 . -5) (undo-tree-id797 . -5) (undo-tree-id798 . -5) 175) nil (26006 40693 320786 0) 0 nil])
([nil nil ((#("compiler: (), " 0 8 (face font-lock-variable-name-face fontified t) 8 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-4-face) fontified t) 11 12 (face (rainbow-delimiters-depth-4-face) fontified t) 12 14 (fontified t)) . -156) (undo-tree-id752 . -14) (undo-tree-id753 . -14) (undo-tree-id754 . -8) (undo-tree-id755 . -14) (undo-tree-id756 . -14) (undo-tree-id757 . -14) (undo-tree-id758 . -14) (undo-tree-id759 . -14) (undo-tree-id760 . -14) (undo-tree-id761 . -14) (undo-tree-id762 . -14) (undo-tree-id763 . -14) (undo-tree-id764 . -14) (undo-tree-id765 . -14) (undo-tree-id766 . -14) (undo-tree-id767 . -14) (undo-tree-id768 . -14) (undo-tree-id769 . -14) (undo-tree-id770 . -14) (undo-tree-id771 . -14) (undo-tree-id772 . -14) (undo-tree-id773 . -14) (undo-tree-id774 . -14) (undo-tree-id775 . -14) (undo-tree-id776 . -14) 170) nil (26006 40693 320763 0) 0 nil])
([nil nil ((#("shader_" 0 7 (fontified t)) . -149) (undo-tree-id724 . -7) (undo-tree-id725 . -7) (undo-tree-id726 . -6) (undo-tree-id727 . -7) (undo-tree-id728 . -7) (undo-tree-id729 . -7) (undo-tree-id730 . -7) (undo-tree-id731 . -7) (undo-tree-id732 . -7) (undo-tree-id733 . -7) (undo-tree-id734 . -7) (undo-tree-id735 . -7) (undo-tree-id736 . -7) (undo-tree-id737 . -7) (undo-tree-id738 . -7) (undo-tree-id739 . -7) (undo-tree-id740 . -7) (undo-tree-id741 . -7) (undo-tree-id742 . -7) (undo-tree-id743 . -7) (undo-tree-id744 . -7) (undo-tree-id745 . -7) (undo-tree-id746 . -7) (undo-tree-id747 . -7) (undo-tree-id748 . -7) (undo-tree-id749 . -7) (undo-tree-id750 . -7) (undo-tree-id751 . -7) 156) nil (26006 40693 320738 0) 0 nil])
([nil nil ((#("dx12_" 0 5 (fontified t)) . -144) (undo-tree-id693 . -5) (undo-tree-id694 . -5) (undo-tree-id695 . -4) (undo-tree-id696 . -5) (undo-tree-id697 . -5) (undo-tree-id698 . -5) (undo-tree-id699 . -5) (undo-tree-id700 . -5) (undo-tree-id701 . -5) (undo-tree-id702 . -5) (undo-tree-id703 . -5) (undo-tree-id704 . -5) (undo-tree-id705 . -5) (undo-tree-id706 . -5) (undo-tree-id707 . -5) (undo-tree-id708 . -5) (undo-tree-id709 . -5) (undo-tree-id710 . -5) (undo-tree-id711 . -5) (undo-tree-id712 . -5) (undo-tree-id713 . -5) (undo-tree-id714 . -5) (undo-tree-id715 . -5) (undo-tree-id716 . -5) (undo-tree-id717 . -5) (undo-tree-id718 . -5) (undo-tree-id719 . -5) (undo-tree-id720 . -5) (undo-tree-id721 . -5) (undo-tree-id722 . -5) (undo-tree-id723 . -5) 149) nil (26006 40693 320708 0) 0 nil])
([nil nil ((#("flags: (), " 0 5 (face font-lock-variable-name-face fontified t) 5 7 (fontified t) 7 8 (face (rainbow-delimiters-depth-4-face) fontified t) 8 9 (face (rainbow-delimiters-depth-4-face) fontified t) 9 11 (fontified t)) . -133) (undo-tree-id659 . -11) (undo-tree-id660 . -11) (undo-tree-id661 . -5) (undo-tree-id662 . -11) (undo-tree-id663 . -11) (undo-tree-id664 . -11) (undo-tree-id665 . -11) (undo-tree-id666 . -11) (undo-tree-id667 . -11) (undo-tree-id668 . -11) (undo-tree-id669 . -11) (undo-tree-id670 . -11) (undo-tree-id671 . -11) (undo-tree-id672 . -11) (undo-tree-id673 . -11) (undo-tree-id674 . -11) (undo-tree-id675 . -11) (undo-tree-id676 . -11) (undo-tree-id677 . -11) (undo-tree-id678 . -11) (undo-tree-id679 . -11) (undo-tree-id680 . -11) (undo-tree-id681 . -11) (undo-tree-id682 . -11) (undo-tree-id683 . -11) (undo-tree-id684 . -11) (undo-tree-id685 . -11) (undo-tree-id686 . -11) (undo-tree-id687 . -11) (undo-tree-id688 . -11) (undo-tree-id689 . -11) (undo-tree-id690 . -11) (undo-tree-id691 . -11) (undo-tree-id692 . -11) 144) nil (26006 40693 320677 0) 0 nil])
([nil nil ((#("backends: (), " 0 8 (face font-lock-variable-name-face fontified t) 8 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-4-face) fontified t) 11 12 (face (rainbow-delimiters-depth-4-face) fontified t) 12 14 (fontified t)) . -119) (undo-tree-id599 . -14) (undo-tree-id600 . -14) (undo-tree-id601 . -10) (undo-tree-id602 . -10) (undo-tree-id603 . -10) (undo-tree-id604 . -10) (undo-tree-id605 . -10) (undo-tree-id606 . -10) (undo-tree-id607 . -10) (undo-tree-id608 . -10) (undo-tree-id609 . -10) (undo-tree-id610 . -10) (undo-tree-id611 . -10) (undo-tree-id612 . -10) (undo-tree-id613 . -10) (undo-tree-id614 . -10) (undo-tree-id615 . -10) (undo-tree-id616 . -10) (undo-tree-id617 . -11) (undo-tree-id618 . -11) (undo-tree-id619 . -11) (undo-tree-id620 . -12) (undo-tree-id621 . -12) (undo-tree-id622 . -12) (undo-tree-id623 . -13) (undo-tree-id624 . -14) (undo-tree-id625 . -14) (undo-tree-id626 . -14) (undo-tree-id627 . -14) (undo-tree-id628 . -14) (undo-tree-id629 . -14) (undo-tree-id630 . -14) (undo-tree-id631 . -14) (undo-tree-id632 . -14) (undo-tree-id633 . -14) (undo-tree-id634 . -14) (undo-tree-id635 . -14) (undo-tree-id636 . -14) (undo-tree-id637 . -14) (undo-tree-id638 . -14) (undo-tree-id639 . -14) (undo-tree-id640 . -14) (undo-tree-id641 . -14) (undo-tree-id642 . -14) (undo-tree-id643 . -14) (undo-tree-id644 . -14) (undo-tree-id645 . -14) (undo-tree-id646 . -14) (undo-tree-id647 . -14) (undo-tree-id648 . -14) (undo-tree-id649 . -14) (undo-tree-id650 . -14) (undo-tree-id651 . -14) (undo-tree-id652 . -14) (undo-tree-id653 . -14) (undo-tree-id654 . -14) (undo-tree-id655 . -14) (undo-tree-id656 . -14) (undo-tree-id657 . -14) (undo-tree-id658 . -14) 133) nil (26006 40693 320641 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -118) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) 119) nil (26006 40693 320567 0) 0 nil])
([nil nil ((118 . 119)) nil (26006 40693 320501 0) 0 nil])
([nil nil ((118 . 126) (#("b" 0 1 (fontified nil)) . 118) (118 . 119) (#("backends" 0 8 (fontified nil)) . -118) (118 . 126) (#("b" 0 1 (fontified t)) . -118) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) 119) nil (26006 40693 320499 0) 0 nil])
([nil nil ((116 . 119)) nil (26006 40693 320489 0) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -116) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (#(":" 0 1 (fontified t)) . -117) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (#("n" 0 1 (fontified t)) . -118) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) 119) nil (26006 40693 320485 0) 0 nil])
([nil nil ((126 . 129)) nil (26006 40693 320419 0) 0 nil])
([nil nil ((128 . 132) (#("w" 0 1 (fontified nil)) . 128) (128 . 129) (#("wgpu" 0 4 (fontified nil)) . -128) (128 . 132) (#("w" 0 1 (fontified t)) . -128) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) 129) nil (26006 40693 320417 0) 0 nil])
([nil nil ((132 . 135)) nil (26006 40693 320409 0) 0 nil])
([nil nil ((134 . 142) (#("B" 0 1 (fontified nil)) . 134) (134 . 135) (#("Backends" 0 8 (fontified nil)) . -134) (134 . 142) (#("B" 0 1 (face font-lock-type-face fontified t)) . -134) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) 135) nil (26006 40693 320407 0) 0 nil])
([nil nil ((142 . 144)) nil (26006 40693 320398 0) 0 nil])
([nil nil ((apply yas--snippet-revive 144 149 #s(yas--snippet nil nil #s(yas--exit 149 nil) 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 149 nil) 3 nil nil nil nil)) (144 . 149) (#("all()$0" 0 7 (fontified nil)) . 144) (144 . 151) (#("all()" 0 5 (fontified nil)) . -144) (144 . 149)) nil (26006 40693 320397 0) 0 nil])
([nil nil ((149 . 153)) nil (26006 40693 320394 0) 0 nil])
([nil nil ((154 . 155)) nil (26006 40693 320393 0) 0 nil])
([nil nil ((154 . 161) (#("D" 0 1 (fontified nil)) . 154) (154 . 155) (#("Default" 0 7 (fontified nil)) . -154) (154 . 161) (#("D" 0 1 (face font-lock-type-face fontified t)) . -154) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) 155) nil (26006 40693 320392 0) 0 nil])
([nil nil ((161 . 163)) nil (26006 40693 320382 0) 0 nil])
([nil nil ((#("D" 0 1 (face font-lock-type-face fontified t)) . -154) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -155) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -156) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -157) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -158) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -159) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -160) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (#("L" 0 1 (face font-lock-type-face fontified t)) . -161) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (#("L" 0 1 (face font-lock-type-face fontified t)) . -162) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) 163) nil (26006 40693 320370 0) 0 nil])
([nil nil ((153 . 155)) nil (26006 40693 320153 0) 0 nil])
([nil nil ((153 . 160) (#("De" 0 2 (fontified nil)) . 153) (153 . 155) (#("Default" 0 7 (fontified nil)) . -153) (153 . 160) (#("De" 0 2 (face font-lock-type-face fontified t)) . -153) (undo-tree-id211 . -2) (undo-tree-id212 . -2) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -2) (undo-tree-id218 . -2) (undo-tree-id219 . -2) 155) nil (26006 40693 320151 0) 0 nil])
([nil nil ((160 . 162)) nil (26006 40693 320134 0) 0 nil])
([nil nil ((apply yas--snippet-revive 162 171 #s(yas--snippet nil nil #s(yas--exit 171 nil) 4 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 171 nil) 4 nil nil nil nil)) (162 . 171) (#("default()$0" 0 11 (fontified nil)) . 162) (162 . 173) (#("default() (as Default)" 0 22 (fontified nil)) . -162) (162 . 184)) nil (26006 40693 320129 0) 0 nil])
([nil nil ((92 . 101) (t 26006 40693 356577 230000)) nil (26006 40715 588848 0) 0 nil])
([nil nil ((127 . 140)) nil (26006 40715 588846 0) 0 nil])
([nil nil ((193 . 202)) nil (26006 40715 588845 0) 0 nil])
([nil nil ((207 . 211) (#("    " 0 4 (fontified nil)) . 206) (undo-tree-id1049 . -4) (undo-tree-id1050 . -4) (undo-tree-id1051 . -4) (undo-tree-id1052 . -4) (undo-tree-id1053 . -4) (undo-tree-id1054 . -4) (210 . 211)) nil (26006 40715 588842 0) 0 nil])
([nil nil ((211 . 213) (t 26006 40715 596330 101000)) nil (26006 40781 568448 0) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -211) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (#("o" 0 1 (fontified t)) . -212) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) 213) nil (26006 40781 568446 0) 0 nil])
([nil nil ((211 . 214)) nil (26006 40781 568426 0) 0 nil])
([nil nil ((214 . 229)) nil (26006 40781 568425 0) 0 nil])
([nil nil ((#("n" 0 1 (face font-lock-keyword-face fontified t)) . -227) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (#("i" 0 1 (fontified t)) . -228) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) 229) nil (26006 40781 568423 0) 0 nil])
([nil nil ((227 . 229)) nil (26006 40781 568407 0) 0 nil])
([nil nil ((226 . 235) (#("ins" 0 3 (fontified nil)) . 226) (226 . 229) (#("instances" 0 9 (fontified nil)) . -226) (226 . 235) (#("ins" 0 3 (fontified t)) . -226) (undo-tree-id1218 . -3) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -2) (undo-tree-id1234 . -2) (undo-tree-id1235 . -3) (undo-tree-id1236 . -3) 229) nil (26006 40781 568405 0) 0 nil])
([nil nil ((235 . 236)) nil (26006 40781 568385 0) 0 nil])
([nil nil ((236 . 237)) nil (26006 40781 568384 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 255 276 nil nil nil t #s(yas--exit 277 nil))) #s(yas--exit 277 nil) 5 nil #s(yas--field 1 255 276 nil nil nil t #s(yas--exit 277 nil)) nil nil)) (236 . 264) (#("enumerate_adapters(${1:backends})$0" 0 35 (fontified nil)) . 236) (236 . 271) (#("e" 0 1 (fontified nil)) . 236) (236 . 237) (#("enumerate_adapters(…)" 0 21 (fontified nil)) . -236) (236 . 257) (#("e" 0 1 (fontified t)) . -236) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) 237) nil (26006 40781 568382 0) 0 nil])
([nil nil ((#("backends" 0 8 (fontified nil)) . 256) (undo-tree-id1211 . -8) (255 . 256)) nil (26006 40781 568373 0) 0 nil])
([nil nil ((255 . 259) (#("w" 0 1 (fontified nil)) . 255) (undo-tree-id1200 . -1) (255 . 256) (#("wgpu" 0 4 (fontified nil)) . -255) (undo-tree-id1201 . -4) (255 . 259) (#("w" 0 1 (fontified t)) . -255) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) 256) nil (26006 40781 568370 0) 0 nil])
([nil nil ((259 . 261)) nil (26006 40781 568357 0) 0 nil])
([nil nil ((261 . 263)) nil (26006 40781 568356 0) 0 nil])
([nil nil ((261 . 269) (#("Ba" 0 2 (fontified nil)) . 261) (undo-tree-id1186 . -2) (261 . 263) (#("Backends" 0 8 (fontified nil)) . -261) (undo-tree-id1187 . -8) (261 . 269) (#("Ba" 0 2 (face font-lock-type-face fontified t)) . -261) (undo-tree-id1188 . -2) (undo-tree-id1189 . -2) (undo-tree-id1190 . -2) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -2) (undo-tree-id1195 . -2) (undo-tree-id1196 . -2) (undo-tree-id1197 . -2) (undo-tree-id1198 . -2) (undo-tree-id1199 . -2) 263) nil (26006 40781 568354 0) 0 nil])
([nil nil ((269 . 272)) nil (26006 40781 568339 0) 0 nil])
([nil nil ((apply yas--snippet-revive 271 276 #s(yas--snippet nil nil #s(yas--exit 276 nil) 6 nil nil #s(yas--field 1 255 276 nil nil nil t #s(yas--exit 277 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 276 nil) 6 nil nil #s(yas--field 1 255 276 nil nil nil t #s(yas--exit 277 nil)) nil)) (271 . 276) (#("all()$0" 0 7 (fontified nil)) . 271) (undo-tree-id1177 . -7) (271 . 278) (#("a" 0 1 (fontified nil)) . 271) (undo-tree-id1178 . -1) (271 . 272) (#("all()" 0 5 (fontified nil)) . -271) (undo-tree-id1179 . -5) (271 . 276) (#("a" 0 1 (fontified t)) . -271) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) 272) nil (26006 40781 568337 0) 0 nil])
([nil nil ((apply yas--snippet-revive 236 277 #s(yas--snippet nil (#s(yas--field 1 255 276 nil nil nil t #s(yas--exit 277 nil))) #s(yas--exit 277 nil) 5 nil #s(yas--field 1 255 276 nil nil nil t #s(yas--exit 277 nil)) nil nil))) nil (26006 40781 568325 0) 0 nil])
([nil nil ((277 . 280)) nil (26006 40781 568324 0) 0 nil])
([nil nil ((281 . 285) (#("        " 0 8 (fontified nil)) . 280) (280 . 288) (#("    " 0 4 (fontified nil)) . 280) (undo-tree-id1173 . -4) (undo-tree-id1174 . -4) (undo-tree-id1175 . -4) (undo-tree-id1176 . -4) (279 . 285)) nil (26006 40781 568322 0) 0 nil])
([nil nil ((280 . 288)) nil (26006 40781 568316 0) 0 nil])
([nil nil ((288 . 291)) nil (26006 40781 568316 0) 0 nil])
([nil nil ((1 . 21) (apply yas--snippet-revive 288 295 #s(yas--snippet nil nil #s(yas--exit 294 nil) 7 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 294 nil) 7 nil nil nil nil)) (288 . 295) (#("info!($0)" 0 9 (fontified nil)) . 288) (288 . 297) (#("inf" 0 3 (fontified nil)) . 288) (288 . 291) (#("info!(…) (use tracing::info)" 0 28 (fontified nil)) . -288) (288 . 316) (#("inf" 0 3 (fontified t)) . -288) (undo-tree-id1164 . -3) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -2) (undo-tree-id1168 . -2) (undo-tree-id1169 . -3) (undo-tree-id1170 . -3) (undo-tree-id1171 . -3) (undo-tree-id1172 . -3) 291) nil (26006 40781 568313 0) 0 nil])
([nil nil ((314 . 316)) nil (26006 40781 568301 0) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -314) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -315) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) 316) nil (26006 40781 568299 0) 0 nil])
([nil nil ((314 . 316)) nil (26006 40781 568275 0) 0 nil])
([nil nil ((315 . 317)) nil (26006 40781 568274 0) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -314) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (#("{" 0 1 (face font-lock-string-face fontified t)) . -315) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (#("}" 0 1 (face font-lock-string-face fontified t)) . -316) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -317) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) 318) nil (26006 40781 568269 0) 0 nil])
([nil nil ((314 . 316)) nil (26006 40781 568178 0) 0 nil])
([nil nil ((316 . 321)) nil (26006 40781 568177 0) 0 nil])
([nil nil ((322 . 323)) nil (26006 40781 568173 0) 0 nil])
([nil nil ((321 . 325) (t 26006 40781 576703 133000)) nil (26006 40794 604666 0) 0 nil])
([nil nil ((#("adapter, \"\"" 0 9 (fontified t) 9 11 (face font-lock-string-face fontified t)) . -314) (undo-tree-id1281 . -11) (undo-tree-id1282 . -11) (undo-tree-id1283 . -11) (undo-tree-id1284 . -11) (undo-tree-id1285 . -11) (undo-tree-id1286 . -11) (undo-tree-id1287 . -11) (undo-tree-id1288 . -11) (undo-tree-id1289 . -11) (undo-tree-id1290 . -11) (undo-tree-id1291 . -11) (undo-tree-id1292 . -11) (undo-tree-id1293 . -11) (undo-tree-id1294 . -10) (undo-tree-id1295 . -11) (undo-tree-id1296 . -10) (undo-tree-id1297 . -10) (undo-tree-id1298 . -10) (undo-tree-id1299 . -10) (undo-tree-id1300 . -10) (undo-tree-id1301 . -10) (undo-tree-id1302 . -10) (undo-tree-id1303 . -10) (undo-tree-id1304 . -11) 325 (t 26006 40794 612903 342000)) nil (26006 40843 929078 0) 0 nil])
([nil nil ((314 . 316)) nil (26006 40843 929054 0) 0 nil])
([nil nil ((315 . 325)) nil (26006 40843 929053 0) 0 nil])
([nil nil ((322 . 323)) nil (26006 40843 929052 0) 0 nil])
([nil nil ((325 . 327)) nil (26006 40843 929051 0) 0 nil])
([nil nil ((329 . 330)) nil (26006 40843 929050 0) 0 nil])
([nil nil ((330 . 332)) nil (26006 40843 929049 0) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -330) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (#(" " 0 1 (fontified t)) . -331) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) 332) nil (26006 40843 929046 0) 0 nil])
([nil nil ((330 . 338)) nil (26006 40843 929023 0) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-preprocessor-face fontified t)) . -308) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -309) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (#("f" 0 1 (face font-lock-preprocessor-face fontified t)) . -310) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (#("o" 0 1 (face font-lock-preprocessor-face fontified t)) . -311) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) 312 (t 26006 40843 937532 114000)) nil (26006 40908 52865 0) 0 nil])
([nil nil ((308 . 313)) nil (26006 40908 52781 0) 0 nil])
([nil nil ((#("D" 0 1 (face font-lock-preprocessor-face fontified t)) . -308) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (#("e" 0 1 (face font-lock-preprocessor-face fontified t)) . -309) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (#("b" 0 1 (face font-lock-preprocessor-face fontified t)) . -310) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (#("u" 0 1 (face font-lock-preprocessor-face fontified t)) . -311) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (#("g" 0 1 (face font-lock-preprocessor-face fontified t)) . -312) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) 313) nil (26006 40908 52775 0) 0 nil])
([nil nil ((308 . 313)) nil (26006 40908 52639 0) 0 nil])
([nil nil ((19 . 20) (14 . 14) (14 . 15) (t 26006 40908 61501 69000)) nil (26006 40916 626797 0) 0 nil])
([nil nil ((19 . 23)) nil (26006 40916 626795 0) 0 nil])
([nil nil ((21 . 26) (#("de" 0 2 (fontified nil)) . 21) (21 . 23) (#("debug" 0 5 (fontified nil)) . -21) (21 . 26) (#("de" 0 2 (fontified t)) . -21) (undo-tree-id1486 . -2) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -2) (undo-tree-id1490 . -2) (undo-tree-id1491 . -2) 23) nil (26006 40916 626788 0) 0 nil])
([nil nil ((70 . 72) (t 26006 40916 635445 400000)) nil (26006 41061 56246 0) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -72) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (#(":" 0 1 (fontified t)) . -73) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) 74 (t 26006 41061 66614 500000)) nil (26006 41079 807895 0) 0 nil])
([nil nil ((72 . 73)) nil (26006 41079 807887 0) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -72) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) 73) nil (26006 41079 807886 0) 0 nil])
([nil nil ((72 . 73)) nil (26006 41079 807882 0) 0 nil])
([nil nil ((73 . 80) (#("compact" 0 7 (fontified nil)) . -73) (73 . 80)) nil (26006 41079 807880 0) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -73) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (#("o" 0 1 (fontified t)) . -74) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (#("m" 0 1 (fontified t)) . -75) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (#("p" 0 1 (fontified t)) . -76) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (#("a" 0 1 (fontified t)) . -77) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (#("c" 0 1 (fontified t)) . -78) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (#("t" 0 1 (fontified t)) . -79) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) 80) nil (26006 41079 807872 0) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -70) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -71) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (#("." 0 1 (fontified t)) . -72) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) 73 (t 26006 41079 816826 940000)) nil (26006 41095 178005 0) 0 nil])
([nil nil ((70 . 72)) nil (26006 41095 177842 0) 0 nil])
([nil nil ((#("debug" 0 5 (face font-lock-preprocessor-face fontified t)) . -317) (undo-tree-id1839 . -5) (undo-tree-id1840 . -5) (undo-tree-id1841 . -5) (undo-tree-id1842 . -5) (undo-tree-id1843 . -5) (undo-tree-id1844 . -5) (undo-tree-id1845 . -5) (undo-tree-id1846 . -5) 322 (t 26006 41095 186815 493000)) nil (26006 41120 132366 0) 0 nil])
([nil nil ((317 . 321)) nil (26006 41120 132358 0) 0 nil])
([nil nil ((1 . 2)) nil (26006 41120 132357 0) 0 nil])
([nil nil ((1 . 3)) nil (26006 41120 132356 0) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -2) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) 3) nil (26006 41120 132355 0) 0 nil])
([nil nil ((2 . 4)) nil (26006 41120 132350 0) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -2) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -3) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) 4) nil (26006 41120 132348 0) 0 nil])
([nil nil ((2 . 4)) nil (26006 41120 132337 0) 0 nil])
([nil nil ((3 . 4)) nil (26006 41120 132336 0) 0 nil])
([nil nil ((#("lint" 0 4 (face font-lock-preprocessor-face fontified t)) . 9) (undo-tree-id1818 . -4) (apply yas--snippet-revive 3 14 #s(yas--snippet nil (#s(yas--field 0 9 13 nil nil nil nil nil)) nil 8 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 0 9 13 nil nil nil nil nil)) nil 8 nil nil nil nil)) (3 . 14) (#("allow(${0:lint})" 0 16 (fontified nil)) . 3) (3 . 19) (#("a" 0 1 (fontified nil)) . 3) (3 . 4) (#("allow(…)" 0 8 (fontified nil)) . -3) (3 . 11) (#("a" 0 1 (face font-lock-preprocessor-face fontified t)) . -3) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) 4) nil (26006 41120 132334 0) 0 nil])
([nil nil ((9 . 12)) nil (26006 41120 132324 0) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-preprocessor-face fontified t)) . -11) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) 12) nil (26006 41120 132322 0) 0 nil])
([nil nil ((11 . 15)) nil (26006 41120 132316 0) 0 nil])
([nil nil ((15 . 18)) nil (26006 41120 132315 0) 0 nil])
([nil nil ((#("n" 0 1 (face font-lock-preprocessor-face fontified t)) . -17) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) 18) nil (26006 41120 132313 0) 0 nil])
([nil nil ((9 . 23) (#("unused_i" 0 8 (fontified nil)) . 9) (9 . 17) (#("unused_imports" 0 14 (fontified nil)) . -9) (9 . 23) (#("unused_i" 0 8 (face font-lock-preprocessor-face fontified t)) . -9) (undo-tree-id1755 . -6) (undo-tree-id1756 . -8) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (undo-tree-id1760 . -2) (undo-tree-id1761 . -2) (undo-tree-id1762 . -2) (undo-tree-id1763 . -2) (undo-tree-id1764 . -2) (undo-tree-id1765 . -2) (undo-tree-id1766 . -2) (undo-tree-id1767 . -2) (undo-tree-id1768 . -2) (undo-tree-id1769 . -2) (undo-tree-id1770 . -2) (undo-tree-id1771 . -2) (undo-tree-id1772 . -3) (undo-tree-id1773 . -3) (undo-tree-id1774 . -3) (undo-tree-id1775 . -3) (undo-tree-id1776 . -4) (undo-tree-id1777 . -4) (undo-tree-id1778 . -4) (undo-tree-id1779 . -4) (undo-tree-id1780 . -4) (undo-tree-id1781 . -5) (undo-tree-id1782 . -5) (undo-tree-id1783 . -5) (undo-tree-id1784 . -6) (undo-tree-id1785 . -6) (undo-tree-id1786 . -6) (undo-tree-id1787 . -6) (undo-tree-id1788 . -6) (undo-tree-id1789 . -7) (undo-tree-id1790 . -7) (undo-tree-id1791 . -7) (undo-tree-id1792 . -7) (undo-tree-id1793 . -7) (undo-tree-id1794 . -8) (undo-tree-id1795 . -8) (undo-tree-id1796 . -8) (undo-tree-id1797 . -8) (undo-tree-id1798 . -8) (undo-tree-id1799 . -8) (undo-tree-id1800 . -8) (undo-tree-id1801 . -8) (undo-tree-id1802 . -8) (undo-tree-id1803 . -8) (undo-tree-id1804 . -8) (undo-tree-id1805 . -8) (undo-tree-id1806 . -8) 17) nil (26006 41120 132299 0) 0 nil])
([nil nil ((372 . 376) (t 26006 41120 141767 800000)) nil (26006 41187 60415 0) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -372) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (#("g" 0 1 (fontified t)) . -373) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (#("e" 0 1 (fontified t)) . -374) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (#("t" 0 1 (fontified t)) . -375) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) 376) nil (26006 41187 60410 0) 0 nil])
([nil nil ((372 . 376)) nil (26006 41187 60346 0) 0 nil])
([nil nil ((376 . 378) (t 26006 41187 69738 793000)) nil (26006 41202 251805 0) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -372) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (#("g" 0 1 (fontified t)) . -373) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) (undo-tree-id1976 . -1) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (#("e" 0 1 (fontified t)) . -374) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (undo-tree-id1983 . -1) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) (undo-tree-id1997 . -1) (undo-tree-id1998 . -1) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (undo-tree-id2005 . -1) (#("t" 0 1 (fontified t)) . -375) (undo-tree-id2006 . -1) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) (undo-tree-id2016 . -1) (undo-tree-id2017 . -1) (undo-tree-id2018 . -1) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (#("i" 0 1 (fontified t)) . -376) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) (#("n" 0 1 (fontified t)) . -377) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) 378) nil (26006 41202 251798 0) 0 nil])
([nil nil ((372 . 380)) nil (26006 41202 251685 0) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -377) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (#("i" 0 1 (fontified t)) . -378) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (#("n" 0 1 (fontified t)) . -379) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) 380) nil (26006 41202 251682 0) 0 nil])
([nil nil ((377 . 383)) nil (26006 41202 251642 0) 0 nil])
([nil nil ((#("    let instances = wgpu::Instance::new(
        wgpu::InstanceDescriptor {
            backends: wgpu::Backends::all(), ..Default::default()
        });

    for adapter in instances.enumerate_adapters(wgpu::Backends::all()) {
        info!(\"adapter: {:?}\", adapter.get_info());
    }" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 17 (face font-lock-variable-name-face fontified t) 17 20 (fontified t) 20 24 (face font-lock-constant-face fontified t) 24 26 (fontified t) 26 34 (face font-lock-type-face fontified t) 34 36 (fontified t) 36 39 (fontified t) 39 40 (face (rainbow-delimiters-depth-2-face) fontified t) 40 41 (fontified t) 41 49 (fontified t) 49 53 (face font-lock-constant-face fontified t) 53 55 (fontified t) 55 73 (face font-lock-type-face fontified t) 73 74 (fontified t) 74 75 (face (rainbow-delimiters-depth-3-face) fontified t) 75 76 (fontified t) 76 88 (fontified t) 88 96 (face font-lock-variable-name-face fontified t) 96 98 (fontified t) 98 102 (face font-lock-constant-face fontified t) 102 104 (fontified t) 104 112 (face font-lock-type-face fontified t) 112 114 (fontified t) 114 117 (fontified t) 117 118 (face (rainbow-delimiters-depth-4-face) fontified t) 118 119 (face (rainbow-delimiters-depth-4-face) fontified t) 119 123 (fontified t) 123 130 (face font-lock-type-face fontified t) 130 132 (fontified t) 132 139 (fontified t) 139 140 (face (rainbow-delimiters-depth-4-face) fontified t) 140 141 (face (rainbow-delimiters-depth-4-face) fontified t) 141 150 (fontified t) 150 151 (face (rainbow-delimiters-depth-3-face) fontified t) 151 152 (face (rainbow-delimiters-depth-2-face) fontified t) 152 153 (fontified t) 153 154 (fontified t) 154 155 (fontified t) 155 159 (fontified t) 159 162 (face font-lock-keyword-face fontified t) 162 163 (fontified t) 163 170 (face font-lock-variable-name-face fontified t) 170 171 (fontified t) 171 173 (face font-lock-keyword-face fontified t) 173 174 (fontified t) 174 184 (fontified t) 184 202 (fontified t) 202 203 (face (rainbow-delimiters-depth-2-face) fontified t) 203 207 (face font-lock-constant-face fontified t) 207 209 (fontified t) 209 217 (face font-lock-type-face fontified t) 217 219 (fontified t) 219 222 (fontified t) 222 223 (face (rainbow-delimiters-depth-3-face) fontified t) 223 224 (face (rainbow-delimiters-depth-3-face) fontified t) 224 225 (face (rainbow-delimiters-depth-2-face) fontified t) 225 226 (fontified t) 226 227 (face (rainbow-delimiters-depth-2-face) fontified t) 227 228 (fontified t) 228 236 (fontified t) 236 240 (face font-lock-preprocessor-face fontified t) 240 241 (face font-lock-preprocessor-face fontified t) 241 242 (face (rainbow-delimiters-depth-3-face) fontified t) 242 257 (face font-lock-string-face fontified t) 257 275 (fontified t) 275 276 (face (rainbow-delimiters-depth-4-face) fontified t) 276 277 (face (rainbow-delimiters-depth-4-face) fontified t) 277 278 (face (rainbow-delimiters-depth-3-face) fontified t) 278 279 (fontified t) 279 280 (fontified t) 280 284 (fontified t) 284 285 (face (rainbow-delimiters-depth-2-face) fontified t)) . 106) (undo-tree-id2160 . -285) (undo-tree-id2161 . -18) (undo-tree-id2162 . -40) (undo-tree-id2163 . -36) (undo-tree-id2164 . -40) (undo-tree-id2165 . -40) (undo-tree-id2166 . -89) (undo-tree-id2167 . -40) (undo-tree-id2168 . -75) (undo-tree-id2169 . -141) (undo-tree-id2170 . -39) (undo-tree-id2171 . -153) (undo-tree-id2172 . -277) (undo-tree-id2173 . -236) (undo-tree-id2174 . -266) (undo-tree-id2175 . -266) (undo-tree-id2176 . -266) (undo-tree-id2177 . -266) (undo-tree-id2178 . -266) (undo-tree-id2179 . -266) (undo-tree-id2180 . -266) (undo-tree-id2181 . -266) (undo-tree-id2182 . -266) (undo-tree-id2183 . -266) (undo-tree-id2184 . -266) (undo-tree-id2185 . -266) (undo-tree-id2186 . -266) (undo-tree-id2187 . -266) (undo-tree-id2188 . -266) (undo-tree-id2189 . -266) (undo-tree-id2190 . -266) (undo-tree-id2191 . -266) (undo-tree-id2192 . -266) (undo-tree-id2193 . -266) (undo-tree-id2194 . -266) (undo-tree-id2195 . -266) (undo-tree-id2196 . -266) (undo-tree-id2197 . -266) (undo-tree-id2198 . -266) (undo-tree-id2199 . -266) (undo-tree-id2200 . -266) (undo-tree-id2201 . -266) (undo-tree-id2202 . -271) (undo-tree-id2203 . -271) (undo-tree-id2204 . -271) (undo-tree-id2205 . -271) (undo-tree-id2206 . -271) (undo-tree-id2207 . -271) (undo-tree-id2208 . -271) (undo-tree-id2209 . -271) (undo-tree-id2210 . -271) (undo-tree-id2211 . -271) (undo-tree-id2212 . -271) (undo-tree-id2213 . -271) (undo-tree-id2214 . -277) (undo-tree-id2215 . -277) (undo-tree-id2216 . -277) (undo-tree-id2217 . -277) (undo-tree-id2218 . -277) (undo-tree-id2219 . -277) (undo-tree-id2220 . -277) (undo-tree-id2221 . -277) (undo-tree-id2222 . -277) (undo-tree-id2223 . -277) (undo-tree-id2224 . -277) (undo-tree-id2225 . -277) (undo-tree-id2226 . -277) (undo-tree-id2227 . -277) (undo-tree-id2228 . -277) (undo-tree-id2229 . -277) (undo-tree-id2230 . -277) (undo-tree-id2231 . -277) (undo-tree-id2232 . -277) (undo-tree-id2233 . -277) (undo-tree-id2234 . -277) (undo-tree-id2235 . -277) (undo-tree-id2236 . -277) (undo-tree-id2237 . -277) (undo-tree-id2238 . -277) (undo-tree-id2239 . -277) (undo-tree-id2240 . -277) (undo-tree-id2241 . -277) (undo-tree-id2242 . -277) (undo-tree-id2243 . -277) (undo-tree-id2244 . -277) (undo-tree-id2245 . -277) (undo-tree-id2246 . -277) (undo-tree-id2247 . -277) (undo-tree-id2248 . -277) (undo-tree-id2249 . -277) (undo-tree-id2250 . -277) (undo-tree-id2251 . -277) (undo-tree-id2252 . -277) (undo-tree-id2253 . -277) (undo-tree-id2254 . -277) (undo-tree-id2255 . -277) (undo-tree-id2256 . -277) (undo-tree-id2257 . -277) (undo-tree-id2258 . -277) (undo-tree-id2259 . -277) (undo-tree-id2260 . -279) (undo-tree-id2261 . -279) (undo-tree-id2262 . -279) (undo-tree-id2263 . -279) (undo-tree-id2264 . -279) (undo-tree-id2265 . -279) (undo-tree-id2266 . -279) (undo-tree-id2267 . -279) (undo-tree-id2268 . -279) (undo-tree-id2269 . -279) (undo-tree-id2270 . -279) (undo-tree-id2271 . -279) (undo-tree-id2272 . -285) (undo-tree-id2273 . -285) (undo-tree-id2274 . -285) (undo-tree-id2275 . -164) (undo-tree-id2276 . -154) (undo-tree-id2277 . -146) (undo-tree-id2278 . -79) (undo-tree-id2279 . -78) (undo-tree-id2280 . -77) (undo-tree-id2281 . -41) (undo-tree-id2282 . -279) (undo-tree-id2283 . -285) (t 26006 41202 261401 900000)) nil (26006 41506 873272 0) 0 nil])
([nil nil ((106 . 110)) nil (26006 41506 873154 0) 0 nil])
([nil nil ((110 . 113)) nil (26006 41506 873153 0) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -112) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) 113) nil (26006 41506 873152 0) 0 nil])
([nil nil ((112 . 113)) nil (26006 41506 873145 0) 0 nil])
([nil nil ((113 . 115)) nil (26006 41506 873144 0) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -110) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) (undo-tree-id2071 . -1) (undo-tree-id2072 . -1) (undo-tree-id2073 . -1) (undo-tree-id2074 . -1) (undo-tree-id2075 . -1) (undo-tree-id2076 . -1) (undo-tree-id2077 . -1) (undo-tree-id2078 . -1) (undo-tree-id2079 . -1) (undo-tree-id2080 . -1) (undo-tree-id2081 . -1) (undo-tree-id2082 . -1) (undo-tree-id2083 . -1) (undo-tree-id2084 . -1) (undo-tree-id2085 . -1) (#("u" 0 1 (fontified t)) . -111) (undo-tree-id2086 . -1) (undo-tree-id2087 . -1) (undo-tree-id2088 . -1) (undo-tree-id2089 . -1) (undo-tree-id2090 . -1) (undo-tree-id2091 . -1) (undo-tree-id2092 . -1) (undo-tree-id2093 . -1) (undo-tree-id2094 . -1) (undo-tree-id2095 . -1) (undo-tree-id2096 . -1) (undo-tree-id2097 . -1) (undo-tree-id2098 . -1) (undo-tree-id2099 . -1) (undo-tree-id2100 . -1) (undo-tree-id2101 . -1) (undo-tree-id2102 . -1) (undo-tree-id2103 . -1) (undo-tree-id2104 . -1) (undo-tree-id2105 . -1) (undo-tree-id2106 . -1) (undo-tree-id2107 . -1) (undo-tree-id2108 . -1) (undo-tree-id2109 . -1) (undo-tree-id2110 . -1) (undo-tree-id2111 . -1) (undo-tree-id2112 . -1) (undo-tree-id2113 . -1) (undo-tree-id2114 . -1) (undo-tree-id2115 . -1) (undo-tree-id2116 . -1) (#("n" 0 1 (fontified t)) . -112) (undo-tree-id2117 . -1) (undo-tree-id2118 . -1) (undo-tree-id2119 . -1) (undo-tree-id2120 . -1) (undo-tree-id2121 . -1) (undo-tree-id2122 . -1) (undo-tree-id2123 . -1) (undo-tree-id2124 . -1) (undo-tree-id2125 . -1) (undo-tree-id2126 . -1) (undo-tree-id2127 . -1) (undo-tree-id2128 . -1) (undo-tree-id2129 . -1) (undo-tree-id2130 . -1) (undo-tree-id2131 . -1) (undo-tree-id2132 . -1) (undo-tree-id2133 . -1) (undo-tree-id2134 . -1) (undo-tree-id2135 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -113) (undo-tree-id2136 . -1) (undo-tree-id2137 . -1) (undo-tree-id2138 . -1) (undo-tree-id2139 . -1) (undo-tree-id2140 . -1) (undo-tree-id2141 . -1) (undo-tree-id2142 . -1) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (undo-tree-id2145 . -1) (undo-tree-id2146 . -1) (undo-tree-id2147 . -1) (undo-tree-id2148 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -114) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) 115) nil (26006 41506 873137 0) 0 nil])
([nil nil ((110 . 112)) nil (26006 41506 873035 0) 0 nil])
([nil nil ((1 . 19) (apply yas--snippet-revive 110 115 #s(yas--snippet nil nil #s(yas--exit 115 nil) 10 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 115 nil) 10 nil nil nil nil)) (110 . 115) (#("run()$0" 0 7 (fontified nil)) . 110) (110 . 117) (#("ru" 0 2 (fontified nil)) . 110) (110 . 112) (#("run() (use rs_wgpu::run)" 0 24 (fontified nil)) . -110) (110 . 134) (#("ru" 0 2 (fontified t)) . -110) (undo-tree-id2042 . -2) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -2) (undo-tree-id2046 . -2) (undo-tree-id2047 . -2) (undo-tree-id2048 . -2) 112) nil (26006 41506 873032 0) 0 nil])
([nil nil ((133 . 134)) nil (26006 41506 873011 0) 0 nil])
([nil nil ((#("use rs_wgpu::run;" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 11 (face font-lock-constant-face fontified t) 11 17 (fontified t)) . 1) (undo-tree-id2288 . -17) (undo-tree-id2289 . -17) (undo-tree-id2290 . -17) (undo-tree-id2291 . -17) (undo-tree-id2292 . -17) (undo-tree-id2293 . -17) (undo-tree-id2294 . -17) (undo-tree-id2295 . -17) (undo-tree-id2296 . -17) (undo-tree-id2297 . -17) (undo-tree-id2298 . -17) (undo-tree-id2299 . -17) (undo-tree-id2300 . -17) (undo-tree-id2301 . -17) (t 26006 41506 884464 25000)) nil (26006 41517 592736 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 71 . 72) (nil fontified nil 66 . 72) (nil fontified nil 59 . 66) (nil fontified nil 58 . 59) (nil fontified nil 55 . 58) (55 . 72)) nil (26006 41517 592720 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1) (undo-tree-id2284 . -1) (undo-tree-id2285 . -1) (undo-tree-id2286 . -1) (undo-tree-id2287 . -1) 2) nil (26006 41517 592715 0) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -67) (undo-tree-id2308 . -1) (undo-tree-id2309 . -1) (undo-tree-id2310 . -1) (undo-tree-id2311 . -1) (undo-tree-id2312 . -1) (undo-tree-id2313 . -1) (undo-tree-id2314 . -1) (undo-tree-id2315 . -1) (undo-tree-id2316 . -1) (undo-tree-id2317 . -1) (undo-tree-id2318 . -1) (undo-tree-id2319 . -1) (undo-tree-id2320 . -1) (undo-tree-id2321 . -1) (undo-tree-id2322 . -1) (undo-tree-id2323 . -1) (undo-tree-id2324 . -1) (undo-tree-id2325 . -1) (undo-tree-id2326 . -1) (undo-tree-id2327 . -1) (undo-tree-id2328 . -1) (undo-tree-id2329 . -1) (undo-tree-id2330 . -1) (undo-tree-id2331 . -1) (undo-tree-id2332 . -1) (#("u" 0 1 (fontified t)) . -68) (undo-tree-id2333 . -1) (undo-tree-id2334 . -1) (undo-tree-id2335 . -1) (undo-tree-id2336 . -1) (undo-tree-id2337 . -1) (undo-tree-id2338 . -1) (undo-tree-id2339 . -1) (undo-tree-id2340 . -1) (undo-tree-id2341 . -1) (undo-tree-id2342 . -1) (undo-tree-id2343 . -1) (undo-tree-id2344 . -1) (#("n" 0 1 (fontified t)) . -69) (undo-tree-id2345 . -1) (undo-tree-id2346 . -1) (undo-tree-id2347 . -1) (undo-tree-id2348 . -1) (undo-tree-id2349 . -1) (undo-tree-id2350 . -1) (undo-tree-id2351 . -1) (undo-tree-id2352 . -1) (undo-tree-id2353 . -1) (undo-tree-id2354 . -1) (#(";" 0 1 (fontified t rear-nonsticky t)) . -70) (undo-tree-id2355 . -1) (undo-tree-id2356 . -1) (undo-tree-id2357 . -1) (undo-tree-id2358 . -1) (undo-tree-id2359 . -1) (undo-tree-id2360 . -1) (undo-tree-id2361 . -1) (undo-tree-id2362 . -1) 71 (t 26006 41517 602904 19000)) nil (26006 41600 494352 0) 0 nil])
([nil nil ((67 . 69)) nil (26006 41600 494294 0) 0 nil])
([nil nil ((#("'" 0 1 (fontified t)) . -68) (undo-tree-id2302 . -1) (undo-tree-id2303 . -1) (undo-tree-id2304 . -1) (undo-tree-id2305 . -1) (undo-tree-id2306 . -1) (undo-tree-id2307 . -1) 69) nil (26006 41600 494292 0) 0 nil])
([nil nil ((68 . 69)) nil (26006 41600 494270 0) 0 nil])
([nil nil ((#("    run();" 0 4 (fontified t) 4 7 (fontified t) 7 8 (face (rainbow-delimiters-depth-2-face) fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t) 9 10 (fontified t)) . 121) (undo-tree-id2395 . -10) (undo-tree-id2396 . -10) (undo-tree-id2397 . -10) (undo-tree-id2398 . -10) (undo-tree-id2399 . -10) (undo-tree-id2400 . -10) (undo-tree-id2401 . -10) (undo-tree-id2402 . -10) (undo-tree-id2403 . -10) (undo-tree-id2404 . -10) (t 26006 41600 505456 341000)) nil (26006 41640 413409 0) 0 nil])
([nil nil ((121 . 125)) nil (26006 41640 413399 0) 0 nil])
([nil nil ((125 . 126)) nil (26006 41640 413398 0) 0 nil])
([nil nil ((125 . 132) (#("r" 0 1 (fontified nil)) . 125) (125 . 126) (#("rs_wgpu" 0 7 (fontified nil)) . -125) (125 . 132) (#("r" 0 1 (fontified t)) . -125) (undo-tree-id2388 . -1) (undo-tree-id2389 . -1) (undo-tree-id2390 . -1) (undo-tree-id2391 . -1) (undo-tree-id2392 . -1) (undo-tree-id2393 . -1) (undo-tree-id2394 . -1) 126) nil (26006 41640 413396 0) 0 nil])
([nil nil ((#("    rs_wgpu" 0 4 (fontified t) 4 11 (fontified t)) . 121) (undo-tree-id2373 . -4) (undo-tree-id2374 . -4) (undo-tree-id2375 . -4) (undo-tree-id2376 . -4) (undo-tree-id2377 . -4) (undo-tree-id2378 . -4) (undo-tree-id2379 . -4) (undo-tree-id2380 . -4) (undo-tree-id2381 . -11) (undo-tree-id2382 . -11) (undo-tree-id2383 . -11) (undo-tree-id2384 . -11) (undo-tree-id2385 . -11) (undo-tree-id2386 . -11) (undo-tree-id2387 . -11)) nil (26006 41640 413386 0) 0 nil])
([nil nil ((121 . 125)) nil (26006 41640 413371 0) 0 nil])
([nil nil ((125 . 128)) nil (26006 41640 413370 0) 0 nil])
([nil nil ((apply yas--snippet-revive 125 130 #s(yas--snippet nil nil #s(yas--exit 130 nil) 11 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 130 nil) 11 nil nil nil nil)) (125 . 130) (#("run()$0" 0 7 (fontified nil)) . 125) (125 . 132) (#("run" 0 3 (fontified nil)) . 125) (125 . 128) (#("run()" 0 5 (fontified nil)) . -125) (125 . 130) (#("run" 0 3 (fontified t)) . -125) (undo-tree-id2363 . -3) (undo-tree-id2364 . -1) (undo-tree-id2365 . -1) (undo-tree-id2366 . -2) (undo-tree-id2367 . -2) (undo-tree-id2368 . -2) (undo-tree-id2369 . -3) (undo-tree-id2370 . -3) (undo-tree-id2371 . -3) (undo-tree-id2372 . -3) 128) nil (26006 41640 413367 0) 0 nil])
([nil nil ((130 . 131)) nil (26006 41640 413345 0) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . -67) (undo-tree-id2410 . -1) (undo-tree-id2411 . -1) 68 (t 26006 41640 423443 232000)) nil (26006 41652 29419 0) 0 nil])
([nil nil ((67 . 68)) nil (26006 41652 29415 0) 0 nil])
([nil nil ((67 . 70) (#("r" 0 1 (fontified nil)) . 67) (67 . 68) (#("run" 0 3 (fontified nil)) . -67) (67 . 70) (#("r" 0 1 (fontified t)) . -67) (undo-tree-id2405 . -1) (undo-tree-id2406 . -1) (undo-tree-id2407 . -1) (undo-tree-id2408 . -1) (undo-tree-id2409 . -1) 68) nil (26006 41652 29411 0) 0 nil])
([nil nil ((#("use tracing::{info, debug};" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 11 (face font-lock-constant-face fontified t) 11 13 (fontified t) 13 14 (face (rainbow-delimiters-depth-1-face) fontified t) 14 20 (fontified t) 20 25 (fontified t) 25 26 (face (rainbow-delimiters-depth-1-face) fontified t) 26 27 (fontified t)) . 26) (undo-tree-id2413 . -22) (undo-tree-id2414 . -22) (undo-tree-id2415 . -22) (undo-tree-id2416 . -22) (undo-tree-id2417 . -22) (undo-tree-id2418 . -22) (undo-tree-id2419 . -27) (t 26006 41652 39845 180000)) nil (26006 41687 776963 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 26) (undo-tree-id2412 . -1)) nil (26006 41687 776951 0) 0 nil])
([nil nil ((#("#[allow(unused_imports)]" 0 1 (face font-lock-preprocessor-face fontified t) 1 2 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t) 2 7 (face font-lock-preprocessor-face fontified t) 7 8 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 8 22 (face font-lock-preprocessor-face fontified t) 22 23 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 23 24 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t)) . 1) (undo-tree-id18 . -11) (undo-tree-id19 . -11) (undo-tree-id20 . -11) (undo-tree-id21 . -11) (undo-tree-id22 . -11) (undo-tree-id23 . -11) (undo-tree-id24 . -24) (t 26006 41687 788261 553000)) nil (26006 45544 995465 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1)) nil (26006 45544 995453 0) 0 nil])
([nil nil ((74 . 75) (t 26006 45545 34536 950000)) nil (26006 46185 458493 0) 0 nil])
([nil nil ((74 . 82) (#("prun" 0 1 (fontified nil) 1 4 (fontified nil)) . 74) (undo-tree-id33 . -4) (undo-tree-id34 . -3) (undo-tree-id35 . -2) (undo-tree-id36 . 3) (74 . 75) (#("pollster" 0 8 (fontified nil)) . -74) (74 . 82) (#("p" 0 1 (fontified t)) . -74) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) 75) nil (26006 46185 458490 0) 0 nil])
([nil nil ((82 . 85)) nil (26006 46185 458476 0) 0 nil])
([nil nil ((84 . 92) (#("b" 0 1 (fontified nil)) . 84) (84 . 85) (#("block_on" 0 8 (fontified nil)) . -84) (84 . 92) (#("b" 0 1 (fontified t)) . -84) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) 85) nil (26006 46185 458474 0) 0 nil])
([nil nil ((93 . 94)) nil (26006 46185 458469 0) 0 nil])
([nil nil ((apply yas--snippet-revive 93 98 #s(yas--snippet nil nil #s(yas--exit 98 nil) 5 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 98 nil) 5 nil nil nil nil)) (93 . 98) (#("run()$0" 0 7 (fontified nil)) . 93) (93 . 100) (#("r" 0 1 (fontified nil)) . 93) (93 . 94) (#("run()" 0 5 (fontified nil)) . -93) (93 . 98) (#("r" 0 1 (fontified t)) . -93) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) 94) nil (26006 46185 458464 0) 0 nil])
([nil nil ((69 . 73) (t 26006 46185 469336 720000)) nil (26006 46570 27510 0) 0 nil])
([nil nil ((73 . 76)) nil (26006 46570 27509 0) 0 nil])
([nil nil ((apply yas--snippet-revive 73 81 #s(yas--snippet nil nil #s(yas--exit 80 nil) 6 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 80 nil) 6 nil nil nil nil)) (73 . 81) (#("print!($0)" 0 10 (fontified nil)) . 73) (73 . 83) (#("pri" 0 2 (fontified nil) 2 3 (fontified nil)) . 73) (undo-tree-id209 . -3) (undo-tree-id210 . -3) (undo-tree-id211 . -3) (undo-tree-id212 . -3) (undo-tree-id213 . -3) (undo-tree-id214 . -3) (undo-tree-id215 . 1) (73 . 75) (#("print!(…)" 0 9 (fontified nil)) . -73) (73 . 82) (#("pr" 0 2 (fontified t)) . -73) (undo-tree-id216 . -2) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -2) (undo-tree-id220 . -2) (undo-tree-id221 . -2) (undo-tree-id222 . -2) (undo-tree-id223 . -2) 75) nil (26006 46570 27507 0) 0 nil])
([nil nil ((80 . 82)) nil (26006 46570 27489 0) 0 nil])
([nil nil ((#("    print!(::)" 0 4 (fontified t) 4 10 (face rust-builtin-formatting-macro fontified t) 10 11 (face (rainbow-delimiters-depth-2-face) fontified t) 11 13 (fontified t) 13 14 (face (rainbow-delimiters-depth-2-face) fontified t)) . 69) (undo-tree-id180 . -4) (undo-tree-id181 . -4) (undo-tree-id182 . -4) (undo-tree-id183 . -4) (undo-tree-id184 . -4) (undo-tree-id185 . -4) (undo-tree-id186 . -4) (undo-tree-id187 . -4) (undo-tree-id188 . -4) (undo-tree-id189 . -4) (undo-tree-id190 . -4) (undo-tree-id191 . -4) (undo-tree-id192 . -4) (undo-tree-id193 . -4) (undo-tree-id194 . -4) (undo-tree-id195 . -4) (undo-tree-id196 . -11) (undo-tree-id197 . -11) (undo-tree-id198 . -11) (undo-tree-id199 . -11) (undo-tree-id200 . -11) (undo-tree-id201 . -12) (undo-tree-id202 . -12) (undo-tree-id203 . -13) (undo-tree-id204 . 1) (undo-tree-id205 . -13) (undo-tree-id206 . -13) (undo-tree-id207 . -13) (undo-tree-id208 . -14)) nil (26006 46570 27487 0) 0 nil])
([nil nil ((69 . 73)) nil (26006 46570 27452 0) 0 nil])
([nil nil ((73 . 77)) nil (26006 46570 27451 0) 0 nil])
([nil nil ((apply yas--snippet-revive 73 83 #s(yas--snippet nil nil #s(yas--exit 82 nil) 7 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 82 nil) 7 nil nil nil nil)) (73 . 83) (#("println!($0)" 0 12 (fontified nil)) . 73) (73 . 85) (#("prin" 0 4 (fontified nil)) . 73) (73 . 77) (#("println!(…)" 0 11 (fontified nil)) . -73) (73 . 84) (#("prin" 0 4 (fontified t)) . -73) (undo-tree-id168 . -4) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -2) (undo-tree-id172 . -2) (undo-tree-id173 . -2) (undo-tree-id174 . -3) (undo-tree-id175 . -3) (undo-tree-id176 . -4) (undo-tree-id177 . -4) (undo-tree-id178 . -4) (undo-tree-id179 . -4) 77) nil (26006 46570 27449 0) 0 nil])
([nil nil ((82 . 86)) nil (26006 46570 27435 0) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -84) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (#("e" 0 1 (fontified t)) . -85) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) 86) nil (26006 46570 27433 0) 0 nil])
([nil nil ((83 . 87)) nil (26006 46570 27422 0) 0 nil])
([nil nil ((88 . 89)) nil (26006 46570 27421 0) 0 nil])
([nil nil ((87 . 90)) nil (26006 46570 27420 0) 0 nil])
([nil nil ((89 . 91)) nil (26006 46570 27419 0) 0 nil])
([nil nil ((94 . 96)) nil (26006 46570 27418 0) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -95) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) 96) nil (26006 46570 27416 0) 0 nil])
([nil nil ((#("    println!(\"test {:?}\", )" 0 4 (fontified t) 4 12 (face rust-builtin-formatting-macro fontified t) 12 13 (face (rainbow-delimiters-depth-2-face) fontified t) 13 19 (face font-lock-string-face fontified t) 19 23 (face rust-string-interpolation fontified t) 23 24 (face font-lock-string-face fontified t) 24 26 (fontified t) 26 27 (face (rainbow-delimiters-depth-2-face) fontified t)) . 69) (undo-tree-id47 . -13) (undo-tree-id48 . -4) (undo-tree-id49 . -4) (undo-tree-id50 . -4) (undo-tree-id51 . -4) (undo-tree-id52 . -4) (undo-tree-id53 . -4) (undo-tree-id54 . -4) (undo-tree-id55 . -4) (undo-tree-id56 . -4) (undo-tree-id57 . -4) (undo-tree-id58 . -4) (undo-tree-id59 . -4) (undo-tree-id60 . -4) (undo-tree-id61 . -13) (undo-tree-id62 . -13) (undo-tree-id63 . -13) (undo-tree-id64 . -13) (undo-tree-id65 . -13) (undo-tree-id66 . -13) (undo-tree-id67 . -13) (undo-tree-id68 . -13) (undo-tree-id69 . -13) (undo-tree-id70 . -13) (undo-tree-id71 . -13) (undo-tree-id72 . -13) (undo-tree-id73 . -13) (undo-tree-id74 . -14) (undo-tree-id75 . -14) (undo-tree-id76 . -24) (undo-tree-id77 . -24) (undo-tree-id78 . -24) (undo-tree-id79 . -24) (undo-tree-id80 . -24) (undo-tree-id81 . -24) (undo-tree-id82 . -24) (undo-tree-id83 . -24) (undo-tree-id84 . -24) (undo-tree-id85 . -24) (undo-tree-id86 . -24) (undo-tree-id87 . -24) (undo-tree-id88 . -24) (undo-tree-id89 . -14) (undo-tree-id90 . -14) (undo-tree-id91 . -14) (undo-tree-id92 . -15) (undo-tree-id93 . -15) (undo-tree-id94 . -16) (undo-tree-id95 . -16) (undo-tree-id96 . -17) (undo-tree-id97 . -17) (undo-tree-id98 . -18) (undo-tree-id99 . -24) (undo-tree-id100 . -24) (undo-tree-id101 . -24) (undo-tree-id102 . -24) (undo-tree-id103 . -24) (undo-tree-id104 . -24) (undo-tree-id105 . -24) (undo-tree-id106 . -25) (undo-tree-id107 . -25) (undo-tree-id108 . -25) (undo-tree-id109 . -25) (undo-tree-id110 . -25) (undo-tree-id111 . -25) (undo-tree-id112 . -25) (undo-tree-id113 . -25) (undo-tree-id114 . -25) (undo-tree-id115 . -25) (undo-tree-id116 . -25) (undo-tree-id117 . -24) (undo-tree-id118 . -18) (undo-tree-id119 . -18) (undo-tree-id120 . -18) (undo-tree-id121 . -19) (undo-tree-id122 . -19) (undo-tree-id123 . -20) (undo-tree-id124 . -20) (undo-tree-id125 . -23) (undo-tree-id126 . -23) (undo-tree-id127 . -23) (undo-tree-id128 . -23) (undo-tree-id129 . -20) (undo-tree-id130 . -20) (undo-tree-id131 . -21) (undo-tree-id132 . -21) (undo-tree-id133 . -22) (undo-tree-id134 . -22) (undo-tree-id135 . -23) (undo-tree-id136 . -23) (undo-tree-id137 . -23) (undo-tree-id138 . -24) (undo-tree-id139 . -25) (undo-tree-id140 . -26) (undo-tree-id141 . -26) (undo-tree-id142 . -26) (undo-tree-id143 . -26) (undo-tree-id144 . 1) (undo-tree-id145 . -26) (undo-tree-id146 . -26) (undo-tree-id147 . -26) (undo-tree-id148 . -26) (undo-tree-id149 . -26) (undo-tree-id150 . -26) (undo-tree-id151 . -27)) nil (26006 46570 27405 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 69) (undo-tree-id45 . 1) (undo-tree-id46 . -1)) nil (26006 46570 27297 0) 0 nil])
([nil nil ((1 . 2) (t 26006 46570 39231 679000)) nil (26011 38121 32146 0) 0 nil])
([nil nil ((1 . 7)) nil (26011 38121 32145 0) 0 nil])
([nil current ((5 . 13) (#("te" 0 2 (fontified nil)) . 5) (5 . 7) (#("texture;" 0 8 (fontified nil)) . -5) (5 . 13) (#("te" 0 2 (face font-lock-constant-face fontified t)) . -5) (undo-tree-id0 . -2) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -2) (undo-tree-id4 . -2) 7) nil (26011 38121 32140 0) 0 nil])
nil
