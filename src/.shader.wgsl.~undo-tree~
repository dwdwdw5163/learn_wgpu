(undo-tree-save-format-version . 1)
"310993713124c8748610a9a57d5ce460b04d4f56"
[nil nil nil nil (26007 53346 404672 0) 0 nil]
([nil nil ((#("0)" 0 1 (fontified t) 1 2 (face (rainbow-delimiters-depth-2-face) fontified t)) . 594) (undo-tree-id131 . -2) (undo-tree-id132 . -2) (undo-tree-id133 . -2)) ((594 . 596)) (26007 53346 986842 0) 0 nil])
([nil nil ((#("1." 0 2 (fontified t)) . 592) (undo-tree-id134 . -2) (undo-tree-id135 . -2) (undo-tree-id136 . -2)) ((592 . 594)) (26007 53347 492238 0) 0 nil])
([nil nil ((#("1, " 0 3 (fontified t)) . 589) (undo-tree-id137 . -3) (undo-tree-id138 . -3) (undo-tree-id139 . -3)) ((589 . 592)) (26007 53347 568747 0) 0 nil])
([nil nil ((#("0." 0 2 (fontified t)) . 587) (undo-tree-id140 . -2) (undo-tree-id141 . -2) (undo-tree-id142 . -2)) ((587 . 589)) (26007 53347 651711 0) 0 nil])
([nil nil ((#("2, " 0 3 (fontified t)) . 584) (undo-tree-id143 . -3) (undo-tree-id144 . -3) (undo-tree-id145 . -3)) ((584 . 587)) (26007 53347 736037 0) 0 nil])
([nil nil ((#("0." 0 2 (fontified t)) . 582) (undo-tree-id146 . -2) (undo-tree-id147 . -2) (undo-tree-id148 . -2)) ((582 . 584)) (26007 53347 818401 0) 0 nil])
([nil nil ((#("3, " 0 3 (fontified t)) . 579) (undo-tree-id149 . -3) (undo-tree-id150 . -3) (undo-tree-id151 . -3)) ((579 . 582)) (26007 53347 903113 0) 0 nil])
([nil nil ((#("0." 0 2 (fontified t)) . 577) (undo-tree-id152 . -2) (undo-tree-id153 . -2) (undo-tree-id154 . -2)) ((577 . 579)) (26007 53347 986364 0) 0 nil])
([nil nil ((556 . 558) (#("    " 0 4 (fontified nil)) . 556) (577 . 578)) ((#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 577) (556 . 560) (#("  " 0 2 (fontified t)) . 556)) (26007 53348 75584 0) 0 nil])
([nil nil ((575 . 578)) ((#("in." 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 575) (undo-tree-id126 . -3) (undo-tree-id127 . -3)) (26007 53348 150854 0) 0 nil])
([nil nil ((578 . 586)) ((#("vert_pot" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t)) . 578) (undo-tree-id124 . -8) (undo-tree-id125 . -8)) (26007 53348 237849 0) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 585)) ((585 . 586)) (26007 53348 319610 0) 0 nil])
([nil nil ((585 . 586)) ((#("s" 0 1 (fontified t)) . 585) (undo-tree-id122 . -1) (undo-tree-id123 . -1)) (26007 53348 401297 0) 0 nil])
([nil nil ((586 . 587)) ((#("," 0 1 (fontified t)) . 586) (undo-tree-id120 . -1) (undo-tree-id121 . -1)) (26007 53348 486058 0) 0 nil])
([nil nil ((587 . 589)) ((#(" 1" 0 1 (fontified t) 1 2 (fontified t)) . 587) (undo-tree-id118 . -2) (undo-tree-id119 . -2)) (26007 53348 570129 0) 0 nil])
([nil nil ((589 . 590)) ((#("," 0 1 (fontified t)) . 589) (undo-tree-id116 . -1) (undo-tree-id117 . -1)) (26007 53348 653402 0) 0 nil])
([nil nil ((590 . 591)) ((#("0" 0 1 (fontified t)) . 590) (undo-tree-id114 . -1) (undo-tree-id115 . -1)) (26007 53348 736195 0) 0 nil])
([nil nil ((#(",0" 0 1 (fontified t) 1 2 (fontified t)) . 589) (undo-tree-id155 . -1) (undo-tree-id156 . -1)) ((589 . 591)) (26007 53348 822218 0) 0 nil])
([nil nil ((589 . 591)) ((#(".0" 0 1 (fontified t) 1 2 (fontified t)) . 589) (t 26007 53243 99316 603000)) (26007 53348 904509 0) 0 nil])
([nil nil ((509 . 511) (t 26007 53243 99316 603000)) ((#("_1" 0 1 (face font-lock-function-name-face fontified t) 1 2 (face font-lock-function-name-face fontified t)) . 509)) (26007 53348 989087 0) 0 nil])
([nil nil ((488 . 489)) ((#("
" 0 1 (c-is-sws t fontified t)) . 488)) (26007 53349 72010 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 593 . 594) (nil category c->-as-paren-syntax 572 . 573) (nil category c-<-as-paren-syntax 568 . 569) (nil fontified nil 497 . 498) (nil fontified nil 489 . 497) (nil fontified nil 488 . 489) (488 . 594)) ((#("@fragment
fn fs_main(in: VertexOutput) -> @location(0) vec4<f32> {
  return vec4<f32>(in.vert_pos, 1.0);
}" 0 1 (fontified nil c-is-sws t) 1 9 (face font-lock-constant-face fontified nil) 9 10 (fontified nil) 10 12 (face font-lock-keyword-face fontified nil) 12 13 (fontified nil) 13 20 (face font-lock-function-name-face fontified nil) 20 21 (face (rainbow-delimiters-depth-1-face) fontified nil) 21 23 (face font-lock-variable-name-face fontified nil) 23 37 (fontified nil) 37 38 (face (rainbow-delimiters-depth-1-face) fontified nil) 38 43 (fontified nil) 43 51 (face font-lock-builtin-face fontified nil) 51 52 (face (rainbow-delimiters-depth-1-face) fontified nil) 52 53 (fontified nil) 53 54 (face (rainbow-delimiters-depth-1-face) fontified nil) 54 55 (fontified nil) 55 59 (face font-lock-type-face fontified nil) 59 60 (face (rainbow-delimiters-depth-1-face) category c-<-as-paren-syntax fontified nil c-<>-c-types-set t) 60 63 (face font-lock-type-face fontified nil) 63 64 (face (rainbow-delimiters-depth-1-face) category c->-as-paren-syntax fontified nil) 64 65 (fontified nil) 65 66 (face (rainbow-delimiters-depth-1-face) fontified nil) 66 67 (fontified nil) 67 69 (fontified nil) 69 75 (face font-lock-keyword-face fontified nil) 75 76 (fontified nil) 76 80 (face font-lock-type-face fontified nil) 80 81 (category c-<-as-paren-syntax fontified nil c-<>-c-types-set t) 81 84 (face font-lock-type-face fontified nil) 84 85 (category c->-as-paren-syntax fontified nil) 85 86 (face (rainbow-delimiters-depth-2-face) fontified nil) 86 87 (fontified nil) 87 88 (fontified nil) 88 89 (fontified nil) 89 90 (fontified nil) 90 91 (fontified nil) 91 92 (fontified nil) 92 93 (fontified nil) 93 94 (fontified nil) 94 95 (fontified nil) 95 96 (fontified nil) 96 97 (fontified nil) 97 98 (fontified nil) 98 99 (fontified nil) 99 100 (fontified nil) 100 101 (fontified nil) 101 102 (fontified nil) 102 103 (face (rainbow-delimiters-depth-2-face) fontified nil) 103 105 (fontified nil) 105 106 (face (rainbow-delimiters-depth-1-face) fontified nil rear-nonsticky nil)) . 488) (undo-tree-id105 . -20) (undo-tree-id106 . -20) (undo-tree-id107 . -20) (undo-tree-id108 . -20) (undo-tree-id109 . -10) (undo-tree-id110 . -20) (undo-tree-id111 . -20) (undo-tree-id112 . -20) (undo-tree-id113 . -20) (nil fontified t 488 . 489) (nil fontified t 489 . 497) (nil fontified t 497 . 498) (nil category nil 568 . 569) (nil category nil 572 . 573) (nil rear-nonsticky t 593 . 594)) (26007 53349 158249 0) 0 nil])
([nil nil ((508 . 510)) ((#("_0" 0 1 (face font-lock-function-name-face fontified t) 1 2 (face font-lock-function-name-face fontified t)) . 508) (undo-tree-id104 . -2)) (26007 53349 238455 0) 0 nil])
([nil nil ((#("pos" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -584) (undo-tree-id221 . -3) (undo-tree-id222 . -3) (undo-tree-id223 . -3) (undo-tree-id224 . -3) (undo-tree-id225 . -3) (undo-tree-id226 . -3) (undo-tree-id227 . -3) (undo-tree-id228 . -3) (undo-tree-id229 . -3) (undo-tree-id230 . -3) 587) nil (26007 53367 573693 0) 0 nil])
([nil nil ((#("vert_" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . -579) (undo-tree-id208 . -5) (undo-tree-id209 . -5) (undo-tree-id210 . -5) (undo-tree-id211 . -5) (undo-tree-id212 . -5) (undo-tree-id213 . -5) (undo-tree-id214 . -5) (undo-tree-id215 . -5) (undo-tree-id216 . -5) (undo-tree-id217 . -5) (undo-tree-id218 . -5) (undo-tree-id219 . -5) (undo-tree-id220 . -5) 584) nil (26007 53367 573671 0) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -576) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (#("n" 0 1 (fontified t)) . -577) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (#("." 0 1 (fontified t)) . -578) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) 579) nil (26007 53367 573655 0) 0 nil])
([nil nil ((576 . 579)) nil (26007 53367 573597 0) 0 nil])
([nil nil ((579 . 580)) nil (26007 53367 573596 0) 0 nil])
([nil nil ((580 . 583)) nil (26007 53367 573595 0) 0 nil])
([nil nil ((583 . 584)) nil (26007 53367 573594 0) 0 nil])
([nil nil ((584 . 587)) nil (26007 53367 573593 0) 0 nil])
([nil nil ((580 . 581)) nil (26007 53367 573592 0) 0 nil])
([nil nil ((585 . 586)) nil (26007 53367 573588 0) 0 nil])
([nil nil ((#("// Vertex shader

struct VertexOutput {
    @builtin(position) clip_position: vec4<f32>,
    @location(0) vert_pos: vec3<f32>,

};

@vertex
fn vs_main(
    @builtin(vertex_index) in_vertex_index: u32,
) -> VertexOutput {
    var out: VertexOutput;
    let x = f32(1 - i32(in_vertex_index)) * 0.5;
    let y = f32(i32(in_vertex_index & 1u) * 2 - 1) * 0.5;
    out.clip_position = vec4<f32>(x, y, 0.0, 1.0);
    out.vert_pos = out.clip_position.xyz;
    return out;
}
" 0 1 (c-in-sws t face font-lock-comment-delimiter-face c-is-sws t fontified t) 1 3 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 3 17 (c-in-sws t face font-lock-comment-face fontified t) 17 18 (c-in-sws t fontified t) 18 19 (face font-lock-keyword-face c-is-sws t fontified t) 19 24 (face font-lock-keyword-face fontified t) 24 38 (fontified t) 38 39 (face (rainbow-delimiters-depth-1-face) fontified t) 39 45 (fontified t) 45 52 (face font-lock-builtin-face fontified t) 52 53 (face (rainbow-delimiters-depth-2-face) fontified t) 53 61 (face font-lock-builtin-face fontified t) 61 62 (face (rainbow-delimiters-depth-2-face) fontified t) 62 63 (fontified t) 63 76 (face font-lock-variable-name-face fontified t) 76 78 (fontified t) 78 82 (face font-lock-type-face fontified t) 82 83 (face (rainbow-delimiters-depth-2-face) fontified t c-<>-c-types-set t category c-<-as-paren-syntax) 83 86 (face font-lock-type-face fontified t) 86 87 (face (rainbow-delimiters-depth-2-face) fontified t category c->-as-paren-syntax) 87 94 (fontified t) 94 102 (face font-lock-builtin-face fontified t) 102 103 (face (rainbow-delimiters-depth-2-face) fontified t) 103 104 (fontified t) 104 105 (face (rainbow-delimiters-depth-2-face) fontified t) 105 106 (fontified t) 106 114 (face font-lock-variable-name-face fontified t) 114 116 (fontified t) 116 120 (face font-lock-type-face fontified t) 120 121 (face (rainbow-delimiters-depth-2-face) fontified t c-<>-c-types-set t category c-<-as-paren-syntax) 121 124 (face font-lock-type-face fontified t) 124 125 (face (rainbow-delimiters-depth-2-face) fontified t category c->-as-paren-syntax) 125 128 (fontified t) 128 129 (face (rainbow-delimiters-depth-1-face) fontified t) 129 133 (fontified t) 133 139 (face font-lock-constant-face fontified t) 139 140 (fontified t) 140 142 (face font-lock-keyword-face fontified t) 142 143 (fontified t) 143 150 (face font-lock-function-name-face fontified t) 150 151 (face (rainbow-delimiters-depth-1-face) fontified t) 151 157 (fontified t) 157 164 (face font-lock-builtin-face fontified t) 164 165 (face (rainbow-delimiters-depth-2-face) fontified t) 165 177 (face font-lock-builtin-face fontified t) 177 178 (face (rainbow-delimiters-depth-2-face) fontified t) 178 179 (fontified t) 179 194 (face font-lock-variable-name-face fontified t) 194 196 (fontified t) 196 199 (face font-lock-type-face fontified t) 199 201 (fontified t) 201 202 (face (rainbow-delimiters-depth-1-face) fontified t) 202 219 (fontified t) 219 220 (face (rainbow-delimiters-depth-1-face) fontified t) 220 225 (fontified t) 225 228 (face font-lock-keyword-face fontified t) 228 229 (fontified t) 229 232 (face font-lock-variable-name-face fontified t) 232 252 (fontified t) 252 255 (face font-lock-keyword-face fontified t) 255 256 (fontified t) 256 257 (face font-lock-variable-name-face fontified t) 257 260 (fontified t) 260 263 (face font-lock-type-face fontified t) 263 264 (face (rainbow-delimiters-depth-2-face) fontified t) 264 268 (fontified t) 268 271 (face font-lock-type-face fontified t) 271 272 (face (rainbow-delimiters-depth-3-face) fontified t) 272 287 (fontified t) 287 288 (face (rainbow-delimiters-depth-3-face) fontified t) 288 289 (face (rainbow-delimiters-depth-2-face) fontified t) 289 301 (fontified t) 301 304 (face font-lock-keyword-face fontified t) 304 305 (fontified t) 305 306 (face font-lock-variable-name-face fontified t) 306 309 (fontified t) 309 312 (face font-lock-type-face fontified t) 312 313 (face (rainbow-delimiters-depth-2-face) fontified t) 313 316 (face font-lock-type-face fontified t) 316 317 (face (rainbow-delimiters-depth-3-face) fontified t) 317 337 (fontified t) 337 338 (face (rainbow-delimiters-depth-3-face) fontified t) 338 346 (fontified t) 346 347 (face (rainbow-delimiters-depth-2-face) fontified t) 347 363 (fontified t) 363 376 (face font-lock-variable-name-face fontified t) 376 379 (fontified t) 379 383 (face font-lock-type-face fontified t) 383 384 (face (rainbow-delimiters-depth-2-face) fontified t c-<>-c-types-set t category c-<-as-paren-syntax) 384 387 (face font-lock-type-face fontified t) 387 388 (face (rainbow-delimiters-depth-2-face) fontified t category c->-as-paren-syntax) 388 389 (face (rainbow-delimiters-depth-2-face) fontified t) 389 403 (fontified t) 403 404 (face (rainbow-delimiters-depth-2-face) fontified t) 404 414 (fontified t) 414 422 (face font-lock-variable-name-face fontified t) 422 452 (fontified t) 452 458 (face font-lock-keyword-face fontified t) 458 464 (fontified t) 464 465 (face (rainbow-delimiters-depth-1-face) fontified t) 465 466 (fontified t)) . 1) (undo-tree-id270 . -466) (undo-tree-id271 . -127) (undo-tree-id272 . -466) (undo-tree-id273 . -466) (undo-tree-id274 . -466) (undo-tree-id275 . -465) (undo-tree-id276 . -414) (undo-tree-id277 . -304) (undo-tree-id278 . -253) (undo-tree-id279 . -225) (undo-tree-id280 . -203) (undo-tree-id281 . -202) (undo-tree-id282 . -152) (undo-tree-id283 . -466) (undo-tree-id284 . -466) (t 26007 53367 577561 214000)) nil (26007 59924 668203 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 547 . 548) (nil fontified nil 529 . 548) (nil fontified nil 528 . 529) (nil category c->-as-paren-syntax 528 . 529) (nil fontified nil 525 . 528) (nil fontified nil 524 . 525) (nil category c-<-as-paren-syntax 524 . 525) (nil fontified nil 506 . 524) (nil fontified nil 505 . 506) (nil category c->-as-paren-syntax 505 . 506) (nil fontified nil 502 . 505) (nil fontified nil 501 . 502) (nil category c-<-as-paren-syntax 501 . 502) (nil fontified nil 443 . 501) (nil fontified nil 442 . 443) (nil fontified nil 423 . 442) (nil fontified nil 422 . 423) (nil fontified nil 380 . 422) (nil fontified nil 379 . 380) (nil category c->-as-paren-syntax 379 . 380) (nil fontified nil 376 . 379) (nil fontified nil 375 . 376) (nil category c-<-as-paren-syntax 375 . 376) (nil fontified nil 221 . 375) (nil fontified nil 220 . 221) (nil category c->-as-paren-syntax 220 . 221) (nil fontified nil 217 . 220) (nil fontified nil 216 . 217) (nil category c-<-as-paren-syntax 216 . 217) (nil fontified nil 186 . 216) (nil fontified nil 185 . 186) (nil category c->-as-paren-syntax 185 . 186) (nil fontified nil 182 . 185) (nil fontified nil 181 . 182) (nil category c-<-as-paren-syntax 181 . 182) (nil fontified nil 111 . 181) (nil fontified nil 110 . 111) (nil category c->-as-paren-syntax 110 . 111) (nil fontified nil 107 . 110) (nil fontified nil 106 . 107) (nil category c-<-as-paren-syntax 106 . 107) (nil fontified nil 76 . 106) (nil fontified nil 75 . 76) (nil category c->-as-paren-syntax 75 . 76) (nil fontified nil 72 . 75) (nil fontified nil 71 . 72) (nil category c-<-as-paren-syntax 71 . 72) (nil fontified nil 20 . 71) (nil fontified nil 19 . 20) (nil fontified nil 2 . 19) (nil fontified nil 1 . 2) (1 . 548)) nil (26007 59924 668185 0) 0 nil])
([nil nil ((#("
// Fragment shader
@fragment
fn fs_main_0(in: VertexOutput) -> @location(0) vec4<f32> {
  return vec4<f32>(0.3, 0.2, 0.1, 1.0);
}" 0 1 (fontified t) 1 2 (face font-lock-comment-delimiter-face fontified t c-in-sws t c-is-sws t) 2 4 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 4 20 (face font-lock-comment-face fontified t c-in-sws t) 20 21 (c-is-sws t fontified t) 21 29 (face font-lock-constant-face fontified t) 29 30 (fontified t) 30 32 (face font-lock-keyword-face fontified t) 32 33 (fontified t) 33 40 (face font-lock-function-name-face fontified t) 40 41 (face font-lock-function-name-face fontified t) 41 42 (face font-lock-function-name-face fontified t) 42 43 (face (rainbow-delimiters-depth-1-face) fontified t) 43 45 (face font-lock-variable-name-face fontified t) 45 59 (fontified t) 59 60 (face (rainbow-delimiters-depth-1-face) fontified t) 60 65 (fontified t) 65 73 (face font-lock-builtin-face fontified t) 73 74 (face (rainbow-delimiters-depth-1-face) fontified t) 74 75 (fontified t) 75 76 (face (rainbow-delimiters-depth-1-face) fontified t) 76 77 (fontified t) 77 81 (face font-lock-type-face fontified t) 81 82 (face (rainbow-delimiters-depth-1-face) fontified t category c-<-as-paren-syntax c-<>-c-types-set t) 82 85 (face font-lock-type-face fontified t) 85 86 (face (rainbow-delimiters-depth-1-face) fontified t category c->-as-paren-syntax) 86 87 (fontified t) 87 88 (face (rainbow-delimiters-depth-1-face) fontified t) 88 89 (fontified t) 89 91 (fontified t) 91 97 (face font-lock-keyword-face fontified t) 97 98 (fontified t) 98 102 (face font-lock-type-face fontified t) 102 103 (face (rainbow-delimiters-depth-2-face) fontified t category c-<-as-paren-syntax c-<>-c-types-set t) 103 106 (face font-lock-type-face fontified t) 106 107 (face (rainbow-delimiters-depth-2-face) fontified t category c->-as-paren-syntax) 107 108 (face (rainbow-delimiters-depth-2-face) fontified t) 108 109 (fontified t) 109 110 (fontified t) 110 111 (fontified t) 111 112 (fontified t) 112 113 (fontified t) 113 114 (fontified t) 114 115 (fontified t) 115 116 (fontified t) 116 117 (fontified t) 117 118 (fontified t) 118 119 (fontified t) 119 120 (fontified t) 120 121 (fontified t) 121 122 (fontified t) 122 123 (fontified t) 123 124 (fontified t) 124 125 (fontified t) 125 126 (fontified t) 126 127 (face (rainbow-delimiters-depth-2-face) fontified t) 127 129 (fontified t) 129 130 (face (rainbow-delimiters-depth-1-face) fontified t rear-nonsticky t)) . 549) (undo-tree-id254 . -130) (undo-tree-id255 . -40) (undo-tree-id256 . -108) (undo-tree-id257 . -108) (undo-tree-id258 . -119) (undo-tree-id259 . -119) (undo-tree-id260 . -20) (undo-tree-id261 . -130) (undo-tree-id262 . -130) (undo-tree-id263 . -130) (undo-tree-id264 . -98) (undo-tree-id265 . -96) (undo-tree-id266 . -22) (undo-tree-id267 . -20) (undo-tree-id268 . -130) (undo-tree-id269 . -130)) nil (26007 59924 668170 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -548) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) 549) nil (26007 59924 668153 0) 0 nil])
([nil nil ((462 . 464)) nil (26007 59924 668120 0) 0 nil])
([nil nil ((#("
@fragment
fn fs_main_1(in: VertexOutput) -> @location(0) vec4<f32> {
  return vec4<f32>(in.vert_pos, 1.0);
}
" 0 1 (fontified t c-is-sws t) 1 2 (fontified t c-is-sws t) 2 10 (face font-lock-constant-face fontified t) 10 11 (fontified t) 11 13 (face font-lock-keyword-face fontified t) 13 14 (fontified t) 14 21 (face font-lock-function-name-face fontified t) 21 22 (face font-lock-function-name-face fontified t) 22 23 (face font-lock-function-name-face fontified t) 23 24 (face (rainbow-delimiters-depth-1-face) fontified t) 24 26 (face font-lock-variable-name-face fontified t) 26 40 (fontified t) 40 41 (face (rainbow-delimiters-depth-1-face) fontified t) 41 46 (fontified t) 46 54 (face font-lock-builtin-face fontified t) 54 55 (face (rainbow-delimiters-depth-1-face) fontified t) 55 56 (fontified t) 56 57 (face (rainbow-delimiters-depth-1-face) fontified t) 57 58 (fontified t) 58 62 (face font-lock-type-face fontified t) 62 63 (face (rainbow-delimiters-depth-1-face) fontified t c-<>-c-types-set t category c-<-as-paren-syntax) 63 66 (face font-lock-type-face fontified t) 66 67 (face (rainbow-delimiters-depth-1-face) fontified t category c->-as-paren-syntax) 67 68 (fontified t) 68 69 (face (rainbow-delimiters-depth-1-face) fontified t) 69 70 (fontified t) 70 72 (fontified t) 72 78 (face font-lock-keyword-face fontified t) 78 79 (fontified t) 79 83 (face font-lock-type-face fontified t) 83 84 (face (rainbow-delimiters-depth-2-face) fontified t c-<>-c-types-set t category c-<-as-paren-syntax) 84 87 (face font-lock-type-face fontified t) 87 88 (face (rainbow-delimiters-depth-2-face) fontified t category c->-as-paren-syntax) 88 89 (face (rainbow-delimiters-depth-2-face) fontified t) 89 90 (fontified t) 90 91 (fontified t) 91 92 (fontified t) 92 93 (fontified t) 93 94 (fontified t) 94 95 (fontified t) 95 96 (fontified t) 96 97 (fontified t) 97 98 (fontified t) 98 99 (fontified t) 99 100 (fontified t) 100 101 (fontified t) 101 102 (fontified t) 102 103 (fontified t) 103 104 (fontified t) 104 105 (fontified t) 105 106 (face (rainbow-delimiters-depth-2-face) fontified t) 106 108 (fontified t) 108 109 (face (rainbow-delimiters-depth-1-face) fontified t) 109 110 (fontified t)) . 551) (undo-tree-id333 . -110) (undo-tree-id334 . -89) (undo-tree-id335 . -21) (undo-tree-id336 . -109) (undo-tree-id337 . -91) (undo-tree-id338 . -100) (undo-tree-id339 . -100) (undo-tree-id340 . -100) (undo-tree-id341 . -100) (undo-tree-id342 . -100) (undo-tree-id343 . -100) (undo-tree-id344 . -110) (undo-tree-id345 . -110) (undo-tree-id346 . -110) (undo-tree-id347 . -109) (undo-tree-id348 . -79) (undo-tree-id349 . -77) (undo-tree-id350 . -17) (undo-tree-id351 . -6) (undo-tree-id352 . -5) (undo-tree-id353 . -4) (undo-tree-id354 . -110) (undo-tree-id355 . -110) (t 26007 59924 672664 385000)) nil (26007 59966 439907 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -550) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) 551) nil (26007 59966 439881 0) 0 nil])
([nil nil ((#("_" 0 1 (face font-lock-function-name-face fontified t)) . -462) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (#("0" 0 1 (face font-lock-function-name-face fontified t)) . -463) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) 464) nil (26007 59966 439845 0) 0 nil])
([nil nil ((509 . 511) (509 . 511) (t 26007 59966 444488 201000)) nil (26008 466 631812 0) 0 nil])
([nil nil ((549 . 552)) nil (26008 466 631811 0) 0 nil])
([nil nil ((552 . 563)) nil (26008 466 631810 0) 0 nil])
([nil nil ((#("5" 0 1 (fontified t)) . -562) (undo-tree-id391 . -1) (undo-tree-id392 . -1) 563) nil (26008 466 631809 0) 0 nil])
([nil nil ((562 . 563)) nil (26008 466 631805 0) 0 nil])
([nil nil ((563 . 565)) nil (26008 466 631805 0) 0 nil])
([nil nil ((564 . 567)) nil (26008 466 631803 0) 0 nil])
([nil nil ((568 . 570)) nil (26008 466 631803 0) 0 nil])
([nil nil ((569 . 570)) nil (26008 466 631802 0) 0 nil])
([nil nil ((570 . 571)) nil (26008 466 631801 0) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -570) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) 571) nil (26008 466 631799 0) 0 nil])
([nil nil ((570 . 572)) nil (26008 466 631794 0) 0 nil])
([nil nil ((#("VertexOutput" 0 12 (fontified t)) . -467) (undo-tree-id374 . -12) (undo-tree-id375 . -12) (undo-tree-id376 . -5) (undo-tree-id377 . -5) (undo-tree-id378 . -5) (undo-tree-id379 . -5) (undo-tree-id380 . -5) (undo-tree-id381 . -12) (undo-tree-id382 . -12) (undo-tree-id383 . -12) (undo-tree-id384 . -12) (undo-tree-id385 . -12) (undo-tree-id386 . -12) 479) nil (26008 466 631793 0) 0 nil])
([nil nil ((#("in: " 0 2 (face font-lock-variable-name-face fontified t) 2 4 (fontified t)) . -463) (undo-tree-id360 . -4) (undo-tree-id361 . -4) (undo-tree-id362 . -4) (undo-tree-id363 . -4) (undo-tree-id364 . -4) (undo-tree-id365 . -4) (undo-tree-id366 . -4) (undo-tree-id367 . -4) (undo-tree-id368 . -4) (undo-tree-id369 . -4) (undo-tree-id370 . -4) (undo-tree-id371 . -4) (undo-tree-id372 . -4) (undo-tree-id373 . -4) 467) nil (26008 466 631779 0) 0 nil])
([nil nil ((556 . 557)) nil (26008 466 631764 0) 0 nil])
([nil nil ((557 . 561)) nil (26008 466 631763 0) 0 nil])
([nil nil ((561 . 562)) nil (26008 466 631762 0) 0 nil])
([nil nil ((562 . 566)) nil (26008 466 631761 0) 0 nil])
([nil nil ((566 . 567)) nil (26008 466 631760 0) 0 nil])
([nil nil ((567 . 568)) nil (26008 466 631759 0) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . -567) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) 568) nil (26008 466 631757 0) 0 nil])
([nil nil ((567 . 571)) nil (26008 466 631744 0) 0 nil])
([nil nil ((572 . 573)) nil (26008 466 631740 0) 0 nil])
([nil nil ((463 . 465) (t 26008 466 636904 765000)) nil (26008 497 337390 0) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -463) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (#("n" 0 1 (fontified t)) . -464) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) 465) nil (26008 497 337387 0) 0 nil])
([nil nil ((463 . 465)) nil (26008 497 337367 0) 0 nil])
([nil nil ((465 . 466)) nil (26008 497 337366 0) 0 nil])
([nil nil ((466 . 477)) nil (26008 497 337365 0) 0 nil])
([nil nil ((477 . 479)) nil (26008 497 337360 0) 0 nil])
([nil nil ((479 . 481) (t 26008 497 342851 35000)) nil (26008 1141 290877 0) 0 nil])
([nil nil ((#("，" 0 1 (fontified t)) . -479) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (#(" " 0 1 (fontified t)) . -480) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) 481) nil (26008 1141 290875 0) 0 nil])
([nil nil ((479 . 480)) nil (26008 1141 290862 0) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -479) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) 480) nil (26008 1141 290860 0) 0 nil])
([nil nil ((589 . 592)) nil (26008 1141 290856 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 613 . 614) (nil fontified nil 592 . 614) (592 . 614)) nil (26008 1141 290854 0) 0 nil])
([nil nil ((#("  [[builtin(position)].x" 0 2 (fontified t) 2 3 (face (rainbow-delimiters-depth-2-face) fontified t) 3 4 (face (rainbow-delimiters-depth-3-face) fontified t) 4 11 (face font-lock-builtin-face fontified t) 11 12 (face (rainbow-delimiters-depth-4-face) fontified t) 12 20 (fontified t) 20 21 (face (rainbow-delimiters-depth-4-face) fontified t) 21 22 (face (rainbow-delimiters-depth-3-face) fontified t) 22 23 (fontified t) 23 24 (rear-nonsticky t fontified t)) . 590) (undo-tree-id491 . -2) (undo-tree-id492 . -2) (undo-tree-id493 . -2) (undo-tree-id494 . -2) (undo-tree-id495 . -24) (undo-tree-id496 . -24) (undo-tree-id497 . -24) (undo-tree-id498 . -24)) nil (26008 1141 290852 0) 0 nil])
([nil nil ((590 . 592)) nil (26008 1141 290844 0) 0 nil])
([nil nil ((508 . 511)) nil (26008 1141 290843 0) 0 nil])
([nil nil ((511 . 515)) nil (26008 1141 290842 0) 0 nil])
([nil nil ((515 . 518)) nil (26008 1141 290841 0) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -516) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (#("t" 0 1 (fontified t)) . -517) (undo-tree-id489 . -1) (undo-tree-id490 . -1) 518) nil (26008 1141 290839 0) 0 nil])
([nil nil ((516 . 520)) nil (26008 1141 290832 0) 0 nil])
([nil nil ((520 . 524)) nil (26008 1141 290831 0) 0 nil])
([nil nil ((524 . 526)) nil (26008 1141 290830 0) 0 nil])
([nil nil ((525 . 528)) nil (26008 1141 290829 0) 0 nil])
([nil nil ((529 . 531)) nil (26008 1141 290828 0) 0 nil])
([nil nil ((530 . 532)) nil (26008 1141 290827 0) 0 nil])
([nil nil ((531 . 538)) nil (26008 1141 290826 0) 0 nil])
([nil nil ((538 . 540)) nil (26008 1141 290825 0) 0 nil])
([nil nil ((539 . 541)) nil (26008 1141 290824 0) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -540) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) 541) nil (26008 1141 290823 0) 0 nil])
([nil nil ((540 . 547)) nil (26008 1141 290818 0) 0 nil])
([nil nil ((549 . 551)) nil (26008 1141 290817 0) 0 nil])
([nil nil ((551 . 552)) nil (26008 1141 290816 0) 0 nil])
([nil nil ((552 . 553)) nil (26008 1141 866602 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 573 . 574) (nil fontified nil 573 . 574) (nil fontified nil 572 . 573) (nil fontified nil 571 . 572) (nil fontified nil 570 . 571) (nil fontified nil 569 . 570) (nil fontified nil 568 . 569) (nil fontified nil 567 . 568) (nil fontified nil 566 . 567) (nil fontified nil 565 . 566) (nil fontified nil 564 . 565) (nil fontified nil 563 . 564) (nil fontified nil 562 . 563) (nil fontified nil 561 . 562) (nil fontified nil 560 . 561) (nil fontified nil 559 . 560) (nil fontified nil 558 . 559) (nil fontified nil 557 . 558) (nil fontified nil 556 . 557) (nil fontified nil 555 . 556) (nil fontified nil 554 . 555) (nil fontified nil 553 . 554) (553 . 574)) nil (26008 1148 182097 0) 0 nil] [nil nil ((#("([builtin(position)].x, )" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t) 1 2 (face (rainbow-delimiters-depth-3-face) fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (face (rainbow-delimiters-depth-4-face) fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t) 17 18 (fontified t) 18 19 (face (rainbow-delimiters-depth-4-face) fontified t) 19 20 (face (rainbow-delimiters-depth-3-face) fontified t) 20 21 (fontified t) 21 22 (fontified t) 22 23 (fontified t) 23 24 (fontified t) 24 25 (face (rainbow-delimiters-depth-2-face) fontified t)) . -529) (undo-tree-id403 . -23) (undo-tree-id404 . -25) (undo-tree-id405 . -1) (undo-tree-id406 . -25) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -2) (undo-tree-id411 . -20) (undo-tree-id412 . -20) (undo-tree-id413 . -20) (undo-tree-id414 . -2) (undo-tree-id415 . -3) (undo-tree-id416 . -4) (undo-tree-id417 . -4) (undo-tree-id418 . -4) (undo-tree-id419 . -20) (undo-tree-id420 . -5) (undo-tree-id421 . -6) (undo-tree-id422 . -7) (undo-tree-id423 . -8) (undo-tree-id424 . -9) (undo-tree-id425 . -9) (undo-tree-id426 . -9) (undo-tree-id427 . -20) (undo-tree-id428 . -10) (undo-tree-id429 . -19) (undo-tree-id430 . -10) (undo-tree-id431 . -10) (undo-tree-id432 . -10) (undo-tree-id433 . -11) (undo-tree-id434 . -11) (undo-tree-id435 . -11) (undo-tree-id436 . -11) (undo-tree-id437 . -11) (undo-tree-id438 . -12) (undo-tree-id439 . -13) (undo-tree-id440 . -14) (undo-tree-id441 . -15) (undo-tree-id442 . -16) (undo-tree-id443 . -17) (undo-tree-id444 . -18) (undo-tree-id445 . -18) (undo-tree-id446 . -18) (undo-tree-id447 . -20) (undo-tree-id448 . -19) (undo-tree-id449 . -20) (undo-tree-id450 . -21) (undo-tree-id451 . -22) (undo-tree-id452 . -22) (undo-tree-id453 . -22) (undo-tree-id454 . -23) (undo-tree-id455 . -24) (undo-tree-id456 . -24) (undo-tree-id457 . -24) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -2) (undo-tree-id462 . -3) (undo-tree-id463 . -4) (undo-tree-id464 . -21) (undo-tree-id465 . -22) (undo-tree-id466 . -1) (undo-tree-id467 . -22) (undo-tree-id468 . -22) (undo-tree-id469 . -22) (undo-tree-id470 . -22) (undo-tree-id471 . -23) (undo-tree-id472 . -23) (undo-tree-id473 . -23) (undo-tree-id474 . -23) (undo-tree-id475 . -23) (undo-tree-id476 . -25) (undo-tree-id477 . -25) (undo-tree-id478 . -1) (undo-tree-id479 . -25) (undo-tree-id480 . -25) 554) ((529 . 554)) (26008 1141 294109 0) 0 nil])
([nil nil ((#("x" 0 1 (rear-nonsticky t fontified t)) . -573) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) 574) nil (26008 1148 182089 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 549 . 550) (nil fontified nil 549 . 550) (nil fontified nil 548 . 549) (nil fontified nil 547 . 548) (nil fontified nil 546 . 547) (nil fontified nil 545 . 546) (nil fontified nil 544 . 545) (nil fontified nil 543 . 544) (nil fontified nil 542 . 543) (nil fontified nil 541 . 542) (nil fontified nil 540 . 541) (nil fontified nil 539 . 540) (nil fontified nil 538 . 539) (nil fontified nil 537 . 538) (nil fontified nil 536 . 537) (nil fontified nil 535 . 536) (nil fontified nil 534 . 535) (nil fontified nil 533 . 534) (nil fontified nil 532 . 533) (nil fontified nil 531 . 532) (nil fontified nil 530 . 531) (nil fontified nil 529 . 530) (529 . 550)) ((#("[builtin(position)].x" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (face (rainbow-delimiters-depth-3-face) fontified nil) 9 10 (fontified nil) 10 11 (fontified nil) 11 12 (fontified nil) 12 13 (fontified nil) 13 14 (fontified nil) 14 15 (fontified nil) 15 16 (fontified nil) 16 17 (fontified nil) 17 18 (face (rainbow-delimiters-depth-3-face) fontified nil) 18 19 (face (rainbow-delimiters-depth-2-face) fontified nil) 19 20 (fontified nil) 20 21 (rear-nonsticky nil fontified nil)) . 529) (undo-tree-id513 . -21) (undo-tree-id514 . -21) (nil rear-nonsticky t 549 . 550)) (26008 1141 290723 0) 0 nil])
([nil nil ((573 . 574)) nil (26008 1148 182073 0) 0 nil])
nil
([nil nil ((575 . 576)) nil (26008 1148 182069 0) 0 nil])
([nil nil ((530 . 531) (t 26008 1148 188793 998000)) nil (26008 1172 149180 0) 0 nil])
([nil nil ((550 . 551)) nil (26008 1172 149178 0) 0 nil])
([nil nil ((555 . 556)) nil (26008 1172 149177 0) 0 nil])
([nil nil ((574 . 575)) nil (26008 1172 149171 0) 0 nil])
([nil nil ((#("  let st = vec2<f32>([[builtin(position)]].x, [[builtin(position)]].y);
" 0 2 (fontified t) 2 3 (face font-lock-keyword-face fontified t) 3 4 (face font-lock-keyword-face fontified t) 4 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 7 (face font-lock-variable-name-face fontified t) 7 8 (face font-lock-variable-name-face fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (face font-lock-type-face fontified t) 12 13 (face font-lock-type-face fontified t) 13 14 (face font-lock-type-face fontified t) 14 15 (face font-lock-type-face fontified t) 15 16 (face (rainbow-delimiters-depth-2-face) category c-<-as-paren-syntax c-<>-c-types-set t fontified t) 16 17 (face font-lock-type-face fontified t) 17 18 (face font-lock-type-face fontified t) 18 19 (face font-lock-type-face fontified t) 19 20 (face (rainbow-delimiters-depth-2-face) category c->-as-paren-syntax fontified t) 20 21 (face (rainbow-delimiters-depth-2-face) fontified t) 21 22 (face (rainbow-delimiters-depth-3-face) fontified t) 22 23 (face (rainbow-delimiters-depth-4-face) fontified t) 23 24 (face font-lock-builtin-face fontified t) 24 25 (face font-lock-builtin-face fontified t) 25 26 (face font-lock-builtin-face fontified t) 26 27 (face font-lock-builtin-face fontified t) 27 28 (face font-lock-builtin-face fontified t) 28 29 (face font-lock-builtin-face fontified t) 29 30 (face font-lock-builtin-face fontified t) 30 31 (face (rainbow-delimiters-depth-5-face) fontified t) 31 32 (fontified t) 32 33 (fontified t) 33 34 (fontified t) 34 35 (fontified t) 35 36 (fontified t) 36 37 (fontified t) 37 38 (fontified t) 38 39 (fontified t) 39 40 (face (rainbow-delimiters-depth-5-face) fontified t) 40 41 (face (rainbow-delimiters-depth-4-face) fontified t) 41 42 (face (rainbow-delimiters-depth-3-face) fontified t) 42 43 (fontified t) 43 44 (fontified t) 44 45 (fontified t) 45 46 (fontified t) 46 47 (face (rainbow-delimiters-depth-3-face) fontified t) 47 48 (face (rainbow-delimiters-depth-4-face) fontified t) 48 49 (face font-lock-builtin-face fontified t) 49 50 (face font-lock-builtin-face fontified t) 50 51 (face font-lock-builtin-face fontified t) 51 52 (face font-lock-builtin-face fontified t) 52 53 (face font-lock-builtin-face fontified t) 53 54 (face font-lock-builtin-face fontified t) 54 55 (face font-lock-builtin-face fontified t) 55 56 (face (rainbow-delimiters-depth-5-face) fontified t) 56 57 (fontified t) 57 58 (fontified t) 58 59 (fontified t) 59 60 (fontified t) 60 61 (fontified t) 61 62 (fontified t) 62 63 (fontified t) 63 64 (fontified t) 64 65 (face (rainbow-delimiters-depth-5-face) fontified t) 65 66 (face (rainbow-delimiters-depth-4-face) fontified t) 66 67 (face (rainbow-delimiters-depth-3-face) fontified t) 67 68 (fontified t) 68 69 (fontified t) 69 70 (face (rainbow-delimiters-depth-2-face) fontified t) 70 71 (fontified t) 71 72 (fontified t)) . -509) (undo-tree-id520 . -72) (undo-tree-id521 . -72) (undo-tree-id522 . -20) (undo-tree-id523 . -65) (undo-tree-id524 . -66) (undo-tree-id525 . -66) (undo-tree-id526 . -50) (undo-tree-id527 . -50) (undo-tree-id528 . -50) (undo-tree-id529 . -50) (undo-tree-id530 . -50) (undo-tree-id531 . -48) (undo-tree-id532 . -55) (undo-tree-id533 . -55) (undo-tree-id534 . -46) (undo-tree-id535 . -48) (undo-tree-id536 . -55) (undo-tree-id537 . -55) (undo-tree-id538 . -72) (undo-tree-id539 . -72) (undo-tree-id540 . -48) (undo-tree-id541 . -72) (undo-tree-id542 . -72) (undo-tree-id543 . -72) (undo-tree-id544 . -72) (undo-tree-id545 . -39) (undo-tree-id546 . -39) (undo-tree-id547 . -39) (undo-tree-id548 . -39) (undo-tree-id549 . -39) (undo-tree-id550 . -30) (undo-tree-id551 . -40) (undo-tree-id552 . -40) (undo-tree-id553 . -30) (undo-tree-id554 . -40) (undo-tree-id555 . -40) (undo-tree-id556 . -72) (undo-tree-id557 . -72) (undo-tree-id558 . -30) (undo-tree-id559 . -72) (undo-tree-id560 . -72) (undo-tree-id561 . -72) 581 (t 26008 1172 156050 683000)) nil (26008 1229 356689 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 582 . 583) (nil fontified nil 549 . 583) (nil fontified nil 548 . 549) (nil category c->-as-paren-syntax 548 . 549) (nil fontified nil 545 . 548) (nil fontified nil 544 . 545) (nil category c-<-as-paren-syntax 544 . 545) (nil fontified nil 537 . 544) (nil fontified nil 536 . 537) (nil category c->-as-paren-syntax 536 . 537) (nil fontified nil 533 . 536) (nil fontified nil 532 . 533) (nil category c-<-as-paren-syntax 532 . 533) (nil fontified nil 509 . 532) (509 . 583)) nil (26008 1229 356630 0) 0 nil])
([nil nil ((509 . 511) (#("    " 0 4 (fontified t)) . 509) 557 (t 26008 1229 364449 846000)) nil (26008 1231 493454 0) 0 nil])
([nil nil ((#("FragCoord" 0 9 (fontified t)) . -551) (undo-tree-id573 . -4) (undo-tree-id574 . -9) (undo-tree-id575 . -4) (undo-tree-id576 . -4) (undo-tree-id577 . -4) (undo-tree-id578 . -4) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -9) (undo-tree-id586 . -9) (undo-tree-id587 . -9) (undo-tree-id588 . -9) 560 (t 26008 1231 500401 510000)) nil (26008 1319 524706 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 571 . 572) (nil fontified nil 552 . 572) (nil fontified nil 551 . 552) (551 . 572)) nil (26008 1319 524689 0) 0 nil])
([nil nil ((#("FragCoord" 0 9 (fontified t)) . -579) (undo-tree-id562 . -9) (undo-tree-id563 . -3) (undo-tree-id564 . -3) (undo-tree-id565 . -3) (undo-tree-id566 . -3) (undo-tree-id567 . -3) (undo-tree-id568 . -3) (undo-tree-id569 . -9) (undo-tree-id570 . -9) (undo-tree-id571 . -9) (undo-tree-id572 . -9) 588) nil (26008 1319 524686 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 599 . 600) (nil fontified nil 580 . 600) (nil fontified nil 579 . 580) (579 . 600)) nil (26008 1319 524660 0) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -576) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (#("l" 0 1 (fontified t)) . -577) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (#("_" 0 1 (fontified t)) . -578) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) 579 (t 26008 1319 531783 548000)) nil (26008 1323 694725 0) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -548) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (#("l" 0 1 (fontified t)) . -549) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (#("_" 0 1 (fontified t)) . -550) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) 551) nil (26008 1323 694641 0) 0 nil])
([nil nil ((479 . 480) (t 26008 1323 702226 501000)) nil (26008 1477 492425 0) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -479) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) 480) nil (26008 1494 898138 0) 0 nil] [nil nil ((nil rear-nonsticky nil 519 . 520) (nil fontified nil 518 . 520) (nil fontified nil 517 . 518) (nil category c->-as-paren-syntax 517 . 518) (nil fontified nil 514 . 517) (nil fontified nil 513 . 514) (nil category c-<-as-paren-syntax 513 . 514) (nil fontified nil 480 . 513) (480 . 520)) ((#("   @builtin(position) coord: vec4<f32>,
" 0 4 (fontified nil) 4 11 (face font-lock-builtin-face fontified nil) 11 12 (face (rainbow-delimiters-depth-2-face) fontified nil) 12 20 (face font-lock-builtin-face fontified nil) 20 21 (face (rainbow-delimiters-depth-2-face) fontified nil) 21 22 (fontified nil) 22 27 (face font-lock-variable-name-face fontified nil) 27 29 (fontified nil) 29 33 (face font-lock-type-face fontified nil) 33 34 (face (rainbow-delimiters-depth-2-face) category c-<-as-paren-syntax fontified nil c-<>-c-types-set t) 34 37 (face font-lock-type-face fontified nil) 37 38 (face (rainbow-delimiters-depth-2-face) category c->-as-paren-syntax fontified nil) 38 39 (fontified nil) 39 40 (rear-nonsticky nil fontified nil)) . 480) (undo-tree-id728 . -40) (undo-tree-id729 . -40) (undo-tree-id730 . -40) (undo-tree-id731 . -40) (undo-tree-id732 . -40) (undo-tree-id733 . -40) (nil rear-nonsticky t 519 . 520)) (26008 1477 50703 0) 0 nil])
([nil nil ((465 . 476) (#("           " 0 11 (fontified nil)) . 464) (undo-tree-id750 . -11) (undo-tree-id751 . -11) (undo-tree-id752 . -11) (463 . 476)) nil (26008 1494 898128 0) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . -519) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) 520) ((519 . 520)) (26008 1477 47449 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 503 . 504) (nil fontified nil 502 . 504) (nil fontified nil 501 . 502) (nil category c->-as-paren-syntax 501 . 502) (nil fontified nil 498 . 501) (nil fontified nil 497 . 498) (nil category c-<-as-paren-syntax 497 . 498) (nil fontified nil 464 . 497) (464 . 504)) nil (26008 1494 898123 0) 0 nil])
nil
([nil nil ((464 . 475) (#("   " 0 3 (fontified t)) . 464)) nil (26008 1494 898120 0) 0 nil])
([nil nil ((540 . 552)) nil (26008 1494 898119 0) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . -511) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) 512) nil (26008 1494 898116 0) 0 nil])
([nil nil ((539 . 540)) nil (26008 1494 898088 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -551) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (t 26008 1494 905420 418000)) nil (26008 1511 526937 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -545) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (#(" " 0 1 (fontified t)) . -546) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (#(" " 0 1 (fontified t)) . -547) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (#(" " 0 1 (fontified t)) . -548) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (#(" " 0 1 (fontified t)) . -549) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (#(" " 0 1 (fontified t)) . -550) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) 551) nil (26008 1511 526928 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -541) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (#(" " 0 1 (fontified t)) . -542) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (#(" " 0 1 (fontified t)) . -543) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (#(" " 0 1 (fontified t)) . -544) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) 545) nil (26008 1768 100599 0) 0 nil])
([nil nil ((#("@builtin(position) coord: vec4<f32>," 0 1 (fontified t) 1 8 (face font-lock-builtin-face fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t) 9 17 (face font-lock-builtin-face fontified t) 17 18 (face (rainbow-delimiters-depth-2-face) fontified t) 18 19 (fontified t) 19 24 (face font-lock-variable-name-face fontified t) 24 26 (fontified t) 26 30 (face font-lock-type-face fontified t) 30 31 (face (rainbow-delimiters-depth-2-face) category c-<-as-paren-syntax fontified t c-<>-c-types-set t) 31 34 (face font-lock-type-face fontified t) 34 35 (face (rainbow-delimiters-depth-2-face) category c->-as-paren-syntax fontified t) 35 36 (fontified t)) . 475) (undo-tree-id1472 . -36)) nil (26008 1773 698369 0) 0 nil] [nil nil ((#(" " 0 1 (fontified t)) . -464) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id898 . -1) (undo-tree-id900 . -1) (undo-tree-id902 . -1) (undo-tree-id904 . -1) (undo-tree-id906 . -1) (undo-tree-id908 . -1) (undo-tree-id910 . -1) (undo-tree-id912 . -1) (undo-tree-id914 . -1) (undo-tree-id916 . -1) (undo-tree-id918 . -1) (#(" " 0 1 (fontified t)) . -465) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id923 . -1) (undo-tree-id925 . -1) (undo-tree-id927 . -1) (undo-tree-id929 . -1) (undo-tree-id931 . -1) (undo-tree-id933 . -1) (undo-tree-id935 . -1) (undo-tree-id937 . -1) (undo-tree-id939 . -1) (undo-tree-id941 . -1) (#(" " 0 1 (fontified t)) . -466) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id947 . -1) (undo-tree-id949 . -1) (undo-tree-id951 . -1) (undo-tree-id953 . -1) (undo-tree-id955 . -1) (undo-tree-id957 . -1) (undo-tree-id959 . -1) (undo-tree-id961 . -1) (undo-tree-id963 . -1) (undo-tree-id965 . -1) (#(" " 0 1 (fontified t)) . -467) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id970 . -1) (undo-tree-id972 . -1) (undo-tree-id974 . -1) (undo-tree-id976 . -1) (undo-tree-id978 . -1) (undo-tree-id980 . -1) (undo-tree-id982 . -1) (undo-tree-id984 . -1) (undo-tree-id986 . -1) (#(" " 0 1 (fontified t)) . -468) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id992 . -1) (undo-tree-id994 . -1) (undo-tree-id996 . -1) (undo-tree-id998 . -1) (undo-tree-id1000 . -1) (undo-tree-id1002 . -1) (undo-tree-id1004 . -1) (undo-tree-id1006 . -1) (undo-tree-id1008 . -1) (#(" " 0 1 (fontified t)) . -469) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1013 . -1) (undo-tree-id1015 . -1) (undo-tree-id1017 . -1) (undo-tree-id1019 . -1) (undo-tree-id1021 . -1) (undo-tree-id1023 . -1) (undo-tree-id1025 . -1) (undo-tree-id1027 . -1) (#(" " 0 1 (fontified t)) . -470) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1033 . -1) (undo-tree-id1035 . -1) (undo-tree-id1037 . -1) (undo-tree-id1039 . -1) (undo-tree-id1041 . -1) (undo-tree-id1043 . -1) (undo-tree-id1045 . -1) (undo-tree-id1047 . -1) (#(" " 0 1 (fontified t)) . -471) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1052 . -1) (undo-tree-id1054 . -1) (undo-tree-id1056 . -1) (undo-tree-id1058 . -1) (undo-tree-id1060 . -1) (undo-tree-id1062 . -1) (undo-tree-id1064 . -1) (#(" " 0 1 (fontified t)) . -472) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1070 . -1) (undo-tree-id1072 . -1) (undo-tree-id1074 . -1) (undo-tree-id1076 . -1) (undo-tree-id1078 . -1) (undo-tree-id1080 . -1) (undo-tree-id1082 . -1) (#(" " 0 1 (fontified t)) . -473) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1087 . -1) (undo-tree-id1089 . -1) (undo-tree-id1091 . -1) (undo-tree-id1093 . -1) (undo-tree-id1095 . -1) (#(" " 0 1 (fontified t)) . -474) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1100 . -1) (undo-tree-id1102 . -1) (undo-tree-id1104 . -1) (undo-tree-id1106 . -1) (undo-tree-id1108 . -1) 475) ((464 . 475)) (26008 1767 314843 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 475) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1)) nil (26008 1773 698367 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -501) (undo-tree-id762 . -1) (undo-tree-id764 . -1) (undo-tree-id766 . -1) (undo-tree-id768 . -1) (undo-tree-id770 . -1) (undo-tree-id772 . -1) (undo-tree-id774 . -1) (undo-tree-id776 . -1) (undo-tree-id778 . -1) (#(" " 0 1 (fontified t)) . -502) (undo-tree-id779 . -1) (undo-tree-id781 . -1) (undo-tree-id783 . -1) (undo-tree-id785 . -1) (undo-tree-id787 . -1) (undo-tree-id789 . -1) (undo-tree-id791 . -1) (undo-tree-id793 . -1) (#(" " 0 1 (fontified t)) . -503) (undo-tree-id795 . -1) (undo-tree-id797 . -1) (undo-tree-id799 . -1) (undo-tree-id801 . -1) (undo-tree-id803 . -1) (undo-tree-id805 . -1) (undo-tree-id807 . -1) (undo-tree-id809 . -1) (#(" " 0 1 (fontified t)) . -504) (undo-tree-id810 . -1) (undo-tree-id812 . -1) (undo-tree-id814 . -1) (undo-tree-id816 . -1) (undo-tree-id818 . -1) (undo-tree-id820 . -1) (undo-tree-id822 . -1) (#(" " 0 1 (fontified t)) . -505) (undo-tree-id824 . -1) (undo-tree-id826 . -1) (undo-tree-id828 . -1) (undo-tree-id830 . -1) (undo-tree-id832 . -1) (undo-tree-id834 . -1) (undo-tree-id836 . -1) (#(" " 0 1 (fontified t)) . -506) (undo-tree-id837 . -1) (undo-tree-id839 . -1) (undo-tree-id841 . -1) (undo-tree-id843 . -1) (undo-tree-id845 . -1) (undo-tree-id847 . -1) (#(" " 0 1 (fontified t)) . -507) (undo-tree-id849 . -1) (undo-tree-id851 . -1) (undo-tree-id853 . -1) (undo-tree-id855 . -1) (undo-tree-id857 . -1) (undo-tree-id859 . -1) (#(" " 0 1 (fontified t)) . -508) (undo-tree-id860 . -1) (undo-tree-id862 . -1) (undo-tree-id864 . -1) (undo-tree-id866 . -1) (undo-tree-id868 . -1) (#(" " 0 1 (fontified t)) . -509) (undo-tree-id870 . -1) (undo-tree-id872 . -1) (undo-tree-id874 . -1) (undo-tree-id876 . -1) (undo-tree-id878 . -1) (#(" " 0 1 (fontified t)) . -510) (undo-tree-id879 . -1) (undo-tree-id881 . -1) (undo-tree-id883 . -1) (undo-tree-id885 . -1) (#(" " 0 1 (fontified t)) . -511) (undo-tree-id887 . -1) (undo-tree-id889 . -1) (undo-tree-id891 . -1) (undo-tree-id893 . -1) 512) ((501 . 512)) (26008 1766 847364 0) 0 nil])
([nil nil ((464 . 475) (#("                      " 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t) 17 18 (fontified t) 18 19 (fontified t) 19 20 (fontified t) 20 21 (fontified t) 21 22 (fontified t)) . 464) (undo-tree-id1458 . -11) (undo-tree-id1459 . -11) (undo-tree-id1460 . -22) (undo-tree-id1461 . -22) (undo-tree-id1462 . -22) (undo-tree-id1463 . -11) (undo-tree-id1464 . -11) (undo-tree-id1465 . -11) (undo-tree-id1466 . -11) (undo-tree-id1467 . -11) (undo-tree-id1468 . -11) (undo-tree-id1469 . -11) 475) nil (26008 1773 698363 0) 0 nil])
([nil nil ((501 . 503)) ((#("  " 0 1 (fontified t) 1 2 (fontified t)) . 501)) (26008 1766 454695 0) 0 nil])
([nil nil ((#("oord: vec2<f32> = vec2<f32>([[builtin(position)]].x, [[builtin(position)]].y);" 0 4 (face font-lock-variable-name-face fontified t) 4 6 (fontified t) 6 10 (face font-lock-type-face fontified t) 10 11 (face (rainbow-delimiters-depth-2-face) fontified t category c-<-as-paren-syntax c-<>-c-types-set t) 11 14 (face font-lock-type-face fontified t) 14 15 (face (rainbow-delimiters-depth-2-face) fontified t category c->-as-paren-syntax) 15 18 (fontified t) 18 22 (face font-lock-type-face fontified t) 22 23 (face (rainbow-delimiters-depth-2-face) fontified t category c-<-as-paren-syntax c-<>-c-types-set t) 23 26 (face font-lock-type-face fontified t) 26 27 (face (rainbow-delimiters-depth-2-face) fontified t category c->-as-paren-syntax) 27 28 (face (rainbow-delimiters-depth-2-face) fontified t) 28 29 (face (rainbow-delimiters-depth-3-face) fontified t) 29 30 (face (rainbow-delimiters-depth-4-face) fontified t) 30 37 (face font-lock-builtin-face fontified t) 37 38 (face (rainbow-delimiters-depth-5-face) fontified t) 38 46 (fontified t) 46 47 (face (rainbow-delimiters-depth-5-face) fontified t) 47 48 (face (rainbow-delimiters-depth-4-face) fontified t) 48 49 (face (rainbow-delimiters-depth-3-face) fontified t rear-nonsticky t) 49 50 (fontified t) 50 52 (fontified t) 52 53 (fontified t) 53 54 (face (rainbow-delimiters-depth-3-face) fontified t) 54 55 (face (rainbow-delimiters-depth-4-face) fontified t) 55 62 (face font-lock-builtin-face fontified t) 62 63 (face (rainbow-delimiters-depth-5-face) fontified t) 63 71 (fontified t) 71 72 (face (rainbow-delimiters-depth-5-face) fontified t) 72 73 (face (rainbow-delimiters-depth-4-face) fontified t) 73 74 (face (rainbow-delimiters-depth-3-face) fontified t rear-nonsticky t) 74 75 (fontified t) 75 76 (fontified t) 76 77 (face (rainbow-delimiters-depth-2-face) fontified t) 77 78 (fontified t)) . 534) (undo-tree-id1457 . -78)) nil (26008 1773 698350 0) 0 nil])
([nil nil ((464 . 466)) ((#("  " 0 1 (fontified t) 1 2 (fontified t)) . 464)) (26008 1765 826272 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t rear-nonsticky t)) . 534) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1)) nil (26008 1773 698348 0) 0 nil])
([nil nil ((#("  let fragCoord: vec2<f32> = vec2<f32>([[builtin(position)]].x, [[builtin(position)]].y);
" 0 2 (fontified t) 2 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 15 (face font-lock-variable-name-face fontified t) 15 17 (fontified t) 17 21 (face font-lock-type-face fontified t) 21 22 (face (rainbow-delimiters-depth-2-face) fontified t category c-<-as-paren-syntax c-<>-c-types-set t) 22 25 (face font-lock-type-face fontified t) 25 26 (face (rainbow-delimiters-depth-2-face) fontified t category c->-as-paren-syntax) 26 29 (fontified t) 29 33 (face font-lock-type-face fontified t) 33 34 (face (rainbow-delimiters-depth-2-face) fontified t category c-<-as-paren-syntax c-<>-c-types-set t) 34 37 (face font-lock-type-face fontified t) 37 38 (face (rainbow-delimiters-depth-2-face) fontified t category c->-as-paren-syntax) 38 39 (face (rainbow-delimiters-depth-2-face) fontified t) 39 40 (face (rainbow-delimiters-depth-3-face) fontified t c-in-sws t c-is-sws t) 40 41 (face (rainbow-delimiters-depth-4-face) fontified t c-in-sws t) 41 48 (face font-lock-builtin-face fontified t c-in-sws t) 48 49 (face (rainbow-delimiters-depth-5-face) fontified t c-in-sws t) 49 57 (fontified t c-in-sws t) 57 58 (face (rainbow-delimiters-depth-5-face) fontified t c-in-sws t) 58 59 (face (rainbow-delimiters-depth-4-face) fontified t c-in-sws t) 59 60 (face (rainbow-delimiters-depth-3-face) fontified t c-in-sws t rear-nonsticky t) 60 61 (fontified t c-is-sws t) 61 63 (fontified t) 63 64 (fontified t) 64 65 (face (rainbow-delimiters-depth-3-face) fontified t c-is-sws t c-in-sws t) 65 66 (face (rainbow-delimiters-depth-4-face) fontified t c-in-sws t) 66 73 (face font-lock-builtin-face fontified t c-in-sws t) 73 74 (face (rainbow-delimiters-depth-5-face) fontified t c-in-sws t) 74 82 (fontified t c-in-sws t) 82 83 (face (rainbow-delimiters-depth-5-face) fontified t c-in-sws t) 83 84 (face (rainbow-delimiters-depth-4-face) fontified t c-in-sws t) 84 85 (face (rainbow-delimiters-depth-3-face) fontified t rear-nonsticky t c-in-sws t) 85 86 (fontified t c-is-sws t) 86 87 (fontified t) 87 88 (face (rainbow-delimiters-depth-2-face) fontified t) 88 89 (fontified t) 89 90 (fontified t rear-nonsticky t)) . -553) (undo-tree-id1268 . -90) (undo-tree-id1269 . -90) (undo-tree-id1271 . -64) (undo-tree-id1273 . -47) (undo-tree-id1275 . -47) (undo-tree-id1277 . -41) (undo-tree-id1279 . -48) (undo-tree-id1281 . -48) (undo-tree-id1283 . -90) (undo-tree-id1285 . -41) (undo-tree-id1287 . -90) 643 (t 26008 1511 535089 270000)) ((553 . 643)) (26008 1765 134759 0) 0 nil])
([nil nil ((#("  //    return vec4<f32>(in.color, 1.0);" 0 2 (fontified t c-is-sws t c-in-sws t) 2 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t c-is-sws t) 3 4 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 4 8 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 8 14 (face font-lock-comment-face fontified t c-in-sws t) 14 15 (face font-lock-comment-face fontified t c-in-sws t) 15 19 (face font-lock-comment-face fontified t c-in-sws t) 19 20 (face font-lock-comment-face fontified t c-in-sws t c-<>-c-types-set t) 20 23 (face font-lock-comment-face fontified t c-in-sws t) 23 24 (face font-lock-comment-face fontified t c-in-sws t) 24 25 (face font-lock-comment-face fontified t c-in-sws t) 25 38 (face font-lock-comment-face fontified t c-in-sws t) 38 39 (face font-lock-comment-face fontified t c-in-sws t) 39 40 (face font-lock-comment-face fontified t c-in-sws t)) . 534) (undo-tree-id1453 . -40)) nil (26008 1773 698343 0) 0 nil])
([nil nil ((#("  @builtin(position) coord: vec4<f32>," 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 10 (face font-lock-builtin-face fontified t) 10 11 (face (rainbow-delimiters-depth-2-face) fontified t) 11 19 (face font-lock-builtin-face fontified t) 19 20 (face (rainbow-delimiters-depth-2-face) fontified t) 20 21 (fontified t) 21 26 (face font-lock-variable-name-face fontified t) 26 28 (fontified t) 28 32 (face font-lock-type-face fontified t) 32 33 (face (rainbow-delimiters-depth-2-face) category c-<-as-paren-syntax fontified t c-<>-c-types-set t) 33 36 (face font-lock-type-face fontified t) 36 37 (face (rainbow-delimiters-depth-2-face) category c->-as-paren-syntax fontified t) 37 38 (fontified t)) . 464) (undo-tree-id1336 . -23) (undo-tree-id1338 . -26) (undo-tree-id1340 . -21) (undo-tree-id1342 . -26) (undo-tree-id1344 . -38)) ((464 . 502)) (26008 1764 441541 0) 0 nil] [nil nil ((#("  @builtin(position) coord: vec4<f32>," 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 10 (face font-lock-builtin-face fontified t) 10 11 (face (rainbow-delimiters-depth-2-face) fontified t) 11 19 (face font-lock-builtin-face fontified t) 19 20 (face (rainbow-delimiters-depth-2-face) fontified t) 20 21 (fontified t) 21 26 (face font-lock-variable-name-face fontified t) 26 28 (fontified t) 28 32 (face font-lock-type-face fontified t) 32 33 (face (rainbow-delimiters-depth-2-face) category c-<-as-paren-syntax fontified t c-<>-c-types-set t) 33 36 (face font-lock-type-face fontified t) 36 37 (face (rainbow-delimiters-depth-2-face) category c->-as-paren-syntax fontified t) 37 38 (fontified t)) . 464) (undo-tree-id1290 . -21) (undo-tree-id1291 . -26) (undo-tree-id1292 . -23) (undo-tree-id1293 . -23) (undo-tree-id1294 . -21) (undo-tree-id1295 . -26) (undo-tree-id1296 . -26) (undo-tree-id1297 . -21) (undo-tree-id1298 . -21) (undo-tree-id1299 . -26) (undo-tree-id1300 . -26) (t 26008 1526 847429 389000)) ((464 . 502)) (26008 1677 692214 0) 0 nil])
([nil nil ((#("  let fragC" 0 2 (fontified t) 2 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 11 (fontified t)) . 523) (undo-tree-id1447 . -11) (undo-tree-id1448 . -11) (undo-tree-id1449 . -11) (undo-tree-id1450 . -11) (undo-tree-id1451 . -11) (undo-tree-id1452 . -11)) nil (26008 1773 698341 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 464)) ((464 . 465)) (26008 1764 192226 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -463) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) 464) ((463 . 464)) (26008 1676 563493 0) 0 nil] [nil nil ((#("
" 0 1 (fontified t)) . 464) (undo-tree-id1289 . -1)) ((464 . 465) (t 26008 1566 35486 986000)) (26008 1566 26571 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 523) (undo-tree-id1446 . -1)) nil (26008 1773 698330 0) 0 nil])
([nil nil ((291 . 293) (291 . 293) (t 26008 1685 516536 279000)) ((#("//" 0 1 (face font-lock-comment-delimiter-face fontified nil c-in-sws t c-is-sws t) 1 2 (face font-lock-comment-delimiter-face fontified nil c-in-sws t)) . 291) (#("  " 0 2 (fontified t c-is-sws t c-in-sws t)) . 291)) (26008 1763 978675 0) 0 nil] [nil nil ((#("  in: VertexOutput," 0 1 (fontified t) 1 2 (fontified t) 2 3 (face font-lock-variable-name-face fontified t) 3 4 (face font-lock-variable-name-face fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t) 17 18 (fontified t) 18 19 (fontified t)) . 464) (undo-tree-id1331 . -18) (undo-tree-id1332 . -18) (undo-tree-id1333 . -19)) ((464 . 483)) (26008 1683 447552 0) 0 nil])
([nil nil ((291 . 293) (291 . 293)) ((#("//" 0 1 (c-in-sws t face font-lock-comment-delimiter-face c-is-sws t fontified nil) 1 2 (c-in-sws t face font-lock-comment-delimiter-face fontified nil)) . 291) (#("  " 0 2 (c-is-sws t c-in-sws t fontified t)) . 291)) (26008 1676 491383 0) 0 nil])
nil
([nil nil ((#("
" 0 1 (fontified t)) . -562) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) 563 (t 26008 1773 708037 441000)) nil (26008 1792 242722 0) 0 nil])
([nil nil ((322 . 324) (#("    " 0 1 (c-is-sws t fontified nil) 1 4 (c-is-sws t fontified nil c-in-sws t)) . 322) (326 . 328)) ((#("//" 0 1 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified nil) 1 2 (face font-lock-comment-delimiter-face fontified nil c-in-sws t)) . 326) (322 . 326) (#("  " 0 1 (c-is-sws t fontified t) 1 2 (c-is-sws t fontified t c-in-sws t)) . 322)) (26008 1763 730789 0) 0 nil])
nil
([nil nil ((322 . 324) (#("    " 0 1 (c-is-sws t fontified nil) 1 4 (c-is-sws t fontified nil)) . 322) (undo-tree-id1302 . -4) (undo-tree-id1303 . -3) (undo-tree-id1304 . -1) (undo-tree-id1305 . -4) (undo-tree-id1306 . -3) (undo-tree-id1307 . -2) (undo-tree-id1308 . -1) (undo-tree-id1309 . -4) (undo-tree-id1310 . -4) (undo-tree-id1311 . -4) (undo-tree-id1312 . -4) (undo-tree-id1313 . -4) (326 . 328)) ((#("//" 0 1 (face font-lock-comment-delimiter-face c-is-sws t fontified nil) 1 2 (face font-lock-comment-delimiter-face fontified nil)) . 326) (322 . 326) (#("  " 0 2 (c-in-sws t c-is-sws t fontified t)) . 322)) (26008 1676 485063 0) 0 nil])
([nil nil ((503 . 514) (415 . 417) (#("    " 0 3 (fontified t c-in-sws t) 3 4 (fontified t)) . 415) (361 . 363) (#("    " 0 3 (fontified t c-in-sws t) 3 4 (fontified t)) . 361) (334 . 336) (#("    " 0 1 (fontified t c-in-sws t c-is-sws t) 1 3 (fontified t c-in-sws t c-is-sws t) 3 4 (fontified t c-is-sws t)) . 334) (309 . 311) (#("    " 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . 309) (278 . 289) (247 . 258) (#("    " 0 4 (fontified t)) . 247) 226) nil (26008 1792 242717 0) 0 nil])
([nil nil ((351 . 353) (#("    " 0 4 (c-in-sws t c-is-sws t fontified nil)) . 351) (undo-tree-id1348 . -4) (355 . 357)) ((#("//" 0 1 (c-is-sws t face font-lock-comment-delimiter-face fontified nil c-in-sws t) 1 2 (face font-lock-comment-delimiter-face fontified nil c-in-sws t)) . 355) (351 . 355) (#("  " 0 1 (c-is-sws t fontified t) 1 2 (c-is-sws t fontified t c-in-sws t)) . 351)) (26008 1763 351679 0) 0 nil])
nil
([nil nil ((#("
" 0 1 (fontified t)) . -246) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (#(" " 0 1 (fontified t)) . -247) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (#(" " 0 1 (fontified t)) . -248) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (#(" " 0 1 (fontified t)) . -249) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (#(" " 0 1 (fontified t)) . -250) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (#(" " 0 1 (fontified t)) . -251) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (#(" " 0 1 (fontified t)) . -252) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (#(" " 0 1 (fontified t)) . -253) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (#(" " 0 1 (fontified t)) . -254) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (undo-tree-id1802 . -1) (#(" " 0 1 (fontified t)) . -255) (undo-tree-id1803 . -1) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (#(" " 0 1 (fontified t)) . -256) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (#(" " 0 1 (fontified t)) . -257) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) 258) nil (26008 1792 242704 0) 0 nil])
([nil nil ((407 . 409) (#("    " 0 4 (c-is-sws t c-in-sws t fontified nil)) . 407) (undo-tree-id1346 . -4) (411 . 413)) ((#("//" 0 1 (c-is-sws t face font-lock-comment-delimiter-face fontified nil c-in-sws t) 1 2 (face font-lock-comment-delimiter-face fontified nil c-in-sws t)) . 411) (407 . 411) (#("  " 0 1 (c-is-sws t fontified t) 1 2 (c-is-sws t fontified t c-in-sws t)) . 407)) (26008 1763 175621 0) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -264) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (#("
" 0 1 (fontified t)) . -265) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (#(" " 0 1 (fontified t)) . -266) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (#(" " 0 1 (fontified t)) . -267) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (#(" " 0 1 (fontified t)) . -268) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (#(" " 0 1 (fontified t)) . -269) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (#(" " 0 1 (fontified t)) . -270) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (#(" " 0 1 (fontified t)) . -271) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (#(" " 0 1 (fontified t)) . -272) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (#(" " 0 1 (fontified t)) . -273) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (#(" " 0 1 (fontified t)) . -274) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (#(" " 0 1 (fontified t)) . -275) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (#(" " 0 1 (fontified t)) . -276) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) 277) nil (26008 1792 242521 0) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-comment-delimiter-face c-in-sws t fontified t)) . -295) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1352 . -1) (undo-tree-id1354 . -1) (undo-tree-id1356 . -1) (undo-tree-id1358 . -1) (#(" " 0 1 (face font-lock-comment-delimiter-face c-in-sws t fontified t)) . -296) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1363 . -1) (undo-tree-id1365 . -1) (undo-tree-id1367 . -1) (undo-tree-id1369 . -1) (#(" " 0 1 (face font-lock-comment-delimiter-face fontified t)) . -297) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1373 . -1) (undo-tree-id1375 . -1) (undo-tree-id1377 . -1) (#(" " 0 1 (c-in-sws t face font-lock-comment-delimiter-face fontified t)) . -298) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1382 . -1) (undo-tree-id1384 . -1) (undo-tree-id1386 . -1) 299 (t 26008 1696 423051 198000)) ((295 . 299)) (26008 1762 989003 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -457) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1) (undo-tree-id2164 . -1) (#(" " 0 1 (fontified t)) . -458) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) (#(" " 0 1 (fontified t)) . -459) (undo-tree-id2173 . -1) (undo-tree-id2174 . -1) (undo-tree-id2175 . -1) (undo-tree-id2176 . -1) (undo-tree-id2177 . -1) (undo-tree-id2178 . -1) (undo-tree-id2179 . -1) 460 (t 26008 1792 253093 186000)) nil (26008 1801 128138 0) 0 nil])
([nil nil ((464 . 475) (464 . 466) (t 26008 1699 108951 93000)) ((#("//" 0 1 (face font-lock-comment-delimiter-face fontified nil c-in-sws t c-is-sws t) 1 2 (face font-lock-comment-delimiter-face fontified nil c-in-sws t)) . 464) (#("           " 0 11 (fontified t c-is-sws t c-in-sws t)) . 464)) (26008 1762 788699 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -448) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (#(" " 0 1 (fontified t)) . -449) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (#(" " 0 1 (fontified t)) . -450) (undo-tree-id2059 . -1) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) (undo-tree-id2071 . -1) (undo-tree-id2072 . -1) (undo-tree-id2073 . -1) (undo-tree-id2074 . -1) (undo-tree-id2075 . -1) (#(" " 0 1 (fontified t)) . -451) (undo-tree-id2076 . -1) (undo-tree-id2077 . -1) (undo-tree-id2078 . -1) (undo-tree-id2079 . -1) (undo-tree-id2080 . -1) (undo-tree-id2081 . -1) (undo-tree-id2082 . -1) (undo-tree-id2083 . -1) (undo-tree-id2084 . -1) (undo-tree-id2085 . -1) (undo-tree-id2086 . -1) (undo-tree-id2087 . -1) (undo-tree-id2088 . -1) (undo-tree-id2089 . -1) (undo-tree-id2090 . -1) (undo-tree-id2091 . -1) (#(" " 0 1 (fontified t)) . -452) (undo-tree-id2092 . -1) (undo-tree-id2093 . -1) (undo-tree-id2094 . -1) (undo-tree-id2095 . -1) (undo-tree-id2096 . -1) (undo-tree-id2097 . -1) (undo-tree-id2098 . -1) (undo-tree-id2099 . -1) (undo-tree-id2100 . -1) (undo-tree-id2101 . -1) (undo-tree-id2102 . -1) (undo-tree-id2103 . -1) (undo-tree-id2104 . -1) (undo-tree-id2105 . -1) (undo-tree-id2106 . -1) (#(" " 0 1 (fontified t)) . -453) (undo-tree-id2107 . -1) (undo-tree-id2108 . -1) (undo-tree-id2109 . -1) (undo-tree-id2110 . -1) (undo-tree-id2111 . -1) (undo-tree-id2112 . -1) (undo-tree-id2113 . -1) (undo-tree-id2114 . -1) (undo-tree-id2115 . -1) (undo-tree-id2116 . -1) (undo-tree-id2117 . -1) (undo-tree-id2118 . -1) (undo-tree-id2119 . -1) (undo-tree-id2120 . -1) (#(" " 0 1 (fontified t)) . -454) (undo-tree-id2121 . -1) (undo-tree-id2122 . -1) (undo-tree-id2123 . -1) (undo-tree-id2124 . -1) (undo-tree-id2125 . -1) (undo-tree-id2126 . -1) (undo-tree-id2127 . -1) (undo-tree-id2128 . -1) (undo-tree-id2129 . -1) (undo-tree-id2130 . -1) (undo-tree-id2131 . -1) (undo-tree-id2132 . -1) (undo-tree-id2133 . -1) (#(" " 0 1 (fontified t)) . -455) (undo-tree-id2134 . -1) (undo-tree-id2135 . -1) (undo-tree-id2136 . -1) (undo-tree-id2137 . -1) (undo-tree-id2138 . -1) (undo-tree-id2139 . -1) (undo-tree-id2140 . -1) (undo-tree-id2141 . -1) (undo-tree-id2142 . -1) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (undo-tree-id2145 . -1) (#(" " 0 1 (fontified t)) . -456) (undo-tree-id2146 . -1) (undo-tree-id2147 . -1) (undo-tree-id2148 . -1) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) 457) nil (26008 1901 474504 0) 0 nil])
([nil nil ((463 . 475) (t 26008 1704 11437 998000)) ((#("
           " 0 1 (fontified t) 1 12 (fontified t)) . 463) (undo-tree-id1440 . -12) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -12) (undo-tree-id1445 . -12)) (26008 1762 618725 0) 0 nil])
([nil nil ((#(",
           " 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t)) . 464) (undo-tree-id2 . -13) (undo-tree-id3 . -13) (undo-tree-id4 . -2) (undo-tree-id5 . -13) (undo-tree-id6 . -13) (undo-tree-id7 . -13)) ((464 . 477)) (26008 1904 756405 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 514 . 515) (nil fontified nil 513 . 515) (nil fontified nil 512 . 513) (nil category c->-as-paren-syntax 512 . 513) (nil fontified nil 509 . 512) (nil fontified nil 508 . 509) (nil category c-<-as-paren-syntax 508 . 509) (nil fontified nil 475 . 508) (475 . 515)) ((#("   @builtin(position) coord: vec4<f32>,
" 0 3 (fontified nil) 3 4 (fontified nil) 4 11 (face font-lock-builtin-face fontified nil) 11 12 (face (rainbow-delimiters-depth-2-face) fontified nil) 12 20 (face font-lock-builtin-face fontified nil) 20 21 (face (rainbow-delimiters-depth-2-face) fontified nil) 21 22 (fontified nil) 22 27 (face font-lock-variable-name-face fontified nil) 27 29 (fontified nil) 29 33 (face font-lock-type-face fontified nil) 33 34 (face (rainbow-delimiters-depth-2-face) fontified nil category c-<-as-paren-syntax c-<>-c-types-set t) 34 37 (face font-lock-type-face fontified nil) 37 38 (face (rainbow-delimiters-depth-2-face) fontified nil category c->-as-paren-syntax) 38 39 (fontified nil) 39 40 (fontified nil rear-nonsticky nil)) . 475) (nil rear-nonsticky t 514 . 515)) (26008 1762 440674 0) 0 nil])
([nil nil ((apply -36 227 574 undo--wrap-and-run-primitive-undo 227 574 ((569 . 572) (524 . 527) (464 . 467) (451 . 454) (428 . 431) (422 . 425) (405 . 408) (348 . 351) (318 . 321) (290 . 293) (238 . 241) (227 . 230)))) nil (26008 1913 48118 0) 0 nil] [nil nil ((apply -36 227 574 undo--wrap-and-run-primitive-undo 227 574 ((569 . 572) (524 . 527) (464 . 467) (451 . 454) (428 . 431) (422 . 425) (405 . 408) (348 . 351) (318 . 321) (290 . 293) (238 . 241) (227 . 230)))) ((apply 36 227 538 undo--wrap-and-run-primitive-undo 227 538 ((#("// " 0 1 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 1 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . 227) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . 238) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . 290) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . 318) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . 348) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . 405) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . 422) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . 428) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . 451) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . 464) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . 524) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . 569) 574))) (26008 1892 627132 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -463) (undo-tree-id1392 . -1) (undo-tree-id1394 . -1) 464) ((463 . 464)) (26008 1762 74356 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 883 . 884) (nil fontified nil 883 . 884) (nil fontified nil 879 . 883) (nil fontified nil 878 . 879) (nil fontified nil 860 . 878) (nil fontified nil 859 . 860) (nil fontified nil 858 . 859) (nil category c->-as-paren-syntax 858 . 859) (nil fontified nil 855 . 858) (nil fontified nil 854 . 855) (nil category c-<-as-paren-syntax 854 . 855) (nil fontified nil 850 . 854) (nil fontified nil 849 . 850) (nil fontified nil 843 . 849) (nil fontified nil 841 . 843) (nil fontified nil 840 . 841) (nil fontified nil 839 . 840) (nil fontified nil 838 . 839) (nil fontified nil 837 . 838) (nil category c->-as-paren-syntax 837 . 838) (nil fontified nil 834 . 837) (nil fontified nil 833 . 834) (nil category c-<-as-paren-syntax 833 . 834) (nil fontified nil 829 . 833) (nil fontified nil 828 . 829) (nil fontified nil 827 . 828) (nil fontified nil 826 . 827) (nil fontified nil 825 . 826) (nil fontified nil 817 . 825) (nil fontified nil 812 . 817) (nil fontified nil 811 . 812) (nil fontified nil 797 . 811) (nil fontified nil 795 . 797) (nil fontified nil 794 . 795) (nil fontified nil 787 . 794) (nil fontified nil 786 . 787) (nil fontified nil 784 . 786) (nil fontified nil 783 . 784) (nil fontified nil 775 . 783) (nil fontified nil 774 . 775) (nil fontified nil 773 . 774) (nil fontified nil 757 . 773) (nil fontified nil 755 . 757) (nil fontified nil 754 . 755) (nil fontified nil 753 . 754) (nil fontified nil 752 . 753) (nil fontified nil 751 . 752) (nil fontified nil 745 . 751) (nil fontified nil 739 . 745) (nil fontified nil 737 . 739) (nil fontified nil 735 . 737) (nil fontified nil 734 . 735) (nil fontified nil 715 . 734) (nil fontified nil 714 . 715) (nil fontified nil 713 . 714) (nil category c->-as-paren-syntax 713 . 714) (nil fontified nil 710 . 713) (nil fontified nil 709 . 710) (nil category c-<-as-paren-syntax 709 . 710) (nil fontified nil 705 . 709) (nil fontified nil 702 . 705) (nil fontified nil 689 . 702) (nil fontified nil 685 . 689) (nil fontified nil 683 . 685) (nil fontified nil 667 . 683) (nil fontified nil 662 . 667) (nil fontified nil 658 . 662) (nil fontified nil 656 . 658) (nil fontified nil 640 . 656) (nil fontified nil 637 . 640) (nil fontified nil 636 . 637) (nil fontified nil 633 . 636) (nil fontified nil 631 . 633) (nil fontified nil 630 . 631) (nil fontified nil 629 . 630) (nil fontified nil 612 . 629) (nil fontified nil 611 . 612) (nil fontified nil 598 . 611) (nil fontified nil 593 . 598) (nil fontified nil 592 . 593) (nil fontified nil 585 . 592) (nil fontified nil 584 . 585) (nil fontified nil 582 . 584) (nil fontified nil 581 . 582) (nil fontified nil 575 . 581) (nil fontified nil 574 . 575) (574 . 884)) nil (26008 1913 48113 0) 0 nil])
([nil nil ((574 . 575)) ((#("
" 0 1 (c-is-sws t fontified t)) . 574) (undo-tree-id0 . -1) (undo-tree-id1 . -1)) (26008 1892 622225 0) 0 nil])
([nil nil ((464 . 475) (#("              " 0 11 (fontified nil) 11 14 (fontified nil)) . 464) (undo-tree-id1387 . -11) (undo-tree-id1389 . -11) (undo-tree-id1391 . -11) (463 . 464)) ((#("
" 0 1 (fontified t)) . 463) (undo-tree-id1439 . -1) (464 . 478) (#("           " 0 11 (fontified t)) . 464)) (26008 1761 805510 0) 0 nil])
([nil nil ((884 . 885)) nil (26008 1945 413743 0) 0 nil])
nil
([nil nil ((#("VertexOutput" 0 12 (fontified t)) . -276) (undo-tree-id1431 . -12) (undo-tree-id1432 . -12) (undo-tree-id1433 . -12) (undo-tree-id1434 . -12) (undo-tree-id1435 . -12) (undo-tree-id1436 . -12) (undo-tree-id1437 . -12) (undo-tree-id1438 . -12) 288 (t 26008 1739 51876 309000)) ((276 . 288)) (26008 1761 620127 0) 0 nil])
([nil nil ((840 . 843) (t 26008 1946 960239 296000)) nil (26008 2010 690203 0) 0 nil] [nil nil ((#("VertexOutput" 0 12 (fontified t)) . -616) (undo-tree-id75 . -12) (undo-tree-id76 . -12) (undo-tree-id77 . -12) (undo-tree-id78 . -12) (undo-tree-id79 . -12) (undo-tree-id80 . -12) (undo-tree-id81 . -12) (undo-tree-id82 . -12) 628 (t 26008 1913 80324 635000)) ((616 . 628)) (26008 1944 592599 0) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -273) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (#(">" 0 1 (fontified t)) . -274) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (#(" " 0 1 (fontified t)) . -275) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) 276) ((273 . 276) (t 26008 1759 11694 461000)) (26008 1759 2100 0) 0 nil])
([nil nil ((843 . 848)) nil (26008 2010 690201 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -612) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (#("-" 0 1 (fontified t)) . -613) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (#(">" 0 1 (fontified t)) . -614) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (#(" " 0 1 (fontified t)) . -615) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) 616) ((612 . 616)) (26008 1944 371213 0) 0 nil])
nil
([nil nil ((#("s" 0 1 (fontified t)) . -847) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) 848) nil (26008 2010 690200 0) 0 nil])
([nil nil ((#("  var out: VertexOutput;
  out.color = model.color;
  out.clip_position = vec4<f32>(model.position, 1.0);
  return out;" 0 2 (fontified t) 2 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 9 (face font-lock-variable-name-face fontified t) 9 25 (fontified t) 25 27 (fontified t) 27 31 (fontified t) 31 36 (face font-lock-variable-name-face fontified t) 36 52 (fontified t) 52 54 (fontified t) 54 58 (fontified t) 58 71 (face font-lock-variable-name-face fontified t) 71 74 (fontified t) 74 78 (face font-lock-type-face fontified t) 78 79 (fontified t c-<>-c-types-set t) 79 82 (face font-lock-type-face fontified t) 82 83 (fontified t) 83 84 (face (rainbow-delimiters-depth-2-face) fontified t) 84 103 (fontified t) 103 104 (face (rainbow-delimiters-depth-2-face) fontified t) 104 106 (fontified t) 106 108 (fontified t) 108 114 (face font-lock-keyword-face fontified t) 114 119 (fontified t)) . 615) (undo-tree-id8 . -119) (undo-tree-id9 . -119) (undo-tree-id10 . -119) (undo-tree-id11 . -119) (undo-tree-id12 . -64) (undo-tree-id13 . -63) (undo-tree-id14 . -61) (undo-tree-id15 . -33) (undo-tree-id16 . -32) (undo-tree-id17 . -31) (undo-tree-id18 . -30) (undo-tree-id19 . -4) (undo-tree-id20 . -3) (undo-tree-id21 . -2) (undo-tree-id22 . -1) (undo-tree-id23 . -119) (undo-tree-id24 . -119)) ((615 . 734) (t 26008 1924 450991 631000)) (26008 1924 440765 0) 0 nil])
([nil nil ((847 . 848)) nil (26008 2010 690195 0) 0 nil])
nil
([nil nil ((#("s" 0 1 (fontified t)) . -847) (undo-tree-id111 . -1) (undo-tree-id112 . -1) 848) nil (26008 2010 690194 0) 0 nil])
([nil nil ((847 . 849)) nil (26008 2010 690191 0) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -847) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (#("o" 0 1 (fontified t)) . -848) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) 849) nil (26008 2010 690189 0) 0 nil])
([nil nil ((847 . 849)) nil (26008 2010 690178 0) 0 nil])
([nil nil ((#("C" 0 1 (fontified t)) . -847) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (#("o" 0 1 (fontified t)) . -848) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) 849) nil (26008 2010 690177 0) 0 nil])
([nil nil ((847 . 855)) nil (26008 2010 690166 0) 0 nil])
([nil nil ((855 . 856)) nil (26008 2010 690165 0) 0 nil])
([nil nil ((#("v" 0 1 (fontified t)) . -855) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) 856) nil (26008 2010 690164 0) 0 nil])
([nil nil ((855 . 856)) nil (26008 2010 690159 0) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -855) (undo-tree-id85 . -1) (undo-tree-id86 . -1) 856) nil (26008 2010 690157 0) 0 nil])
([nil nil ((855 . 869)) nil (26008 2010 690154 0) 0 nil])
([nil nil ((869 . 875)) nil (26008 2010 690153 0) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -874) (undo-tree-id83 . -1) (undo-tree-id84 . -1) 875) nil (26008 2010 690151 0) 0 nil])
([nil nil ((874 . 875)) nil (26008 2010 690139 0) 0 nil])
([nil nil ((877 . 879) (#("  " 0 2 (fontified nil)) . 876) (undo-tree-id179 . -2) (undo-tree-id180 . -2) (undo-tree-id181 . -2) (875 . 879) (t 26008 2010 700859 111000)) nil (26008 2372 53143 0) 0 nil])
([nil nil ((#("@vertex" 0 1 (c-is-sws t fontified t) 1 7 (face font-lock-constant-face fontified t)) . 574) (undo-tree-id275 . -7)) nil (26008 2377 572350 0) 0 nil] [nil nil ((#("// }
@vertex
fn vs_main(model: VertexInput) -> VertexOutput {
  var out: VertexOutput;
  out.color = model.color;
  out.clip_position = vec4<f32>(model.position, 1.0);
  return out;
}

// Fragment shader

@fragment
fn fs_main(in: VertexOutput) -> @location(0) vec4<f32> {
  let coord = in.clip_position.xy;

  
  return vec4<f32>(1.0, 1.0, 1.0, 1.0);  
}" 0 1 (c-is-sws t face font-lock-comment-delimiter-face fontified t) 1 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 3 4 (face font-lock-comment-face c-in-sws t fontified t) 4 5 (c-in-sws t face font-lock-comment-face fontified t) 5 6 (fontified t c-is-sws t) 6 12 (face font-lock-constant-face fontified t) 12 13 (fontified t) 13 15 (face font-lock-keyword-face fontified t) 15 16 (fontified t) 16 23 (face font-lock-function-name-face fontified t) 23 24 (face (rainbow-delimiters-depth-1-face) fontified t) 24 29 (face font-lock-variable-name-face fontified t) 29 42 (fontified t) 42 43 (face (rainbow-delimiters-depth-1-face) fontified t) 43 44 (fontified t) 44 45 (fontified t) 45 46 (fontified t) 46 47 (fontified t) 47 59 (fontified t) 59 60 (fontified t) 60 61 (face (rainbow-delimiters-depth-1-face) fontified t) 61 62 (fontified t) 62 64 (fontified t) 64 67 (face font-lock-keyword-face fontified t) 67 68 (fontified t) 68 71 (face font-lock-variable-name-face fontified t) 71 87 (fontified t) 87 89 (fontified t) 89 93 (fontified t) 93 98 (face font-lock-variable-name-face fontified t) 98 114 (fontified t) 114 116 (fontified t) 116 120 (fontified t) 120 133 (face font-lock-variable-name-face fontified t) 133 136 (fontified t) 136 140 (face font-lock-type-face fontified t) 140 141 (face (rainbow-delimiters-depth-2-face) fontified t category c-<-as-paren-syntax c-<>-c-types-set t) 141 144 (face font-lock-type-face fontified t) 144 145 (face (rainbow-delimiters-depth-2-face) fontified t category c->-as-paren-syntax) 145 146 (face (rainbow-delimiters-depth-2-face) fontified t) 146 165 (fontified t) 165 166 (face (rainbow-delimiters-depth-2-face) fontified t) 166 168 (fontified t) 168 170 (fontified t) 170 176 (face font-lock-keyword-face fontified t) 176 181 (fontified t) 181 182 (fontified t) 182 183 (face (rainbow-delimiters-depth-1-face) fontified t) 183 184 (fontified t) 184 185 (fontified t) 185 186 (face font-lock-comment-delimiter-face fontified t c-in-sws t c-is-sws t) 186 188 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 188 204 (face font-lock-comment-face fontified t c-in-sws t) 204 205 (fontified t c-in-sws t) 205 206 (fontified t c-is-sws t) 206 214 (face font-lock-constant-face fontified t) 214 215 (fontified t) 215 217 (face font-lock-keyword-face fontified t) 217 218 (fontified t) 218 225 (face font-lock-function-name-face fontified t) 225 226 (face (rainbow-delimiters-depth-1-face) fontified t) 226 228 (face font-lock-variable-name-face fontified t) 228 242 (fontified t) 242 243 (face (rainbow-delimiters-depth-1-face) fontified t) 243 248 (fontified t) 248 256 (face font-lock-builtin-face fontified t) 256 257 (face (rainbow-delimiters-depth-1-face) fontified t) 257 258 (fontified t) 258 259 (face (rainbow-delimiters-depth-1-face) fontified t) 259 260 (fontified t) 260 264 (face font-lock-type-face fontified t) 264 265 (face (rainbow-delimiters-depth-1-face) category c-<-as-paren-syntax fontified t c-<>-c-types-set t) 265 268 (face font-lock-type-face fontified t) 268 269 (face (rainbow-delimiters-depth-1-face) category c->-as-paren-syntax fontified t) 269 270 (fontified t) 270 271 (face (rainbow-delimiters-depth-1-face) fontified t) 271 272 (fontified t) 272 274 (fontified t) 274 275 (face font-lock-keyword-face fontified t) 275 276 (face font-lock-keyword-face fontified t) 276 277 (face font-lock-keyword-face fontified t) 277 278 (fontified t) 278 279 (face font-lock-variable-name-face fontified t) 279 280 (face font-lock-variable-name-face fontified t) 280 281 (face font-lock-variable-name-face fontified t) 281 282 (face font-lock-variable-name-face fontified t) 282 283 (face font-lock-variable-name-face fontified t) 283 284 (fontified t) 284 285 (fontified t) 285 286 (fontified t) 286 287 (fontified t) 287 288 (fontified t) 288 289 (fontified t) 289 290 (fontified t) 290 291 (fontified t) 291 292 (fontified t) 292 293 (fontified t) 293 294 (fontified t) 294 295 (fontified t) 295 296 (fontified t) 296 297 (fontified t) 297 298 (fontified t) 298 299 (fontified t) 299 300 (fontified t) 300 301 (fontified t) 301 302 (fontified t) 302 303 (fontified t) 303 304 (fontified t) 304 305 (fontified t) 305 306 (fontified t) 306 307 (fontified t) 307 310 (fontified t) 310 311 (fontified t) 311 313 (fontified t) 313 319 (face font-lock-keyword-face fontified t) 319 320 (fontified t) 320 324 (face font-lock-type-face fontified t) 324 325 (face (rainbow-delimiters-depth-2-face) fontified t category c-<-as-paren-syntax c-<>-c-types-set t) 325 328 (face font-lock-type-face fontified t) 328 329 (face (rainbow-delimiters-depth-2-face) fontified t category c->-as-paren-syntax) 329 330 (face (rainbow-delimiters-depth-2-face) fontified t) 330 348 (fontified t) 348 349 (face (rainbow-delimiters-depth-2-face) fontified t) 349 350 (fontified t) 350 353 (fontified t) 353 354 (face (rainbow-delimiters-depth-1-face) fontified t rear-nonsticky t)) . 569) (undo-tree-id117 . -5) (undo-tree-id118 . -354) (undo-tree-id119 . -4) (undo-tree-id120 . -59) (undo-tree-id121 . -5) (undo-tree-id122 . -271) (undo-tree-id123 . -271) (undo-tree-id124 . -278) (undo-tree-id125 . -278) (undo-tree-id126 . -278) (undo-tree-id127 . -278) (undo-tree-id128 . -278) (undo-tree-id129 . -278) (undo-tree-id130 . -278) (undo-tree-id131 . -278) (undo-tree-id132 . -278) (undo-tree-id133 . -278) (undo-tree-id134 . -278) (undo-tree-id135 . -278) (undo-tree-id136 . -278) (undo-tree-id137 . -278) (undo-tree-id138 . -286) (undo-tree-id139 . -286) (undo-tree-id140 . -286) (undo-tree-id141 . -286) (undo-tree-id142 . -305) (undo-tree-id143 . -306) (undo-tree-id144 . -306) (undo-tree-id145 . 48) (undo-tree-id146 . -307) (undo-tree-id147 . -307) (undo-tree-id148 . 47) (undo-tree-id149 . -310) (undo-tree-id150 . -310) (undo-tree-id151 . -4) (undo-tree-id152 . -4) (undo-tree-id153 . -4) (undo-tree-id154 . -4) (undo-tree-id155 . -4) (undo-tree-id156 . -4) (undo-tree-id157 . -307) (undo-tree-id158 . -307) (undo-tree-id159 . -307) (undo-tree-id160 . -307) (undo-tree-id161 . -307) (undo-tree-id162 . -307) (undo-tree-id163 . -310) (undo-tree-id164 . -310) (undo-tree-id165 . -310) (undo-tree-id166 . -310) (undo-tree-id167 . -310) (undo-tree-id168 . -310) (undo-tree-id169 . -354) (undo-tree-id170 . -354) (undo-tree-id171 . -354) (undo-tree-id172 . -317) (undo-tree-id173 . -276) (undo-tree-id174 . -206) (undo-tree-id175 . -204) (undo-tree-id176 . -354) (undo-tree-id177 . -181) (undo-tree-id178 . -354) 574) ((569 . 923)) (26008 2372 46438 0) 0 nil])
([nil nil ((#("
" 0 1 (c-is-sws t fontified t)) . 574) (undo-tree-id274 . -1)) nil (26008 2377 572348 0) 0 nil])
nil
([nil nil ((#("fn vs_main(model: VertexInput) -> VertexOutput {" 0 1 (face font-lock-keyword-face c-is-sws t fontified t) 1 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t) 3 10 (face font-lock-function-name-face fontified t) 10 11 (face (rainbow-delimiters-depth-1-face) fontified t) 11 16 (face font-lock-variable-name-face fontified t) 16 29 (fontified t) 29 30 (face (rainbow-delimiters-depth-1-face) fontified t) 30 31 (fontified t) 31 32 (fontified t) 32 33 (fontified t) 33 34 (fontified t) 34 46 (fontified t) 46 47 (fontified t) 47 48 (face (rainbow-delimiters-depth-1-face) fontified t)) . 574) (undo-tree-id272 . -46) (undo-tree-id273 . -48)) nil (26008 2377 572346 0) 0 nil])
([nil nil ((#("
" 0 1 (c-is-sws t fontified t)) . 574) (undo-tree-id271 . -1)) nil (26008 2377 572343 0) 0 nil])
([nil nil ((#("  var out: VertexOutput;" 0 2 (c-is-sws t fontified t) 2 3 (face font-lock-keyword-face c-is-sws t fontified t) 3 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 9 (face font-lock-variable-name-face fontified t) 9 24 (fontified t)) . 574) (undo-tree-id270 . -24)) nil (26008 2377 572340 0) 0 nil])
([nil nil ((#("
" 0 1 (c-is-sws t fontified t)) . 574) (undo-tree-id269 . -1)) nil (26008 2377 572338 0) 0 nil])
([nil nil ((#("  out.color = model.color;" 0 2 (c-is-sws t fontified t) 2 3 (c-is-sws t fontified t) 3 6 (fontified t) 6 11 (face font-lock-variable-name-face fontified t) 11 26 (fontified t)) . 574) (undo-tree-id268 . -26)) nil (26008 2377 572336 0) 0 nil])
([nil nil ((#("
" 0 1 (c-is-sws t fontified t)) . 574) (undo-tree-id267 . -1)) nil (26008 2377 572334 0) 0 nil])
([nil nil ((#("  out.clip_position = vec4<f32>(model.position, 1.0);" 0 2 (c-is-sws t fontified t) 2 3 (c-is-sws t fontified t) 3 6 (fontified t) 6 19 (face font-lock-variable-name-face fontified t) 19 22 (fontified t) 22 26 (face font-lock-type-face fontified t) 26 27 (face (rainbow-delimiters-depth-1-face) category c-<-as-paren-syntax fontified t c-<>-c-types-set t) 27 30 (face font-lock-type-face fontified t) 30 31 (face (rainbow-delimiters-depth-1-face) category c->-as-paren-syntax fontified t) 31 32 (face (rainbow-delimiters-depth-1-face) fontified t) 32 51 (fontified t) 51 52 (face (rainbow-delimiters-depth-1-face) fontified t) 52 53 (fontified t)) . 574) (undo-tree-id266 . -53)) nil (26008 2377 572332 0) 0 nil])
([nil nil ((#("
" 0 1 (c-is-sws t fontified t)) . 574) (undo-tree-id265 . -1)) nil (26008 2377 572330 0) 0 nil])
([nil nil ((#("  return out;" 0 2 (c-is-sws t fontified t) 2 3 (face font-lock-keyword-face c-is-sws t fontified t) 3 8 (face font-lock-keyword-face fontified t) 8 13 (fontified t)) . 574) (undo-tree-id263 . -13) (undo-tree-id264 . -13)) nil (26008 2377 572328 0) 0 nil])
([nil nil ((#("
" 0 1 (c-is-sws t fontified t)) . 574) (undo-tree-id262 . -1)) nil (26008 2377 572325 0) 0 nil])
([nil nil ((#("}" 0 1 (face (rainbow-delimiters-unmatched-face) c-is-sws t fontified t)) . 574) (undo-tree-id261 . -1)) nil (26008 2377 572323 0) 0 nil])
([nil nil ((#("
" 0 1 (c-is-sws t fontified t)) . 574) (undo-tree-id260 . -1)) nil (26008 2377 572321 0) 0 nil])
([nil nil ((#("
" 0 1 (c-is-sws t fontified t)) . 574) (undo-tree-id259 . -1)) nil (26008 2377 572319 0) 0 nil])
([nil nil ((#("// Fragment shader" 0 1 (face font-lock-comment-delimiter-face c-in-sws t c-is-sws t fontified t) 1 3 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 3 18 (face font-lock-comment-face c-in-sws t fontified t)) . 574) (undo-tree-id258 . -18)) nil (26008 2377 572317 0) 0 nil])
([nil nil ((#("
" 0 1 (c-is-sws t fontified t)) . 574) (undo-tree-id256 . -1) (undo-tree-id257 . -1)) nil (26008 2377 572315 0) 0 nil])
([nil nil ((#("
" 0 1 (c-is-sws t fontified t)) . 574) (undo-tree-id255 . -1)) nil (26008 2377 572312 0) 0 nil])
([nil nil ((#("@fragment" 0 1 (c-is-sws t fontified t) 1 9 (face font-lock-constant-face fontified t)) . 574) (undo-tree-id253 . -1) (undo-tree-id254 . -9)) nil (26008 2377 572309 0) 0 nil])
([nil nil ((#("
" 0 1 (c-is-sws t fontified t)) . 574) (undo-tree-id252 . -1)) nil (26008 2377 572306 0) 0 nil])
([nil nil ((#("fn fs_main(in: VertexOutput) -> @location(0) vec4<f32> {" 0 1 (face font-lock-keyword-face c-is-sws t fontified t) 1 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t) 3 10 (face font-lock-function-name-face fontified t) 10 11 (face (rainbow-delimiters-depth-1-face) fontified t) 11 13 (face font-lock-variable-name-face fontified t) 13 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-1-face) fontified t) 28 33 (fontified t) 33 41 (face font-lock-builtin-face fontified t) 41 42 (face (rainbow-delimiters-depth-1-face) fontified t) 42 43 (fontified t) 43 44 (face (rainbow-delimiters-depth-1-face) fontified t) 44 45 (fontified t) 45 49 (face font-lock-type-face fontified t) 49 50 (face (rainbow-delimiters-depth-1-face) category c-<-as-paren-syntax fontified t c-<>-c-types-set t) 50 53 (face font-lock-type-face fontified t) 53 54 (face (rainbow-delimiters-depth-1-face) category c->-as-paren-syntax fontified t) 54 55 (fontified t) 55 56 (face (rainbow-delimiters-depth-1-face) fontified t)) . 574) (undo-tree-id249 . -56) (undo-tree-id250 . -56) (undo-tree-id251 . -56)) nil (26008 2377 572304 0) 0 nil])
([nil nil ((#("
" 0 1 (c-is-sws t fontified t)) . 574) (undo-tree-id248 . -1)) nil (26008 2377 572300 0) 0 nil])
([nil nil ((#("  let coord = in.clip_position.xy;" 0 2 (c-is-sws t fontified t) 2 3 (face font-lock-keyword-face c-is-sws t fontified t) 3 4 (face font-lock-keyword-face fontified t) 4 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 7 (face font-lock-variable-name-face fontified t) 7 8 (face font-lock-variable-name-face fontified t) 8 9 (face font-lock-variable-name-face fontified t) 9 10 (face font-lock-variable-name-face fontified t) 10 11 (face font-lock-variable-name-face fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t) 17 18 (fontified t) 18 19 (fontified t) 19 20 (fontified t) 20 21 (fontified t) 21 22 (fontified t) 22 23 (fontified t) 23 24 (fontified t) 24 25 (fontified t) 25 26 (fontified t) 26 27 (fontified t) 27 28 (fontified t) 28 29 (fontified t) 29 30 (fontified t) 30 31 (fontified t) 31 32 (fontified t) 32 33 (fontified t) 33 34 (fontified t)) . 574) (undo-tree-id225 . -6) (undo-tree-id226 . -6) (undo-tree-id227 . -6) (undo-tree-id228 . -6) (undo-tree-id229 . -6) (undo-tree-id230 . -6) (undo-tree-id231 . -6) (undo-tree-id232 . -6) (undo-tree-id233 . -6) (undo-tree-id234 . -6) (undo-tree-id235 . -6) (undo-tree-id236 . -6) (undo-tree-id237 . -6) (undo-tree-id238 . -6) (undo-tree-id239 . -14) (undo-tree-id240 . -14) (undo-tree-id241 . -14) (undo-tree-id242 . -14) (undo-tree-id243 . -33) (undo-tree-id244 . -34) (undo-tree-id245 . -34) (undo-tree-id246 . -4) (undo-tree-id247 . -34)) nil (26008 2377 572297 0) 0 nil])
([nil nil ((#("
" 0 1 (c-is-sws t fontified t)) . 574) (undo-tree-id215 . 1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1)) nil (26008 2377 572275 0) 0 nil])
([nil nil ((#("
" 0 1 (c-is-sws t fontified t)) . 574) (undo-tree-id212 . 1) (undo-tree-id213 . 1) (undo-tree-id214 . -1)) nil (26008 2377 572264 0) 0 nil])
([nil nil ((#("  
" 0 1 (c-is-sws t fontified t) 1 2 (c-is-sws t fontified t) 2 3 (c-is-sws t fontified t)) . 574) (undo-tree-id201 . 3) (undo-tree-id202 . 3) (undo-tree-id203 . -2) (undo-tree-id204 . -2) (undo-tree-id205 . -2) (undo-tree-id206 . -2) (undo-tree-id207 . -2) (undo-tree-id208 . -2) (undo-tree-id209 . -2) (undo-tree-id210 . -2) (undo-tree-id211 . -3)) nil (26008 2377 572252 0) 0 nil])
([nil nil ((#("  return vec4<f32>(1.0, 1.0, 1.0, 1.0);  " 0 2 (c-is-sws t fontified t) 2 3 (face font-lock-keyword-face c-is-sws t fontified t) 3 8 (face font-lock-keyword-face fontified t) 8 9 (fontified t) 9 13 (face font-lock-type-face fontified t) 13 14 (face (rainbow-delimiters-depth-1-face) category c-<-as-paren-syntax fontified t c-<>-c-types-set t) 14 17 (face font-lock-type-face fontified t) 17 18 (face (rainbow-delimiters-depth-1-face) category c->-as-paren-syntax fontified t) 18 19 (face (rainbow-delimiters-depth-1-face) fontified t) 19 37 (fontified t) 37 38 (face (rainbow-delimiters-depth-1-face) fontified t) 38 39 (fontified t) 39 41 (fontified t)) . 574) (undo-tree-id197 . 41) (undo-tree-id198 . 41) (undo-tree-id199 . -6) (undo-tree-id200 . -41)) nil (26008 2377 572241 0) 0 nil])
([nil nil ((#("
" 0 1 (c-is-sws t fontified t)) . 574) (undo-tree-id194 . 1) (undo-tree-id195 . 1) (undo-tree-id196 . -1)) nil (26008 2377 572236 0) 0 nil])
([nil nil ((#("}" 0 1 (face (rainbow-delimiters-unmatched-face) c-is-sws t fontified t rear-nonsticky t)) . 574) (undo-tree-id185 . -1) (undo-tree-id186 . 1) (undo-tree-id187 . 1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1)) nil (26008 2377 572231 0) 0 nil])
([nil nil ((#("
" 0 1 (c-is-sws t fontified t)) . 574) (undo-tree-id182 . 1) (undo-tree-id183 . 1) (undo-tree-id184 . -1)) nil (26008 2385 294050 0) 0 nil])
([nil nil ((apply 36 227 538 undo--wrap-and-run-primitive-undo 227 538 ((#("// " 0 1 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 1 3 (face font-lock-comment-delimiter-face c-in-sws t fontified t)) . -536) (#("// " 0 3 (face font-lock-comment-delimiter-face c-in-sws t fontified t)) . -494) (#("// " 0 3 (face font-lock-comment-delimiter-face c-in-sws t fontified t)) . -437) (#("// " 0 3 (face font-lock-comment-delimiter-face c-in-sws t fontified t)) . -427) (#("// " 0 3 (face font-lock-comment-delimiter-face c-in-sws t fontified t)) . -407) (#("// " 0 3 (face font-lock-comment-delimiter-face c-in-sws t fontified t)) . -404) (#("// " 0 3 (face font-lock-comment-delimiter-face c-in-sws t fontified t)) . -390) (#("// " 0 3 (face font-lock-comment-delimiter-face c-in-sws t fontified t)) . -336) (#("// " 0 3 (face font-lock-comment-delimiter-face c-in-sws t fontified t)) . -309) (#("// " 0 3 (face font-lock-comment-delimiter-face c-in-sws t fontified t)) . -284) (#("// " 0 3 (face font-lock-comment-delimiter-face c-in-sws t fontified t)) . -235) (#("// " 0 1 (face font-lock-comment-delimiter-face c-is-sws t c-in-sws t fontified t) 1 3 (face font-lock-comment-delimiter-face c-in-sws t fontified t)) . -227) 574))) nil (26008 2393 922581 0) 0 nil] [nil nil ((apply -36 227 610 undo--wrap-and-run-primitive-undo 227 610 ((602 . 605) (554 . 557) (491 . 494) (475 . 478) (449 . 452) (440 . 443) (420 . 423) (360 . 363) (327 . 330) (296 . 299) (241 . 244) (227 . 230)))) ((apply 36 227 574 undo--wrap-and-run-primitive-undo 227 574 ((#("// " 0 1 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 1 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . 227) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . 241) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . 296) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . 327) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . 360) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . 420) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . 440) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . 449) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . 475) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . 491) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . 554) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . 602) 227))) (26008 2384 939077 0) 0 nil])
([nil nil ((#("// Vertex shader

struct VertexInput {
    @location(0) position: vec3<f32>,
    @location(1) color: vec3<f32>,
};

struct VertexOutput {
    @builtin(position) clip_position: vec4<f32>,
    @location(0) color: vec3<f32>,
};

@vertex
fn vs_main(model: VertexInput) -> VertexOutput {
  var out: VertexOutput;
  out.color = model.color;
  out.clip_position = vec4<f32>(model.position, 1.0);
  return out;
}

// Fragment shader

@fragment
fn fs_main(in: VertexOutput) -> @location(0) vec4<f32> {
  return vec4<f32>(1.0, 1.0, 1.0, 1.0);  
}
" 0 1 (c-in-sws t face font-lock-comment-delimiter-face c-is-sws t fontified t) 1 3 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 3 17 (c-in-sws t face font-lock-comment-face fontified t) 17 18 (c-in-sws t fontified t) 18 19 (face font-lock-keyword-face c-is-sws t fontified t) 19 24 (face font-lock-keyword-face fontified t) 24 37 (fontified t) 37 38 (face (rainbow-delimiters-depth-1-face) fontified t) 38 44 (fontified t) 44 52 (face font-lock-builtin-face fontified t) 52 53 (face (rainbow-delimiters-depth-2-face) fontified t) 53 54 (fontified t) 54 55 (face (rainbow-delimiters-depth-2-face) fontified t) 55 56 (fontified t) 56 64 (face font-lock-variable-name-face fontified t) 64 66 (fontified t) 66 70 (face font-lock-type-face fontified t) 70 71 (face (rainbow-delimiters-depth-2-face) fontified t c-<>-c-types-set t category c-<-as-paren-syntax) 71 74 (face font-lock-type-face fontified t) 74 75 (face (rainbow-delimiters-depth-2-face) fontified t category c->-as-paren-syntax) 75 82 (fontified t) 82 90 (face font-lock-builtin-face fontified t) 90 91 (face (rainbow-delimiters-depth-2-face) fontified t) 91 92 (fontified t) 92 93 (face (rainbow-delimiters-depth-2-face) fontified t) 93 94 (fontified t) 94 99 (face font-lock-variable-name-face fontified t) 99 101 (fontified t) 101 105 (face font-lock-type-face fontified t) 105 106 (face (rainbow-delimiters-depth-2-face) fontified t c-<>-c-types-set t category c-<-as-paren-syntax) 106 109 (face font-lock-type-face fontified t) 109 110 (face (rainbow-delimiters-depth-2-face) fontified t category c->-as-paren-syntax) 110 112 (fontified t) 112 113 (face (rainbow-delimiters-depth-1-face) fontified t) 113 116 (fontified t) 116 122 (face font-lock-keyword-face fontified t) 122 136 (fontified t) 136 137 (face (rainbow-delimiters-depth-1-face) fontified t) 137 143 (fontified t) 143 150 (face font-lock-builtin-face fontified t) 150 151 (face (rainbow-delimiters-depth-2-face) fontified t) 151 159 (face font-lock-builtin-face fontified t) 159 160 (face (rainbow-delimiters-depth-2-face) fontified t) 160 161 (fontified t) 161 174 (face font-lock-variable-name-face fontified t) 174 176 (fontified t) 176 180 (face font-lock-type-face fontified t) 180 181 (face (rainbow-delimiters-depth-2-face) fontified t c-<>-c-types-set t category c-<-as-paren-syntax) 181 184 (face font-lock-type-face fontified t) 184 185 (face (rainbow-delimiters-depth-2-face) fontified t category c->-as-paren-syntax) 185 192 (fontified t) 192 200 (face font-lock-builtin-face fontified t) 200 201 (face (rainbow-delimiters-depth-2-face) fontified t) 201 202 (fontified t) 202 203 (face (rainbow-delimiters-depth-2-face) fontified t) 203 204 (fontified t) 204 209 (face font-lock-variable-name-face fontified t) 209 211 (fontified t) 211 215 (face font-lock-type-face fontified t) 215 216 (face (rainbow-delimiters-depth-2-face) fontified t c-<>-c-types-set t category c-<-as-paren-syntax) 216 219 (face font-lock-type-face fontified t) 219 220 (face (rainbow-delimiters-depth-2-face) fontified t category c->-as-paren-syntax) 220 222 (fontified t) 222 223 (face (rainbow-delimiters-depth-1-face) fontified t) 223 226 (fontified t) 226 227 (fontified t) 227 233 (face font-lock-constant-face fontified t) 233 234 (fontified t) 234 236 (face font-lock-keyword-face fontified t) 236 237 (fontified t) 237 244 (face font-lock-function-name-face fontified t) 244 245 (face (rainbow-delimiters-depth-1-face) fontified t) 245 250 (face font-lock-variable-name-face fontified t) 250 263 (fontified t) 263 264 (face (rainbow-delimiters-depth-1-face) fontified t) 264 281 (fontified t) 281 282 (face (rainbow-delimiters-depth-1-face) fontified t) 282 283 (fontified t) 283 285 (fontified t) 285 288 (face font-lock-keyword-face fontified t) 288 289 (fontified t) 289 292 (face font-lock-variable-name-face fontified t) 292 308 (fontified t) 308 310 (fontified t) 310 314 (fontified t) 314 319 (face font-lock-variable-name-face fontified t) 319 335 (fontified t) 335 337 (fontified t) 337 341 (fontified t) 341 354 (face font-lock-variable-name-face fontified t) 354 357 (fontified t) 357 361 (face font-lock-type-face fontified t) 361 362 (face (rainbow-delimiters-depth-2-face) category c-<-as-paren-syntax fontified t c-<>-c-types-set t) 362 365 (face font-lock-type-face fontified t) 365 366 (face (rainbow-delimiters-depth-2-face) category c->-as-paren-syntax fontified t) 366 367 (face (rainbow-delimiters-depth-2-face) fontified t) 367 386 (fontified t) 386 387 (face (rainbow-delimiters-depth-2-face) fontified t) 387 389 (fontified t) 389 391 (fontified t) 391 397 (face font-lock-keyword-face fontified t) 397 403 (fontified t) 403 404 (face (rainbow-delimiters-depth-1-face) fontified t) 404 405 (fontified t) 405 406 (fontified t) 406 407 (face font-lock-comment-delimiter-face c-in-sws t c-is-sws t fontified t) 407 409 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 409 425 (face font-lock-comment-face c-in-sws t fontified t) 425 426 (c-in-sws t fontified t) 426 427 (c-is-sws t fontified t) 427 435 (face font-lock-constant-face fontified t) 435 436 (fontified t) 436 438 (face font-lock-keyword-face fontified t) 438 439 (fontified t) 439 446 (face font-lock-function-name-face fontified t) 446 447 (face (rainbow-delimiters-depth-1-face) fontified t) 447 449 (face font-lock-variable-name-face fontified t) 449 463 (fontified t) 463 464 (face (rainbow-delimiters-depth-1-face) fontified t) 464 469 (fontified t) 469 477 (face font-lock-builtin-face fontified t) 477 478 (face (rainbow-delimiters-depth-1-face) fontified t) 478 479 (fontified t) 479 480 (face (rainbow-delimiters-depth-1-face) fontified t) 480 481 (fontified t) 481 485 (face font-lock-type-face fontified t) 485 486 (face (rainbow-delimiters-depth-1-face) category c-<-as-paren-syntax fontified t c-<>-c-types-set t) 486 489 (face font-lock-type-face fontified t) 489 490 (face (rainbow-delimiters-depth-1-face) category c->-as-paren-syntax fontified t) 490 491 (fontified t) 491 492 (face (rainbow-delimiters-depth-1-face) fontified t) 492 493 (fontified t) 493 495 (fontified t) 495 501 (face font-lock-keyword-face fontified t) 501 502 (fontified t) 502 506 (face font-lock-type-face fontified t) 506 507 (face (rainbow-delimiters-depth-2-face) category c-<-as-paren-syntax fontified t c-<>-c-types-set t) 507 510 (face font-lock-type-face fontified t) 510 511 (face (rainbow-delimiters-depth-2-face) category c->-as-paren-syntax fontified t) 511 512 (face (rainbow-delimiters-depth-2-face) fontified t) 512 530 (fontified t) 530 531 (face (rainbow-delimiters-depth-2-face) fontified t) 531 535 (fontified t) 535 536 (face (rainbow-delimiters-depth-1-face) fontified t) 536 537 (fontified t)) . 1) (undo-tree-id287 . -537) (undo-tree-id288 . -402) (undo-tree-id289 . -169) (undo-tree-id290 . -536) (undo-tree-id291 . -226) (undo-tree-id292 . -537) (undo-tree-id293 . -537) (undo-tree-id294 . -537) (undo-tree-id295 . -537) (undo-tree-id296 . -537) (undo-tree-id297 . -537) (undo-tree-id298 . -537) (undo-tree-id299 . -537) (undo-tree-id300 . -537) (undo-tree-id301 . -506) (undo-tree-id302 . -405) (undo-tree-id303 . -400) (undo-tree-id304 . -224) (undo-tree-id305 . -197) (undo-tree-id306 . -147) (undo-tree-id307 . -115) (undo-tree-id308 . -114) (undo-tree-id309 . -84) (undo-tree-id310 . -24) (undo-tree-id311 . -17) (undo-tree-id312 . -5) (undo-tree-id313 . -4) (undo-tree-id314 . -537) (undo-tree-id315 . -537) (t 26008 2393 933670 952000)) nil (26008 4098 638178 0) 0 nil])
([nil nil ((227 . 228)) ((#("u" 0 1 (fontified t)) . 227) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1)) (26008 2384 517069 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 547 . 548) (nil fontified nil 529 . 548) (nil fontified nil 528 . 529) (nil category c->-as-paren-syntax 528 . 529) (nil fontified nil 525 . 528) (nil fontified nil 524 . 525) (nil category c-<-as-paren-syntax 524 . 525) (nil fontified nil 506 . 524) (nil fontified nil 505 . 506) (nil category c->-as-paren-syntax 505 . 506) (nil fontified nil 502 . 505) (nil fontified nil 501 . 502) (nil category c-<-as-paren-syntax 501 . 502) (nil fontified nil 443 . 501) (nil fontified nil 442 . 443) (nil fontified nil 423 . 442) (nil fontified nil 422 . 423) (nil fontified nil 380 . 422) (nil fontified nil 379 . 380) (nil category c->-as-paren-syntax 379 . 380) (nil fontified nil 376 . 379) (nil fontified nil 375 . 376) (nil category c-<-as-paren-syntax 375 . 376) (nil fontified nil 221 . 375) (nil fontified nil 220 . 221) (nil category c->-as-paren-syntax 220 . 221) (nil fontified nil 217 . 220) (nil fontified nil 216 . 217) (nil category c-<-as-paren-syntax 216 . 217) (nil fontified nil 186 . 216) (nil fontified nil 185 . 186) (nil category c->-as-paren-syntax 185 . 186) (nil fontified nil 182 . 185) (nil fontified nil 181 . 182) (nil category c-<-as-paren-syntax 181 . 182) (nil fontified nil 111 . 181) (nil fontified nil 110 . 111) (nil category c->-as-paren-syntax 110 . 111) (nil fontified nil 107 . 110) (nil fontified nil 106 . 107) (nil category c-<-as-paren-syntax 106 . 107) (nil fontified nil 76 . 106) (nil fontified nil 75 . 76) (nil category c->-as-paren-syntax 75 . 76) (nil fontified nil 72 . 75) (nil fontified nil 71 . 72) (nil category c-<-as-paren-syntax 71 . 72) (nil fontified nil 20 . 71) (nil fontified nil 19 . 20) (nil fontified nil 2 . 19) (nil fontified nil 1 . 2) (1 . 548)) nil (26008 4098 638138 0) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -227) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) 228) ((227 . 228)) (26008 2384 513474 0) 0 nil])
([nil nil ((#("// Vertex shader

struct VertexInput {
    @location(0) position: vec3<f32>,
    @location(1) color: vec3<f32>,
};

struct VertexOutput {
    @builtin(position) clip_position: vec4<f32>,
    @location(0) color: vec3<f32>,
};

@vertex
fn vs_main(
    model: VertexInput,
) -> VertexOutput {
    var out: VertexOutput;
    out.color = model.color;
    out.clip_position = vec4<f32>(model.position, 1.0);
    return out;
}

// Fragment shader

@fragment
fn fs_main(in: VertexOutput) -> @location(0) vec4<f32> {
    return vec4<f32>(in.color, 1.0);
}
" 0 1 (face font-lock-comment-delimiter-face c-is-sws t fontified t) 1 3 (face font-lock-comment-delimiter-face fontified t) 3 17 (face font-lock-comment-face fontified t) 17 18 (fontified t) 18 19 (face font-lock-keyword-face c-is-sws t fontified t) 19 24 (face font-lock-keyword-face fontified t) 24 37 (fontified t) 37 38 (face (rainbow-delimiters-depth-1-face) fontified t) 38 44 (fontified t) 44 52 (face font-lock-builtin-face fontified t) 52 53 (face (rainbow-delimiters-depth-2-face) fontified t) 53 54 (fontified t) 54 55 (face (rainbow-delimiters-depth-2-face) fontified t) 55 56 (fontified t) 56 64 (face font-lock-variable-name-face fontified t) 64 66 (fontified t) 66 70 (face font-lock-type-face fontified t) 70 71 (face (rainbow-delimiters-depth-2-face) fontified t c-<>-c-types-set t category c-<-as-paren-syntax) 71 74 (face font-lock-type-face fontified t) 74 75 (face (rainbow-delimiters-depth-2-face) fontified t category c->-as-paren-syntax) 75 82 (fontified t) 82 90 (face font-lock-builtin-face fontified t) 90 91 (face (rainbow-delimiters-depth-2-face) fontified t) 91 92 (fontified t) 92 93 (face (rainbow-delimiters-depth-2-face) fontified t) 93 94 (fontified t) 94 99 (face font-lock-variable-name-face fontified t) 99 101 (fontified t) 101 105 (face font-lock-type-face fontified t) 105 106 (face (rainbow-delimiters-depth-2-face) fontified t c-<>-c-types-set t category c-<-as-paren-syntax) 106 109 (face font-lock-type-face fontified t) 109 110 (face (rainbow-delimiters-depth-2-face) fontified t category c->-as-paren-syntax) 110 112 (fontified t) 112 113 (face (rainbow-delimiters-depth-1-face) fontified t) 113 116 (fontified t) 116 122 (face font-lock-keyword-face fontified t) 122 136 (fontified t) 136 137 (face (rainbow-delimiters-depth-1-face) fontified t) 137 143 (fontified t) 143 150 (face font-lock-builtin-face fontified t) 150 151 (face (rainbow-delimiters-depth-2-face) fontified t) 151 159 (face font-lock-builtin-face fontified t) 159 160 (face (rainbow-delimiters-depth-2-face) fontified t) 160 161 (fontified t) 161 174 (face font-lock-variable-name-face fontified t) 174 176 (fontified t) 176 180 (face font-lock-type-face fontified t) 180 181 (face (rainbow-delimiters-depth-2-face) fontified t c-<>-c-types-set t category c-<-as-paren-syntax) 181 184 (face font-lock-type-face fontified t) 184 185 (face (rainbow-delimiters-depth-2-face) fontified t category c->-as-paren-syntax) 185 192 (fontified t) 192 200 (face font-lock-builtin-face fontified t) 200 201 (face (rainbow-delimiters-depth-2-face) fontified t) 201 202 (fontified t) 202 203 (face (rainbow-delimiters-depth-2-face) fontified t) 203 204 (fontified t) 204 209 (face font-lock-variable-name-face fontified t) 209 211 (fontified t) 211 215 (face font-lock-type-face fontified t) 215 216 (face (rainbow-delimiters-depth-2-face) fontified t c-<>-c-types-set t category c-<-as-paren-syntax) 216 219 (face font-lock-type-face fontified t) 219 220 (face (rainbow-delimiters-depth-2-face) fontified t category c->-as-paren-syntax) 220 222 (fontified t) 222 223 (face (rainbow-delimiters-depth-1-face) fontified t) 223 227 (fontified t) 227 233 (face font-lock-constant-face fontified t) 233 234 (fontified t) 234 236 (face font-lock-keyword-face fontified t) 236 237 (fontified t) 237 244 (face font-lock-function-name-face fontified t) 244 245 (face (rainbow-delimiters-depth-1-face) fontified t) 245 250 (fontified t) 250 255 (face font-lock-variable-name-face fontified t) 255 270 (fontified t) 270 271 (face (rainbow-delimiters-depth-1-face) fontified t) 271 288 (fontified t) 288 289 (face (rainbow-delimiters-depth-1-face) fontified t) 289 294 (fontified t) 294 297 (face font-lock-keyword-face fontified t) 297 298 (fontified t) 298 301 (face font-lock-variable-name-face fontified t) 301 325 (fontified t) 325 330 (face font-lock-variable-name-face fontified t) 330 354 (fontified t) 354 367 (face font-lock-variable-name-face fontified t) 367 370 (fontified t) 370 374 (face font-lock-type-face fontified t) 374 375 (face (rainbow-delimiters-depth-2-face) fontified t c-<>-c-types-set t category c-<-as-paren-syntax) 375 378 (face font-lock-type-face fontified t) 378 379 (face (rainbow-delimiters-depth-2-face) fontified t category c->-as-paren-syntax) 379 380 (face (rainbow-delimiters-depth-2-face) fontified t) 380 399 (fontified t) 399 400 (face (rainbow-delimiters-depth-2-face) fontified t) 400 406 (fontified t) 406 412 (face font-lock-keyword-face fontified t) 412 418 (fontified t) 418 419 (face (rainbow-delimiters-depth-1-face) fontified t) 419 421 (fontified t) 421 422 (face font-lock-comment-delimiter-face fontified t c-in-sws t c-is-sws t) 422 424 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 424 440 (face font-lock-comment-face fontified t c-in-sws t) 440 441 (fontified t c-in-sws t) 441 442 (fontified t c-is-sws t) 442 450 (face font-lock-constant-face fontified t) 450 451 (fontified t) 451 453 (face font-lock-keyword-face fontified t) 453 454 (fontified t) 454 461 (face font-lock-function-name-face fontified t) 461 462 (face (rainbow-delimiters-depth-1-face) fontified t) 462 464 (face font-lock-variable-name-face fontified t) 464 478 (fontified t) 478 479 (face (rainbow-delimiters-depth-1-face) fontified t) 479 484 (fontified t) 484 492 (face font-lock-builtin-face fontified t) 492 493 (face (rainbow-delimiters-depth-1-face) fontified t) 493 494 (fontified t) 494 495 (face (rainbow-delimiters-depth-1-face) fontified t) 495 496 (fontified t) 496 500 (face font-lock-type-face fontified t) 500 501 (face (rainbow-delimiters-depth-1-face) fontified t c-<>-c-types-set t category c-<-as-paren-syntax) 501 504 (face font-lock-type-face fontified t) 504 505 (face (rainbow-delimiters-depth-1-face) fontified t category c->-as-paren-syntax) 505 506 (fontified t) 506 507 (face (rainbow-delimiters-depth-1-face) fontified t) 507 512 (fontified t) 512 518 (face font-lock-keyword-face fontified t) 518 519 (fontified t) 519 523 (face font-lock-type-face fontified t) 523 524 (face (rainbow-delimiters-depth-2-face) fontified t c-<>-c-types-set t category c-<-as-paren-syntax) 524 527 (face font-lock-type-face fontified t) 527 528 (face (rainbow-delimiters-depth-2-face) fontified t category c->-as-paren-syntax) 528 529 (face (rainbow-delimiters-depth-2-face) fontified t) 529 542 (fontified t) 542 543 (face (rainbow-delimiters-depth-2-face) fontified t) 543 545 (fontified t) 545 546 (face (rainbow-delimiters-depth-1-face) fontified t) 546 547 (fontified t)) . 1) (undo-tree-id0 . -547) (undo-tree-id1 . -547) (undo-tree-id2 . -547) (undo-tree-id3 . -547) (undo-tree-id4 . -547) (undo-tree-id5 . -547) (undo-tree-id6 . -547) (undo-tree-id7 . -546) (undo-tree-id8 . -472) (undo-tree-id9 . -440) (undo-tree-id10 . -439) (undo-tree-id11 . -419) (undo-tree-id12 . -417) (undo-tree-id13 . -304) (undo-tree-id14 . -283) (undo-tree-id15 . -258) (undo-tree-id16 . -245) (undo-tree-id17 . -233) (undo-tree-id18 . -225) (undo-tree-id19 . -224) (undo-tree-id20 . -147) (undo-tree-id21 . -124) (undo-tree-id22 . -115) (undo-tree-id23 . -114) (undo-tree-id24 . -83) (undo-tree-id25 . -44) (undo-tree-id26 . -22) (undo-tree-id27 . -17) (undo-tree-id28 . -2) (undo-tree-id29 . -1) (undo-tree-id30 . -547) (undo-tree-id31 . -547) (t 26008 4098 652912 746000)) nil (26011 39415 338337 0) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 438 . 439) (nil fontified nil 398 . 439) (nil fontified nil 397 . 398) (nil category c->-as-paren-syntax 397 . 398) (nil fontified nil 394 . 397) (nil fontified nil 393 . 394) (nil category c-<-as-paren-syntax 393 . 394) (nil fontified nil 230 . 393) (nil fontified nil 229 . 230) (nil category c->-as-paren-syntax 229 . 230) (nil fontified nil 226 . 229) (nil fontified nil 225 . 226) (nil category c-<-as-paren-syntax 225 . 226) (nil fontified nil 190 . 225) (nil fontified nil 189 . 190) (nil category c->-as-paren-syntax 189 . 190) (nil fontified nil 186 . 189) (nil fontified nil 185 . 186) (nil category c-<-as-paren-syntax 185 . 186) (nil fontified nil 116 . 185) (nil fontified nil 115 . 116) (nil category c->-as-paren-syntax 115 . 116) (nil fontified nil 112 . 115) (nil fontified nil 111 . 112) (nil category c-<-as-paren-syntax 111 . 112) (nil fontified nil 76 . 111) (nil fontified nil 75 . 76) (nil category c->-as-paren-syntax 75 . 76) (nil fontified nil 72 . 75) (nil fontified nil 71 . 72) (nil category c-<-as-paren-syntax 71 . 72) (nil fontified nil 20 . 71) (nil fontified nil 19 . 20) (nil fontified nil 2 . 19) (nil fontified nil 1 . 2) (1 . 439)) nil (26011 39415 338278 0) 0 nil])
([nil nil ((439 . 441) (t 26011 39415 354159 880000)) nil (26011 39427 916054 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 693 . 694) (nil fontified nil 626 . 694) (nil fontified nil 625 . 626) (nil category c->-as-paren-syntax 625 . 626) (nil fontified nil 622 . 625) (nil fontified nil 621 . 622) (nil category c-<-as-paren-syntax 621 . 622) (nil fontified nil 513 . 621) (nil fontified nil 512 . 513) (nil category c->-as-paren-syntax 512 . 513) (nil fontified nil 509 . 512) (nil fontified nil 508 . 509) (nil category c-<-as-paren-syntax 508 . 509) (nil fontified nil 462 . 508) (nil fontified nil 461 . 462) (nil fontified nil 442 . 461) (nil fontified nil 441 . 442) (441 . 694)) nil (26011 39427 916049 0) 0 nil])
([nil nil ((#("// Vertex shader

struct VertexInput {
    @location(0) position: vec3<f32>,
    @location(1) tex_coords: vec2<f32>,
}

struct VertexOutput {
    @builtin(position) clip_position: vec4<f32>,
    @location(0) tex_coords: vec2<f32>,
}

@vertex
fn vs_main(
    model: VertexInput,
) -> VertexOutput {
    var out: VertexOutput;
    out.tex_coords = model.tex_coords;
    out.clip_position = vec4<f32>(model.position, 1.0);
    return out;
}" 0 1 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 1 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 3 17 (face font-lock-comment-face fontified t c-in-sws t) 17 18 (fontified t c-in-sws t) 18 19 (face font-lock-keyword-face fontified t c-is-sws t) 19 24 (face font-lock-keyword-face fontified t) 24 37 (fontified t) 37 38 (face (rainbow-delimiters-depth-1-face) fontified t) 38 44 (fontified t) 44 52 (face font-lock-builtin-face fontified t) 52 53 (face (rainbow-delimiters-depth-2-face) fontified t) 53 54 (fontified t) 54 55 (face (rainbow-delimiters-depth-2-face) fontified t) 55 56 (fontified t) 56 64 (face font-lock-variable-name-face fontified t) 64 66 (fontified t) 66 70 (face font-lock-type-face fontified t) 70 71 (fontified t c-<>-c-types-set t) 71 74 (face font-lock-type-face fontified t) 74 75 (fontified t) 75 82 (fontified t) 82 90 (face font-lock-builtin-face fontified t) 90 91 (face (rainbow-delimiters-depth-2-face) fontified t) 91 92 (fontified t) 92 93 (face (rainbow-delimiters-depth-2-face) fontified t) 93 94 (fontified t) 94 104 (face font-lock-variable-name-face fontified t) 104 106 (fontified t) 106 110 (face font-lock-type-face fontified t) 110 111 (fontified t c-<>-c-types-set t) 111 114 (face font-lock-type-face fontified t) 114 115 (fontified t) 115 117 (fontified t) 117 118 (face (rainbow-delimiters-depth-1-face) fontified t) 118 120 (fontified t) 120 126 (face font-lock-keyword-face fontified t) 126 140 (fontified t) 140 141 (face (rainbow-delimiters-depth-1-face) fontified t) 141 147 (fontified t) 147 154 (face font-lock-builtin-face fontified t) 154 155 (face (rainbow-delimiters-depth-2-face) fontified t) 155 163 (face font-lock-builtin-face fontified t) 163 164 (face (rainbow-delimiters-depth-2-face) fontified t) 164 165 (fontified t) 165 178 (face font-lock-variable-name-face fontified t) 178 180 (fontified t) 180 184 (face font-lock-type-face fontified t) 184 185 (fontified t c-<>-c-types-set t) 185 188 (face font-lock-type-face fontified t) 188 189 (fontified t) 189 196 (fontified t) 196 204 (face font-lock-builtin-face fontified t) 204 205 (face (rainbow-delimiters-depth-2-face) fontified t) 205 206 (fontified t) 206 207 (face (rainbow-delimiters-depth-2-face) fontified t) 207 208 (fontified t) 208 218 (face font-lock-variable-name-face fontified t) 218 220 (fontified t) 220 224 (face font-lock-type-face fontified t) 224 225 (fontified t c-<>-c-types-set t) 225 228 (face font-lock-type-face fontified t) 228 229 (fontified t) 229 231 (fontified t) 231 232 (face (rainbow-delimiters-depth-1-face) fontified t) 232 235 (fontified t) 235 241 (face font-lock-constant-face fontified t) 241 242 (fontified t) 242 244 (face font-lock-keyword-face fontified t) 244 245 (fontified t) 245 252 (face font-lock-function-name-face fontified t) 252 253 (face (rainbow-delimiters-depth-1-face) fontified t) 253 258 (fontified t) 258 263 (face font-lock-variable-name-face fontified t) 263 278 (fontified t) 278 279 (face (rainbow-delimiters-depth-1-face) fontified t) 279 296 (fontified t) 296 297 (face (rainbow-delimiters-depth-1-face) fontified t) 297 302 (fontified t) 302 305 (face font-lock-keyword-face fontified t) 305 306 (fontified t) 306 309 (face font-lock-variable-name-face fontified t) 309 333 (fontified t) 333 343 (face font-lock-variable-name-face fontified t) 343 372 (fontified t) 372 385 (face font-lock-variable-name-face fontified t) 385 388 (fontified t) 388 392 (face font-lock-type-face fontified t) 392 393 (fontified t c-<>-c-types-set t) 393 396 (face font-lock-type-face fontified t) 396 397 (fontified t) 397 398 (face (rainbow-delimiters-depth-2-face) fontified t) 398 417 (fontified t) 417 418 (face (rainbow-delimiters-depth-2-face) fontified t) 418 424 (fontified t) 424 430 (face font-lock-keyword-face fontified t) 430 436 (fontified t) 436 437 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1) (undo-tree-id32 . -437) (undo-tree-id33 . -437) (undo-tree-id34 . -437) (undo-tree-id35 . -437) (undo-tree-id36 . -372) (undo-tree-id37 . -305) (undo-tree-id38 . -260) (undo-tree-id39 . -239) (undo-tree-id40 . -233) (undo-tree-id41 . -232) (undo-tree-id42 . -195) (undo-tree-id43 . -119) (undo-tree-id44 . -118) (undo-tree-id45 . -80) (undo-tree-id46 . -41) (undo-tree-id47 . -17) (undo-tree-id48 . -2) (undo-tree-id49 . -437) (undo-tree-id50 . -437) (t 26011 39427 928922 188000)) nil (26013 10225 658630 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 581 . 582) (nil fontified nil 535 . 582) (nil fontified nil 534 . 535) (nil category c->-as-paren-syntax 534 . 535) (nil fontified nil 531 . 534) (nil fontified nil 530 . 531) (nil category c-<-as-paren-syntax 530 . 531) (nil fontified nil 348 . 530) (nil fontified nil 347 . 348) (nil category c->-as-paren-syntax 347 . 348) (nil fontified nil 344 . 347) (nil fontified nil 343 . 344) (nil category c-<-as-paren-syntax 343 . 344) (nil fontified nil 308 . 343) (nil fontified nil 307 . 308) (nil category c->-as-paren-syntax 307 . 308) (nil fontified nil 304 . 307) (nil fontified nil 303 . 304) (nil category c-<-as-paren-syntax 303 . 304) (nil fontified nil 234 . 303) (nil fontified nil 233 . 234) (nil category c->-as-paren-syntax 233 . 234) (nil fontified nil 230 . 233) (nil fontified nil 229 . 230) (nil category c-<-as-paren-syntax 229 . 230) (nil fontified nil 194 . 229) (nil fontified nil 193 . 194) (nil category c->-as-paren-syntax 193 . 194) (nil fontified nil 190 . 193) (nil fontified nil 189 . 190) (nil category c-<-as-paren-syntax 189 . 190) (nil fontified nil 112 . 189) (nil fontified nil 111 . 112) (nil category c->-as-paren-syntax 111 . 112) (nil fontified nil 104 . 111) (nil fontified nil 103 . 104) (nil category c-<-as-paren-syntax 103 . 104) (nil fontified nil 101 . 103) (nil fontified nil 100 . 101) (nil fontified nil 95 . 100) (nil fontified nil 93 . 95) (nil fontified nil 67 . 93) (nil fontified nil 66 . 67) (nil category c->-as-paren-syntax 66 . 67) (nil fontified nil 63 . 66) (nil fontified nil 62 . 63) (nil category c-<-as-paren-syntax 62 . 63) (nil fontified nil 19 . 62) (nil fontified nil 18 . 19) (nil fontified nil 2 . 18) (nil fontified nil 1 . 2) (1 . 582)) nil (26013 10225 658597 0) 0 nil])
([nil nil ((71 . 73) (t 26013 10225 673136 713000)) nil (26013 28754 752371 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 125 . 126) (nil fontified nil 125 . 126) (nil fontified nil 124 . 125) (nil fontified nil 122 . 124) (nil fontified nil 121 . 122) (nil category c->-as-paren-syntax 121 . 122) (nil fontified nil 118 . 121) (nil fontified nil 117 . 118) (nil category c-<-as-paren-syntax 117 . 118) (nil fontified nil 111 . 117) (nil fontified nil 109 . 111) (nil fontified nil 100 . 109) (nil fontified nil 95 . 100) (nil fontified nil 94 . 95) (nil fontified nil 79 . 94) (nil fontified nil 74 . 79) (nil fontified nil 73 . 74) (73 . 126)) nil (26013 28754 752369 0) 0 nil])
([nil nil ((#("Camera" 0 6 (fontified t)) . -80) (undo-tree-id142 . -6) (undo-tree-id143 . -6) (undo-tree-id144 . -6) (undo-tree-id145 . -6) (undo-tree-id146 . -6) (undo-tree-id147 . -6) (undo-tree-id148 . -6) (undo-tree-id149 . -6) 86) nil (26013 28754 752363 0) 0 nil])
([nil nil ((80 . 89)) nil (26013 28754 752348 0) 0 nil])
([nil nil ((#("proj" 0 4 (face font-lock-variable-name-face fontified t)) . -108) (undo-tree-id134 . -4) (undo-tree-id135 . -4) (undo-tree-id136 . -4) (undo-tree-id137 . -4) (undo-tree-id138 . -4) (undo-tree-id139 . -4) (undo-tree-id140 . -4) (undo-tree-id141 . -4) 112) nil (26013 28754 752347 0) 0 nil])
([nil nil ((#("view_" 0 5 (face font-lock-variable-name-face fontified t)) . -103) (undo-tree-id123 . -5) (undo-tree-id124 . -5) (undo-tree-id125 . -5) (undo-tree-id126 . -5) (undo-tree-id127 . -5) (undo-tree-id128 . -5) (undo-tree-id129 . -5) (undo-tree-id130 . -5) (undo-tree-id131 . -5) (undo-tree-id132 . -5) (undo-tree-id133 . -5) 108) nil (26013 28754 752337 0) 0 nil])
([nil nil ((103 . 109)) nil (26013 28754 752324 0) 0 nil])
([nil nil ((#("+" 0 1 (fontified t)) . -108) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) 109) nil (26013 28754 752322 0) 0 nil])
([nil nil ((108 . 109)) nil (26013 28754 752317 0) 0 nil])
([nil nil ((109 . 116)) nil (26013 28754 752316 0) 0 nil])
([nil nil ((#("f" 0 1 (face font-lock-variable-name-face fontified t)) . -114) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (#("o" 0 1 (face font-lock-variable-name-face fontified t)) . -115) (undo-tree-id117 . -1) (undo-tree-id118 . -1) 116) nil (26013 28754 752315 0) 0 nil])
([nil nil ((114 . 118)) nil (26013 28754 752305 0) 0 nil])
([nil nil ((#("f" 0 1 (face font-lock-variable-name-face fontified t)) . -114) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (#("r" 0 1 (face font-lock-variable-name-face fontified t)) . -115) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (#("o" 0 1 (face font-lock-variable-name-face fontified t)) . -116) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (#("m" 0 1 (face font-lock-variable-name-face fontified t)) . -117) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) 118) nil (26013 28754 752302 0) 0 nil])
([nil nil ((195 . 197)) nil (26013 28754 752271 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 259 . 260) (nil fontified nil 244 . 260) (nil fontified nil 238 . 244) (nil fontified nil 237 . 238) (nil fontified nil 236 . 237) (nil category c->-as-paren-syntax 236 . 237) (nil fontified nil 229 . 236) (nil fontified nil 228 . 229) (nil category c-<-as-paren-syntax 228 . 229) (nil fontified nil 226 . 228) (nil fontified nil 225 . 226) (nil fontified nil 222 . 225) (nil fontified nil 220 . 222) (nil fontified nil 219 . 220) (nil fontified nil 218 . 219) (nil fontified nil 217 . 218) (nil fontified nil 216 . 217) (nil fontified nil 215 . 216) (nil fontified nil 208 . 215) (nil fontified nil 206 . 208) (nil fontified nil 205 . 206) (nil fontified nil 204 . 205) (nil fontified nil 203 . 204) (nil fontified nil 198 . 203) (nil fontified nil 197 . 198) (197 . 260)) nil (26013 28754 752269 0) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . -204) (undo-tree-id83 . -1) (undo-tree-id84 . -1) 205) nil (26013 28754 752261 0) 0 nil])
([nil nil ((204 . 205)) nil (26013 28754 752258 0) 0 nil])
([nil nil ((#("camera" 0 6 (face font-lock-variable-name-face fontified t)) . -238) (undo-tree-id75 . -6) (undo-tree-id76 . -6) (undo-tree-id77 . -6) (undo-tree-id78 . -6) (undo-tree-id79 . -6) (undo-tree-id80 . -6) (undo-tree-id81 . -6) (undo-tree-id82 . -6) 244) nil (26013 28754 752256 0) 0 nil])
([nil nil ((238 . 247)) nil (26013 28754 752247 0) 0 nil])
([nil nil ((#("Camera" 0 6 (fontified t)) . -249) (undo-tree-id73 . -6) (undo-tree-id74 . -6) 255) nil (26013 28754 752246 0) 0 nil])
([nil nil ((249 . 254)) nil (26013 28754 752243 0) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -252) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (#("n" 0 1 (fontified t)) . -253) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) 254) nil (26013 28754 752241 0) 0 nil])
([nil nil ((252 . 257)) nil (26013 28754 752230 0) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -254) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (#("r" 0 1 (fontified t)) . -255) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (#("o" 0 1 (fontified t)) . -256) (undo-tree-id61 . -1) (undo-tree-id62 . -1) 257) nil (26013 28754 752227 0) 0 nil])
([nil nil ((254 . 258)) nil (26013 28754 752203 0) 0 nil])
([nil nil ((657 . 658) (t 26013 28754 767438 859000)) nil (26013 28798 886071 0) 0 nil])
([nil nil ((657 . 659)) nil (26013 28798 886069 0) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -657) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (#("r" 0 1 (fontified t)) . -658) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) 659) nil (26013 28798 886068 0) 0 nil])
([nil nil ((657 . 662)) nil (26013 28798 886057 0) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -660) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (#("n" 0 1 (fontified t)) . -661) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) 662) nil (26013 28798 886054 0) 0 nil])
([nil nil ((660 . 672)) nil (26013 28798 886034 0) 0 nil])
([nil nil ((672 . 679)) nil (26013 28798 886033 0) 0 nil])
([nil nil ((679 . 680)) nil (26013 28798 886029 0) 0 nil])
([nil nil ((131 . 132) (t 26013 28798 900849 35000)) nil (26013 28847 72767 0) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -256) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (#("o" 0 1 (fontified t)) . -257) (undo-tree-id182 . -1) (undo-tree-id183 . -1) 258 (t 26013 28847 86811 171000)) nil (26013 29130 841860 0) 0 nil])
([nil nil ((256 . 258)) nil (26013 29130 841837 0) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -664) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (#("o" 0 1 (fontified t)) . -665) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) 666 (t 26013 29130 855650 603000)) nil (26013 29143 9855 0) 0 nil])
([nil nil ((664 . 666)) nil (26013 29143 9838 0) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -665) (undo-tree-id184 . -1) (undo-tree-id185 . -1) 666) nil (26013 29143 9836 0) 0 nil])
([nil nil ((665 . 666)) nil (26013 29143 9824 0) 0 nil])
([nil nil ((#("
struct TransformUniform {
    model_trans: mat4x4<f32>,
};" 0 1 (fontified t) 1 2 (face font-lock-keyword-face fontified t) 2 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t) 17 25 (fontified t) 25 26 (face (rainbow-delimiters-depth-1-face) fontified t) 26 27 (fontified t) 27 31 (fontified t) 31 32 (face font-lock-variable-name-face fontified t) 32 33 (face font-lock-variable-name-face fontified t) 33 34 (face font-lock-variable-name-face fontified t) 34 35 (face font-lock-variable-name-face fontified t) 35 36 (face font-lock-variable-name-face fontified t) 36 37 (face font-lock-variable-name-face fontified t) 37 38 (face font-lock-variable-name-face fontified t) 38 39 (face font-lock-variable-name-face fontified t) 39 40 (face font-lock-variable-name-face fontified t) 40 41 (face font-lock-variable-name-face fontified t) 41 42 (face font-lock-variable-name-face fontified t) 42 44 (fontified t) 44 50 (face font-lock-type-face fontified t) 50 51 (face (rainbow-delimiters-depth-2-face) category c-<-as-paren-syntax fontified t c-<>-c-types-set t) 51 54 (face font-lock-type-face fontified t) 54 55 (face (rainbow-delimiters-depth-2-face) fontified t category c->-as-paren-syntax) 55 57 (fontified t) 57 58 (face (rainbow-delimiters-depth-1-face) fontified t) 58 59 (fontified t rear-nonsticky t)) . 72) (undo-tree-id317 . -59) (undo-tree-id318 . -31) (undo-tree-id319 . -1) (undo-tree-id320 . -8) (undo-tree-id321 . -59) (undo-tree-id322 . -59) (undo-tree-id323 . -59) (undo-tree-id324 . -28) (undo-tree-id325 . -27) (undo-tree-id326 . -59) (t 26013 29143 23814 381000)) nil (26014 14053 907654 0) 0 nil])
([nil nil ((#("
@group(2) @binding(0) // 1.
var<uniform> transform: TransformUniform;" 0 1 (fontified t) 1 2 (fontified t) 2 7 (face font-lock-builtin-face fontified t) 7 8 (face (rainbow-delimiters-depth-1-face) fontified t) 8 9 (fontified t) 9 10 (face (rainbow-delimiters-depth-1-face) fontified t) 10 12 (fontified t) 12 19 (face font-lock-builtin-face fontified t) 19 20 (face (rainbow-delimiters-depth-1-face) fontified t) 20 21 (fontified t) 21 22 (face (rainbow-delimiters-depth-1-face) fontified t) 22 23 (fontified t c-is-sws t c-in-sws t) 23 24 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 24 26 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 26 29 (face font-lock-comment-face fontified t c-in-sws t) 29 30 (face font-lock-keyword-face fontified t c-is-sws t) 30 32 (face font-lock-keyword-face fontified t) 32 33 (face (rainbow-delimiters-depth-1-face) fontified t category c-<-as-paren-syntax c-<>-c-types-set t) 33 40 (face font-lock-constant-face fontified t) 40 41 (face (rainbow-delimiters-depth-1-face) fontified t category c->-as-paren-syntax) 41 42 (fontified t) 42 43 (face font-lock-variable-name-face fontified t) 43 44 (face font-lock-variable-name-face fontified t) 44 45 (face font-lock-variable-name-face fontified t) 45 46 (face font-lock-variable-name-face fontified t) 46 47 (face font-lock-variable-name-face fontified t) 47 48 (face font-lock-variable-name-face fontified t) 48 49 (face font-lock-variable-name-face fontified t) 49 50 (face font-lock-variable-name-face fontified t) 50 51 (face font-lock-variable-name-face fontified t) 51 53 (fontified t) 53 54 (fontified t) 54 55 (fontified t) 55 56 (fontified t) 56 57 (fontified t) 57 58 (fontified t) 58 59 (fontified t) 59 60 (fontified t) 60 61 (fontified t) 61 62 (fontified t) 62 69 (fontified t) 69 70 (fontified t rear-nonsticky t)) . 138) (undo-tree-id281 . -70) (undo-tree-id282 . -8) (undo-tree-id283 . -69) (undo-tree-id284 . -1) (undo-tree-id285 . -53) (undo-tree-id286 . -42) (undo-tree-id287 . -70) (undo-tree-id288 . -70) (undo-tree-id289 . -70) (undo-tree-id290 . -69) (undo-tree-id291 . -65) (undo-tree-id292 . -62) (undo-tree-id293 . -59) (undo-tree-id294 . -57) (undo-tree-id295 . -56) (undo-tree-id296 . -55) (undo-tree-id297 . -52) (undo-tree-id298 . -51) (undo-tree-id299 . -50) (undo-tree-id300 . -49) (undo-tree-id301 . -48) (undo-tree-id302 . -47) (undo-tree-id303 . -46) (undo-tree-id304 . -45) (undo-tree-id305 . -43) (undo-tree-id306 . -42) (undo-tree-id307 . -41) (undo-tree-id308 . -39) (undo-tree-id309 . -38) (undo-tree-id310 . -37) (undo-tree-id311 . -8) (undo-tree-id312 . -7) (undo-tree-id313 . -6) (undo-tree-id314 . -5) (undo-tree-id315 . -70) (undo-tree-id316 . -70)) nil (26014 14053 907636 0) 0 nil])
([nil nil ((72 . 74)) nil (26014 14053 907589 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 275 . 276) (nil fontified nil 271 . 276) (nil fontified nil 270 . 271) (nil category c->-as-paren-syntax 270 . 271) (nil fontified nil 267 . 270) (nil fontified nil 266 . 267) (nil category c-<-as-paren-syntax 266 . 267) (nil fontified nil 227 . 266) (nil fontified nil 226 . 227) (nil category c->-as-paren-syntax 226 . 227) (nil fontified nil 223 . 226) (nil fontified nil 222 . 223) (nil category c-<-as-paren-syntax 222 . 223) (nil fontified nil 183 . 222) (nil fontified nil 182 . 183) (nil category c->-as-paren-syntax 182 . 183) (nil fontified nil 179 . 182) (nil fontified nil 178 . 179) (nil category c-<-as-paren-syntax 178 . 179) (nil fontified nil 139 . 178) (nil fontified nil 138 . 139) (nil category c->-as-paren-syntax 138 . 139) (nil fontified nil 135 . 138) (nil fontified nil 134 . 135) (nil category c-<-as-paren-syntax 134 . 135) (nil fontified nil 74 . 134) (74 . 276)) nil (26014 14053 907587 0) 0 nil])
([nil nil ((#("    model: VertexInput," 0 4 (fontified t) 4 9 (face font-lock-variable-name-face fontified t) 9 23 (fontified t)) . 580) (undo-tree-id260 . -23) (undo-tree-id261 . -23) (undo-tree-id262 . -23) (undo-tree-id263 . -23) (undo-tree-id264 . -22) (undo-tree-id265 . -19) (undo-tree-id266 . -16) (undo-tree-id267 . -14) (undo-tree-id268 . -13) (undo-tree-id269 . -10) (undo-tree-id270 . -9) (undo-tree-id271 . -8) (undo-tree-id272 . -7) (undo-tree-id273 . -6) (undo-tree-id274 . -5) (undo-tree-id275 . -4) (undo-tree-id276 . -3) (undo-tree-id277 . -2) (undo-tree-id278 . -1) (undo-tree-id279 . -23) (undo-tree-id280 . -23)) nil (26014 14053 907578 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 631 . 632) (nil fontified nil 580 . 632) (580 . 632)) nil (26014 14053 907548 0) 0 nil])
([nil nil ((652 . 655)) nil (26014 14053 907546 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 828 . 829) (nil fontified nil 689 . 829) (nil fontified nil 688 . 689) (nil category c->-as-paren-syntax 688 . 689) (nil fontified nil 685 . 688) (nil fontified nil 684 . 685) (nil category c-<-as-paren-syntax 684 . 685) (nil fontified nil 655 . 684) (655 . 829)) nil (26014 14053 907545 0) 0 nil])
([nil nil ((#("   var out: VertexOutput;
    out.tex_coords = model.tex_coords;
    out.clip_position = camera.view_proj * transform.model_trans * vec4<f32>(model.position, 1.0); // 2.
    return out;" 0 3 (fontified t) 3 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 10 (face font-lock-variable-name-face fontified t) 10 34 (fontified t) 34 44 (face font-lock-variable-name-face fontified t) 44 65 (fontified t) 65 73 (fontified t) 73 86 (face font-lock-variable-name-face fontified t) 86 108 (fontified t) 108 109 (fontified t) 109 110 (fontified t) 110 111 (fontified t) 111 112 (fontified t) 112 113 (fontified t) 113 114 (fontified t) 114 115 (fontified t) 115 116 (fontified t) 116 117 (fontified t) 117 118 (fontified t) 118 119 (fontified t) 119 120 (fontified t) 120 121 (fontified t) 121 122 (fontified t) 122 123 (fontified t) 123 124 (fontified t) 124 125 (fontified t) 125 126 (fontified t) 126 127 (fontified t) 127 128 (fontified t) 128 129 (fontified t) 129 130 (fontified t) 130 131 (fontified t) 131 132 (fontified t) 132 136 (face font-lock-type-face fontified t) 136 137 (face (rainbow-delimiters-depth-2-face) fontified t category c-<-as-paren-syntax c-<>-c-types-set t) 137 140 (face font-lock-type-face fontified t) 140 141 (face (rainbow-delimiters-depth-2-face) fontified t category c->-as-paren-syntax) 141 142 (face (rainbow-delimiters-depth-2-face) fontified t) 142 161 (fontified t) 161 162 (face (rainbow-delimiters-depth-2-face) fontified t) 162 163 (fontified t) 163 164 (fontified t c-is-sws t c-in-sws t) 164 165 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 165 167 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 167 170 (face font-lock-comment-face fontified t c-in-sws t) 170 171 (fontified t c-is-sws t) 171 174 (fontified t c-is-sws t) 174 175 (face font-lock-keyword-face fontified t c-is-sws t) 175 180 (face font-lock-keyword-face fontified t) 180 185 (fontified t)) . 831) (undo-tree-id234 . -185) (undo-tree-id235 . -116) (undo-tree-id236 . -114) (undo-tree-id237 . -26) (undo-tree-id238 . -116) (undo-tree-id239 . -116) (undo-tree-id240 . -129) (undo-tree-id241 . -129) (undo-tree-id242 . -129) (undo-tree-id243 . -129) (undo-tree-id244 . -129) (undo-tree-id245 . -129) (undo-tree-id246 . -185) (undo-tree-id247 . -185) (undo-tree-id248 . -185) (undo-tree-id249 . -184) (undo-tree-id250 . -181) (undo-tree-id251 . -75) (undo-tree-id252 . -73) (undo-tree-id253 . -71) (undo-tree-id254 . -70) (undo-tree-id255 . -68) (undo-tree-id256 . -28) (undo-tree-id257 . -27) (undo-tree-id258 . -26) (undo-tree-id259 . -185)) nil (26014 14053 907541 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1001 . 1002) (nil fontified nil 964 . 1002) (nil fontified nil 963 . 964) (nil category c->-as-paren-syntax 963 . 964) (nil fontified nil 960 . 963) (nil fontified nil 959 . 960) (nil category c-<-as-paren-syntax 959 . 960) (nil fontified nil 831 . 959) (831 . 1002)) nil (26014 14053 907515 0) 0 nil])
([nil nil ((830 . 836) (#("     " 0 1 (fontified t) 1 5 (fontified t)) . 830) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) 848) nil (26014 14053 907510 0) 0 nil])
([nil current ((#(" " 0 1 (fontified t)) . 830) (#(" " 0 1 (fontified t)) . 830)) nil (26014 14053 907465 0) 0 nil])
nil
