(undo-tree-save-format-version . 1)
"abd709c86f88f33cf3e050c841673d49dd7164d4"
[nil nil nil nil (26013 8679 270847 0) 0 nil]
([nil nil ((nil rear-nonsticky nil 541 . 542) (nil fontified nil 1 . 542) (1 . 542) (t 26013 8640 978326 638000)) nil (26013 8679 270844 0) 0 nil])
([nil nil ((1 . 2) (t 26013 8679 275932 677000)) nil (26013 8696 928571 0) 0 nil])
([nil nil ((1 . 2)) nil (26013 8696 928570 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 194 . 195) (nil fontified nil 1 . 195) (1 . 195)) nil (26013 8696 928566 0) 0 nil])
([nil nil ((197 . 201) (t 26013 8696 930713 840000)) nil (26013 8752 377315 0) 0 nil])
([nil nil ((394 . 398)) nil (26013 8752 377310 0) 0 nil])
([nil nil ((apply activate-cursor-for-undo 32) (389 . 390) (apply deactivate-cursor-after-undo 32) (apply activate-cursor-for-undo 33) (369 . 370) (apply deactivate-cursor-after-undo 33) (apply activate-cursor-for-undo 34) (350 . 351) (apply deactivate-cursor-after-undo 34) (apply activate-cursor-for-undo 35) (329 . 330) (apply deactivate-cursor-after-undo 35) (apply activate-cursor-for-undo 36) (295 . 296) (apply deactivate-cursor-after-undo 36) (apply activate-cursor-for-undo 37) (258 . 259) (apply deactivate-cursor-after-undo 37) (224 . 225) (apply activate-cursor-for-undo 32) (382 . 383) (apply deactivate-cursor-after-undo 32) (apply activate-cursor-for-undo 33) (363 . 364) (apply deactivate-cursor-after-undo 33) (apply activate-cursor-for-undo 34) (345 . 346) (apply deactivate-cursor-after-undo 34) (apply activate-cursor-for-undo 35) (325 . 326) (apply deactivate-cursor-after-undo 35) (apply activate-cursor-for-undo 36) (292 . 293) (apply deactivate-cursor-after-undo 36) (apply activate-cursor-for-undo 37) (256 . 257) (apply deactivate-cursor-after-undo 37) (223 . 224) (apply activate-cursor-for-undo 32) (375 . 376) (apply deactivate-cursor-after-undo 32) (apply activate-cursor-for-undo 33) (357 . 358) (apply deactivate-cursor-after-undo 33) (apply activate-cursor-for-undo 34) (340 . 341) (apply deactivate-cursor-after-undo 34) (apply activate-cursor-for-undo 35) (321 . 322) (apply deactivate-cursor-after-undo 35) (apply activate-cursor-for-undo 36) (289 . 290) (apply deactivate-cursor-after-undo 36) (apply activate-cursor-for-undo 37) (254 . 255) (apply deactivate-cursor-after-undo 37) (222 . 223) (apply activate-cursor-for-undo 32) (368 . 369) (apply deactivate-cursor-after-undo 32) (apply activate-cursor-for-undo 33) (351 . 352) (apply deactivate-cursor-after-undo 33) (apply activate-cursor-for-undo 34) (335 . 336) (apply deactivate-cursor-after-undo 34) (apply activate-cursor-for-undo 35) (317 . 318) (apply deactivate-cursor-after-undo 35) (apply activate-cursor-for-undo 36) (286 . 287) (apply deactivate-cursor-after-undo 36) (apply activate-cursor-for-undo 37) (252 . 253) (apply deactivate-cursor-after-undo 37) (221 . 222) (t 26013 8752 380464 704000)) nil (26013 8816 892370 0) 0 nil])
([nil nil ((774 . 775) (t 26013 8816 895657 590000)) nil (26013 8934 179205 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1437 . 1438) (nil fontified nil 775 . 1438) (775 . 1438)) nil (26013 8934 179201 0) 0 nil])
([nil nil ((964 . 966) (t 26013 8934 182287 22000)) nil (26013 9561 859933 0) 0 nil])
([nil nil ((#("普" 0 1 (fontified t)) . -964) (undo-tree-id91 . -1) (#("遍" 0 1 (fontified t)) . -965) (undo-tree-id92 . -1) 966) nil (26013 9561 859932 0) 0 nil])
([nil nil ((964 . 968)) nil (26013 9561 859928 0) 0 nil])
([nil nil ((1111 . 1113)) nil (26013 9561 859927 0) 0 nil])
([nil nil ((#("p" 0 1 (face font-lock-variable-name-face fontified t)) . -1112) (undo-tree-id89 . -1) (undo-tree-id90 . -1) 1113) nil (26013 9561 859926 0) 0 nil])
([nil nil ((1112 . 1115)) nil (26013 9561 859923 0) 0 nil])
([nil nil ((1169 . 1173)) nil (26013 9561 859922 0) 0 nil])
([nil nil ((1321 . 1325)) nil (26013 9561 859921 0) 0 nil])
([nil nil ((1453 . 1457) (#("    " 0 4 (fontified nil)) . 1452) (undo-tree-id88 . -4) (1451 . 1457)) nil (26013 9561 859920 0) 0 nil])
([nil nil ((1457 . 1478)) nil (26013 9561 859917 0) 0 nil])
([nil nil ((1478 . 1479)) nil (26013 9561 859917 0) 0 nil])
([nil nil ((1478 . 1479)) nil (26013 9561 859916 0) 0 nil])
([nil nil ((#("$" 0 1 (fontified t)) . -1478) (undo-tree-id87 . -1) 1479) nil (26013 9561 859914 0) 0 nil])
([nil nil ((1478 . 1479)) nil (26013 9561 859912 0) 0 nil])
([nil nil ((1479 . 1484)) nil (26013 9561 859911 0) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -1483) (undo-tree-id86 . -1) 1484) nil (26013 9561 859910 0) 0 nil])
([nil nil ((1484 . 1490)) nil (26013 9561 859908 0) 0 nil])
([nil nil ((1491 . 1495) (#("        " 0 8 (fontified nil)) . 1490) (1490 . 1498) (#("    " 0 4 (fontified nil)) . 1490) (undo-tree-id85 . -4) (1489 . 1495)) nil (26013 9561 859907 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1884 . 1885) (nil fontified nil 1490 . 1885) (1490 . 1885)) nil (26013 9561 859904 0) 0 nil])
([nil nil ((1930 . 1938) (1916 . 1928) (#("    " 0 4 (fontified t)) . 1916) (1833 . 1849) (#("        " 0 8 (fontified t)) . 1833) (1766 . 1782) (#("        " 0 8 (fontified t)) . 1766) (1720 . 1736) (#("        " 0 8 (fontified t)) . 1720) (1672 . 1684) (#("    " 0 4 (fontified t)) . 1672) (1617 . 1625) 1616) nil (26013 9561 859901 0) 0 nil])
([nil nil ((1613 . 1615)) nil (26013 9561 859897 0) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -1613) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (#(" " 0 1 (fontified t)) . -1614) (undo-tree-id83 . -1) (undo-tree-id84 . -1) 1615) nil (26013 9561 859895 0) 0 nil])
([nil nil ((#("// in new() after creating `camera`" 0 3 (face font-lock-comment-delimiter-face fontified t) 3 35 (face font-lock-comment-face fontified t)) . 1490)) nil (26013 9561 859889 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1490)) nil (26013 9561 859888 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1490) (undo-tree-id79 . -1)) nil (26013 9561 859887 0) 0 nil])
([nil nil ((#("let mut camera_uniform = CameraUniform::new();" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 22 (face font-lock-variable-name-face fontified t) 22 25 (fontified t) 25 38 (face font-lock-type-face fontified t) 38 43 (fontified t) 43 44 (face (rainbow-delimiters-depth-3-face) fontified t) 44 45 (face (rainbow-delimiters-depth-3-face) fontified t) 45 46 (fontified t)) . 1490) (undo-tree-id77 . -46) (undo-tree-id78 . -46)) nil (26013 9561 859885 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1490)) nil (26013 9561 859882 0) 0 nil])
([nil nil ((#("camera_uniform.update_view_proj(&camera);" 0 31 (fontified t) 31 32 (face (rainbow-delimiters-depth-3-face) fontified t) 32 33 (face rust-ampersand-face fontified t) 33 39 (fontified t) 39 40 (face (rainbow-delimiters-depth-3-face) fontified t) 40 41 (fontified t)) . 1490) (undo-tree-id76 . -39)) nil (26013 9561 859881 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1490)) nil (26013 9561 859879 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1490)) nil (26013 9561 859878 0) 0 nil])
([nil nil ((1483 . 1491)) nil (26013 9561 859877 0) 0 nil])
([nil nil ((1 . 20) (1485 . 1485) (1485 . 1491) (#("device" 0 6 (fontified nil)) . 1485) (1485 . 1491) (#("Device (use wgpu::Device)" 0 25 (fontified nil)) . -1485) (1485 . 1510) (#("device" 0 6 (fontified t)) . -1485) (undo-tree-id55 . -6) (undo-tree-id56 . -1) (undo-tree-id57 . -2) (undo-tree-id58 . -3) (undo-tree-id59 . -3) (undo-tree-id60 . -3) (undo-tree-id61 . -4) (undo-tree-id62 . -4) (undo-tree-id63 . -4) (undo-tree-id64 . -4) (undo-tree-id65 . -5) (undo-tree-id66 . -5) (undo-tree-id67 . -5) (undo-tree-id68 . -5) (undo-tree-id69 . -6) (undo-tree-id70 . -6) (undo-tree-id71 . -6) (undo-tree-id72 . -6) (undo-tree-id73 . -6) (undo-tree-id74 . -6) (undo-tree-id75 . -6) 1491) nil (26013 9561 859874 0) 0 nil])
([nil nil ((#("Device" 0 6 (face font-lock-type-face fontified t)) . -1504) (undo-tree-id48 . -6) (undo-tree-id49 . -6) (undo-tree-id50 . -6) (undo-tree-id51 . -6) (undo-tree-id52 . -6) (undo-tree-id53 . -6) (undo-tree-id54 . -6) 1510) nil (26013 9561 859848 0) 0 nil])
([nil nil ((1504 . 1514)) nil (26013 9561 859840 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1511) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (#("d" 0 1 (fontified t)) . -1512) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (#("e" 0 1 (fontified t)) . -1513) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) 1514) nil (26013 9561 859837 0) 0 nil])
([nil nil ((1511 . 1513)) nil (26013 9561 859809 0) 0 nil])
([nil nil ((1512 . 1516) (#("w" 0 1 (fontified nil)) . 1512) (1512 . 1513) (#("wgpu" 0 4 (fontified nil)) . -1512) (1512 . 1516) (#("w" 0 1 (fontified t)) . -1512) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) 1513) nil (26013 9561 859807 0) 0 nil])
([nil nil ((1516 . 1522)) nil (26013 9561 859799 0) 0 nil])
([nil nil ((1518 . 1524) (#("Devi" 0 4 (fontified nil)) . 1518) (1518 . 1522) (#("Device" 0 6 (fontified nil)) . -1518) (1518 . 1524) (#("Devi" 0 4 (face font-lock-type-face fontified t)) . -1518) (undo-tree-id0 . -4) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -2) (undo-tree-id7 . -2) (undo-tree-id8 . -2) (undo-tree-id9 . -3) (undo-tree-id10 . -3) (undo-tree-id11 . -4) (undo-tree-id12 . -4) (undo-tree-id13 . -4) (undo-tree-id14 . -4) 1522) nil (26013 9561 859795 0) 0 nil])
([nil nil ((#("use wgpu::Device;" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 8 (face font-lock-constant-face fontified t) 8 10 (fontified t) 10 16 (face font-lock-type-face fontified t) 16 17 (fontified t)) . 1) (undo-tree-id95 . -17) (undo-tree-id96 . -17) (undo-tree-id97 . -17) (undo-tree-id98 . -17) (undo-tree-id99 . -17) (undo-tree-id100 . -17) (undo-tree-id101 . -17) (undo-tree-id102 . -17) (t 26013 9561 865228 642000)) nil (26013 9567 774826 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1) (undo-tree-id94 . -1)) nil (26013 9567 774817 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1) (undo-tree-id93 . -1)) nil (26013 9567 774812 0) 0 nil])
([nil nil ((1510 . 1511) (t 26013 9567 780319 706000)) nil (26013 9592 846873 0) 0 nil])
([nil nil ((1510 . 1514) (#("w" 0 1 (fontified nil)) . 1510) (1510 . 1511) (#("wgpu" 0 4 (fontified nil)) . -1510) (1510 . 1514) (#("w" 0 1 (fontified t)) . -1510) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) 1511) nil (26013 9592 846871 0) 0 nil])
([nil nil ((1514 . 1518)) nil (26013 9592 846859 0) 0 nil])
([nil nil ((1516 . 1522) (#("Bu" 0 2 (fontified nil)) . 1516) (1516 . 1518) (#("Buffer" 0 6 (fontified nil)) . -1516) (1516 . 1522) (#("Bu" 0 2 (face font-lock-type-face fontified t)) . -1516) (undo-tree-id103 . -2) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -2) (undo-tree-id110 . -2) (undo-tree-id111 . -2) (undo-tree-id112 . -2) (undo-tree-id113 . -2) 1518) nil (26013 9592 846856 0) 0 nil])
([nil nil ((1522 . 1523)) nil (26013 9592 846835 0) 0 nil])
([nil nil ((#("uniform" 0 7 (fontified t)) . -1730) (undo-tree-id148 . -7) (undo-tree-id149 . -7) (undo-tree-id150 . -7) (undo-tree-id151 . -7) (undo-tree-id152 . -7) (undo-tree-id153 . -7) (undo-tree-id154 . -7) (undo-tree-id155 . -7) (undo-tree-id156 . -7) (undo-tree-id157 . -7) 1737 (t 26013 9592 852298 146000)) nil (26013 9609 800958 0) 0 nil])
([nil nil ((#("camera_" 0 7 (fontified t)) . -1723) (undo-tree-id136 . -7) (undo-tree-id137 . -7) (undo-tree-id138 . -7) (undo-tree-id139 . -7) (undo-tree-id140 . -7) (undo-tree-id141 . -7) (undo-tree-id142 . -7) (undo-tree-id143 . -7) (undo-tree-id144 . -7) (undo-tree-id145 . -7) (undo-tree-id146 . -7) (undo-tree-id147 . -7) 1730) nil (26013 9609 800947 0) 0 nil])
([nil nil ((1723 . 1726)) nil (26013 9609 800935 0) 0 nil])
([nil nil ((1723 . 1727) (#("sel" 0 3 (fontified nil)) . 1723) (1723 . 1726) (#("self" 0 4 (fontified nil)) . -1723) (1723 . 1727) (#("sel" 0 3 (fontified t)) . -1723) (undo-tree-id124 . -3) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -2) (undo-tree-id130 . -2) (undo-tree-id131 . -2) (undo-tree-id132 . -3) (undo-tree-id133 . -3) (undo-tree-id134 . -3) (undo-tree-id135 . -3) 1726) nil (26013 9609 800930 0) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-depth-6-face) fontified t)) . -1727) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) 1728 (t 26013 9609 806426 258000)) nil (26013 9620 389128 0) 0 nil])
([nil nil ((#("f" 0 1 (face font-lock-keyword-face fontified t)) . -1726) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) 1727) nil (26013 9620 389116 0) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -1720) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (#("&" 0 1 (fontified t)) . -1721) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-6-face) fontified t)) . -1722) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (#("s" 0 1 (fontified t)) . -1723) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (#("e" 0 1 (fontified t)) . -1724) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (#("l" 0 1 (fontified t)) . -1725) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) 1726) nil (26013 9620 389044 0) 0 nil])
([nil nil ((1720 . 1725)) nil (26013 9620 388643 0) 0 nil])
([nil nil ((1721 . 1725) (#("self" 0 4 (fontified nil)) . 1721) (1721 . 1725) (#("self" 0 4 (face font-lock-keyword-face fontified t)) . -1721) (undo-tree-id158 . -4) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -2) (undo-tree-id167 . -2) (undo-tree-id168 . -2) (undo-tree-id169 . -3) (undo-tree-id170 . -3) (undo-tree-id171 . -4) (undo-tree-id172 . -4) (undo-tree-id173 . -4) (undo-tree-id174 . -4) 1725) nil (26013 9620 388639 0) 0 nil])
([nil nil ((1725 . 1726) (t 26013 9620 395067 435000)) nil (26013 9637 657829 0) 0 nil])
([nil nil ((1726 . 1735) (#("view_proj" 0 9 (fontified nil)) . -1726) (1726 . 1735)) nil (26013 9637 657824 0) 0 nil])
([nil nil ((1721 . 1722) (t 26013 9637 663765 627000)) nil (26013 9643 57823 0) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . -1721) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) 1722) nil (26013 9643 57821 0) 0 nil])
([nil nil ((1721 . 1722)) nil (26013 9643 57806 0) 0 nil])
([nil nil ((#("proj" 0 4 (fontified t)) . -1732) (undo-tree-id724 . -4) (undo-tree-id725 . -4) (undo-tree-id726 . -4) (undo-tree-id727 . -4) (undo-tree-id728 . -4) (undo-tree-id729 . -4) (undo-tree-id730 . -4) (undo-tree-id731 . -4) (undo-tree-id732 . -4) (undo-tree-id733 . -4) (undo-tree-id734 . -4) (undo-tree-id735 . -4) 1736 (t 26013 9643 63439 264000)) nil (26013 9665 357143 0) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1726) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (#("v" 0 1 (fontified t)) . -1727) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (#("i" 0 1 (fontified t)) . -1728) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (#("e" 0 1 (fontified t)) . -1729) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (#("w" 0 1 (fontified t)) . -1730) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (#("_" 0 1 (fontified t)) . -1731) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) 1732) nil (26013 9665 357121 0) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . -1721) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) 1722 (t 26013 9665 364595 968000)) nil (26013 9671 784098 0) 0 nil])
([nil nil ((1721 . 1722) (t 26013 9671 790330 935000)) nil (26013 9678 703254 0) 0 nil])
([nil nil ((1722 . 1723)) nil (26013 9678 703252 0) 0 nil])
([nil nil ((1727 . 1728)) nil (26013 9678 703248 0) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . -1721) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) 1722 (t 26013 9678 709579 356000)) nil (26013 9684 953192 0) 0 nil])
([nil nil ((1721 . 1722) (t 26013 9684 959426 122000)) nil (26013 9692 481045 0) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . -1721) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) 1722) nil (26013 9692 481042 0) 0 nil])
([nil nil ((1722 . 1723)) nil (26013 9692 481018 0) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . -1722) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) 1723 (t 26013 9692 487534 1000)) nil (26013 9702 511491 0) 0 nil])
([nil nil ((1721 . 1722)) nil (26013 9702 511454 0) 0 nil])
([nil nil ((1727 . 1728) (t 26013 9702 517851 583000)) nil (26013 9711 37361 0) 0 nil])
([nil nil ((1728 . 1737) (#("view_proj" 0 9 (fontified nil)) . -1728) (1728 . 1737)) nil (26013 9711 37356 0) 0 nil])
([nil nil ((1471 . 1475) (t 26013 9711 44469 765000)) nil (26013 9750 564848 0) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-function-name-face fontified t)) . -1474) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) 1475) nil (26013 9750 564845 0) 0 nil])
([nil nil ((1474 . 1478)) nil (26013 9750 564826 0) 0 nil])
([nil nil ((1 . 2) (t 26013 9750 571839 404000)) nil (26013 9842 679976 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 27 . 28) (nil fontified nil 26 . 28) (nil fontified nil 17 . 26) (nil fontified nil 15 . 17) (nil fontified nil 11 . 15) (nil fontified nil 9 . 11) (nil fontified nil 5 . 9) (nil fontified nil 4 . 5) (nil fontified nil 1 . 4) (1 . 28)) nil (26013 9842 679975 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 54 . 55) (nil fontified nil 53 . 55) (nil fontified nil 44 . 53) (nil fontified nil 42 . 44) (nil fontified nil 38 . 42) (nil fontified nil 36 . 38) (nil fontified nil 32 . 36) (nil fontified nil 31 . 32) (nil fontified nil 28 . 31) (28 . 55)) nil (26013 9842 679971 0) 0 nil])
([nil nil ((#("use wgpu::util::DeviceExt;" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 8 (face font-lock-constant-face fontified t) 8 10 (fontified t) 10 14 (face font-lock-constant-face fontified t) 14 16 (fontified t) 16 25 (face font-lock-type-face fontified t) 25 26 (fontified t)) . 28) (undo-tree-id803 . -26)) nil (26013 9842 679967 0) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . 28) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1)) nil (26013 9842 679962 0) 0 nil])
([nil nil ((1884 . 1892) (t 26013 9842 686494 822000)) nil (26013 9849 34919 0) 0 nil])
([nil nil ((1892 . 1893)) nil (26013 9849 34918 0) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -1892) (undo-tree-id808 . -1) (undo-tree-id809 . -1) 1893) nil (26013 9849 34917 0) 0 nil])
([nil nil ((1892 . 1893)) nil (26013 9849 34913 0) 0 nil])
([nil nil ((1892 . 1905) (#("c" 0 1 (fontified nil)) . 1892) (1892 . 1893) (#("camera_buffer" 0 13 (fontified nil)) . -1892) (1892 . 1905) (#("c" 0 1 (fontified t)) . -1892) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) 1893) nil (26013 9849 34909 0) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-6-face) fontified t)) . -1757) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) 1758 (t 26013 9849 41458 389000)) nil (26013 9869 394308 0) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -1771) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) 1772) nil (26013 9869 394290 0) 0 nil])
([nil nil ((1528 . 1529) (t 26013 9869 402157 524000)) nil (26013 10013 173786 0) 0 nil])
([nil nil ((1913 . 1915) (t 26013 10013 180285 854000)) nil (26013 10367 150919 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 4846 . 4847) (nil fontified nil 1915 . 1921) (nil fontified nil 1921 . 1922) (nil fontified nil 1922 . 1938) (nil fontified nil 1938 . 1939) (nil fontified nil 1939 . 1940) (nil fontified nil 1940 . 1941) (nil fontified nil 1941 . 1945) (nil fontified nil 1945 . 1950) (nil fontified nil 1950 . 1952) (nil fontified nil 1952 . 1955) (nil fontified nil 1955 . 1961) (nil fontified nil 1961 . 1979) (nil fontified nil 1979 . 1981) (nil fontified nil 1981 . 1985) (nil fontified nil 1985 . 1991) (nil fontified nil 1991 . 2010) (nil fontified nil 2010 . 2012) (nil fontified nil 2012 . 2016) (nil fontified nil 2016 . 2022) (nil fontified nil 2022 . 2037) (nil fontified nil 2037 . 2039) (nil fontified nil 2039 . 2043) (nil fontified nil 2043 . 2049) (nil fontified nil 2049 . 2065) (nil fontified nil 2065 . 2067) (nil fontified nil 2067 . 2071) (nil fontified nil 2071 . 2073) (nil fontified nil 2073 . 2074) (nil fontified nil 2074 . 2076) (nil fontified nil 2076 . 2080) (nil fontified nil 2080 . 2081) (nil fontified nil 2081 . 2097) (nil fontified nil 2097 . 2098) (nil fontified nil 2098 . 2099) (nil fontified nil 2099 . 2104) (nil fontified nil 2104 . 2106) (nil fontified nil 2106 . 2107) (nil fontified nil 2107 . 2110) (nil fontified nil 2110 . 2111) (nil fontified nil 2111 . 2116) (nil fontified nil 2116 . 2118) (nil fontified nil 2118 . 2121) (nil fontified nil 2121 . 2122) (nil fontified nil 2122 . 2124) (nil fontified nil 2124 . 2125) (nil fontified nil 2125 . 2126) (nil fontified nil 2126 . 2130) (nil fontified nil 2130 . 2131) (nil fontified nil 2131 . 2132) (nil fontified nil 2132 . 2141) (nil fontified nil 2141 . 2145) (nil fontified nil 2145 . 2146) (nil fontified nil 2146 . 2147) (nil fontified nil 2147 . 2179) (nil fontified nil 2179 . 2197) (nil fontified nil 2197 . 2199) (nil fontified nil 2199 . 2204) (nil fontified nil 2204 . 2218) (nil fontified nil 2218 . 2237) (nil fontified nil 2237 . 2239) (nil fontified nil 2239 . 2244) (nil fontified nil 2244 . 2258) (nil fontified nil 2258 . 2273) (nil fontified nil 2273 . 2275) (nil fontified nil 2275 . 2280) (nil fontified nil 2280 . 2294) (nil fontified nil 2294 . 2310) (nil fontified nil 2310 . 2312) (nil fontified nil 2312 . 2317) (nil fontified nil 2317 . 2327) (nil fontified nil 2327 . 2328) (nil fontified nil 2328 . 2333) (nil fontified nil 2333 . 2334) (nil fontified nil 2334 . 2340) (nil fontified nil 2340 . 2342) (nil fontified nil 2342 . 2343) (nil fontified nil 2343 . 2357) (nil fontified nil 2357 . 2358) (nil fontified nil 2358 . 2359) (nil fontified nil 2359 . 2362) (nil fontified nil 2362 . 2363) (nil fontified nil 2363 . 2367) (nil fontified nil 2367 . 2369) (nil fontified nil 2369 . 2374) (nil fontified nil 2374 . 2376) (nil fontified nil 2376 . 2377) (nil fontified nil 2377 . 2388) (nil fontified nil 2388 . 2389) (nil fontified nil 2389 . 2391) (nil fontified nil 2391 . 2392) (nil fontified nil 2392 . 2393) (nil fontified nil 2393 . 2397) (nil fontified nil 2397 . 2398) (nil fontified nil 2398 . 2399) (nil fontified nil 2399 . 2408) (nil fontified nil 2408 . 2413) (nil fontified nil 2413 . 2420) (nil fontified nil 2420 . 2421) (nil fontified nil 2421 . 2434) (nil fontified nil 2434 . 2445) (nil fontified nil 2445 . 2447) (nil fontified nil 2447 . 2460) (nil fontified nil 2460 . 2461) (nil fontified nil 2461 . 2462) (nil fontified nil 2462 . 2479) (nil fontified nil 2479 . 2484) (nil fontified nil 2484 . 2486) (nil fontified nil 2486 . 2499) (nil fontified nil 2499 . 2500) (nil fontified nil 2500 . 2501) (nil fontified nil 2501 . 2549) (nil fontified nil 2549 . 2564) (nil fontified nil 2564 . 2566) (nil fontified nil 2566 . 2570) (nil fontified nil 2570 . 2571) (nil fontified nil 2571 . 2578) (nil fontified nil 2578 . 2579) (nil fontified nil 2579 . 2620) (nil fontified nil 2620 . 2621) (nil fontified nil 2621 . 2654) (nil fontified nil 2654 . 2655) (nil fontified nil 2655 . 2657) (nil fontified nil 2657 . 2658) (nil fontified nil 2658 . 2659) (nil fontified nil 2659 . 2660) (nil fontified nil 2660 . 2677) (nil fontified nil 2677 . 2680) (nil fontified nil 2680 . 2681) (nil fontified nil 2681 . 2691) (nil fontified nil 2691 . 2704) (nil fontified nil 2704 . 2716) (nil fontified nil 2716 . 2718) (nil fontified nil 2718 . 2725) (nil fontified nil 2725 . 2743) (nil fontified nil 2743 . 2748) (nil fontified nil 2748 . 2757) (nil fontified nil 2757 . 2758) (nil fontified nil 2758 . 2779) (nil fontified nil 2779 . 2793) (nil fontified nil 2793 . 2795) (nil fontified nil 2795 . 2796) (nil fontified nil 2796 . 2799) (nil fontified nil 2799 . 2813) (nil fontified nil 2813 . 2815) (nil fontified nil 2815 . 2817) (nil fontified nil 2817 . 2819) (nil fontified nil 2819 . 2820) (nil fontified nil 2820 . 2821) (nil fontified nil 2821 . 2822) (nil fontified nil 2822 . 2847) (nil fontified nil 2847 . 2851) (nil fontified nil 2851 . 2909) (nil fontified nil 2909 . 2913) (nil fontified nil 2913 . 2934) (nil fontified nil 2934 . 2935) (nil fontified nil 2935 . 2956) (nil fontified nil 2956 . 2970) (nil fontified nil 2970 . 2972) (nil fontified nil 2972 . 2973) (nil fontified nil 2973 . 2976) (nil fontified nil 2976 . 2990) (nil fontified nil 2990 . 2992) (nil fontified nil 2992 . 2996) (nil fontified nil 2996 . 2998) (nil fontified nil 2998 . 2999) (nil fontified nil 2999 . 3000) (nil fontified nil 3000 . 3001) (nil fontified nil 3001 . 3026) (nil fontified nil 3026 . 3030) (nil fontified nil 3030 . 3085) (nil fontified nil 3085 . 3089) (nil fontified nil 3089 . 3110) (nil fontified nil 3110 . 3111) (nil fontified nil 3111 . 3132) (nil fontified nil 3132 . 3146) (nil fontified nil 3146 . 3148) (nil fontified nil 3148 . 3149) (nil fontified nil 3149 . 3152) (nil fontified nil 3152 . 3166) (nil fontified nil 3166 . 3168) (nil fontified nil 3168 . 3172) (nil fontified nil 3172 . 3174) (nil fontified nil 3174 . 3175) (nil fontified nil 3175 . 3176) (nil fontified nil 3176 . 3177) (nil fontified nil 3177 . 3202) (nil fontified nil 3202 . 3206) (nil fontified nil 3206 . 3265) (nil fontified nil 3265 . 3269) (nil fontified nil 3269 . 3290) (nil fontified nil 3290 . 3291) (nil fontified nil 3291 . 3312) (nil fontified nil 3312 . 3326) (nil fontified nil 3326 . 3328) (nil fontified nil 3328 . 3329) (nil fontified nil 3329 . 3332) (nil fontified nil 3332 . 3346) (nil fontified nil 3346 . 3348) (nil fontified nil 3348 . 3353) (nil fontified nil 3353 . 3355) (nil fontified nil 3355 . 3356) (nil fontified nil 3356 . 3357) (nil fontified nil 3357 . 3358) (nil fontified nil 3358 . 3383) (nil fontified nil 3383 . 3387) (nil fontified nil 3387 . 3415) (nil fontified nil 3415 . 3419) (nil fontified nil 3419 . 3441) (nil fontified nil 3441 . 3443) (nil fontified nil 3443 . 3447) (nil fontified nil 3447 . 3448) (nil fontified nil 3448 . 3468) (nil fontified nil 3468 . 3469) (nil fontified nil 3469 . 3470) (nil fontified nil 3470 . 3493) (nil fontified nil 3493 . 3494) (nil fontified nil 3494 . 3495) (nil fontified nil 3495 . 3500) (nil fontified nil 3500 . 3502) (nil fontified nil 3502 . 3518) (nil fontified nil 3518 . 3519) (nil fontified nil 3519 . 3520) (nil fontified nil 3520 . 3532) (nil fontified nil 3532 . 3533) (nil fontified nil 3533 . 3549) (nil fontified nil 3549 . 3550) (nil fontified nil 3550 . 3551) (nil fontified nil 3551 . 3556) (nil fontified nil 3556 . 3566) (nil fontified nil 3566 . 3567) (nil fontified nil 3567 . 3568) (nil fontified nil 3568 . 3572) (nil fontified nil 3572 . 3573) (nil fontified nil 3573 . 3574) (nil fontified nil 3574 . 3575) (nil fontified nil 3575 . 3579) (nil fontified nil 3579 . 3581) (nil fontified nil 3581 . 3582) (nil fontified nil 3582 . 3595) (nil fontified nil 3595 . 3596) (nil fontified nil 3596 . 3597) (nil fontified nil 3597 . 3601) (nil fontified nil 3601 . 3603) (nil fontified nil 3603 . 3609) (nil fontified nil 3609 . 3611) (nil fontified nil 3611 . 3612) (nil fontified nil 3612 . 3615) (nil fontified nil 3615 . 3616) (nil fontified nil 3616 . 3622) (nil fontified nil 3622 . 3623) (nil fontified nil 3623 . 3624) (nil fontified nil 3624 . 3625) (nil fontified nil 3625 . 3634) (nil fontified nil 3634 . 3637) (nil fontified nil 3637 . 3638) (nil fontified nil 3638 . 3644) (nil fontified nil 3644 . 3646) (nil fontified nil 3646 . 3656) (nil fontified nil 3656 . 3658) (nil fontified nil 3658 . 3666) (nil fontified nil 3666 . 3669) (nil fontified nil 3669 . 3670) (nil fontified nil 3670 . 3677) (nil fontified nil 3677 . 3708) (nil fontified nil 3708 . 3716) (nil fontified nil 3716 . 3719) (nil fontified nil 3719 . 3720) (nil fontified nil 3720 . 3732) (nil fontified nil 3732 . 3752) (nil fontified nil 3752 . 3753) (nil fontified nil 3753 . 3754) (nil fontified nil 3754 . 3756) (nil fontified nil 3756 . 3764) (nil fontified nil 3764 . 3767) (nil fontified nil 3767 . 3768) (nil fontified nil 3768 . 3779) (nil fontified nil 3779 . 3799) (nil fontified nil 3799 . 3800) (nil fontified nil 3800 . 3801) (nil fontified nil 3801 . 3803) (nil fontified nil 3803 . 3812) (nil fontified nil 3812 . 3815) (nil fontified nil 3815 . 3872) (nil fontified nil 3872 . 3880) (nil fontified nil 3880 . 3883) (nil fontified nil 3883 . 3904) (nil fontified nil 3904 . 3912) (nil fontified nil 3912 . 3914) (nil fontified nil 3914 . 3915) (nil fontified nil 3915 . 3919) (nil fontified nil 3919 . 3954) (nil fontified nil 3954 . 3955) (nil fontified nil 3955 . 3956) (nil fontified nil 3956 . 3960) (nil fontified nil 3960 . 3967) (nil fontified nil 3967 . 3968) (nil fontified nil 3968 . 4010) (nil fontified nil 4010 . 4014) (nil fontified nil 4014 . 4030) (nil fontified nil 4030 . 4031) (nil fontified nil 4031 . 4040) (nil fontified nil 4040 . 4042) (nil fontified nil 4042 . 4043) (nil fontified nil 4043 . 4047) (nil fontified nil 4047 . 4068) (nil fontified nil 4068 . 4069) (nil fontified nil 4069 . 4111) (nil fontified nil 4111 . 4115) (nil fontified nil 4115 . 4131) (nil fontified nil 4131 . 4132) (nil fontified nil 4132 . 4142) (nil fontified nil 4142 . 4145) (nil fontified nil 4145 . 4146) (nil fontified nil 4146 . 4151) (nil fontified nil 4151 . 4172) (nil fontified nil 4172 . 4173) (nil fontified nil 4173 . 4182) (nil fontified nil 4182 . 4183) (nil fontified nil 4183 . 4194) (nil fontified nil 4194 . 4197) (nil fontified nil 4197 . 4255) (nil fontified nil 4255 . 4263) (nil fontified nil 4263 . 4266) (nil fontified nil 4266 . 4267) (nil fontified nil 4267 . 4274) (nil fontified nil 4274 . 4313) (nil fontified nil 4313 . 4316) (nil fontified nil 4316 . 4317) (nil fontified nil 4317 . 4328) (nil fontified nil 4328 . 4348) (nil fontified nil 4348 . 4349) (nil fontified nil 4349 . 4350) (nil fontified nil 4350 . 4361) (nil fontified nil 4361 . 4363) (nil fontified nil 4363 . 4364) (nil fontified nil 4364 . 4368) (nil fontified nil 4368 . 4386) (nil fontified nil 4386 . 4387) (nil fontified nil 4387 . 4400) (nil fontified nil 4400 . 4403) (nil fontified nil 4403 . 4459) (nil fontified nil 4459 . 4471) (nil fontified nil 4471 . 4474) (nil fontified nil 4474 . 4525) (nil fontified nil 4525 . 4537) (nil fontified nil 4537 . 4540) (nil fontified nil 4540 . 4587) (nil fontified nil 4587 . 4628) (nil fontified nil 4628 . 4629) (nil fontified nil 4629 . 4647) (nil fontified nil 4647 . 4651) (nil fontified nil 4651 . 4657) (nil fontified nil 4657 . 4658) (nil fontified nil 4658 . 4668) (nil fontified nil 4668 . 4669) (nil fontified nil 4669 . 4670) (nil fontified nil 4670 . 4694) (nil fontified nil 4694 . 4695) (nil fontified nil 4695 . 4704) (nil fontified nil 4704 . 4706) (nil fontified nil 4706 . 4707) (nil fontified nil 4707 . 4711) (nil fontified nil 4711 . 4728) (nil fontified nil 4728 . 4729) (nil fontified nil 4729 . 4771) (nil fontified nil 4771 . 4772) (nil fontified nil 4772 . 4790) (nil fontified nil 4790 . 4794) (nil fontified nil 4794 . 4800) (nil fontified nil 4800 . 4801) (nil fontified nil 4801 . 4811) (nil fontified nil 4811 . 4812) (nil fontified nil 4812 . 4813) (nil fontified nil 4813 . 4837) (nil fontified nil 4837 . 4838) (nil fontified nil 4838 . 4843) (nil fontified nil 4843 . 4844) (nil fontified nil 4844 . 4845) (1915 . 4847)) ((#("struct CameraController {
    speed: f32,
    is_forward_pressed: bool,
    is_backward_pressed: bool,
    is_left_pressed: bool,
    is_right_pressed: bool,
}

impl CameraController {
    fn new(speed: f32) -> Self {
        Self {
            speed,
            is_forward_pressed: false,
            is_backward_pressed: false,
            is_left_pressed: false,
            is_right_pressed: false,
        }
    }

    fn process_events(&mut self, event: &WindowEvent) -> bool {
        match event {
            WindowEvent::KeyboardInput {
                input: KeyboardInput {
                    state,
                    virtual_keycode: Some(keycode),
                    ..
                },
                ..
            } => {
                let is_pressed = *state == ElementState::Pressed;
                match keycode {
                    VirtualKeyCode::W | VirtualKeyCode::Up => {
                        self.is_forward_pressed = is_pressed;
                        true
                    }
                    VirtualKeyCode::A | VirtualKeyCode::Left => {
                        self.is_left_pressed = is_pressed;
                        true
                    }
                    VirtualKeyCode::S | VirtualKeyCode::Down => {
                        self.is_backward_pressed = is_pressed;
                        true
                    }
                    VirtualKeyCode::D | VirtualKeyCode::Right => {
                        self.is_right_pressed = is_pressed;
                        true
                    }
                    _ => false,
                }
            }
            _ => false,
        }
    }

    fn update_camera(&self, camera: &mut Camera) {
        use cgmath::InnerSpace;
        let forward = camera.target - camera.eye;
        let forward_norm = forward.normalize();
        let forward_mag = forward.magnitude();

        // Prevents glitching when the camera gets too close to the
        // center of the scene.
        if self.is_forward_pressed && forward_mag > self.speed {
            camera.eye += forward_norm * self.speed;
        }
        if self.is_backward_pressed {
            camera.eye -= forward_norm * self.speed;
        }

        let right = forward_norm.cross(camera.up);

        // Redo radius calc in case the forward/backward is pressed.
        let forward = camera.target - camera.eye;
        let forward_mag = forward.magnitude();

        if self.is_right_pressed {
            // Rescale the distance between the target and the eye so 
            // that it doesn't change. The eye, therefore, still 
            // lies on the circle made by the target and eye.
            camera.eye = camera.target - (forward + right * self.speed).normalize() * forward_mag;
        }
        if self.is_left_pressed {
            camera.eye = camera.target - (forward - right * self.speed).normalize() * forward_mag;
        }
    }
}
" 0 6 (face font-lock-keyword-face fontified nil) 6 7 (fontified nil) 7 23 (face font-lock-type-face fontified nil) 23 24 (fontified nil) 24 25 (face (rainbow-delimiters-depth-1-face) fontified nil) 25 26 (fontified nil) 26 30 (fontified nil) 30 35 (face font-lock-variable-name-face fontified nil) 35 37 (fontified nil) 37 40 (face font-lock-type-face fontified nil) 40 46 (fontified nil) 46 64 (face font-lock-variable-name-face fontified nil) 64 66 (fontified nil) 66 70 (face font-lock-type-face fontified nil) 70 76 (fontified nil) 76 95 (face font-lock-variable-name-face fontified nil) 95 97 (fontified nil) 97 101 (face font-lock-type-face fontified nil) 101 107 (fontified nil) 107 122 (face font-lock-variable-name-face fontified nil) 122 124 (fontified nil) 124 128 (face font-lock-type-face fontified nil) 128 134 (fontified nil) 134 150 (face font-lock-variable-name-face fontified nil) 150 152 (fontified nil) 152 156 (face font-lock-type-face fontified nil) 156 158 (fontified nil) 158 159 (face (rainbow-delimiters-depth-1-face) fontified nil) 159 161 (fontified nil) 161 165 (face font-lock-keyword-face fontified nil) 165 166 (fontified nil) 166 182 (face font-lock-type-face fontified nil) 182 183 (fontified nil) 183 184 (face (rainbow-delimiters-depth-1-face) fontified nil) 184 189 (fontified nil) 189 191 (face font-lock-keyword-face fontified nil) 191 192 (fontified nil) 192 195 (face font-lock-function-name-face fontified nil) 195 196 (face (rainbow-delimiters-depth-2-face) fontified nil) 196 201 (face font-lock-variable-name-face fontified nil) 201 203 (fontified nil) 203 206 (face font-lock-type-face fontified nil) 206 207 (face (rainbow-delimiters-depth-2-face) fontified nil) 207 209 (fontified nil) 209 210 (fontified nil syntax-table (1)) 210 211 (fontified nil) 211 215 (face font-lock-type-face fontified nil) 215 216 (fontified nil) 216 217 (face (rainbow-delimiters-depth-2-face) fontified nil) 217 226 (fontified nil) 226 230 (face font-lock-type-face fontified nil) 230 231 (fontified nil) 231 232 (face (rainbow-delimiters-depth-3-face) fontified nil) 232 264 (fontified nil) 264 282 (face font-lock-variable-name-face fontified nil) 282 284 (fontified nil) 284 289 (face font-lock-keyword-face fontified nil) 289 303 (fontified nil) 303 322 (face font-lock-variable-name-face fontified nil) 322 324 (fontified nil) 324 329 (face font-lock-keyword-face fontified nil) 329 343 (fontified nil) 343 358 (face font-lock-variable-name-face fontified nil) 358 360 (fontified nil) 360 365 (face font-lock-keyword-face fontified nil) 365 379 (fontified nil) 379 395 (face font-lock-variable-name-face fontified nil) 395 397 (fontified nil) 397 402 (face font-lock-keyword-face fontified nil) 402 412 (fontified nil) 412 413 (face (rainbow-delimiters-depth-3-face) fontified nil) 413 418 (fontified nil) 418 419 (face (rainbow-delimiters-depth-2-face) fontified nil) 419 425 (fontified nil) 425 427 (face font-lock-keyword-face fontified nil) 427 428 (fontified nil) 428 442 (face font-lock-function-name-face fontified nil) 442 443 (face (rainbow-delimiters-depth-2-face) fontified nil) 443 444 (face rust-ampersand-face fontified nil) 444 447 (face font-lock-keyword-face fontified nil) 447 448 (fontified nil) 448 452 (face font-lock-keyword-face fontified nil) 452 454 (fontified nil) 454 459 (face font-lock-variable-name-face fontified nil) 459 461 (fontified nil) 461 462 (face rust-ampersand-face fontified nil) 462 473 (face font-lock-type-face fontified nil) 473 474 (face (rainbow-delimiters-depth-2-face) fontified nil) 474 476 (fontified nil) 476 477 (fontified nil syntax-table (1)) 477 478 (fontified nil) 478 482 (face font-lock-type-face fontified nil) 482 483 (fontified nil) 483 484 (face (rainbow-delimiters-depth-2-face) fontified nil) 484 493 (fontified nil) 493 498 (face font-lock-keyword-face fontified nil) 498 505 (fontified nil) 505 506 (face (rainbow-delimiters-depth-3-face) fontified nil) 506 519 (fontified nil) 519 530 (face font-lock-type-face fontified nil) 530 532 (fontified nil) 532 545 (face font-lock-type-face fontified nil) 545 546 (fontified nil) 546 547 (face (rainbow-delimiters-depth-4-face) fontified nil) 547 564 (fontified nil) 564 569 (face font-lock-variable-name-face fontified nil) 569 571 (fontified nil) 571 584 (face font-lock-type-face fontified nil) 584 585 (fontified nil) 585 586 (face (rainbow-delimiters-depth-5-face) fontified nil) 586 634 (fontified nil) 634 649 (face font-lock-variable-name-face fontified nil) 649 651 (fontified nil) 651 655 (face font-lock-type-face fontified nil) 655 656 (face (rainbow-delimiters-depth-6-face) fontified nil) 656 663 (fontified nil) 663 664 (face (rainbow-delimiters-depth-6-face) fontified nil) 664 705 (fontified nil) 705 706 (face (rainbow-delimiters-depth-5-face) fontified nil) 706 739 (fontified nil) 739 740 (face (rainbow-delimiters-depth-4-face) fontified nil) 740 742 (fontified nil) 742 743 (syntax-table (1) fontified nil) 743 744 (fontified nil) 744 745 (face (rainbow-delimiters-depth-4-face) fontified nil) 745 762 (fontified nil) 762 765 (face font-lock-keyword-face fontified nil) 765 766 (fontified nil) 766 776 (face font-lock-variable-name-face fontified nil) 776 789 (fontified nil) 789 801 (face font-lock-type-face fontified nil) 801 803 (fontified nil) 803 810 (face font-lock-type-face fontified nil) 810 828 (fontified nil) 828 833 (face font-lock-keyword-face fontified nil) 833 842 (fontified nil) 842 843 (face (rainbow-delimiters-depth-5-face) fontified nil) 843 864 (fontified nil) 864 878 (face font-lock-type-face fontified nil) 878 880 (fontified nil) 880 881 (face font-lock-type-face fontified nil) 881 884 (fontified nil) 884 898 (face font-lock-type-face fontified nil) 898 900 (fontified nil) 900 902 (face font-lock-type-face fontified nil) 902 904 (fontified nil) 904 905 (syntax-table (1) fontified nil) 905 906 (fontified nil) 906 907 (face (rainbow-delimiters-depth-6-face) fontified nil) 907 932 (fontified nil) 932 936 (face font-lock-keyword-face fontified nil) 936 994 (fontified nil) 994 998 (face font-lock-keyword-face fontified nil) 998 1019 (fontified nil) 1019 1020 (face (rainbow-delimiters-depth-6-face) fontified nil) 1020 1041 (fontified nil) 1041 1055 (face font-lock-type-face fontified nil) 1055 1057 (fontified nil) 1057 1058 (face font-lock-type-face fontified nil) 1058 1061 (fontified nil) 1061 1075 (face font-lock-type-face fontified nil) 1075 1077 (fontified nil) 1077 1081 (face font-lock-type-face fontified nil) 1081 1083 (fontified nil) 1083 1084 (syntax-table (1) fontified nil) 1084 1085 (fontified nil) 1085 1086 (face (rainbow-delimiters-depth-6-face) fontified nil) 1086 1111 (fontified nil) 1111 1115 (face font-lock-keyword-face fontified nil) 1115 1170 (fontified nil) 1170 1174 (face font-lock-keyword-face fontified nil) 1174 1195 (fontified nil) 1195 1196 (face (rainbow-delimiters-depth-6-face) fontified nil) 1196 1217 (fontified nil) 1217 1231 (face font-lock-type-face fontified nil) 1231 1233 (fontified nil) 1233 1234 (face font-lock-type-face fontified nil) 1234 1237 (fontified nil) 1237 1251 (face font-lock-type-face fontified nil) 1251 1253 (fontified nil) 1253 1257 (face font-lock-type-face fontified nil) 1257 1259 (fontified nil) 1259 1260 (syntax-table (1) fontified nil) 1260 1261 (fontified nil) 1261 1262 (face (rainbow-delimiters-depth-6-face) fontified nil) 1262 1287 (fontified nil) 1287 1291 (face font-lock-keyword-face fontified nil) 1291 1350 (fontified nil) 1350 1354 (face font-lock-keyword-face fontified nil) 1354 1375 (fontified nil) 1375 1376 (face (rainbow-delimiters-depth-6-face) fontified nil) 1376 1397 (fontified nil) 1397 1411 (face font-lock-type-face fontified nil) 1411 1413 (fontified nil) 1413 1414 (face font-lock-type-face fontified nil) 1414 1417 (fontified nil) 1417 1431 (face font-lock-type-face fontified nil) 1431 1433 (fontified nil) 1433 1438 (face font-lock-type-face fontified nil) 1438 1440 (fontified nil) 1440 1441 (syntax-table (1) fontified nil) 1441 1442 (fontified nil) 1442 1443 (face (rainbow-delimiters-depth-6-face) fontified nil) 1443 1468 (fontified nil) 1468 1472 (face font-lock-keyword-face fontified nil) 1472 1500 (fontified nil) 1500 1504 (fontified nil) 1504 1526 (fontified nil) 1526 1528 (fontified nil) 1528 1532 (fontified nil face font-lock-keyword-face) 1532 1533 (fontified nil) 1533 1553 (fontified nil) 1553 1554 (face (rainbow-delimiters-depth-6-face) fontified nil) 1554 1555 (fontified nil) 1555 1578 (fontified nil) 1578 1579 (fontified nil syntax-table (1)) 1579 1580 (fontified nil) 1580 1585 (face font-lock-keyword-face fontified nil) 1585 1587 (fontified nil) 1587 1603 (fontified nil) 1603 1604 (face (rainbow-delimiters-depth-5-face) fontified nil) 1604 1605 (fontified nil) 1605 1617 (fontified nil) 1617 1618 (face (rainbow-delimiters-depth-4-face) fontified nil) 1618 1634 (fontified nil) 1634 1635 (fontified nil syntax-table (1)) 1635 1636 (fontified nil) 1636 1641 (face font-lock-keyword-face fontified nil) 1641 1651 (fontified nil) 1651 1652 (face (rainbow-delimiters-depth-3-face) fontified nil) 1652 1653 (fontified nil) 1653 1657 (fontified nil) 1657 1658 (face (rainbow-delimiters-depth-2-face) fontified nil) 1658 1659 (fontified nil) 1659 1660 (fontified nil) 1660 1664 (fontified nil) 1664 1666 (face font-lock-keyword-face fontified nil) 1666 1667 (fontified nil) 1667 1680 (face font-lock-function-name-face fontified nil) 1680 1681 (face (rainbow-delimiters-depth-2-face) fontified nil) 1681 1682 (face rust-ampersand-face fontified nil) 1682 1686 (face font-lock-keyword-face fontified nil) 1686 1688 (fontified nil) 1688 1694 (face font-lock-variable-name-face fontified nil) 1694 1696 (fontified nil) 1696 1697 (face rust-ampersand-face fontified nil) 1697 1700 (face font-lock-keyword-face fontified nil) 1700 1701 (fontified nil) 1701 1707 (face font-lock-type-face fontified nil) 1707 1708 (face (rainbow-delimiters-depth-2-face) fontified nil) 1708 1709 (fontified nil) 1709 1710 (face (rainbow-delimiters-depth-2-face) fontified nil) 1710 1719 (fontified nil) 1719 1722 (face font-lock-keyword-face fontified nil) 1722 1723 (fontified nil) 1723 1729 (face font-lock-constant-face fontified nil) 1729 1731 (fontified nil) 1731 1741 (face font-lock-type-face fontified nil) 1741 1743 (fontified nil) 1743 1751 (fontified nil) 1751 1754 (face font-lock-keyword-face fontified nil) 1754 1755 (fontified nil) 1755 1762 (face font-lock-variable-name-face fontified nil) 1762 1793 (fontified nil) 1793 1801 (fontified nil) 1801 1804 (face font-lock-keyword-face fontified nil) 1804 1805 (fontified nil) 1805 1817 (face font-lock-variable-name-face fontified nil) 1817 1837 (fontified nil) 1837 1838 (face (rainbow-delimiters-depth-3-face) fontified nil) 1838 1839 (face (rainbow-delimiters-depth-3-face) fontified nil) 1839 1841 (fontified nil) 1841 1849 (fontified nil) 1849 1852 (face font-lock-keyword-face fontified nil) 1852 1853 (fontified nil) 1853 1864 (face font-lock-variable-name-face fontified nil) 1864 1884 (fontified nil) 1884 1885 (face (rainbow-delimiters-depth-3-face) fontified nil) 1885 1886 (face (rainbow-delimiters-depth-3-face) fontified nil) 1886 1888 (fontified nil) 1888 1897 (fontified nil) 1897 1900 (face font-lock-comment-delimiter-face fontified nil) 1900 1957 (face font-lock-comment-face fontified nil) 1957 1965 (fontified nil) 1965 1968 (face font-lock-comment-delimiter-face fontified nil) 1968 1989 (face font-lock-comment-face fontified nil) 1989 1997 (fontified nil) 1997 1999 (face font-lock-keyword-face fontified nil) 1999 2000 (fontified nil) 2000 2004 (face font-lock-keyword-face fontified nil) 2004 2039 (fontified nil) 2039 2040 (fontified nil syntax-table (1)) 2040 2041 (fontified nil) 2041 2045 (face font-lock-keyword-face fontified nil) 2045 2052 (fontified nil) 2052 2053 (face (rainbow-delimiters-depth-3-face) fontified nil) 2053 2095 (fontified nil) 2095 2099 (face font-lock-keyword-face fontified nil) 2099 2115 (fontified nil) 2115 2116 (face (rainbow-delimiters-depth-3-face) fontified nil) 2116 2125 (fontified nil) 2125 2127 (face font-lock-keyword-face fontified nil) 2127 2128 (fontified nil) 2128 2132 (face font-lock-keyword-face fontified nil) 2132 2153 (fontified nil) 2153 2154 (face (rainbow-delimiters-depth-3-face) fontified nil) 2154 2196 (fontified nil) 2196 2200 (face font-lock-keyword-face fontified nil) 2200 2216 (fontified nil) 2216 2217 (face (rainbow-delimiters-depth-3-face) fontified nil) 2217 2227 (fontified nil) 2227 2230 (face font-lock-keyword-face fontified nil) 2230 2231 (fontified nil) 2231 2236 (face font-lock-variable-name-face fontified nil) 2236 2257 (fontified nil) 2257 2258 (face (rainbow-delimiters-depth-3-face) fontified nil) 2258 2267 (fontified nil) 2267 2268 (face (rainbow-delimiters-depth-3-face) fontified nil) 2268 2279 (fontified nil) 2279 2282 (face font-lock-comment-delimiter-face fontified nil) 2282 2340 (face font-lock-comment-face fontified nil) 2340 2348 (fontified nil) 2348 2351 (face font-lock-keyword-face fontified nil) 2351 2352 (fontified nil) 2352 2359 (face font-lock-variable-name-face fontified nil) 2359 2398 (fontified nil) 2398 2401 (face font-lock-keyword-face fontified nil) 2401 2402 (fontified nil) 2402 2413 (face font-lock-variable-name-face fontified nil) 2413 2433 (fontified nil) 2433 2434 (face (rainbow-delimiters-depth-3-face) fontified nil) 2434 2435 (face (rainbow-delimiters-depth-3-face) fontified nil) 2435 2446 (fontified nil) 2446 2448 (face font-lock-keyword-face fontified nil) 2448 2449 (fontified nil) 2449 2453 (face font-lock-keyword-face fontified nil) 2453 2471 (fontified nil) 2471 2472 (face (rainbow-delimiters-depth-3-face) fontified nil) 2472 2485 (fontified nil) 2485 2488 (face font-lock-comment-delimiter-face fontified nil) 2488 2544 (face font-lock-comment-face fontified nil) 2544 2556 (fontified nil) 2556 2559 (face font-lock-comment-delimiter-face fontified nil) 2559 2610 (face font-lock-comment-face fontified nil) 2610 2622 (fontified nil) 2622 2625 (face font-lock-comment-delimiter-face fontified nil) 2625 2672 (face font-lock-comment-face fontified nil) 2672 2713 (fontified nil) 2713 2714 (face (rainbow-delimiters-depth-4-face) fontified nil) 2714 2732 (fontified nil) 2732 2736 (face font-lock-keyword-face fontified nil) 2736 2742 (fontified nil) 2742 2743 (face (rainbow-delimiters-depth-4-face) fontified nil) 2743 2753 (fontified nil) 2753 2754 (face (rainbow-delimiters-depth-4-face) fontified nil) 2754 2755 (face (rainbow-delimiters-depth-4-face) fontified nil) 2755 2779 (fontified nil) 2779 2780 (face (rainbow-delimiters-depth-3-face) fontified nil) 2780 2789 (fontified nil) 2789 2791 (face font-lock-keyword-face fontified nil) 2791 2792 (fontified nil) 2792 2796 (face font-lock-keyword-face fontified nil) 2796 2813 (fontified nil) 2813 2814 (face (rainbow-delimiters-depth-3-face) fontified nil) 2814 2856 (fontified nil) 2856 2857 (face (rainbow-delimiters-depth-4-face) fontified nil) 2857 2875 (fontified nil) 2875 2879 (face font-lock-keyword-face fontified nil) 2879 2885 (fontified nil) 2885 2886 (face (rainbow-delimiters-depth-4-face) fontified nil) 2886 2896 (fontified nil) 2896 2897 (face (rainbow-delimiters-depth-4-face) fontified nil) 2897 2898 (face (rainbow-delimiters-depth-4-face) fontified nil) 2898 2922 (fontified nil) 2922 2923 (face (rainbow-delimiters-depth-3-face) fontified nil) 2923 2928 (fontified nil) 2928 2929 (face (rainbow-delimiters-depth-2-face) fontified nil) 2929 2930 (fontified nil) 2930 2931 (face (rainbow-delimiters-depth-1-face) fontified nil) 2931 2932 (fontified nil rear-nonsticky nil)) . 1915) (undo-tree-id862 . -30) (undo-tree-id863 . -76) (undo-tree-id864 . -76) (undo-tree-id865 . -76) (undo-tree-id866 . -76) (undo-tree-id867 . -76) (undo-tree-id868 . -76) (undo-tree-id869 . -30) (undo-tree-id870 . -134) (undo-tree-id871 . -134) (undo-tree-id872 . -134) (undo-tree-id873 . -134) (undo-tree-id874 . -134) (undo-tree-id875 . -134) (undo-tree-id876 . -134) (undo-tree-id877 . -134) (undo-tree-id878 . -134) (undo-tree-id879 . -134) (undo-tree-id880 . -134) (undo-tree-id881 . -134) (undo-tree-id882 . -134) (undo-tree-id883 . -134) (undo-tree-id884 . -134) (undo-tree-id885 . -134) (undo-tree-id886 . -134) (undo-tree-id887 . 2798) (undo-tree-id888 . -30) (undo-tree-id889 . -30) (undo-tree-id890 . -30) (undo-tree-id891 . -134) (undo-tree-id892 . -134) (undo-tree-id893 . -134) (undo-tree-id894 . -134) (undo-tree-id895 . -134) (undo-tree-id896 . -134) (undo-tree-id897 . -134) (undo-tree-id898 . -134) (undo-tree-id899 . -134) (undo-tree-id900 . -134) (nil fontified t 4844 . 4845) (nil fontified t 4843 . 4844) (nil fontified t 4838 . 4843) (nil fontified t 4837 . 4838) (nil fontified t 4813 . 4837) (nil fontified t 4812 . 4813) (nil fontified t 4811 . 4812) (nil fontified t 4801 . 4811) (nil fontified t 4800 . 4801) (nil fontified t 4794 . 4800) (nil fontified t 4790 . 4794) (nil fontified t 4772 . 4790) (nil fontified t 4771 . 4772) (nil fontified t 4729 . 4771) (nil fontified t 4728 . 4729) (nil fontified t 4711 . 4728) (nil fontified t 4707 . 4711) (nil fontified t 4706 . 4707) (nil fontified t 4704 . 4706) (nil fontified t 4695 . 4704) (nil fontified t 4694 . 4695) (nil fontified t 4670 . 4694) (nil fontified t 4669 . 4670) (nil fontified t 4668 . 4669) (nil fontified t 4658 . 4668) (nil fontified t 4657 . 4658) (nil fontified t 4651 . 4657) (nil fontified t 4647 . 4651) (nil fontified t 4629 . 4647) (nil fontified t 4628 . 4629) (nil fontified t 4587 . 4628) (nil fontified t 4540 . 4587) (nil fontified t 4537 . 4540) (nil fontified t 4525 . 4537) (nil fontified t 4474 . 4525) (nil fontified t 4471 . 4474) (nil fontified t 4459 . 4471) (nil fontified t 4403 . 4459) (nil fontified t 4400 . 4403) (nil fontified t 4387 . 4400) (nil fontified t 4386 . 4387) (nil fontified t 4368 . 4386) (nil fontified t 4364 . 4368) (nil fontified t 4363 . 4364) (nil fontified t 4361 . 4363) (nil fontified t 4350 . 4361) (nil fontified t 4349 . 4350) (nil fontified t 4348 . 4349) (nil fontified t 4328 . 4348) (nil fontified t 4317 . 4328) (nil fontified t 4316 . 4317) (nil fontified t 4313 . 4316) (nil fontified t 4274 . 4313) (nil fontified t 4267 . 4274) (nil fontified t 4266 . 4267) (nil fontified t 4263 . 4266) (nil fontified t 4255 . 4263) (nil fontified t 4197 . 4255) (nil fontified t 4194 . 4197) (nil fontified t 4183 . 4194) (nil fontified t 4182 . 4183) (nil fontified t 4173 . 4182) (nil fontified t 4172 . 4173) (nil fontified t 4151 . 4172) (nil fontified t 4146 . 4151) (nil fontified t 4145 . 4146) (nil fontified t 4142 . 4145) (nil fontified t 4132 . 4142) (nil fontified t 4131 . 4132) (nil fontified t 4115 . 4131) (nil fontified t 4111 . 4115) (nil fontified t 4069 . 4111) (nil fontified t 4068 . 4069) (nil fontified t 4047 . 4068) (nil fontified t 4043 . 4047) (nil fontified t 4042 . 4043) (nil fontified t 4040 . 4042) (nil fontified t 4031 . 4040) (nil fontified t 4030 . 4031) (nil fontified t 4014 . 4030) (nil fontified t 4010 . 4014) (nil fontified t 3968 . 4010) (nil fontified t 3967 . 3968) (nil fontified t 3960 . 3967) (nil fontified t 3956 . 3960) (nil fontified t 3955 . 3956) (nil fontified t 3954 . 3955) (nil fontified t 3919 . 3954) (nil fontified t 3915 . 3919) (nil fontified t 3914 . 3915) (nil fontified t 3912 . 3914) (nil fontified t 3904 . 3912) (nil fontified t 3883 . 3904) (nil fontified t 3880 . 3883) (nil fontified t 3872 . 3880) (nil fontified t 3815 . 3872) (nil fontified t 3812 . 3815) (nil fontified t 3803 . 3812) (nil fontified t 3801 . 3803) (nil fontified t 3800 . 3801) (nil fontified t 3799 . 3800) (nil fontified t 3779 . 3799) (nil fontified t 3768 . 3779) (nil fontified t 3767 . 3768) (nil fontified t 3764 . 3767) (nil fontified t 3756 . 3764) (nil fontified t 3754 . 3756) (nil fontified t 3753 . 3754) (nil fontified t 3752 . 3753) (nil fontified t 3732 . 3752) (nil fontified t 3720 . 3732) (nil fontified t 3719 . 3720) (nil fontified t 3716 . 3719) (nil fontified t 3708 . 3716) (nil fontified t 3677 . 3708) (nil fontified t 3670 . 3677) (nil fontified t 3669 . 3670) (nil fontified t 3666 . 3669) (nil fontified t 3658 . 3666) (nil fontified t 3656 . 3658) (nil fontified t 3646 . 3656) (nil fontified t 3644 . 3646) (nil fontified t 3638 . 3644) (nil fontified t 3637 . 3638) (nil fontified t 3634 . 3637) (nil fontified t 3625 . 3634) (nil fontified t 3624 . 3625) (nil fontified t 3623 . 3624) (nil fontified t 3622 . 3623) (nil fontified t 3616 . 3622) (nil fontified t 3615 . 3616) (nil fontified t 3612 . 3615) (nil fontified t 3611 . 3612) (nil fontified t 3609 . 3611) (nil fontified t 3603 . 3609) (nil fontified t 3601 . 3603) (nil fontified t 3597 . 3601) (nil fontified t 3596 . 3597) (nil fontified t 3595 . 3596) (nil fontified t 3582 . 3595) (nil fontified t 3581 . 3582) (nil fontified t 3579 . 3581) (nil fontified t 3575 . 3579) (nil fontified t 3574 . 3575) (nil fontified t 3573 . 3574) (nil fontified t 3572 . 3573) (nil fontified t 3568 . 3572) (nil fontified t 3567 . 3568) (nil fontified t 3566 . 3567) (nil fontified t 3556 . 3566) (nil fontified t 3551 . 3556) (nil fontified t 3550 . 3551) (nil fontified t 3549 . 3550) (nil fontified t 3533 . 3549) (nil fontified t 3532 . 3533) (nil fontified t 3520 . 3532) (nil fontified t 3519 . 3520) (nil fontified t 3518 . 3519) (nil fontified t 3502 . 3518) (nil fontified t 3500 . 3502) (nil fontified t 3495 . 3500) (nil fontified t 3494 . 3495) (nil fontified t 3493 . 3494) (nil fontified t 3470 . 3493) (nil fontified t 3469 . 3470) (nil fontified t 3468 . 3469) (nil fontified t 3448 . 3468) (nil fontified t 3447 . 3448) (nil fontified t 3443 . 3447) (nil fontified t 3441 . 3443) (nil fontified t 3419 . 3441) (nil fontified t 3415 . 3419) (nil fontified t 3387 . 3415) (nil fontified t 3383 . 3387) (nil fontified t 3358 . 3383) (nil fontified t 3357 . 3358) (nil fontified t 3356 . 3357) (nil fontified t 3355 . 3356) (nil fontified t 3353 . 3355) (nil fontified t 3348 . 3353) (nil fontified t 3346 . 3348) (nil fontified t 3332 . 3346) (nil fontified t 3329 . 3332) (nil fontified t 3328 . 3329) (nil fontified t 3326 . 3328) (nil fontified t 3312 . 3326) (nil fontified t 3291 . 3312) (nil fontified t 3290 . 3291) (nil fontified t 3269 . 3290) (nil fontified t 3265 . 3269) (nil fontified t 3206 . 3265) (nil fontified t 3202 . 3206) (nil fontified t 3177 . 3202) (nil fontified t 3176 . 3177) (nil fontified t 3175 . 3176) (nil fontified t 3174 . 3175) (nil fontified t 3172 . 3174) (nil fontified t 3168 . 3172) (nil fontified t 3166 . 3168) (nil fontified t 3152 . 3166) (nil fontified t 3149 . 3152) (nil fontified t 3148 . 3149) (nil fontified t 3146 . 3148) (nil fontified t 3132 . 3146) (nil fontified t 3111 . 3132) (nil fontified t 3110 . 3111) (nil fontified t 3089 . 3110) (nil fontified t 3085 . 3089) (nil fontified t 3030 . 3085) (nil fontified t 3026 . 3030) (nil fontified t 3001 . 3026) (nil fontified t 3000 . 3001) (nil fontified t 2999 . 3000) (nil fontified t 2998 . 2999) (nil fontified t 2996 . 2998) (nil fontified t 2992 . 2996) (nil fontified t 2990 . 2992) (nil fontified t 2976 . 2990) (nil fontified t 2973 . 2976) (nil fontified t 2972 . 2973) (nil fontified t 2970 . 2972) (nil fontified t 2956 . 2970) (nil fontified t 2935 . 2956) (nil fontified t 2934 . 2935) (nil fontified t 2913 . 2934) (nil fontified t 2909 . 2913) (nil fontified t 2851 . 2909) (nil fontified t 2847 . 2851) (nil fontified t 2822 . 2847) (nil fontified t 2821 . 2822) (nil fontified t 2820 . 2821) (nil fontified t 2819 . 2820) (nil fontified t 2817 . 2819) (nil fontified t 2815 . 2817) (nil fontified t 2813 . 2815) (nil fontified t 2799 . 2813) (nil fontified t 2796 . 2799) (nil fontified t 2795 . 2796) (nil fontified t 2793 . 2795) (nil fontified t 2779 . 2793) (nil fontified t 2758 . 2779) (nil fontified t 2757 . 2758) (nil fontified t 2748 . 2757) (nil fontified t 2743 . 2748) (nil fontified t 2725 . 2743) (nil fontified t 2718 . 2725) (nil fontified t 2716 . 2718) (nil fontified t 2704 . 2716) (nil fontified t 2691 . 2704) (nil fontified t 2681 . 2691) (nil fontified t 2680 . 2681) (nil fontified t 2677 . 2680) (nil fontified t 2660 . 2677) (nil fontified t 2659 . 2660) (nil fontified t 2658 . 2659) (nil fontified t 2657 . 2658) (nil fontified t 2655 . 2657) (nil fontified t 2654 . 2655) (nil fontified t 2621 . 2654) (nil fontified t 2620 . 2621) (nil fontified t 2579 . 2620) (nil fontified t 2578 . 2579) (nil fontified t 2571 . 2578) (nil fontified t 2570 . 2571) (nil fontified t 2566 . 2570) (nil fontified t 2564 . 2566) (nil fontified t 2549 . 2564) (nil fontified t 2501 . 2549) (nil fontified t 2500 . 2501) (nil fontified t 2499 . 2500) (nil fontified t 2486 . 2499) (nil fontified t 2484 . 2486) (nil fontified t 2479 . 2484) (nil fontified t 2462 . 2479) (nil fontified t 2461 . 2462) (nil fontified t 2460 . 2461) (nil fontified t 2447 . 2460) (nil fontified t 2445 . 2447) (nil fontified t 2434 . 2445) (nil fontified t 2421 . 2434) (nil fontified t 2420 . 2421) (nil fontified t 2413 . 2420) (nil fontified t 2408 . 2413) (nil fontified t 2399 . 2408) (nil fontified t 2398 . 2399) (nil fontified t 2397 . 2398) (nil fontified t 2393 . 2397) (nil fontified t 2392 . 2393) (nil fontified t 2391 . 2392) (nil fontified t 2389 . 2391) (nil fontified t 2388 . 2389) (nil fontified t 2377 . 2388) (nil fontified t 2376 . 2377) (nil fontified t 2374 . 2376) (nil fontified t 2369 . 2374) (nil fontified t 2367 . 2369) (nil fontified t 2363 . 2367) (nil fontified t 2362 . 2363) (nil fontified t 2359 . 2362) (nil fontified t 2358 . 2359) (nil fontified t 2357 . 2358) (nil fontified t 2343 . 2357) (nil fontified t 2342 . 2343) (nil fontified t 2340 . 2342) (nil fontified t 2334 . 2340) (nil fontified t 2333 . 2334) (nil fontified t 2328 . 2333) (nil fontified t 2327 . 2328) (nil fontified t 2317 . 2327) (nil fontified t 2312 . 2317) (nil fontified t 2310 . 2312) (nil fontified t 2294 . 2310) (nil fontified t 2280 . 2294) (nil fontified t 2275 . 2280) (nil fontified t 2273 . 2275) (nil fontified t 2258 . 2273) (nil fontified t 2244 . 2258) (nil fontified t 2239 . 2244) (nil fontified t 2237 . 2239) (nil fontified t 2218 . 2237) (nil fontified t 2204 . 2218) (nil fontified t 2199 . 2204) (nil fontified t 2197 . 2199) (nil fontified t 2179 . 2197) (nil fontified t 2147 . 2179) (nil fontified t 2146 . 2147) (nil fontified t 2145 . 2146) (nil fontified t 2141 . 2145) (nil fontified t 2132 . 2141) (nil fontified t 2131 . 2132) (nil fontified t 2130 . 2131) (nil fontified t 2126 . 2130) (nil fontified t 2125 . 2126) (nil fontified t 2124 . 2125) (nil fontified t 2122 . 2124) (nil fontified t 2121 . 2122) (nil fontified t 2118 . 2121) (nil fontified t 2116 . 2118) (nil fontified t 2111 . 2116) (nil fontified t 2110 . 2111) (nil fontified t 2107 . 2110) (nil fontified t 2106 . 2107) (nil fontified t 2104 . 2106) (nil fontified t 2099 . 2104) (nil fontified t 2098 . 2099) (nil fontified t 2097 . 2098) (nil fontified t 2081 . 2097) (nil fontified t 2080 . 2081) (nil fontified t 2076 . 2080) (nil fontified t 2074 . 2076) (nil fontified t 2073 . 2074) (nil fontified t 2071 . 2073) (nil fontified t 2067 . 2071) (nil fontified t 2065 . 2067) (nil fontified t 2049 . 2065) (nil fontified t 2043 . 2049) (nil fontified t 2039 . 2043) (nil fontified t 2037 . 2039) (nil fontified t 2022 . 2037) (nil fontified t 2016 . 2022) (nil fontified t 2012 . 2016) (nil fontified t 2010 . 2012) (nil fontified t 1991 . 2010) (nil fontified t 1985 . 1991) (nil fontified t 1981 . 1985) (nil fontified t 1979 . 1981) (nil fontified t 1961 . 1979) (nil fontified t 1955 . 1961) (nil fontified t 1952 . 1955) (nil fontified t 1950 . 1952) (nil fontified t 1945 . 1950) (nil fontified t 1941 . 1945) (nil fontified t 1940 . 1941) (nil fontified t 1939 . 1940) (nil fontified t 1938 . 1939) (nil fontified t 1922 . 1938) (nil fontified t 1921 . 1922) (nil fontified t 1915 . 1921) (nil rear-nonsticky t 4846 . 4847) (t 26013 10322 526814 265000)) (26013 10372 595852 0) 0 nil])
([nil nil ((1915 . 1919) (t 26013 10322 526814 265000)) ((#("pub " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . 1915)) (26013 10374 191017 0) 0 nil])
([nil nil ((2069 . 2073) (2038 . 2042) (2003 . 2007) (1969 . 1973) (1949 . 1953) 2053) nil (26013 10401 302239 0) 0 nil] [nil nil ((#("speed: f32,
    is_forward_pressed: bool,
    is_backward_pressed: bool,
    is_left_pressed: bool,
    " 0 5 (face font-lock-variable-name-face) 7 10 (face font-lock-type-face) 16 34 (face font-lock-variable-name-face) 36 40 (face font-lock-type-face) 46 65 (face font-lock-variable-name-face) 67 71 (face font-lock-type-face) 77 92 (face font-lock-variable-name-face) 94 98 (face font-lock-type-face)) . 1949) (undo-tree-id901 . -46) (undo-tree-id902 . -46) (undo-tree-id903 . -46) (undo-tree-id904 . -46) (undo-tree-id905 . -46) (undo-tree-id906 . -46) (undo-tree-id907 . -104) (undo-tree-id908 . -104) (undo-tree-id909 . -104) (undo-tree-id910 . -104) (undo-tree-id911 . -104) (undo-tree-id912 . -104) (undo-tree-id913 . -104) (undo-tree-id914 . -104) (undo-tree-id915 . -104) (undo-tree-id916 . -104) (undo-tree-id917 . -104) (undo-tree-id918 . -104) (undo-tree-id919 . -104) (undo-tree-id920 . -104) (undo-tree-id921 . -104) (undo-tree-id922 . -104) (undo-tree-id923 . -104) (undo-tree-id924 . -104) (undo-tree-id925 . -104) (undo-tree-id926 . -104) (undo-tree-id927 . -104) (undo-tree-id928 . -104) (undo-tree-id929 . -104) (undo-tree-id930 . -104) (undo-tree-id931 . -104) (undo-tree-id932 . -104)) ((1949 . 2053)) (26013 10373 532465 0) 0 nil])
([nil nil ((2128 . 2131)) nil (26013 10401 302236 0) 0 nil])
([nil nil ((1949 . 1950)) ((#("p" 0 1 (face font-lock-variable-name-face fontified t)) . 1949) (undo-tree-id860 . -1) (undo-tree-id861 . -1)) (26013 10365 2294 0) 0 nil])
([nil nil ((2131 . 2132)) nil (26013 10401 302234 0) 0 nil])
nil
([nil nil ((2368 . 2372)) nil (26013 10401 302230 0) 0 nil])
([nil nil ((3611 . 3615) (t 26013 10401 311768 456000)) nil (26013 10406 466170 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -3613) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (#("b" 0 1 (fontified t)) . -3614) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) 3615) nil (26013 10406 466167 0) 0 nil])
([nil nil ((3613 . 3615)) nil (26013 10406 466143 0) 0 nil])
([nil nil ((27 . 28) (t 26013 10406 475614 437000)) nil (26013 10475 473076 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 202 . 203) (nil fontified nil 202 . 203) (nil fontified nil 201 . 202) (nil fontified nil 199 . 201) (nil fontified nil 198 . 199) (nil fontified nil 191 . 198) (nil fontified nil 189 . 191) (nil fontified nil 178 . 189) (nil fontified nil 177 . 178) (nil fontified nil 175 . 177) (nil fontified nil 167 . 175) (nil fontified nil 165 . 167) (nil fontified nil 152 . 165) (nil fontified nil 150 . 152) (nil fontified nil 144 . 150) (nil fontified nil 138 . 144) (nil fontified nil 137 . 138) (nil fontified nil 128 . 137) (nil fontified nil 126 . 128) (nil fontified nil 115 . 126) (nil fontified nil 114 . 115) (nil fontified nil 112 . 114) (nil fontified nil 102 . 112) (nil fontified nil 96 . 102) (nil fontified nil 95 . 96) (nil fontified nil 83 . 95) (nil fontified nil 81 . 83) (nil fontified nil 73 . 81) (nil fontified nil 71 . 73) (nil fontified nil 60 . 71) (nil fontified nil 58 . 60) (nil fontified nil 53 . 58) (nil fontified nil 52 . 53) (nil fontified nil 50 . 52) (nil fontified nil 45 . 50) (nil fontified nil 41 . 45) (nil fontified nil 40 . 41) (nil fontified nil 39 . 40) (nil fontified nil 37 . 39) (nil fontified nil 32 . 37) (nil fontified nil 31 . 32) (nil fontified nil 28 . 31) (28 . 203)) nil (26013 10475 473070 0) 0 nil])
([nil nil ((#("input" 0 5 (face font-lock-variable-name-face fontified t)) . -2687) (undo-tree-id1228 . -5) (undo-tree-id1229 . -5) (undo-tree-id1230 . -5) (undo-tree-id1231 . -5) (undo-tree-id1232 . -5) (undo-tree-id1233 . -5) (undo-tree-id1234 . -5) 2692 (t 26013 10475 482581 478000)) nil (26013 10561 543439 0) 0 nil])
([nil nil ((2687 . 2688)) nil (26013 10561 543430 0) 0 nil])
([nil nil ((2687 . 2692) (#("e" 0 1 (fontified nil)) . 2687) (2687 . 2688) (#("event" 0 5 (fontified nil)) . -2687) (2687 . 2692) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -2687) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) 2688) nil (26013 10561 543428 0) 0 nil])
([nil nil ((#(" KeyboardInput {
                    state,
                    virtual_keycode: Some(keycode),
                    ..
                },
                .." 0 1 (fontified t) 1 14 (face font-lock-type-face fontified t) 14 15 (fontified t) 15 16 (face (rainbow-delimiters-depth-5-face) fontified t) 16 17 (fontified t) 17 64 (fontified t) 64 79 (face font-lock-variable-name-face fontified t) 79 81 (fontified t) 81 85 (face font-lock-type-face fontified t) 85 86 (face (rainbow-delimiters-depth-6-face) fontified t) 86 93 (fontified t) 93 94 (face (rainbow-delimiters-depth-6-face) fontified t) 94 135 (fontified t) 135 136 (face (rainbow-delimiters-depth-5-face) fontified t) 136 156 (fontified t)) . -2693) (undo-tree-id1210 . -96) (undo-tree-id1211 . -156) (undo-tree-id1212 . -156) (undo-tree-id1213 . -137) (undo-tree-id1214 . -156) (undo-tree-id1215 . -156) (undo-tree-id1216 . -156) (undo-tree-id1217 . -156) (undo-tree-id1218 . -138) (undo-tree-id1219 . -156) (undo-tree-id1220 . -156) (undo-tree-id1221 . -156) (undo-tree-id1222 . -156) 2849) nil (26013 10561 543420 0) 0 nil])
([nil nil ((2693 . 2697)) nil (26013 10561 543406 0) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -2694) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (#("h" 0 1 (fontified t)) . -2695) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (#("y" 0 1 (fontified t)) . -2696) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) 2697) nil (26013 10561 543403 0) 0 nil])
([nil nil ((2694 . 2700)) nil (26013 10561 543371 0) 0 nil])
([nil nil ((#("a" 0 1 (face font-lock-type-face fontified t)) . -2698) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -2699) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) 2700) nil (26013 10561 543369 0) 0 nil])
([nil nil ((2698 . 2700)) nil (26013 10561 543353 0) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-type-face fontified t)) . -2697) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -2698) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -2699) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) 2700) nil (26013 10561 543350 0) 0 nil])
([nil nil ((2697 . 2698)) nil (26013 10561 543318 0) 0 nil])
([nil nil ((2698 . 2702)) nil (26013 10561 543317 0) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-type-face fontified t)) . -2698) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -2699) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -2700) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -2701) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) 2702) nil (26013 10561 543314 0) 0 nil])
([nil nil ((2698 . 2699)) nil (26013 10561 543270 0) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-type-face fontified t)) . -2698) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) 2699) nil (26013 10561 543269 0) 0 nil])
([nil nil ((2698 . 2700)) nil (26013 10561 543263 0) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-type-face fontified t)) . -2698) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -2699) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) 2700) nil (26013 10561 543261 0) 0 nil])
([nil nil ((2698 . 2708)) nil (26013 10561 543246 0) 0 nil])
([nil nil ((#("PhysicalKey {}" 0 11 (face font-lock-type-face fontified t) 11 12 (fontified t) 12 13 (face (rainbow-delimiters-depth-5-face) fontified t) 13 14 (face (rainbow-delimiters-depth-5-face) fontified t)) . -2694) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -2) (undo-tree-id975 . -2) (undo-tree-id976 . -2) (undo-tree-id977 . -3) (undo-tree-id978 . -3) (undo-tree-id979 . -3) (undo-tree-id980 . -3) (undo-tree-id981 . -3) (undo-tree-id982 . -3) (undo-tree-id983 . -3) (undo-tree-id984 . -3) (undo-tree-id985 . -3) (undo-tree-id986 . -3) (undo-tree-id987 . -3) (undo-tree-id988 . -3) (undo-tree-id989 . -3) (undo-tree-id990 . -3) (undo-tree-id991 . -3) (undo-tree-id992 . -3) (undo-tree-id993 . -3) (undo-tree-id994 . -3) (undo-tree-id995 . -3) (undo-tree-id996 . -3) (undo-tree-id997 . -3) (undo-tree-id998 . -3) (undo-tree-id999 . -3) (undo-tree-id1000 . -3) (undo-tree-id1001 . -3) (undo-tree-id1002 . -4) (undo-tree-id1003 . -4) (undo-tree-id1004 . -4) (undo-tree-id1005 . -4) (undo-tree-id1006 . -4) (undo-tree-id1007 . -4) (undo-tree-id1008 . -4) (undo-tree-id1009 . -4) (undo-tree-id1010 . -4) (undo-tree-id1011 . -4) (undo-tree-id1012 . -4) (undo-tree-id1013 . -4) (undo-tree-id1014 . -4) (undo-tree-id1015 . -4) (undo-tree-id1016 . -4) (undo-tree-id1017 . -4) (undo-tree-id1018 . -4) (undo-tree-id1019 . -4) (undo-tree-id1020 . -4) (undo-tree-id1021 . -4) (undo-tree-id1022 . -4) (undo-tree-id1023 . -4) (undo-tree-id1024 . -4) (undo-tree-id1025 . -4) (undo-tree-id1026 . -4) (undo-tree-id1027 . -4) (undo-tree-id1028 . -4) (undo-tree-id1029 . -4) (undo-tree-id1030 . -4) (undo-tree-id1031 . -4) (undo-tree-id1032 . -4) (undo-tree-id1033 . -4) (undo-tree-id1034 . -4) (undo-tree-id1035 . -4) (undo-tree-id1036 . -4) (undo-tree-id1037 . -4) (undo-tree-id1038 . -4) (undo-tree-id1039 . -5) (undo-tree-id1040 . -5) (undo-tree-id1041 . -6) (undo-tree-id1042 . -6) (undo-tree-id1043 . -7) (undo-tree-id1044 . -7) (undo-tree-id1045 . -8) (undo-tree-id1046 . -8) (undo-tree-id1047 . -8) (undo-tree-id1048 . -8) (undo-tree-id1049 . -9) (undo-tree-id1050 . -9) (undo-tree-id1051 . -9) (undo-tree-id1052 . -10) (undo-tree-id1053 . -10) (undo-tree-id1054 . -11) (undo-tree-id1055 . -11) (undo-tree-id1056 . -11) (undo-tree-id1057 . -11) (undo-tree-id1058 . -12) (undo-tree-id1059 . -12) (undo-tree-id1060 . -13) (undo-tree-id1061 . -14) (undo-tree-id1062 . -14) (undo-tree-id1063 . -14) (undo-tree-id1064 . -14) (undo-tree-id1065 . -14) (undo-tree-id1066 . -14) (undo-tree-id1067 . -14) (undo-tree-id1068 . -14) (undo-tree-id1069 . -14) (undo-tree-id1070 . -14) 2708) nil (26013 10561 543240 0) 0 nil])
([nil nil ((2694 . 2697)) nil (26013 10561 543143 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2717 2753 nil nil nil t #s(yas--field 2 2766 2766 nil nil nil nil #s(yas--field 3 2772 2772 nil nil nil nil #s(yas--field 4 2782 2782 nil nil nil nil #s(yas--field 5 2789 2789 nil nil nil nil #s(yas--field 6 2797 2797 nil nil nil nil #s(yas--exit 2803 nil))))))) #s(yas--field 2 2766 2766 nil nil nil nil #s(yas--field 3 2772 2772 nil nil nil nil #s(yas--field 4 2782 2782 nil nil nil nil #s(yas--field 5 2789 2789 nil nil nil nil #s(yas--field 6 2797 2797 nil nil nil nil #s(yas--exit 2803 nil)))))) #s(yas--field 3 2772 2772 nil nil nil nil #s(yas--field 4 2782 2782 nil nil nil nil #s(yas--field 5 2789 2789 nil nil nil nil #s(yas--field 6 2797 2797 nil nil nil nil #s(yas--exit 2803 nil))))) #s(yas--field 4 2782 2782 nil nil nil nil #s(yas--field 5 2789 2789 nil nil nil nil #s(yas--field 6 2797 2797 nil nil nil nil #s(yas--exit 2803 nil)))) #s(yas--field 5 2789 2789 nil nil nil nil #s(yas--field 6 2797 2797 nil nil nil nil #s(yas--exit 2803 nil))) #s(yas--field 6 2797 2797 nil nil nil nil #s(yas--exit 2803 nil))) #s(yas--exit 2803 nil) 46 nil #s(yas--field 1 2717 2753 nil nil nil t #s(yas--field 2 2766 2766 nil nil nil nil #s(yas--field 3 2772 2772 nil nil nil nil #s(yas--field 4 2782 2782 nil nil nil nil #s(yas--field 5 2789 2789 nil nil nil nil #s(yas--field 6 2797 2797 nil nil nil nil #s(yas--exit 2803 nil))))))) nil nil)) (2694 . 2767) (#("KeyEvent { physical_key$1, logical_key$2, text$3, location$4, state$5, repeat$6, .. }$0" 0 87 (fontified nil)) . 2694) (2694 . 2781) (#("Key" 0 3 (fontified nil)) . 2694) (2694 . 2697) (#("KeyEvent {…}" 0 12 (fontified nil)) . -2694) (2694 . 2706) (#("Key" 0 3 (face font-lock-type-face fontified t)) . -2694) (undo-tree-id959 . -3) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -2) (undo-tree-id963 . -2) (undo-tree-id964 . -2) (undo-tree-id965 . -3) (undo-tree-id966 . -3) (undo-tree-id967 . -3) (undo-tree-id968 . -3) (undo-tree-id969 . -3) 2697) nil (26013 10561 543141 0) 0 nil])
([nil nil ((2717 . 2752)) nil (26013 10561 543126 0) 0 nil])
([nil nil ((2717 . 2718)) nil (26013 10561 543125 0) 0 nil])
([nil nil ((apply yas--snippet-revive 2694 2803 #s(yas--snippet nil (#s(yas--field 1 2717 2753 nil nil nil t #s(yas--field 2 2766 2766 nil nil nil nil #s(yas--field 3 2772 2772 nil nil nil nil #s(yas--field 4 2782 2782 nil nil nil nil #s(yas--field 5 2789 2789 nil nil nil nil #s(yas--field 6 2797 2797 nil nil nil nil #s(yas--exit 2803 nil))))))) #s(yas--field 2 2766 2766 nil nil nil nil #s(yas--field 3 2772 2772 nil nil nil nil #s(yas--field 4 2782 2782 nil nil nil nil #s(yas--field 5 2789 2789 nil nil nil nil #s(yas--field 6 2797 2797 nil nil nil nil #s(yas--exit 2803 nil)))))) #s(yas--field 3 2772 2772 nil nil nil nil #s(yas--field 4 2782 2782 nil nil nil nil #s(yas--field 5 2789 2789 nil nil nil nil #s(yas--field 6 2797 2797 nil nil nil nil #s(yas--exit 2803 nil))))) #s(yas--field 4 2782 2782 nil nil nil nil #s(yas--field 5 2789 2789 nil nil nil nil #s(yas--field 6 2797 2797 nil nil nil nil #s(yas--exit 2803 nil)))) #s(yas--field 5 2789 2789 nil nil nil nil #s(yas--field 6 2797 2797 nil nil nil nil #s(yas--exit 2803 nil))) #s(yas--field 6 2797 2797 nil nil nil nil #s(yas--exit 2803 nil))) #s(yas--exit 2803 nil) 46 nil #s(yas--field 1 2717 2753 nil nil nil t #s(yas--field 2 2766 2766 nil nil nil nil #s(yas--field 3 2772 2772 nil nil nil nil #s(yas--field 4 2782 2782 nil nil nil nil #s(yas--field 5 2789 2789 nil nil nil nil #s(yas--field 6 2797 2797 nil nil nil nil #s(yas--exit 2803 nil))))))) nil nil))) nil (26013 10561 543125 0) 0 nil])
([nil nil ((#("logical" 0 7 (fontified t)) . 2755) (undo-tree-id958 . -7)) nil (26013 10561 543123 0) 0 nil])
([nil nil ((#("_key" 0 4 (fontified t)) . 2755) (undo-tree-id957 . -4)) nil (26013 10561 543121 0) 0 nil])
([nil nil ((#(", text" 0 6 (fontified t)) . 2755) (undo-tree-id956 . -6)) nil (26013 10561 543119 0) 0 nil])
([nil nil ((#(", location" 0 10 (fontified t)) . 2755) (undo-tree-id955 . -10)) nil (26013 10561 543116 0) 0 nil])
([nil nil ((#(", state" 0 7 (fontified t)) . 2755) (undo-tree-id954 . -7)) nil (26013 10561 543114 0) 0 nil])
([nil nil ((#(", repeat" 0 8 (fontified t)) . 2755) (undo-tree-id953 . -8)) nil (26013 10561 543785 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 2755) (#("," 0 1 (fontified t)) . 2755)) nil (26013 10618 516543 0) 0 nil] [nil nil ((#(", .. }
            } => {
                let" 0 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-5-face) fontified t) 6 7 (fontified t) 7 19 (fontified t) 19 20 (face (rainbow-delimiters-depth-4-face) fontified t) 20 22 (fontified t) 22 23 (fontified t syntax-table (1)) 23 24 (fontified t) 24 25 (face (rainbow-delimiters-depth-4-face) fontified t) 25 42 (fontified t) 42 45 (face font-lock-keyword-face fontified t)) . 2755) (undo-tree-id944 . -26) (undo-tree-id945 . -25) (undo-tree-id946 . -25) (undo-tree-id947 . -25) (undo-tree-id948 . -25) (undo-tree-id949 . -25) (undo-tree-id950 . -6) (undo-tree-id951 . -6) (undo-tree-id952 . -45)) ((2755 . 2800)) (26013 10561 543107 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2754) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) 2755) nil (26013 10618 516541 0) 0 nil])
nil
([nil nil ((2754 . 2789)) nil (26013 10618 516527 0) 0 nil])
([nil nil ((2792 . 2808) (#(" " 0 1 (fontified nil)) . 2791) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (2792 . 2793)) nil (26013 10618 516526 0) 0 nil])
([nil nil ((2705 . 2725) (#(" " 0 1 (fontified nil)) . 2704) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (2705 . 2706)) nil (26013 10618 516516 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2770) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (#(" " 0 1 (fontified t)) . -2771) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (#(" " 0 1 (fontified t)) . -2772) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) 2773) nil (26013 10618 516506 0) 0 nil])
([nil nil ((#("                               ," 0 32 (fontified t)) . 2739) (undo-tree-id1256 . -32) (undo-tree-id1257 . -32) (undo-tree-id1258 . -32) (undo-tree-id1259 . -32) (undo-tree-id1260 . -32) (undo-tree-id1261 . -32) (undo-tree-id1262 . -32) (undo-tree-id1263 . -32) (undo-tree-id1264 . -32) (undo-tree-id1265 . -32) (undo-tree-id1266 . -32) (undo-tree-id1267 . -32) (undo-tree-id1268 . -31) (undo-tree-id1269 . -31) (undo-tree-id1270 . -31) (undo-tree-id1271 . -31) (undo-tree-id1272 . -31) (undo-tree-id1273 . -31) (undo-tree-id1274 . -31) (undo-tree-id1275 . -31) (undo-tree-id1276 . -31) (undo-tree-id1277 . -31) (undo-tree-id1278 . -32)) nil (26013 10618 516479 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2739) (undo-tree-id1254 . 1) (undo-tree-id1255 . -1)) nil (26013 10618 516455 0) 0 nil])
([nil nil ((2738 . 2739)) nil (26013 10618 516451 0) 0 nil])
([nil nil ((2739 . 2740)) nil (26013 10618 516451 0) 0 nil])
([nil nil ((2740 . 2743)) nil (26013 10618 516450 0) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-type-face fontified t)) . -2742) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) 2743) nil (26013 10618 516448 0) 0 nil])
([nil nil ((2742 . 2753)) nil (26013 10618 516442 0) 0 nil])
([nil nil ((2753 . 2754)) nil (26013 10618 516441 0) 0 nil])
([nil nil ((2752 . 2773)) nil (26013 10618 516440 0) 0 nil])
([nil nil ((#("              " 0 14 (fontified t)) . -2796) (undo-tree-id1247 . -14) (undo-tree-id1248 . -14)) nil (26013 10618 516439 0) 0 nil])
([nil nil ((2754 . 2774) (#("                        " 0 24 (fontified nil)) . 2753) (2753 . 2777) (#("                    " 0 20 (fontified nil)) . 2753) (undo-tree-id1243 . -20) (undo-tree-id1244 . -20) (undo-tree-id1245 . -20) (undo-tree-id1246 . -20) (2773 . 2774)) nil (26013 10618 516435 0) 0 nil])
([nil nil ((2753 . 2777)) nil (26013 10618 516429 0) 0 nil])
([nil nil ((2800 . 2821)) nil (26013 10618 516428 0) 0 nil])
([nil nil ((2821 . 2822)) nil (26013 10618 516427 0) 0 nil])
([nil nil ((2821 . 2826) (#("s" 0 1 (fontified nil)) . 2821) (2821 . 2822) (#("state" 0 5 (fontified nil)) . -2821) (2821 . 2826) (#("s" 0 1 (fontified t)) . -2821) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) 2822) nil (26013 10618 516425 0) 0 nil])
([nil nil ((2826 . 2827)) nil (26013 10618 516418 0) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -2826) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) 2827) nil (26013 10618 516416 0) 0 nil])
([nil nil ((2826 . 2827)) nil (26013 10618 516403 0) 0 nil])
([nil nil ((#("                    state," 0 20 (fontified t) 20 26 (fontified t)) . 2801) (undo-tree-id1365 . -20) (undo-tree-id1366 . -20) (undo-tree-id1367 . -20) (undo-tree-id1368 . -25) (undo-tree-id1369 . -25) (undo-tree-id1370 . -25) (undo-tree-id1371 . -26) (undo-tree-id1372 . -26) (undo-tree-id1373 . -26) (undo-tree-id1374 . -26) (undo-tree-id1375 . -26) (undo-tree-id1376 . -26) (undo-tree-id1377 . -26) (undo-tree-id1378 . -26) (undo-tree-id1379 . -26) (undo-tree-id1380 . -26) (undo-tree-id1381 . -26) (undo-tree-id1382 . -26) (undo-tree-id1383 . -26) (undo-tree-id1384 . -26) (undo-tree-id1385 . -26) (undo-tree-id1386 . -26) (undo-tree-id1387 . -26) (undo-tree-id1388 . -26) (undo-tree-id1389 . -26) (undo-tree-id1390 . -26) (undo-tree-id1391 . -26) (undo-tree-id1392 . -26) (undo-tree-id1393 . -26) (undo-tree-id1394 . -26) (undo-tree-id1395 . -26) (undo-tree-id1396 . -26) (undo-tree-id1397 . -26) (undo-tree-id1398 . -26) (undo-tree-id1399 . -26) (undo-tree-id1400 . -26) (undo-tree-id1401 . -26) (undo-tree-id1402 . -25) (undo-tree-id1403 . -25) (undo-tree-id1404 . -25) (undo-tree-id1405 . -25) (undo-tree-id1406 . -25) (undo-tree-id1407 . -25) (undo-tree-id1408 . -25) (undo-tree-id1409 . -25) (undo-tree-id1410 . -26) (t 26013 10618 526545 227000)) nil (26013 10645 543138 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2801) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . 1) (undo-tree-id1364 . -1)) nil (26013 10645 543089 0) 0 nil])
([nil nil ((2841 . 2842)) nil (26013 10645 543067 0) 0 nil])
([nil nil ((2842 . 2859)) nil (26013 10645 543066 0) 0 nil])
([nil nil ((2859 . 2861)) nil (26013 10645 543065 0) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -2859) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -2860) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) 2861) nil (26013 10645 543062 0) 0 nil])
([nil nil ((2859 . 2861)) nil (26013 10645 543042 0) 0 nil])
([nil nil ((#(": PhysicalKey {
                        
                    }," 0 2 (fontified t) 2 13 (face font-lock-type-face fontified t) 13 14 (fontified t) 14 15 (face (rainbow-delimiters-depth-6-face) fontified t) 15 16 (fontified t) 16 40 (fontified t) 40 41 (fontified t) 41 61 (fontified t) 61 62 (face (rainbow-delimiters-depth-6-face) fontified t) 62 63 (fontified t)) . -2737) (undo-tree-id1416 . -8) (undo-tree-id1417 . -63) (undo-tree-id1418 . -8) (undo-tree-id1419 . -63) (undo-tree-id1420 . -63) (undo-tree-id1421 . -63) (undo-tree-id1422 . -63) (undo-tree-id1423 . -63) (undo-tree-id1424 . -63) (undo-tree-id1425 . -63) (undo-tree-id1426 . -63) (undo-tree-id1427 . -40) (undo-tree-id1428 . -40) (undo-tree-id1429 . -40) (undo-tree-id1430 . -40) (undo-tree-id1431 . -40) (undo-tree-id1432 . -40) (undo-tree-id1433 . -40) (undo-tree-id1434 . -40) (undo-tree-id1435 . -40) (undo-tree-id1436 . -40) (undo-tree-id1437 . -40) (undo-tree-id1438 . -40) (undo-tree-id1439 . -40) (undo-tree-id1440 . -40) (undo-tree-id1441 . -40) (undo-tree-id1442 . -40) (undo-tree-id1443 . -40) (undo-tree-id1444 . -40) (undo-tree-id1445 . -40) (undo-tree-id1446 . -40) (undo-tree-id1447 . -40) (undo-tree-id1448 . -63) (undo-tree-id1449 . -40) (undo-tree-id1450 . -63) (undo-tree-id1451 . -63) (undo-tree-id1452 . -63) (undo-tree-id1453 . -63) (undo-tree-id1454 . -63) (undo-tree-id1455 . -63) (undo-tree-id1456 . -63) (undo-tree-id1457 . -63) (undo-tree-id1458 . -41) (undo-tree-id1459 . -63) (undo-tree-id1460 . -63) (undo-tree-id1461 . -63) (undo-tree-id1462 . -63) 2800 (t 26013 10645 553745 590000)) nil (26013 10657 99307 0) 0 nil])
([nil nil ((2737 . 2738)) nil (26013 10657 99260 0) 0 nil])
([nil nil ((2738 . 2759)) nil (26013 10657 99259 0) 0 nil])
([nil nil ((2759 . 2760)) nil (26013 10657 99258 0) 0 nil])
([nil nil ((2759 . 2764) (#("s" 0 1 (fontified nil)) . 2759) (2759 . 2760) (#("state" 0 5 (fontified nil)) . -2759) (2759 . 2764) (#("s" 0 1 (fontified t)) . -2759) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) 2760) nil (26013 10657 99256 0) 0 nil])
([nil nil ((2764 . 2765)) nil (26013 10657 99240 0) 0 nil])
([nil nil ((2737 . 2739) (t 26013 10657 110207 705000)) nil (26013 10705 479268 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2738) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) 2739) nil (26013 10705 479267 0) 0 nil])
([nil nil ((2738 . 2739)) nil (26013 10705 479264 0) 0 nil])
([nil nil ((2739 . 2743)) nil (26013 10705 479263 0) 0 nil])
([nil nil ((#("C" 0 1 (face font-lock-type-face fontified t)) . -2739) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -2740) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -2741) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -2742) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) 2743) nil (26013 10705 479261 0) 0 nil])
([nil nil ((2739 . 2744)) nil (26013 10705 479251 0) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-type-face fontified t)) . -2742) (undo-tree-id1718 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -2743) (undo-tree-id1719 . -1) 2744) nil (26013 10705 479250 0) 0 nil])
([nil nil ((2742 . 2744)) nil (26013 10705 479246 0) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-type-face fontified t)) . -2743) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) 2744) nil (26013 10705 479245 0) 0 nil])
([nil nil ((2743 . 2745)) nil (26013 10705 479242 0) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-type-face fontified t)) . -2744) (undo-tree-id1715 . -1) 2745) nil (26013 10705 479241 0) 0 nil])
([nil nil ((2744 . 2746)) nil (26013 10705 479239 0) 0 nil])
([nil nil ((2746 . 2753)) nil (26013 10705 479238 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2772 2779 nil nil nil t #s(yas--exit 2780 nil))) #s(yas--exit 2780 nil) 47 nil #s(yas--field 1 2772 2779 nil nil nil t #s(yas--exit 2780 nil)) nil nil)) (2752 . 2758) (#("Code($1)$0" 0 10 (fontified nil)) . 2752) (2752 . 2762) (#("C" 0 1 (fontified nil)) . 2752) (2752 . 2753) (#("Code(…)" 0 7 (fontified nil)) . -2752) (2752 . 2759) (#("C" 0 1 (face font-lock-type-face fontified t)) . -2752) (undo-tree-id1714 . -1) 2753) nil (26013 10705 479236 0) 0 nil])
([nil nil ((2757 . 2764)) nil (26013 10705 479232 0) 0 nil])
([nil nil ((198 . 213) (2757 . 2757) (2757 . 2770) (#("keycode" 0 7 (fontified nil)) . 2757) (undo-tree-id1682 . -7) (2757 . 2764) (#("NativeKeyCode (use winit::keyboard::NativeKeyCode)" 0 50 (fontified nil)) . -2757) (undo-tree-id1683 . -50) (2757 . 2807) (#("keycode" 0 7 (fontified t)) . -2757) (undo-tree-id1684 . -7) (undo-tree-id1685 . -7) (undo-tree-id1686 . -2) (undo-tree-id1687 . -2) (undo-tree-id1688 . -3) (undo-tree-id1689 . -3) (undo-tree-id1690 . -4) (undo-tree-id1691 . -4) (undo-tree-id1692 . -4) (undo-tree-id1693 . -4) (undo-tree-id1694 . -5) (undo-tree-id1695 . -5) (undo-tree-id1696 . -5) (undo-tree-id1697 . -5) (undo-tree-id1698 . -5) (undo-tree-id1699 . -7) (undo-tree-id1700 . -6) (undo-tree-id1701 . -6) (undo-tree-id1702 . -6) (undo-tree-id1703 . -6) (undo-tree-id1704 . -7) (undo-tree-id1705 . -7) (undo-tree-id1706 . -7) (undo-tree-id1707 . -7) (undo-tree-id1708 . -7) (undo-tree-id1709 . -7) (undo-tree-id1710 . -7) (undo-tree-id1711 . -7) (undo-tree-id1712 . -7) (undo-tree-id1713 . -7) 2764) nil (26013 10705 479228 0) 0 nil])
([nil nil ((#("N" 0 1 (face font-lock-type-face fontified t)) . -2772) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -2773) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -2774) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -2775) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (#("v" 0 1 (face font-lock-type-face fontified t)) . -2776) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -2777) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (#("K" 0 1 (face font-lock-type-face fontified t)) . -2778) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -2779) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (#("y" 0 1 (face font-lock-type-face fontified t)) . -2780) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -2781) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -2782) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -2783) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -2784) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) 2785) nil (26013 10705 479183 0) 0 nil])
([nil nil ((2772 . 2779)) nil (26013 10705 478963 0) 0 nil])
([nil nil ((apply yas--snippet-revive 2767 2780 #s(yas--snippet nil (#s(yas--field 1 2772 2779 nil nil nil t #s(yas--exit 2780 nil))) #s(yas--exit 2780 nil) 47 nil #s(yas--field 1 2772 2779 nil nil nil t #s(yas--exit 2780 nil)) nil nil))) nil (26013 10705 478958 0) 0 nil])
([nil nil ((#("Virtual" 0 7 (face font-lock-type-face fontified t)) . -3007) (undo-tree-id1797 . -7) (undo-tree-id1798 . -7) (undo-tree-id1799 . -7) (undo-tree-id1800 . -7) (undo-tree-id1801 . -7) (undo-tree-id1802 . -7) (undo-tree-id1803 . -7) (undo-tree-id1804 . -7) (undo-tree-id1805 . -7) (undo-tree-id1806 . -7) 3014 (t 26013 10705 491057 784000)) nil (26013 10733 352366 0) 0 nil])
([nil nil ((#("Virtual" 0 7 (face font-lock-type-face fontified t)) . -3020) (undo-tree-id1787 . -7) (undo-tree-id1788 . -7) (undo-tree-id1789 . -7) (undo-tree-id1790 . -7) (undo-tree-id1791 . -7) (undo-tree-id1792 . -7) (undo-tree-id1793 . -7) (undo-tree-id1794 . -7) (undo-tree-id1795 . -7) (undo-tree-id1796 . -7) 3027) nil (26013 10733 352355 0) 0 nil])
([nil nil ((#("Virtual" 0 7 (face font-lock-type-face fontified t)) . -3170) (undo-tree-id1777 . -7) (undo-tree-id1778 . -7) (undo-tree-id1779 . -7) (undo-tree-id1780 . -7) (undo-tree-id1781 . -7) (undo-tree-id1782 . -7) (undo-tree-id1783 . -7) (undo-tree-id1784 . -7) (undo-tree-id1785 . -7) (undo-tree-id1786 . -7) 3177) nil (26013 10733 352344 0) 0 nil])
([nil nil ((#("Virtual" 0 7 (face font-lock-type-face fontified t)) . -3183) (undo-tree-id1767 . -7) (undo-tree-id1768 . -7) (undo-tree-id1769 . -7) (undo-tree-id1770 . -7) (undo-tree-id1771 . -7) (undo-tree-id1772 . -7) (undo-tree-id1773 . -7) (undo-tree-id1774 . -7) (undo-tree-id1775 . -7) (undo-tree-id1776 . -7) 3190) nil (26013 10733 352333 0) 0 nil])
([nil nil ((#("Virtual" 0 7 (face font-lock-type-face fontified t)) . -3332) (undo-tree-id1757 . -7) (undo-tree-id1758 . -7) (undo-tree-id1759 . -7) (undo-tree-id1760 . -7) (undo-tree-id1761 . -7) (undo-tree-id1762 . -7) (undo-tree-id1763 . -7) (undo-tree-id1764 . -7) (undo-tree-id1765 . -7) (undo-tree-id1766 . -7) 3339) nil (26013 10733 352322 0) 0 nil])
([nil nil ((#("Virtual" 0 7 (face font-lock-type-face fontified t)) . -3345) (undo-tree-id1750 . -7) (undo-tree-id1751 . -7) (undo-tree-id1752 . -7) (undo-tree-id1753 . -7) (undo-tree-id1754 . -7) (undo-tree-id1755 . -7) (undo-tree-id1756 . -7) 3352) nil (26013 10733 352311 0) 0 nil])
([nil nil ((#("Virtual" 0 7 (face font-lock-type-face fontified t)) . -3498) (undo-tree-id1740 . -7) (undo-tree-id1741 . -7) (undo-tree-id1742 . -7) (undo-tree-id1743 . -7) (undo-tree-id1744 . -7) (undo-tree-id1745 . -7) (undo-tree-id1746 . -7) (undo-tree-id1747 . -7) (undo-tree-id1748 . -7) (undo-tree-id1749 . -7) 3505) nil (26013 10733 352301 0) 0 nil])
([nil nil ((#("Virtual" 0 7 (face font-lock-type-face fontified t)) . -3511) (undo-tree-id1730 . -7) (undo-tree-id1731 . -7) (undo-tree-id1732 . -7) (undo-tree-id1733 . -7) (undo-tree-id1734 . -7) (undo-tree-id1735 . -7) (undo-tree-id1736 . -7) (undo-tree-id1737 . -7) (undo-tree-id1738 . -7) (undo-tree-id1739 . -7) 3518) nil (26013 10733 352287 0) 0 nil])
([nil nil ((3017 . 3018) (t 26013 10733 364406 784000)) nil (26013 10750 394930 0) 0 nil])
([nil nil ((#("W" 0 1 (face font-lock-type-face fontified t)) . -3016) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (#("W" 0 1 (face font-lock-type-face fontified t)) . -3017) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) 3018) nil (26013 10750 394928 0) 0 nil])
([nil nil ((3016 . 3017)) nil (26013 10750 394910 0) 0 nil])
([nil nil ((apply yas--snippet-revive 3016 3020 #s(yas--snippet nil nil #s(yas--exit 3020 nil) 48 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 3020 nil) 48 nil nil nil nil)) (3016 . 3020) (#("KeyW$0" 0 6 (fontified nil)) . 3016) (3016 . 3022) (#("W" 0 1 (fontified nil)) . 3016) (3016 . 3017) (#("KeyW" 0 4 (fontified nil)) . -3016) (3016 . 3020) (#("W" 0 1 (face font-lock-type-face fontified t)) . -3016) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) 3017) nil (26013 10750 394908 0) 0 nil])
([nil nil ((#("Up" 0 2 (face font-lock-type-face fontified t)) . -3032) (undo-tree-id1813 . -2) (undo-tree-id1814 . -2) (undo-tree-id1815 . -2) (undo-tree-id1816 . -2) (undo-tree-id1817 . -2) (undo-tree-id1818 . -2) (undo-tree-id1819 . -2) (undo-tree-id1820 . -2) (undo-tree-id1821 . -2) (undo-tree-id1822 . -2) 3034) nil (26013 10750 394899 0) 0 nil])
([nil nil ((3032 . 3033)) nil (26013 10750 394887 0) 0 nil])
([nil nil ((apply yas--snippet-revive 3032 3039 #s(yas--snippet nil nil #s(yas--exit 3039 nil) 49 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 3039 nil) 49 nil nil nil nil)) (3032 . 3039) (#("ArrowUp$0" 0 9 (fontified nil)) . 3032) (3032 . 3041) (#("U" 0 1 (fontified nil)) . 3032) (3032 . 3033) (#("ArrowUp" 0 7 (fontified nil)) . -3032) (3032 . 3039) (#("U" 0 1 (face font-lock-type-face fontified t)) . -3032) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) 3033) nil (26013 10750 394883 0) 0 nil])
([nil nil ((3187 . 3190) (t 26013 10750 406403 122000)) nil (26013 10813 271464 0) 0 nil])
([nil nil ((apply activate-cursor-for-undo 43) (3519 . 3520) (apply deactivate-cursor-after-undo 43) (3351 . 3352)) nil (26013 10821 240019 0) 0 nil] [nil nil ((#("KeyCode::" 0 7 (face font-lock-type-face fontified t) 7 9 (fontified t)) . -3343) (undo-tree-id1846 . -9) (undo-tree-id1847 . -7) (undo-tree-id1848 . -9) (undo-tree-id1849 . -9) (undo-tree-id1850 . -9) (undo-tree-id1851 . -9) (undo-tree-id1852 . -9) (undo-tree-id1853 . -9) (undo-tree-id1854 . -9) (undo-tree-id1855 . -9) (undo-tree-id1856 . -9) (undo-tree-id1857 . -9) (undo-tree-id1858 . -9) (undo-tree-id1859 . -9) (undo-tree-id1860 . -8) (undo-tree-id1861 . -7) (undo-tree-id1862 . -6) (undo-tree-id1863 . -5) (undo-tree-id1864 . -4) (undo-tree-id1865 . -3) (undo-tree-id1866 . -2) (undo-tree-id1867 . -1) (undo-tree-id1868 . -7) (undo-tree-id1869 . -7) (undo-tree-id1870 . -7) (undo-tree-id1871 . -7) (undo-tree-id1872 . -7) (undo-tree-id1873 . -7) (undo-tree-id1874 . -7) (undo-tree-id1875 . -7) (undo-tree-id1876 . -7) (undo-tree-id1877 . -7) (undo-tree-id1878 . -7) (undo-tree-id1879 . -7) (undo-tree-id1880 . -8) (undo-tree-id1881 . -9) (undo-tree-id1882 . -9) (undo-tree-id1883 . -9) (undo-tree-id1884 . -9) (undo-tree-id1885 . -9) 3351) ((3343 . 3352)) (26013 10812 860502 0) 0 nil])
([nil nil ((apply activate-cursor-for-undo 43) (#("k" 0 1 (fontified t)) . -3518) (apply deactivate-cursor-after-undo 43) (#("k" 0 1 (fontified t)) . -3351) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) 3352) nil (26013 10821 659506 0) 0 nil])
([nil nil ((apply activate-cursor-for-undo 43) (3503 . 3504) (apply deactivate-cursor-after-undo 43) (3344 . 3345) (apply activate-cursor-for-undo 43) (3501 . 3502) (#("KeyCode::" 0 7 (face font-lock-type-face fontified t) 7 9 (fontified t)) . -3501) (apply deactivate-cursor-after-undo 43) (3343 . 3344)) ((#("K" 0 1 (face font-lock-type-face fontified nil)) . 3343) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (3501 . 3510) (#("K" 0 1 (face font-lock-type-face fontified nil)) . 3501) (#("e" 0 1 (face font-lock-type-face fontified t)) . 3344) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . 3503)) (26013 10812 859563 0) 0 nil])
([nil nil ((apply activate-cursor-for-undo 43) (3523 . 3524) (apply deactivate-cursor-after-undo 43) (3354 . 3355) (apply activate-cursor-for-undo 43) (3521 . 3522) (apply deactivate-cursor-after-undo 43) (3353 . 3354) (apply activate-cursor-for-undo 43) (3519 . 3520) (apply deactivate-cursor-after-undo 43) (3352 . 3353)) nil (26013 10834 273509 0) 0 nil] [nil nil ((apply activate-cursor-for-undo 43) (#("::D" 0 2 (fontified t) 2 3 (face font-lock-type-face fontified t)) . 3513) (undo-tree-id1892 . -3) (apply deactivate-cursor-after-undo 43) (#("::S" 0 2 (fontified t) 2 3 (face font-lock-type-face fontified t)) . 3350) (undo-tree-id1893 . -2) (undo-tree-id1894 . -2) (undo-tree-id1895 . -2) (undo-tree-id1896 . -2) (undo-tree-id1897 . -2) (undo-tree-id1898 . -2) (undo-tree-id1899 . -2) (undo-tree-id1900 . -2) (undo-tree-id1901 . -2) (undo-tree-id1902 . -2) (undo-tree-id1903 . -2) (undo-tree-id1904 . -2) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -2) (undo-tree-id1908 . -2) (undo-tree-id1909 . -2) (undo-tree-id1910 . -2) (undo-tree-id1911 . -2) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -3)) ((3350 . 3353) (3513 . 3516)) (26013 10821 240501 0) 0 nil])
nil
([nil nil ((#("Left" 0 4 (face font-lock-type-face fontified t)) . -3203) (undo-tree-id1997 . -4) (undo-tree-id1998 . -4) (undo-tree-id1999 . -4) (undo-tree-id2000 . -4) (undo-tree-id2001 . -4) (undo-tree-id2002 . -4) (undo-tree-id2003 . -4) (undo-tree-id2004 . -4) (undo-tree-id2005 . -4) (undo-tree-id2006 . -4) (undo-tree-id2007 . -4) (undo-tree-id2008 . -4) (undo-tree-id2009 . -4) (undo-tree-id2010 . -4) (undo-tree-id2011 . -4) (undo-tree-id2012 . -4) (undo-tree-id2013 . -4) (undo-tree-id2014 . -4) (undo-tree-id2015 . -4) (undo-tree-id2016 . -4) (undo-tree-id2017 . -4) (undo-tree-id2018 . -4) (undo-tree-id2019 . -4) (undo-tree-id2020 . -4) (undo-tree-id2021 . -4) (undo-tree-id2022 . -4) (undo-tree-id2023 . -4) (undo-tree-id2024 . -4) (undo-tree-id2025 . -4) (undo-tree-id2026 . -4) (undo-tree-id2027 . -4) (undo-tree-id2028 . -4) 3207 (t 26013 10826 69814 305000)) nil (26013 10850 797724 0) 0 nil] [nil nil ((apply activate-cursor-for-undo 43) (#("Key" 0 3 (face font-lock-type-face fontified t)) . -3517) (apply deactivate-cursor-after-undo 43) (#("Left" 0 4 (face font-lock-type-face fontified t)) . -3203) (undo-tree-id1941 . -4) (undo-tree-id1942 . -4) (undo-tree-id1943 . -4) (undo-tree-id1944 . -4) (undo-tree-id1945 . -4) (undo-tree-id1946 . -4) (undo-tree-id1947 . -4) (undo-tree-id1948 . -4) (undo-tree-id1949 . -4) (undo-tree-id1950 . -4) (undo-tree-id1951 . -4) (undo-tree-id1952 . -4) (undo-tree-id1953 . -4) (undo-tree-id1954 . -4) (undo-tree-id1955 . -4) (undo-tree-id1956 . -4) 3207 (t 26013 10826 69814 305000)) ((3203 . 3207) (3517 . 3520)) (26013 10833 478472 0) 0 nil])
([nil nil ((apply activate-cursor-for-undo 43) (#(" | KeyCode" 0 3 (fontified t) 3 10 (face font-lock-type-face fontified t)) . 3503) (undo-tree-id1890 . -10) (apply deactivate-cursor-after-undo 43) (#(" | KeyCode" 0 3 (fontified t) 3 10 (face font-lock-type-face fontified t)) . 3350) (undo-tree-id1891 . -10)) ((3350 . 3360) (3503 . 3513)) (26013 10821 239961 0) 0 nil])
([nil nil ((3203 . 3204)) nil (26013 10850 797689 0) 0 nil])
([nil nil ((apply activate-cursor-for-undo 43) (3520 . 3521) (apply deactivate-cursor-after-undo 43) (3204 . 3205) (apply activate-cursor-for-undo 43) (3518 . 3519) (apply deactivate-cursor-after-undo 43) (3203 . 3204)) ((#("L" 0 1 (face font-lock-type-face fontified nil)) . 3203) (undo-tree-id1957 . -1) (#("L" 0 1 (face font-lock-type-face fontified nil)) . 3518) (#("e" 0 1 (face font-lock-type-face fontified t)) . 3204) (undo-tree-id1958 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . 3520)) (26013 10833 477701 0) 0 nil])
nil
([nil nil ((#("L" 0 1 (face font-lock-type-face fontified t)) . -3203) (undo-tree-id1992 . -1) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) 3204) nil (26013 10850 797687 0) 0 nil])
nil
([nil nil ((3203 . 3205)) nil (26013 10850 797681 0) 0 nil])
([nil nil ((#("L" 0 1 (face font-lock-type-face fontified t)) . -3203) (undo-tree-id1976 . -1) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (undo-tree-id1983 . -1) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) (undo-tree-id1986 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -3204) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) 3205) nil (26013 10850 797679 0) 0 nil])
([nil nil ((3203 . 3204)) nil (26013 10850 797662 0) 0 nil])
([nil nil ((#("L" 0 1 (face font-lock-type-face fontified t)) . -3203) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) 3204) nil (26013 10850 797660 0) 0 nil])
([nil nil ((3203 . 3204)) nil (26013 10850 797653 0) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -3203) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) 3204) nil (26013 10850 797652 0) 0 nil])
([nil nil ((3203 . 3204)) nil (26013 10850 797645 0) 0 nil])
([nil nil ((apply yas--snippet-revive 3203 3212 #s(yas--snippet nil nil #s(yas--exit 3212 nil) 50 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 3212 nil) 50 nil nil nil nil)) (3203 . 3212) (#("ArrowLeft$0" 0 11 (fontified nil)) . 3203) (3203 . 3214) (#("A" 0 1 (fontified nil)) . 3203) (3203 . 3204) (#("ArrowLeft" 0 9 (fontified nil)) . -3203) (3203 . 3212) (#("A" 0 1 (face font-lock-type-face fontified t)) . -3203) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) 3204) nil (26013 10880 101504 0) 0 nil])
([nil nil ((apply activate-cursor-for-undo 49) (3551 . 3552) (apply deactivate-cursor-after-undo 49) (3377 . 3378) (apply activate-cursor-for-undo 49) (3549 . 3550) (apply deactivate-cursor-after-undo 49) (3376 . 3377) (apply activate-cursor-for-undo 49) (3547 . 3548) (apply deactivate-cursor-after-undo 49) (3375 . 3376) (apply activate-cursor-for-undo 49) (3545 . 3546) (apply deactivate-cursor-after-undo 49) (3374 . 3375) (apply activate-cursor-for-undo 49) (3543 . 3544) (apply deactivate-cursor-after-undo 49) (3373 . 3374) (t 26013 10850 809410 221000)) nil (26013 10905 919033 0) 0 nil] [nil nil ((#(":" 0 1 (fontified t)) . -3372) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (t 26013 10850 809410 221000)) ((3372 . 3373)) (26013 10877 26249 0) 0 nil])
([nil nil ((apply activate-cursor-for-undo 49) (#("R" 0 1 (face font-lock-type-face fontified t)) . -3544) (apply deactivate-cursor-after-undo 49) (#("R" 0 1 (face font-lock-type-face fontified t)) . -3374) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) (apply activate-cursor-for-undo 49) (#("R" 0 1 (face font-lock-type-face fontified t)) . -3546) (apply deactivate-cursor-after-undo 49) (#("R" 0 1 (face font-lock-type-face fontified t)) . -3375) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) (apply activate-cursor-for-undo 49) (#("O" 0 1 (face font-lock-type-face fontified t)) . -3548) (apply deactivate-cursor-after-undo 49) (#("O" 0 1 (face font-lock-type-face fontified t)) . -3376) (undo-tree-id2071 . -1) (undo-tree-id2072 . -1) (undo-tree-id2073 . -1) (undo-tree-id2074 . -1) (undo-tree-id2075 . -1) (undo-tree-id2076 . -1) (apply activate-cursor-for-undo 49) (#("W" 0 1 (face font-lock-type-face fontified t)) . -3550) (apply deactivate-cursor-after-undo 49) (#("W" 0 1 (face font-lock-type-face fontified t)) . -3377) (undo-tree-id2077 . -1) (undo-tree-id2078 . -1) (undo-tree-id2079 . -1) (undo-tree-id2080 . -1) 3378) nil (26013 10905 919024 0) 0 nil])
([nil nil ((apply activate-cursor-for-undo 46) (3541 . 3542) (#(":" 0 1 (fontified t)) . -3541) (apply deactivate-cursor-after-undo 46) (3372 . 3373)) ((#("A" 0 1 (face font-lock-type-face fontified t)) . 3372) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (3541 . 3542) (#("A" 0 1 (face font-lock-type-face fontified t)) . 3541)) (26013 10877 25664 0) 0 nil])
([nil nil ((apply activate-cursor-for-undo 49) (3551 . 3552) (apply deactivate-cursor-after-undo 49) (3377 . 3378) (apply activate-cursor-for-undo 49) (3549 . 3550) (apply deactivate-cursor-after-undo 49) (3376 . 3377) (apply activate-cursor-for-undo 49) (3547 . 3548) (apply deactivate-cursor-after-undo 49) (3375 . 3376) (apply activate-cursor-for-undo 49) (3545 . 3546) (apply deactivate-cursor-after-undo 49) (3374 . 3375)) nil (26013 10905 918982 0) 0 nil])
nil
([nil nil ((#("proj" 0 4 (fontified t)) . -1959) (undo-tree-id2122 . -3) (undo-tree-id2123 . -4) (undo-tree-id2124 . -3) (undo-tree-id2125 . -3) (undo-tree-id2126 . -3) (undo-tree-id2127 . -3) (undo-tree-id2128 . -3) (undo-tree-id2129 . -3) (undo-tree-id2130 . -3) (undo-tree-id2131 . -3) (undo-tree-id2132 . -4) 1963 (t 26013 10905 931061 425000)) nil (26013 11357 519702 0) 0 nil])
([nil nil ((#("view_" 0 5 (fontified t)) . -1954) (undo-tree-id2109 . -5) (undo-tree-id2110 . -5) (undo-tree-id2111 . -5) (undo-tree-id2112 . -5) (undo-tree-id2113 . -5) (undo-tree-id2114 . -5) (undo-tree-id2115 . -5) (undo-tree-id2116 . -5) (undo-tree-id2117 . -5) (undo-tree-id2118 . -5) (undo-tree-id2119 . -5) (undo-tree-id2120 . -5) (undo-tree-id2121 . -5) 1959) nil (26013 11357 519689 0) 0 nil])
([nil nil ((#("self." 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t)) . -1949) (undo-tree-id2094 . -5) (undo-tree-id2095 . -5) (undo-tree-id2096 . -5) (undo-tree-id2097 . -5) (undo-tree-id2098 . -5) (undo-tree-id2099 . -5) (undo-tree-id2100 . -5) (undo-tree-id2101 . -5) (undo-tree-id2102 . -5) (undo-tree-id2103 . -5) (undo-tree-id2104 . -5) (undo-tree-id2105 . -5) (undo-tree-id2106 . -5) (undo-tree-id2107 . -5) (undo-tree-id2108 . -5) 1954) nil (26013 11357 519675 0) 0 nil])
([nil nil ((1949 . 1951)) nil (26013 11357 519658 0) 0 nil])
([nil nil ((1950 . 1954)) nil (26013 11357 519657 0) 0 nil])
([nil nil ((1950 . 1954) (#("self" 0 4 (fontified nil)) . 1950) (1950 . 1954) (#("self" 0 4 (face font-lock-keyword-face fontified t)) . -1950) (undo-tree-id2081 . -4) (undo-tree-id2082 . -1) (undo-tree-id2083 . -1) (undo-tree-id2084 . -2) (undo-tree-id2085 . -2) (undo-tree-id2086 . -2) (undo-tree-id2087 . -3) (undo-tree-id2088 . -3) (undo-tree-id2089 . -4) (undo-tree-id2090 . -4) (undo-tree-id2091 . -4) (undo-tree-id2092 . -4) (undo-tree-id2093 . -4) 1954) nil (26013 11357 519652 0) 0 nil])
([nil nil ((1954 . 1955) (t 26013 11357 532305 117000)) nil (26013 11383 873794 0) 0 nil])
([nil nil ((1955 . 1964) (#("view_proj" 0 9 (fontified nil)) . -1955) (1955 . 1964)) nil (26013 11383 873789 0) 0 nil])
([nil nil ((#("proj" 0 4 (fontified t)) . -1960) (undo-tree-id2349 . -4) (undo-tree-id2350 . -4) (undo-tree-id2351 . -4) (undo-tree-id2352 . -4) (undo-tree-id2353 . -4) (undo-tree-id2354 . -4) (undo-tree-id2355 . -4) (undo-tree-id2356 . -4) (undo-tree-id2357 . -4) (undo-tree-id2358 . -4) (undo-tree-id2359 . -4) (undo-tree-id2360 . -4) (undo-tree-id2361 . -4) (undo-tree-id2362 . -4) (undo-tree-id2363 . -4) (undo-tree-id2364 . -4) (undo-tree-id2365 . -4) (undo-tree-id2366 . -4) (undo-tree-id2367 . -4) (undo-tree-id2368 . -4) (undo-tree-id2369 . -4) (undo-tree-id2370 . -4) (undo-tree-id2371 . -4) (undo-tree-id2372 . -4) (undo-tree-id2373 . -4) (undo-tree-id2374 . -4) (undo-tree-id2375 . -4) (undo-tree-id2376 . -4) (undo-tree-id2377 . -4) (undo-tree-id2378 . -4) (undo-tree-id2379 . -4) (undo-tree-id2380 . -4) (undo-tree-id2381 . -4) (undo-tree-id2382 . -4) (undo-tree-id2383 . -4) (undo-tree-id2384 . -4) (undo-tree-id2385 . -4) (undo-tree-id2386 . -4) (undo-tree-id2387 . -4) (undo-tree-id2388 . -4) (undo-tree-id2389 . -4) (undo-tree-id2390 . -4) (undo-tree-id2391 . -4) (undo-tree-id2392 . -4) (undo-tree-id2393 . -4) (undo-tree-id2394 . -4) (undo-tree-id2395 . -4) (undo-tree-id2396 . -4) (undo-tree-id2397 . -4) (undo-tree-id2398 . -4) (undo-tree-id2399 . -4) (undo-tree-id2400 . -4) (undo-tree-id2401 . -4) (undo-tree-id2402 . -4) (undo-tree-id2403 . -4) (undo-tree-id2404 . -4) (undo-tree-id2405 . -4) (undo-tree-id2406 . -4) (undo-tree-id2407 . -4) (undo-tree-id2408 . -4) (undo-tree-id2409 . -4) (undo-tree-id2410 . -4) (undo-tree-id2411 . -4) (undo-tree-id2412 . -4) (undo-tree-id2413 . -4) (undo-tree-id2414 . -4) (undo-tree-id2415 . -4) (undo-tree-id2416 . -4) (undo-tree-id2417 . -4) (undo-tree-id2418 . -4) (undo-tree-id2419 . -4) (undo-tree-id2420 . -4) (undo-tree-id2421 . -4) (undo-tree-id2422 . -4) (undo-tree-id2423 . -4) (undo-tree-id2424 . -4) (undo-tree-id2425 . -4) (undo-tree-id2426 . -4) (undo-tree-id2427 . -4) (undo-tree-id2428 . -4) (undo-tree-id2429 . -4) (undo-tree-id2430 . -4) (undo-tree-id2431 . -4) (undo-tree-id2432 . -4) (undo-tree-id2433 . -4) (undo-tree-id2434 . -4) (undo-tree-id2435 . -4) (undo-tree-id2436 . -4) (undo-tree-id2437 . -4) (undo-tree-id2438 . -4) (undo-tree-id2439 . -4) (undo-tree-id2440 . -4) (undo-tree-id2441 . -4) (undo-tree-id2442 . -4) (undo-tree-id2443 . -4) (undo-tree-id2444 . -4) (undo-tree-id2445 . -4) (undo-tree-id2446 . -4) (undo-tree-id2447 . -4) (undo-tree-id2448 . -4) (undo-tree-id2449 . -4) (undo-tree-id2450 . -4) (undo-tree-id2451 . -4) (undo-tree-id2452 . -4) (undo-tree-id2453 . -4) 1964 (t 26013 11383 886575 27000)) nil (26013 11494 833028 0) 0 nil])
([nil nil ((#("view_" 0 5 (fontified t)) . -1955) (undo-tree-id2242 . -5) (undo-tree-id2243 . -5) (undo-tree-id2244 . -5) (undo-tree-id2245 . -5) (undo-tree-id2246 . -5) (undo-tree-id2247 . -5) (undo-tree-id2248 . -5) (undo-tree-id2249 . -5) (undo-tree-id2250 . -5) (undo-tree-id2251 . -5) (undo-tree-id2252 . -5) (undo-tree-id2253 . -5) (undo-tree-id2254 . -5) (undo-tree-id2255 . -5) (undo-tree-id2256 . -5) (undo-tree-id2257 . -5) (undo-tree-id2258 . -5) (undo-tree-id2259 . -5) (undo-tree-id2260 . -5) (undo-tree-id2261 . -5) (undo-tree-id2262 . -5) (undo-tree-id2263 . -5) (undo-tree-id2264 . -5) (undo-tree-id2265 . -5) (undo-tree-id2266 . -5) (undo-tree-id2267 . -5) (undo-tree-id2268 . -5) (undo-tree-id2269 . -5) (undo-tree-id2270 . -5) (undo-tree-id2271 . -5) (undo-tree-id2272 . -5) (undo-tree-id2273 . -5) (undo-tree-id2274 . -5) (undo-tree-id2275 . -5) (undo-tree-id2276 . -5) (undo-tree-id2277 . -5) (undo-tree-id2278 . -5) (undo-tree-id2279 . -5) (undo-tree-id2280 . -5) (undo-tree-id2281 . -5) (undo-tree-id2282 . -5) (undo-tree-id2283 . -5) (undo-tree-id2284 . -5) (undo-tree-id2285 . -5) (undo-tree-id2286 . -5) (undo-tree-id2287 . -5) (undo-tree-id2288 . -5) (undo-tree-id2289 . -5) (undo-tree-id2290 . -5) (undo-tree-id2291 . -5) (undo-tree-id2292 . -5) (undo-tree-id2293 . -5) (undo-tree-id2294 . -5) (undo-tree-id2295 . -5) (undo-tree-id2296 . -5) (undo-tree-id2297 . -5) (undo-tree-id2298 . -5) (undo-tree-id2299 . -5) (undo-tree-id2300 . -5) (undo-tree-id2301 . -5) (undo-tree-id2302 . -5) (undo-tree-id2303 . -5) (undo-tree-id2304 . -5) (undo-tree-id2305 . -5) (undo-tree-id2306 . -5) (undo-tree-id2307 . -5) (undo-tree-id2308 . -5) (undo-tree-id2309 . -5) (undo-tree-id2310 . -5) (undo-tree-id2311 . -5) (undo-tree-id2312 . -5) (undo-tree-id2313 . -5) (undo-tree-id2314 . -5) (undo-tree-id2315 . -5) (undo-tree-id2316 . -5) (undo-tree-id2317 . -5) (undo-tree-id2318 . -5) (undo-tree-id2319 . -5) (undo-tree-id2320 . -5) (undo-tree-id2321 . -5) (undo-tree-id2322 . -5) (undo-tree-id2323 . -5) (undo-tree-id2324 . -5) (undo-tree-id2325 . -5) (undo-tree-id2326 . -5) (undo-tree-id2327 . -5) (undo-tree-id2328 . -5) (undo-tree-id2329 . -5) (undo-tree-id2330 . -5) (undo-tree-id2331 . -5) (undo-tree-id2332 . -5) (undo-tree-id2333 . -5) (undo-tree-id2334 . -5) (undo-tree-id2335 . -5) (undo-tree-id2336 . -5) (undo-tree-id2337 . -5) (undo-tree-id2338 . -5) (undo-tree-id2339 . -5) (undo-tree-id2340 . -5) (undo-tree-id2341 . -5) (undo-tree-id2342 . -5) (undo-tree-id2343 . -5) (undo-tree-id2344 . -5) (undo-tree-id2345 . -5) (undo-tree-id2346 . -5) (undo-tree-id2347 . -5) (undo-tree-id2348 . -5) 1960) nil (26013 11494 832923 0) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1954) (undo-tree-id2133 . -1) (undo-tree-id2134 . -1) (undo-tree-id2135 . -1) (undo-tree-id2136 . -1) (undo-tree-id2137 . -1) (undo-tree-id2138 . -1) (undo-tree-id2139 . -1) (undo-tree-id2140 . -1) (undo-tree-id2141 . -1) (undo-tree-id2142 . -1) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (undo-tree-id2145 . -1) (undo-tree-id2146 . -1) (undo-tree-id2147 . -1) (undo-tree-id2148 . -1) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1) (undo-tree-id2164 . -1) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) (undo-tree-id2173 . -1) (undo-tree-id2174 . -1) (undo-tree-id2175 . -1) (undo-tree-id2176 . -1) (undo-tree-id2177 . -1) (undo-tree-id2178 . -1) (undo-tree-id2179 . -1) (undo-tree-id2180 . -1) (undo-tree-id2181 . -1) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1) (undo-tree-id2186 . -1) (undo-tree-id2187 . -1) (undo-tree-id2188 . -1) (undo-tree-id2189 . -1) (undo-tree-id2190 . -1) (undo-tree-id2191 . -1) (undo-tree-id2192 . -1) (undo-tree-id2193 . -1) (undo-tree-id2194 . -1) (undo-tree-id2195 . -1) (undo-tree-id2196 . -1) (undo-tree-id2197 . -1) (undo-tree-id2198 . -1) (undo-tree-id2199 . -1) (undo-tree-id2200 . -1) (undo-tree-id2201 . -1) (undo-tree-id2202 . -1) (undo-tree-id2203 . -1) (undo-tree-id2204 . -1) (undo-tree-id2205 . -1) (undo-tree-id2206 . -1) (undo-tree-id2207 . -1) (undo-tree-id2208 . -1) (undo-tree-id2209 . -1) (undo-tree-id2210 . -1) (undo-tree-id2211 . -1) (undo-tree-id2212 . -1) (undo-tree-id2213 . -1) (undo-tree-id2214 . -1) (undo-tree-id2215 . -1) (undo-tree-id2216 . -1) (undo-tree-id2217 . -1) (undo-tree-id2218 . -1) (undo-tree-id2219 . -1) (undo-tree-id2220 . -1) (undo-tree-id2221 . -1) (undo-tree-id2222 . -1) (undo-tree-id2223 . -1) (undo-tree-id2224 . -1) (undo-tree-id2225 . -1) (undo-tree-id2226 . -1) (undo-tree-id2227 . -1) (undo-tree-id2228 . -1) (undo-tree-id2229 . -1) (undo-tree-id2230 . -1) (undo-tree-id2231 . -1) (undo-tree-id2232 . -1) (undo-tree-id2233 . -1) (undo-tree-id2234 . -1) (undo-tree-id2235 . -1) (undo-tree-id2236 . -1) (undo-tree-id2237 . -1) (undo-tree-id2238 . -1) (undo-tree-id2239 . -1) (undo-tree-id2240 . -1) (undo-tree-id2241 . -1) 1955) nil (26013 11494 832815 0) 0 nil])
([nil nil ((1950 . 1951)) nil (26013 11494 832690 0) 0 nil])
([nil nil ((2881 . 2898) (t 26013 11494 845985 897000)) nil (26013 11648 782916 0) 0 nil])
([nil nil ((2898 . 2900)) nil (26013 11648 782914 0) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -2898) (undo-tree-id2504 . -1) (undo-tree-id2505 . -1) (undo-tree-id2506 . -1) (undo-tree-id2507 . -1) (undo-tree-id2508 . -1) (undo-tree-id2509 . -1) (undo-tree-id2510 . -1) (undo-tree-id2511 . -1) (undo-tree-id2512 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -2899) (undo-tree-id2513 . -1) (undo-tree-id2514 . -1) (undo-tree-id2515 . -1) (undo-tree-id2516 . -1) (undo-tree-id2517 . -1) 2900) nil (26013 11648 782913 0) 0 nil])
([nil nil ((2898 . 2900)) nil (26013 11648 782898 0) 0 nil])
([nil nil ((2900 . 2902)) nil (26013 11648 782897 0) 0 nil])
([nil nil ((#("\\" 0 1 (fontified t)) . -2900) (undo-tree-id2497 . -1) (undo-tree-id2498 . -1) (undo-tree-id2499 . -1) (undo-tree-id2500 . -1) (undo-tree-id2501 . -1) (#(":" 0 1 (fontified t)) . -2901) (undo-tree-id2502 . -1) (undo-tree-id2503 . -1) 2902) nil (26013 11648 782895 0) 0 nil])
([nil nil ((2900 . 2901)) nil (26013 11648 782887 0) 0 nil])
([nil nil ((2898 . 2905) (#("tra" 0 3 (fontified nil)) . 2898) (2898 . 2901) (#("tracing" 0 7 (fontified nil)) . -2898) (2898 . 2905) (#("tra" 0 3 (fontified t)) . -2898) (undo-tree-id2478 . -3) (undo-tree-id2479 . -1) (undo-tree-id2480 . -2) (undo-tree-id2481 . -2) (undo-tree-id2482 . -2) (undo-tree-id2483 . -2) (undo-tree-id2484 . -2) (undo-tree-id2485 . -2) (undo-tree-id2486 . -2) (undo-tree-id2487 . -2) (undo-tree-id2488 . -2) (undo-tree-id2489 . -2) (undo-tree-id2490 . -2) (undo-tree-id2491 . -2) (undo-tree-id2492 . -3) (undo-tree-id2493 . -3) (undo-tree-id2494 . -3) (undo-tree-id2495 . -3) (undo-tree-id2496 . -3) 2901) nil (26013 11648 782885 0) 0 nil])
([nil nil ((2905 . 2909)) nil (26013 11648 782864 0) 0 nil])
([nil nil ((apply yas--snippet-revive 2907 2914 #s(yas--snippet nil nil #s(yas--exit 2913 nil) 51 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2913 nil) 51 nil nil nil nil)) (2907 . 2914) (#("info!($0)" 0 9 (fontified nil)) . 2907) (2907 . 2916) (#("in" 0 2 (fontified nil)) . 2907) (2907 . 2909) (#("info!(…)" 0 8 (fontified nil)) . -2907) (2907 . 2915) (#("in" 0 2 (face font-lock-keyword-face fontified t)) . -2907) (undo-tree-id2472 . -2) (undo-tree-id2473 . -1) (undo-tree-id2474 . -2) (undo-tree-id2475 . -2) (undo-tree-id2476 . -2) (undo-tree-id2477 . -2) 2909) nil (26013 11648 782858 0) 0 nil])
([nil nil ((2913 . 2915)) nil (26013 11648 782849 0) 0 nil])
([nil nil ((2914 . 2917)) nil (26013 11648 782848 0) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-string-face fontified t)) . -2914) (undo-tree-id2454 . -1) (undo-tree-id2455 . -1) (undo-tree-id2456 . -1) (undo-tree-id2457 . -1) (undo-tree-id2458 . -1) (undo-tree-id2459 . -1) (undo-tree-id2460 . -1) (undo-tree-id2461 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -2915) (undo-tree-id2462 . -1) (undo-tree-id2463 . -1) (undo-tree-id2464 . -1) (undo-tree-id2465 . -1) (undo-tree-id2466 . -1) (undo-tree-id2467 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -2916) (undo-tree-id2468 . -1) (undo-tree-id2469 . -1) (undo-tree-id2470 . -1) (undo-tree-id2471 . -1) 2917) nil (26013 11648 782845 0) 0 nil])
([nil nil ((2914 . 2926)) nil (26013 11648 782820 0) 0 nil])
([nil nil ((2926 . 2929)) nil (26013 11648 782819 0) 0 nil])
([nil nil ((2928 . 2930)) nil (26013 11648 782818 0) 0 nil])
([nil nil ((2932 . 2939)) nil (26013 11648 782816 0) 0 nil])
([nil nil ((2940 . 2941)) nil (26013 11648 782812 0) 0 nil])
([nil nil ((#("                tracing::info!(\"key state is {:?}\", state);" 0 16 (fontified t) 16 23 (face font-lock-constant-face fontified t) 23 25 (fontified t) 25 30 (face font-lock-preprocessor-face fontified t) 30 31 (face (rainbow-delimiters-depth-5-face) fontified t) 31 50 (face font-lock-string-face fontified t) 50 57 (fontified t) 57 58 (face (rainbow-delimiters-depth-5-face) fontified t) 58 59 (fontified t)) . 2882) (undo-tree-id2520 . -16) (undo-tree-id2521 . -16) (undo-tree-id2522 . -16) (undo-tree-id2523 . -16) (undo-tree-id2524 . -16) (undo-tree-id2525 . -16) (undo-tree-id2526 . -16) (undo-tree-id2527 . -16) (undo-tree-id2528 . -16) (undo-tree-id2529 . -16) (undo-tree-id2530 . -16) (undo-tree-id2531 . -16) (undo-tree-id2532 . -16) (undo-tree-id2533 . -16) (undo-tree-id2534 . -16) (undo-tree-id2535 . -16) (undo-tree-id2536 . -16) (undo-tree-id2537 . -16) (undo-tree-id2538 . -16) (undo-tree-id2539 . -16) (undo-tree-id2540 . -16) (undo-tree-id2541 . -16) (undo-tree-id2542 . -16) (undo-tree-id2543 . -16) (undo-tree-id2544 . -16) (undo-tree-id2545 . -16) (undo-tree-id2546 . -25) (undo-tree-id2547 . -25) (undo-tree-id2548 . -25) (undo-tree-id2549 . -25) (undo-tree-id2550 . -25) (undo-tree-id2551 . -32) (undo-tree-id2552 . -32) (undo-tree-id2553 . -32) (undo-tree-id2554 . -32) (undo-tree-id2555 . -32) (undo-tree-id2556 . -32) (undo-tree-id2557 . -32) (undo-tree-id2558 . 2) (undo-tree-id2559 . -28) (undo-tree-id2560 . -59) (undo-tree-id2561 . -59) (undo-tree-id2562 . -59) (undo-tree-id2563 . -59) (undo-tree-id2564 . -59) (undo-tree-id2565 . -59) (undo-tree-id2566 . -59) (undo-tree-id2567 . -59) (undo-tree-id2568 . -59) (undo-tree-id2569 . -59) (undo-tree-id2570 . -59) (undo-tree-id2571 . -59) (undo-tree-id2572 . -59) (undo-tree-id2573 . -59) (undo-tree-id2574 . -59) (undo-tree-id2575 . -59) (undo-tree-id2576 . -59) (undo-tree-id2577 . -59) (undo-tree-id2578 . -28) (undo-tree-id2579 . -28) (undo-tree-id2580 . -28) (undo-tree-id2581 . -28) (undo-tree-id2582 . -28) (undo-tree-id2583 . -28) (undo-tree-id2584 . -28) (undo-tree-id2585 . -28) (undo-tree-id2586 . -28) (undo-tree-id2587 . -28) (undo-tree-id2588 . -28) (undo-tree-id2589 . -28) (undo-tree-id2590 . -59) (t 26013 11648 796143 592000)) nil (26013 11676 927853 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2882) (undo-tree-id2518 . 1) (undo-tree-id2519 . -1)) nil (26013 30077 698793 0) 0 nil])
([nil nil ((apply -3 4788 4890 undo--wrap-and-run-primitive-undo 4788 4890 ((4800 . 4803) 4886))) nil (26013 30111 871620 0) 0 nil] [nil nil ((4788 . 4790) (t 26013 11676 944441 484000)) ((#("//" 0 2 (face font-lock-comment-delimiter-face fontified t)) . 4788)) (26013 30077 572229 0) 0 nil])
([nil nil ((4889 . 4902)) nil (26013 30111 871619 0) 0 nil])
([nil nil ((4901 . 4913) (4788 . 4800) (4888 . 4889)) ((#("
" 0 1 (face font-lock-comment-face fontified nil)) . 4888) (undo-tree-id2591 . -1) (undo-tree-id2592 . -1) (#("            " 0 12 (fontified t)) . 4788) (#("            " 0 12 (fontified t)) . 4901) (undo-tree-id2593 . -12)) (26013 30077 571745 0) 0 nil])
([nil nil ((4902 . 4906)) nil (26013 30111 871618 0) 0 nil])
nil
([nil nil ((4902 . 4908) (#("came" 0 4 (fontified nil)) . 4902) (4902 . 4906) (#("camera" 0 6 (fontified nil)) . -4902) (4902 . 4908) (#("came" 0 4 (fontified t)) . -4902) (undo-tree-id2655 . -4) (undo-tree-id2656 . -1) (undo-tree-id2657 . -2) (undo-tree-id2658 . -2) (undo-tree-id2659 . -3) (undo-tree-id2660 . -3) (undo-tree-id2661 . -4) (undo-tree-id2662 . -4) 4906) nil (26013 30111 871616 0) 0 nil])
([nil nil ((4908 . 4910)) nil (26013 30111 871606 0) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -4909) (undo-tree-id2652 . -1) (undo-tree-id2653 . -1) (undo-tree-id2654 . -1) 4910) nil (26013 30111 871604 0) 0 nil])
([nil nil ((4909 . 4910)) nil (26013 30111 871600 0) 0 nil])
([nil nil ((4909 . 4912) (#("e" 0 1 (fontified nil)) . 4909) (4909 . 4910) (#("eye" 0 3 (fontified nil)) . -4909) (4909 . 4912) (#("e" 0 1 (fontified t)) . -4909) (undo-tree-id2647 . -1) (undo-tree-id2648 . -1) (undo-tree-id2649 . -1) (undo-tree-id2650 . -1) (undo-tree-id2651 . -1) 4910) nil (26013 30111 871598 0) 0 nil])
([nil nil ((4912 . 4915)) nil (26013 30111 871591 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -4914) (undo-tree-id2642 . -1) (undo-tree-id2643 . -1) (undo-tree-id2644 . -1) (undo-tree-id2645 . -1) (undo-tree-id2646 . -1) 4915) nil (26013 30111 871590 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -4912) (undo-tree-id2626 . -1) (undo-tree-id2627 . -1) (undo-tree-id2628 . -1) (undo-tree-id2629 . -1) (undo-tree-id2630 . -1) (undo-tree-id2631 . -1) (undo-tree-id2632 . -1) (undo-tree-id2633 . -1) (undo-tree-id2634 . -1) (#("=" 0 1 (fontified t)) . -4913) (undo-tree-id2635 . -1) (undo-tree-id2636 . -1) (undo-tree-id2637 . -1) (undo-tree-id2638 . -1) (undo-tree-id2639 . -1) (undo-tree-id2640 . -1) (undo-tree-id2641 . -1) 4914) nil (26013 30111 871583 0) 0 nil])
([nil nil ((4912 . 4914)) nil (26013 30111 871567 0) 0 nil])
([nil nil ((4913 . 4914) (#("y" 0 1 (fontified nil)) . 4913) (4913 . 4914) (#("y" 0 1 (fontified t)) . -4913) (undo-tree-id2620 . -1) (undo-tree-id2621 . -1) (undo-tree-id2622 . -1) (undo-tree-id2623 . -1) (undo-tree-id2624 . -1) (undo-tree-id2625 . -1) 4914) nil (26013 30111 871565 0) 0 nil])
([nil nil ((4914 . 4917)) nil (26013 30111 871557 0) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -4915) (undo-tree-id2608 . -1) (undo-tree-id2609 . -1) (undo-tree-id2610 . -1) (undo-tree-id2611 . -1) (undo-tree-id2612 . -1) (undo-tree-id2613 . -1) (undo-tree-id2614 . -1) (#(" " 0 1 (fontified t)) . -4916) (undo-tree-id2615 . -1) (undo-tree-id2616 . -1) (undo-tree-id2617 . -1) (undo-tree-id2618 . -1) (undo-tree-id2619 . -1) 4917) nil (26013 30111 871555 0) 0 nil])
([nil nil ((4915 . 4919)) nil (26013 30111 871541 0) 0 nil])
([nil nil ((4919 . 4920)) nil (26013 30111 871540 0) 0 nil])
([nil nil ((4918 . 4922) (#("se" 0 2 (fontified nil)) . 4918) (4918 . 4920) (#("self" 0 4 (fontified nil)) . -4918) (4918 . 4922) (#("se" 0 2 (fontified t)) . -4918) (undo-tree-id2599 . -2) (undo-tree-id2600 . -1) (undo-tree-id2601 . -1) (undo-tree-id2602 . -1) (undo-tree-id2603 . -1) (undo-tree-id2604 . -2) (undo-tree-id2605 . -2) (undo-tree-id2606 . -2) (undo-tree-id2607 . -2) 4920) nil (26013 30111 871538 0) 0 nil])
([nil nil ((4922 . 4924)) nil (26013 30111 871526 0) 0 nil])
([nil nil ((4923 . 4928) (#("s" 0 1 (fontified nil)) . 4923) (4923 . 4924) (#("speed" 0 5 (fontified nil)) . -4923) (4923 . 4928) (#("s" 0 1 (fontified t)) . -4923) (undo-tree-id2594 . -1) (undo-tree-id2595 . -1) (undo-tree-id2596 . -1) (undo-tree-id2597 . -1) (undo-tree-id2598 . -1) 4924) nil (26013 30111 871523 0) 0 nil])
([nil nil ((4928 . 4929)) nil (26013 30111 871507 0) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -4913) (undo-tree-id2663 . -1) (undo-tree-id2664 . -1) 4914 (t 26013 30111 887094 636000)) nil (26013 30120 572704 0) 0 nil])
([nil nil ((4913 . 4914)) nil (26013 30126 937712 0) 0 nil])
([nil nil ((apply -3 4974 5076 undo--wrap-and-run-primitive-undo 4974 5076 ((4986 . 4989) 5072))) nil (26013 30142 844785 0) 0 nil] [nil nil ((4996 . 4998) (t 26013 30120 586503 837000)) ((#(".x" 0 1 (fontified t) 1 2 (fontified t)) . 4996) (undo-tree-id2670 . -2) (undo-tree-id2671 . -2) (undo-tree-id2672 . -2) (undo-tree-id2673 . -2) (undo-tree-id2674 . -2) (undo-tree-id2675 . -2) (undo-tree-id2676 . -2)) (26013 30126 621609 0) 0 nil])
([nil nil ((5075 . 5088)) nil (26013 30142 844784 0) 0 nil])
([nil nil ((4997 . 4998) (#("x" 0 1 (fontified nil)) . 4997) (4997 . 4998) (#("x" 0 1 (fontified t)) . -4997) (undo-tree-id2665 . -1) (undo-tree-id2666 . -1) (undo-tree-id2667 . -1) (undo-tree-id2668 . -1) (undo-tree-id2669 . -1) 4998) ((4997 . 4998) (#("x" 0 1 (fontified nil)) . 4997) (4997 . 4998) (#("x" 0 1 (fontified t)) . 4997)) (26013 30126 620983 0) 0 nil])
([nil nil ((5088 . 5092)) nil (26013 30142 844783 0) 0 nil])
nil
([nil nil ((5088 . 5094) (#("came" 0 4 (fontified nil)) . 5088) (5088 . 5092) (#("camera" 0 6 (fontified nil)) . -5088) (5088 . 5094) (#("came" 0 4 (fontified t)) . -5088) (undo-tree-id2704 . -4) (undo-tree-id2705 . -1) (undo-tree-id2706 . -2) (undo-tree-id2707 . -2) (undo-tree-id2708 . -2) (undo-tree-id2709 . -2) (undo-tree-id2710 . -3) (undo-tree-id2711 . -3) (undo-tree-id2712 . -4) (undo-tree-id2713 . -4) (undo-tree-id2714 . -4) (undo-tree-id2715 . -4) 5092) nil (26013 30142 844781 0) 0 nil])
([nil nil ((5094 . 5096)) nil (26013 30142 844767 0) 0 nil])
([nil nil ((5095 . 5098) (#("e" 0 1 (fontified nil)) . 5095) (5095 . 5096) (#("eye" 0 3 (fontified nil)) . -5095) (5095 . 5098) (#("e" 0 1 (fontified t)) . -5095) (undo-tree-id2700 . -1) (undo-tree-id2701 . -1) (undo-tree-id2702 . -1) (undo-tree-id2703 . -1) 5096) nil (26013 30142 844765 0) 0 nil])
([nil nil ((5098 . 5102)) nil (26013 30142 844758 0) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -5101) (undo-tree-id2695 . -1) (undo-tree-id2696 . -1) (undo-tree-id2697 . -1) (undo-tree-id2698 . -1) (undo-tree-id2699 . -1) 5102) nil (26013 30142 844757 0) 0 nil])
([nil nil ((5101 . 5103)) nil (26013 30142 844751 0) 0 nil])
([nil nil ((#("+" 0 1 (fontified t)) . -5102) (undo-tree-id2693 . -1) (undo-tree-id2694 . -1) 5103) nil (26013 30142 844750 0) 0 nil])
([nil nil ((5102 . 5106)) nil (26013 30142 844747 0) 0 nil])
([nil nil ((5106 . 5107)) nil (26013 30142 844746 0) 0 nil])
([nil nil ((5104 . 5108) (#("sel" 0 3 (fontified nil)) . 5104) (5104 . 5107) (#("self" 0 4 (fontified nil)) . -5104) (5104 . 5108) (#("sel" 0 3 (fontified t)) . -5104) (undo-tree-id2682 . -3) (undo-tree-id2683 . -1) (undo-tree-id2684 . -1) (undo-tree-id2685 . -1) (undo-tree-id2686 . -1) (undo-tree-id2687 . -2) (undo-tree-id2688 . -2) (undo-tree-id2689 . -3) (undo-tree-id2690 . -3) (undo-tree-id2691 . -3) (undo-tree-id2692 . -3) 5107) nil (26013 30142 844744 0) 0 nil])
([nil nil ((5108 . 5110)) nil (26013 30142 844730 0) 0 nil])
([nil nil ((5109 . 5114) (#("s" 0 1 (fontified nil)) . 5109) (5109 . 5110) (#("speed" 0 5 (fontified nil)) . -5109) (5109 . 5114) (#("s" 0 1 (fontified t)) . -5109) (undo-tree-id2677 . -1) (undo-tree-id2678 . -1) (undo-tree-id2679 . -1) (undo-tree-id2680 . -1) (undo-tree-id2681 . -1) 5110) nil (26013 30142 844728 0) 0 nil])
([nil nil ((5114 . 5115)) nil (26013 30142 844709 0) 0 nil])
([nil nil ((apply -3 4890 4933 undo--wrap-and-run-primitive-undo 4890 4933 ((4902 . 4905) 4929))) nil (26014 20116 868801 0) 0 nil])
([nil nil ((apply -3 5079 5122 undo--wrap-and-run-primitive-undo 5079 5122 ((5091 . 5094) 5118))) nil (26014 20116 868800 0) 0 nil])
([nil nil ((apply 3 4788 4886 undo--wrap-and-run-primitive-undo 4788 4886 ((#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -4800) 4889))) nil (26014 20116 868799 0) 0 nil])
([nil nil ((apply 3 4974 5072 undo--wrap-and-run-primitive-undo 4974 5072 ((#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -4986) 5075))) nil (26014 20116 868794 0) 0 nil])
([nil nil ((1325 . 1330) (t 26014 20116 882658 250000)) nil (26015 37020 366836 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1358 . 1359) (nil fontified nil 1330 . 1359) (1330 . 1359)) nil (26015 37020 366834 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1330) 1358) nil (26015 37020 366832 0) 0 nil])
([nil nil ((1330 . 1334)) nil (26015 37020 366828 0) 0 nil])
([nil nil ((1493 . 1506) (t 26015 37020 381744 894000)) nil (26015 37037 908485 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1542 . 1543) (nil fontified nil 1506 . 1543) (1506 . 1543)) nil (26015 37037 908483 0) 0 nil])
([nil nil ((#("            " 0 12 (fontified t)) . -1506) 1523) nil (26015 37037 908481 0) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . -1530) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) 1531) nil (26015 37037 908477 0) 0 nil])
([nil nil ((1664 . 1673) (t 26015 37037 922235 276000)) nil (26015 37052 31922 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1737 . 1738) (nil fontified nil 1673 . 1738) (1673 . 1738)) nil (26015 37052 31921 0) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -1673) 1715) nil (26015 37052 31919 0) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . -1729) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) 1730) nil (26015 37052 31915 0) 0 nil])
([nil nil ((413 . 415) (t 26015 37052 45712 17000)) nil (26015 47612 667266 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 462 . 463) (nil fontified nil 415 . 463) (415 . 463)) nil (26015 47612 667261 0) 0 nil])
([nil nil ((219 . 221) (t 26015 47612 683013 201000)) nil (26015 47650 329794 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 274 . 275) (nil fontified nil 220 . 275) (220 . 275)) nil (26015 47650 329789 0) 0 nil])
([nil nil ((#("pub struct Camera {
    pub eye: cgmath::Point3<f32>,
    pub target: cgmath::Point3<f32>,
    pub up: cgmath::Vector3<f32>,
    pub aspect: f32,
    pub fovy: f32,
    pub znear: f32,
    pub zfar: f32,
}

impl Camera {
    pub fn build_view_projection_matrix(&self) -> cgmath::Matrix4<f32> {
        // 1.
        let view = cgmath::Matrix4::look_at_rh(self.eye, self.target, self.up);
        // 2.
        let proj = cgmath::perspective(cgmath::Deg(self.fovy), self.aspect, self.znear, self.zfar);

        // 3.
        return OPENGL_TO_WGPU_MATRIX * proj * view;
    }
}" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 17 (face font-lock-type-face fontified t) 17 18 (fontified t) 18 19 (face (rainbow-delimiters-depth-1-face) fontified t) 19 24 (fontified t) 24 27 (face font-lock-keyword-face fontified t) 27 28 (fontified t) 28 31 (face font-lock-variable-name-face fontified t) 31 33 (fontified t) 33 39 (face font-lock-constant-face fontified t) 39 41 (fontified t) 41 47 (face font-lock-type-face fontified t) 47 48 (face (rainbow-delimiters-depth-2-face) fontified t) 48 51 (face font-lock-type-face fontified t) 51 52 (face (rainbow-delimiters-depth-2-face) fontified t) 52 58 (fontified t) 58 61 (face font-lock-keyword-face fontified t) 61 62 (fontified t) 62 68 (face font-lock-variable-name-face fontified t) 68 70 (fontified t) 70 76 (face font-lock-constant-face fontified t) 76 78 (fontified t) 78 84 (face font-lock-type-face fontified t) 84 85 (face (rainbow-delimiters-depth-2-face) fontified t) 85 88 (face font-lock-type-face fontified t) 88 89 (face (rainbow-delimiters-depth-2-face) fontified t) 89 95 (fontified t) 95 98 (face font-lock-keyword-face fontified t) 98 99 (fontified t) 99 101 (face font-lock-variable-name-face fontified t) 101 103 (fontified t) 103 109 (face font-lock-constant-face fontified t) 109 111 (fontified t) 111 118 (face font-lock-type-face fontified t) 118 119 (face (rainbow-delimiters-depth-2-face) fontified t) 119 122 (face font-lock-type-face fontified t) 122 123 (face (rainbow-delimiters-depth-2-face) fontified t) 123 129 (fontified t) 129 132 (face font-lock-keyword-face fontified t) 132 133 (fontified t) 133 139 (face font-lock-variable-name-face fontified t) 139 141 (fontified t) 141 144 (face font-lock-type-face fontified t) 144 150 (fontified t) 150 153 (face font-lock-keyword-face fontified t) 153 154 (fontified t) 154 158 (face font-lock-variable-name-face fontified t) 158 160 (fontified t) 160 163 (face font-lock-type-face fontified t) 163 169 (fontified t) 169 172 (face font-lock-keyword-face fontified t) 172 173 (fontified t) 173 178 (face font-lock-variable-name-face fontified t) 178 180 (fontified t) 180 183 (face font-lock-type-face fontified t) 183 189 (fontified t) 189 192 (face font-lock-keyword-face fontified t) 192 193 (fontified t) 193 197 (face font-lock-variable-name-face fontified t) 197 199 (fontified t) 199 202 (face font-lock-type-face fontified t) 202 204 (fontified t) 204 205 (face (rainbow-delimiters-depth-1-face) fontified t) 205 207 (fontified t) 207 211 (face font-lock-keyword-face fontified t) 211 212 (fontified t) 212 218 (face font-lock-type-face fontified t) 218 219 (fontified t) 219 220 (face (rainbow-delimiters-depth-1-face) fontified t) 220 225 (fontified t) 225 228 (face font-lock-keyword-face fontified t) 228 229 (fontified t) 229 231 (face font-lock-keyword-face fontified t) 231 232 (fontified t) 232 260 (face font-lock-function-name-face fontified t) 260 261 (face (rainbow-delimiters-depth-2-face) fontified t) 261 262 (face rust-ampersand-face fontified t) 262 266 (face font-lock-keyword-face fontified t) 266 267 (face (rainbow-delimiters-depth-2-face) fontified t) 267 269 (fontified t) 269 270 (syntax-table (1) fontified t) 270 271 (fontified t) 271 277 (face font-lock-constant-face fontified t) 277 279 (fontified t) 279 286 (face font-lock-type-face fontified t) 286 287 (face (rainbow-delimiters-depth-2-face) fontified t) 287 290 (face font-lock-type-face fontified t) 290 291 (face (rainbow-delimiters-depth-2-face) fontified t) 291 292 (fontified t) 292 293 (face (rainbow-delimiters-depth-2-face) fontified t) 293 302 (fontified t) 302 305 (face font-lock-comment-delimiter-face fontified t) 305 308 (face font-lock-comment-face fontified t) 308 316 (fontified t) 316 319 (face font-lock-keyword-face fontified t) 319 320 (fontified t) 320 324 (face font-lock-variable-name-face fontified t) 324 327 (fontified t) 327 333 (face font-lock-constant-face fontified t) 333 335 (fontified t) 335 342 (face font-lock-type-face fontified t) 342 354 (fontified t) 354 355 (face (rainbow-delimiters-depth-3-face) fontified t) 355 359 (face font-lock-keyword-face fontified t) 359 365 (fontified t) 365 369 (face font-lock-keyword-face fontified t) 369 378 (fontified t) 378 382 (face font-lock-keyword-face fontified t) 382 385 (fontified t) 385 386 (face (rainbow-delimiters-depth-3-face) fontified t) 386 396 (fontified t) 396 399 (face font-lock-comment-delimiter-face fontified t) 399 402 (face font-lock-comment-face fontified t) 402 410 (fontified t) 410 413 (face font-lock-keyword-face fontified t) 413 414 (fontified t) 414 418 (face font-lock-variable-name-face fontified t) 418 421 (fontified t) 421 427 (face font-lock-constant-face fontified t) 427 440 (fontified t) 440 441 (face (rainbow-delimiters-depth-3-face) fontified t) 441 447 (face font-lock-constant-face fontified t) 447 449 (fontified t) 449 452 (face font-lock-type-face fontified t) 452 453 (face (rainbow-delimiters-depth-4-face) fontified t) 453 457 (face font-lock-keyword-face fontified t) 457 462 (fontified t) 462 463 (face (rainbow-delimiters-depth-4-face) fontified t) 463 465 (fontified t) 465 469 (face font-lock-keyword-face fontified t) 469 478 (fontified t) 478 482 (face font-lock-keyword-face fontified t) 482 490 (fontified t) 490 494 (face font-lock-keyword-face fontified t) 494 499 (fontified t) 499 500 (face (rainbow-delimiters-depth-3-face) fontified t) 500 511 (fontified t) 511 514 (face font-lock-comment-delimiter-face fontified t) 514 517 (face font-lock-comment-face fontified t) 517 525 (fontified t) 525 531 (face font-lock-keyword-face fontified t) 531 532 (fontified t) 532 553 (face font-lock-type-face fontified t) 553 573 (fontified t) 573 574 (face (rainbow-delimiters-depth-2-face) fontified t) 574 575 (fontified t) 575 576 (face (rainbow-delimiters-depth-1-face) fontified t)) . 523) (undo-tree-id13 . -576) (undo-tree-id14 . -576) (undo-tree-id15 . -576) (undo-tree-id16 . -576) (undo-tree-id17 . -408) (undo-tree-id18 . -205) (undo-tree-id19 . -131) (undo-tree-id20 . -576) (t 26015 47650 344613 512000)) nil (26015 47674 629566 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1381 . 1382) (nil fontified nil 523 . 1382) (523 . 1382)) nil (26015 47674 629543 0) 0 nil])
([nil nil ((218 . 220) (t 26015 47674 645912 222000)) nil (26015 47704 203831 0) 0 nil])
([nil nil ((220 . 221)) nil (26015 47704 203830 0) 0 nil])
([nil nil ((221 . 227)) nil (26015 47704 203829 0) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -226) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) 227) nil (26015 47704 203827 0) 0 nil])
([nil nil ((226 . 227)) nil (26015 47704 203818 0) 0 nil])
([nil nil ((224 . 230) (#("cgm" 0 3 (fontified nil)) . 224) (224 . 227) (#("cgmath" 0 6 (fontified nil)) . -224) (224 . 230) (#("cgm" 0 3 (face font-lock-constant-face fontified t)) . -224) (undo-tree-id33 . -3) (undo-tree-id34 . -2) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -2) (undo-tree-id38 . -2) (undo-tree-id39 . -2) (undo-tree-id40 . -2) (undo-tree-id41 . -2) (undo-tree-id42 . -2) (undo-tree-id43 . -2) (undo-tree-id44 . -2) (undo-tree-id45 . -2) (undo-tree-id46 . -2) (undo-tree-id47 . -2) (undo-tree-id48 . -2) (undo-tree-id49 . -2) (undo-tree-id50 . -2) (undo-tree-id51 . -2) (undo-tree-id52 . -2) (undo-tree-id53 . -2) (undo-tree-id54 . -2) (undo-tree-id55 . -3) (undo-tree-id56 . -3) (undo-tree-id57 . -3) (undo-tree-id58 . -3) (undo-tree-id59 . -3) 227) nil (26015 47704 203815 0) 0 nil])
([nil nil ((230 . 234)) nil (26015 47704 203787 0) 0 nil])
([nil nil ((#("P" 0 1 (face font-lock-type-face fontified t)) . -232) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -233) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) 234) nil (26015 47704 203785 0) 0 nil])
([nil nil ((232 . 234)) nil (26015 47704 203762 0) 0 nil])
([nil nil ((#("        use cgmath::SquareMatrix;" 0 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 18 (face font-lock-constant-face fontified t) 18 20 (fontified t) 20 32 (face font-lock-type-face fontified t) 32 33 (fontified t)) . 1851) (undo-tree-id70 . -33) (undo-tree-id71 . -33) (undo-tree-id72 . -33) (undo-tree-id73 . -33) (undo-tree-id74 . -33) (undo-tree-id75 . -33) (undo-tree-id76 . -33) (undo-tree-id77 . -33) (undo-tree-id78 . -33) (undo-tree-id79 . -33) (undo-tree-id80 . -33) (undo-tree-id81 . -33) (t 26015 47704 221606 15000)) nil (26015 47733 794618 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1851) (undo-tree-id69 . -1)) nil (26015 47733 794602 0) 0 nil])
([nil nil ((1397 . 1399) (t 26015 47733 810655 511000)) nil (26015 47774 430142 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 2071 . 2072) (nil fontified nil 1399 . 2072) (1399 . 2072)) nil (26015 47774 430137 0) 0 nil])
([nil nil ((#("
pub struct CameraController {
    pub speed: f32,
    pub is_forward_pressed: bool,
    pub is_backward_pressed: bool,
    pub is_left_pressed: bool,
    pub is_right_pressed: bool,
}

impl CameraController {
    pub fn new(speed: f32) -> Self {
        Self {
            speed,
            is_forward_pressed: false,
            is_backward_pressed: false,
            is_left_pressed: false,
            is_right_pressed: false,
        }
    }

    pub fn process_events(&mut self, event: &WindowEvent) -> bool {
        match event {
            WindowEvent::KeyboardInput {
                event: KeyEvent {
                    physical_key: PhysicalKey::Code(keycode),
                    state,
                    ..
                },
                ..
            } => {
                let is_pressed = *state == ElementState::Pressed;
                match keycode {
                    KeyCode::KeyW | KeyCode::ArrowUp => {
                        self.is_forward_pressed = is_pressed;
                        true
                    }
                    KeyCode::KeyA | KeyCode::ArrowLeft => {
                        self.is_left_pressed = is_pressed;
                        true
                    }
                    KeyCode::KeyS | KeyCode::ArrowDown => {
                        self.is_backward_pressed = is_pressed;
                        true
                    }
                    KeyCode::KeyD | KeyCode::ArrowRight => {
                        self.is_right_pressed = is_pressed;
                        true
                    }
                    _ => false,
                }
            }
            _ => false,
        }
    }

    pub fn update_camera(&self, camera: &mut Camera) {
        use cgmath::InnerSpace;
        let forward = camera.target - camera.eye;
        let forward_norm = forward.normalize();
        let forward_mag = forward.magnitude();

        // Prevents glitching when the camera gets too close to the
        // center of the scene.
        if self.is_forward_pressed && forward_mag > self.speed {
            camera.eye += forward_norm * self.speed;
        }
        if self.is_backward_pressed {
            camera.eye -= forward_norm * self.speed;
        }

        let right = forward_norm.cross(camera.up);

        // Redo radius calc in case the forward/backward is pressed.
        let forward = camera.target - camera.eye;
        let forward_mag = forward.magnitude();

        if self.is_right_pressed {
            // Rescale the distance between the target and the eye so 
            // that it doesn't change. The eye, therefore, still 
            // lies on the circle made by the target and eye.
            camera.eye = camera.target - (forward + right * self.speed).normalize() * forward_mag;
            // camera.eye.x += self.speed;
        }
        if self.is_left_pressed {
            camera.eye = camera.target - (forward - right * self.speed).normalize() * forward_mag;
            // camera.eye.x -= self.speed;
        }
    }
}
" 0 1 (fontified t) 1 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 28 (face font-lock-type-face fontified t) 28 29 (fontified t) 29 30 (face (rainbow-delimiters-depth-1-face) fontified t) 30 35 (fontified t) 35 38 (face font-lock-keyword-face fontified t) 38 39 (fontified t) 39 44 (face font-lock-variable-name-face fontified t) 44 46 (fontified t) 46 49 (face font-lock-type-face fontified t) 49 55 (fontified t) 55 58 (face font-lock-keyword-face fontified t) 58 59 (fontified t) 59 77 (face font-lock-variable-name-face fontified t) 77 79 (fontified t) 79 83 (face font-lock-type-face fontified t) 83 89 (fontified t) 89 92 (face font-lock-keyword-face fontified t) 92 93 (fontified t) 93 112 (face font-lock-variable-name-face fontified t) 112 114 (fontified t) 114 118 (face font-lock-type-face fontified t) 118 124 (fontified t) 124 127 (face font-lock-keyword-face fontified t) 127 128 (fontified t) 128 143 (face font-lock-variable-name-face fontified t) 143 145 (fontified t) 145 149 (face font-lock-type-face fontified t) 149 155 (fontified t) 155 158 (face font-lock-keyword-face fontified t) 158 159 (fontified t) 159 175 (face font-lock-variable-name-face fontified t) 175 177 (fontified t) 177 181 (face font-lock-type-face fontified t) 181 183 (fontified t) 183 184 (face (rainbow-delimiters-depth-1-face) fontified t) 184 186 (fontified t) 186 190 (face font-lock-keyword-face fontified t) 190 191 (fontified t) 191 207 (face font-lock-type-face fontified t) 207 208 (fontified t) 208 209 (face (rainbow-delimiters-depth-1-face) fontified t) 209 214 (fontified t) 214 217 (face font-lock-keyword-face fontified t) 217 218 (fontified t) 218 220 (face font-lock-keyword-face fontified t) 220 221 (fontified t) 221 224 (face font-lock-function-name-face fontified t) 224 225 (face (rainbow-delimiters-depth-2-face) fontified t) 225 230 (face font-lock-variable-name-face fontified t) 230 232 (fontified t) 232 235 (face font-lock-type-face fontified t) 235 236 (face (rainbow-delimiters-depth-2-face) fontified t) 236 238 (fontified t) 238 239 (fontified t syntax-table (1)) 239 240 (fontified t) 240 244 (face font-lock-type-face fontified t) 244 245 (fontified t) 245 246 (face (rainbow-delimiters-depth-2-face) fontified t) 246 255 (fontified t) 255 259 (face font-lock-type-face fontified t) 259 260 (fontified t) 260 261 (face (rainbow-delimiters-depth-3-face) fontified t) 261 262 (fontified t) 262 292 (fontified t) 292 293 (fontified t) 293 311 (fontified t face font-lock-variable-name-face) 311 313 (fontified t) 313 318 (fontified t face font-lock-keyword-face) 318 320 (fontified t) 320 332 (fontified t) 332 351 (face font-lock-variable-name-face fontified t) 351 353 (fontified t) 353 358 (face font-lock-keyword-face fontified t) 358 372 (fontified t) 372 387 (face font-lock-variable-name-face fontified t) 387 389 (fontified t) 389 394 (face font-lock-keyword-face fontified t) 394 408 (fontified t) 408 424 (face font-lock-variable-name-face fontified t) 424 426 (fontified t) 426 431 (face font-lock-keyword-face fontified t) 431 441 (fontified t) 441 442 (face (rainbow-delimiters-depth-3-face) fontified t) 442 447 (fontified t) 447 448 (face (rainbow-delimiters-depth-2-face) fontified t) 448 454 (fontified t) 454 457 (face font-lock-keyword-face fontified t) 457 458 (fontified t) 458 460 (face font-lock-keyword-face fontified t) 460 461 (fontified t) 461 475 (face font-lock-function-name-face fontified t) 475 476 (face (rainbow-delimiters-depth-2-face) fontified t) 476 477 (face rust-ampersand-face fontified t) 477 480 (face font-lock-keyword-face fontified t) 480 481 (fontified t) 481 485 (face font-lock-keyword-face fontified t) 485 487 (fontified t) 487 492 (face font-lock-variable-name-face fontified t) 492 494 (fontified t) 494 495 (face rust-ampersand-face fontified t) 495 506 (face font-lock-type-face fontified t) 506 507 (face (rainbow-delimiters-depth-2-face) fontified t) 507 509 (fontified t) 509 510 (fontified t syntax-table (1)) 510 511 (fontified t) 511 515 (face font-lock-type-face fontified t) 515 516 (fontified t) 516 517 (face (rainbow-delimiters-depth-2-face) fontified t) 517 526 (fontified t) 526 531 (face font-lock-keyword-face fontified t) 531 538 (fontified t) 538 539 (face (rainbow-delimiters-depth-3-face) fontified t) 539 552 (fontified t) 552 563 (face font-lock-type-face fontified t) 563 565 (fontified t) 565 578 (face font-lock-type-face fontified t) 578 579 (fontified t) 579 580 (face (rainbow-delimiters-depth-4-face) fontified t) 580 597 (fontified t) 597 602 (face font-lock-variable-name-face fontified t) 602 604 (fontified t) 604 612 (face font-lock-type-face fontified t) 612 613 (fontified t) 613 614 (face (rainbow-delimiters-depth-5-face) fontified t) 614 625 (fontified t) 625 635 (fontified t) 635 647 (face font-lock-variable-name-face fontified t) 647 649 (fontified t) 649 660 (face font-lock-type-face fontified t) 660 662 (fontified t) 662 666 (face font-lock-type-face fontified t) 666 667 (face (rainbow-delimiters-depth-6-face) fontified t) 667 674 (fontified t) 674 675 (face (rainbow-delimiters-depth-6-face) fontified t) 675 677 (fontified t) 677 727 (fontified t) 727 728 (fontified t) 728 743 (fontified t) 743 744 (face (rainbow-delimiters-depth-5-face) fontified t) 744 746 (fontified t) 746 760 (fontified t) 760 765 (fontified t) 765 777 (fontified t) 777 778 (face (rainbow-delimiters-depth-4-face) fontified t) 778 780 (fontified t) 780 781 (fontified t syntax-table (1)) 781 782 (fontified t) 782 783 (face (rainbow-delimiters-depth-4-face) fontified t) 783 800 (fontified t) 800 803 (face font-lock-keyword-face fontified t) 803 804 (fontified t) 804 814 (face font-lock-variable-name-face fontified t) 814 827 (fontified t) 827 834 (face font-lock-type-face fontified t) 834 839 (face font-lock-type-face fontified t) 839 841 (fontified t) 841 848 (face font-lock-type-face fontified t) 848 850 (fontified t) 850 861 (fontified t) 861 862 (fontified t) 862 866 (fontified t) 866 871 (face font-lock-keyword-face fontified t) 871 880 (fontified t) 880 881 (face (rainbow-delimiters-depth-5-face) fontified t) 881 882 (fontified t) 882 902 (fontified t) 902 909 (face font-lock-type-face fontified t) 909 911 (fontified t) 911 915 (face font-lock-type-face fontified t) 915 918 (fontified t) 918 921 (face font-lock-type-face fontified t) 921 925 (face font-lock-type-face fontified t) 925 927 (fontified t) 927 929 (face font-lock-type-face fontified t) 929 934 (face font-lock-type-face fontified t) 934 936 (fontified t) 936 937 (syntax-table (1) fontified t) 937 938 (fontified t) 938 939 (face (rainbow-delimiters-depth-6-face) fontified t) 939 940 (fontified t) 940 964 (fontified t) 964 968 (face font-lock-keyword-face fontified t) 968 995 (fontified t) 995 996 (fontified t) 996 1002 (fontified t) 1002 1026 (fontified t) 1026 1030 (face font-lock-keyword-face fontified t) 1030 1051 (fontified t) 1051 1052 (face (rainbow-delimiters-depth-6-face) fontified t) 1052 1073 (fontified t) 1073 1080 (face font-lock-type-face fontified t) 1080 1082 (fontified t) 1082 1086 (face font-lock-type-face fontified t) 1086 1089 (fontified t) 1089 1096 (face font-lock-type-face fontified t) 1096 1098 (fontified t) 1098 1107 (face font-lock-type-face fontified t) 1107 1109 (fontified t) 1109 1110 (syntax-table (1) fontified t) 1110 1111 (fontified t) 1111 1112 (face (rainbow-delimiters-depth-6-face) fontified t) 1112 1137 (fontified t) 1137 1141 (face font-lock-keyword-face fontified t) 1141 1196 (fontified t) 1196 1200 (face font-lock-keyword-face fontified t) 1200 1221 (fontified t) 1221 1222 (face (rainbow-delimiters-depth-6-face) fontified t) 1222 1243 (fontified t) 1243 1250 (face font-lock-type-face fontified t) 1250 1252 (fontified t) 1252 1256 (face font-lock-type-face fontified t) 1256 1259 (fontified t) 1259 1266 (face font-lock-type-face fontified t) 1266 1268 (fontified t) 1268 1277 (face font-lock-type-face fontified t) 1277 1279 (fontified t) 1279 1280 (syntax-table (1) fontified t) 1280 1281 (fontified t) 1281 1282 (face (rainbow-delimiters-depth-6-face) fontified t) 1282 1307 (fontified t) 1307 1311 (face font-lock-keyword-face fontified t) 1311 1370 (fontified t) 1370 1374 (face font-lock-keyword-face fontified t) 1374 1395 (fontified t) 1395 1396 (face (rainbow-delimiters-depth-6-face) fontified t) 1396 1417 (fontified t) 1417 1424 (face font-lock-type-face fontified t) 1424 1426 (fontified t) 1426 1430 (face font-lock-type-face fontified t) 1430 1433 (fontified t) 1433 1440 (face font-lock-type-face fontified t) 1440 1442 (fontified t) 1442 1452 (face font-lock-type-face fontified t) 1452 1454 (fontified t) 1454 1455 (syntax-table (1) fontified t) 1455 1456 (fontified t) 1456 1457 (face (rainbow-delimiters-depth-6-face) fontified t) 1457 1482 (fontified t) 1482 1486 (face font-lock-keyword-face fontified t) 1486 1542 (fontified t) 1542 1546 (face font-lock-keyword-face fontified t) 1546 1567 (fontified t) 1567 1568 (face (rainbow-delimiters-depth-6-face) fontified t) 1568 1592 (fontified t) 1592 1593 (syntax-table (1) fontified t) 1593 1594 (fontified t) 1594 1599 (face font-lock-keyword-face fontified t) 1599 1617 (fontified t) 1617 1618 (face (rainbow-delimiters-depth-5-face) fontified t) 1618 1631 (fontified t) 1631 1632 (face (rainbow-delimiters-depth-4-face) fontified t) 1632 1648 (fontified t) 1648 1649 (syntax-table (1) fontified t) 1649 1650 (fontified t) 1650 1655 (face font-lock-keyword-face fontified t) 1655 1665 (fontified t) 1665 1666 (face (rainbow-delimiters-depth-3-face) fontified t) 1666 1671 (fontified t) 1671 1672 (face (rainbow-delimiters-depth-2-face) fontified t) 1672 1678 (fontified t) 1678 1681 (face font-lock-keyword-face fontified t) 1681 1682 (fontified t) 1682 1684 (face font-lock-keyword-face fontified t) 1684 1685 (fontified t) 1685 1698 (face font-lock-function-name-face fontified t) 1698 1699 (face (rainbow-delimiters-depth-2-face) fontified t) 1699 1700 (face rust-ampersand-face fontified t) 1700 1704 (face font-lock-keyword-face fontified t) 1704 1706 (fontified t) 1706 1712 (face font-lock-variable-name-face fontified t) 1712 1714 (fontified t) 1714 1715 (face rust-ampersand-face fontified t) 1715 1718 (face font-lock-keyword-face fontified t) 1718 1719 (fontified t) 1719 1725 (face font-lock-type-face fontified t) 1725 1726 (face (rainbow-delimiters-depth-2-face) fontified t) 1726 1727 (fontified t) 1727 1728 (face (rainbow-delimiters-depth-2-face) fontified t) 1728 1737 (fontified t) 1737 1740 (face font-lock-keyword-face fontified t) 1740 1741 (fontified t) 1741 1747 (face font-lock-constant-face fontified t) 1747 1749 (fontified t) 1749 1759 (face font-lock-type-face fontified t) 1759 1769 (fontified t) 1769 1772 (face font-lock-keyword-face fontified t) 1772 1773 (fontified t) 1773 1780 (face font-lock-variable-name-face fontified t) 1780 1819 (fontified t) 1819 1820 (face font-lock-keyword-face fontified t) 1820 1822 (fontified t face font-lock-keyword-face) 1822 1823 (fontified t) 1823 1835 (fontified t face font-lock-variable-name-face) 1835 1855 (fontified t) 1855 1856 (fontified t face (rainbow-delimiters-depth-3-face)) 1856 1857 (fontified t face (rainbow-delimiters-depth-3-face)) 1857 1859 (fontified t) 1859 1867 (fontified t) 1867 1870 (face font-lock-keyword-face fontified t) 1870 1871 (fontified t) 1871 1882 (face font-lock-variable-name-face fontified t) 1882 1902 (fontified t) 1902 1903 (face (rainbow-delimiters-depth-3-face) fontified t) 1903 1904 (face (rainbow-delimiters-depth-3-face) fontified t) 1904 1915 (fontified t) 1915 1918 (face font-lock-comment-delimiter-face fontified t) 1918 1975 (face font-lock-comment-face fontified t) 1975 1983 (fontified t) 1983 1986 (face font-lock-comment-delimiter-face fontified t) 1986 2007 (face font-lock-comment-face fontified t) 2007 2015 (fontified t) 2015 2017 (face font-lock-keyword-face fontified t) 2017 2018 (fontified t) 2018 2022 (face font-lock-keyword-face fontified t) 2022 2057 (fontified t) 2057 2058 (fontified t syntax-table (1)) 2058 2059 (fontified t) 2059 2063 (face font-lock-keyword-face fontified t) 2063 2070 (fontified t) 2070 2071 (face (rainbow-delimiters-depth-3-face) fontified t) 2071 2113 (fontified t) 2113 2117 (face font-lock-keyword-face fontified t) 2117 2133 (fontified t) 2133 2134 (face (rainbow-delimiters-depth-3-face) fontified t) 2134 2143 (fontified t) 2143 2145 (face font-lock-keyword-face fontified t) 2145 2146 (fontified t) 2146 2150 (face font-lock-keyword-face fontified t) 2150 2171 (fontified t) 2171 2172 (face (rainbow-delimiters-depth-3-face) fontified t) 2172 2214 (fontified t) 2214 2218 (face font-lock-keyword-face fontified t) 2218 2234 (fontified t) 2234 2235 (face (rainbow-delimiters-depth-3-face) fontified t) 2235 2245 (fontified t) 2245 2248 (face font-lock-keyword-face fontified t) 2248 2249 (fontified t) 2249 2254 (face font-lock-variable-name-face fontified t) 2254 2275 (fontified t) 2275 2276 (face (rainbow-delimiters-depth-3-face) fontified t) 2276 2285 (fontified t) 2285 2286 (face (rainbow-delimiters-depth-3-face) fontified t) 2286 2297 (fontified t) 2297 2300 (face font-lock-comment-delimiter-face fontified t) 2300 2358 (face font-lock-comment-face fontified t) 2358 2366 (fontified t) 2366 2369 (face font-lock-keyword-face fontified t) 2369 2370 (fontified t) 2370 2377 (face font-lock-variable-name-face fontified t) 2377 2416 (fontified t) 2416 2419 (face font-lock-keyword-face fontified t) 2419 2420 (fontified t) 2420 2431 (face font-lock-variable-name-face fontified t) 2431 2451 (fontified t) 2451 2452 (face (rainbow-delimiters-depth-3-face) fontified t) 2452 2453 (face (rainbow-delimiters-depth-3-face) fontified t) 2453 2464 (fontified t) 2464 2466 (face font-lock-keyword-face fontified t) 2466 2467 (fontified t) 2467 2471 (face font-lock-keyword-face fontified t) 2471 2489 (fontified t) 2489 2490 (face (rainbow-delimiters-depth-3-face) fontified t) 2490 2502 (fontified t) 2502 2503 (fontified t) 2503 2506 (face font-lock-comment-delimiter-face fontified t) 2506 2562 (face font-lock-comment-face fontified t) 2562 2574 (fontified t) 2574 2577 (face font-lock-comment-delimiter-face fontified t) 2577 2628 (face font-lock-comment-face fontified t) 2628 2640 (fontified t) 2640 2643 (face font-lock-comment-delimiter-face fontified t) 2643 2690 (face font-lock-comment-face fontified t) 2690 2731 (fontified t) 2731 2732 (face (rainbow-delimiters-depth-4-face) fontified t) 2732 2750 (fontified t) 2750 2754 (face font-lock-keyword-face fontified t) 2754 2760 (fontified t) 2760 2761 (face (rainbow-delimiters-depth-4-face) fontified t) 2761 2771 (fontified t) 2771 2772 (face (rainbow-delimiters-depth-4-face) fontified t) 2772 2773 (face (rainbow-delimiters-depth-4-face) fontified t) 2773 2801 (fontified t) 2801 2804 (face font-lock-comment-delimiter-face fontified t) 2804 2832 (face font-lock-comment-face fontified t) 2832 2840 (fontified t) 2840 2841 (face (rainbow-delimiters-depth-3-face) fontified t) 2841 2850 (fontified t) 2850 2852 (face font-lock-keyword-face fontified t) 2852 2853 (fontified t) 2853 2857 (face font-lock-keyword-face fontified t) 2857 2874 (fontified t) 2874 2875 (face (rainbow-delimiters-depth-3-face) fontified t) 2875 2917 (fontified t) 2917 2918 (face (rainbow-delimiters-depth-4-face) fontified t) 2918 2936 (fontified t) 2936 2940 (face font-lock-keyword-face fontified t) 2940 2946 (fontified t) 2946 2947 (face (rainbow-delimiters-depth-4-face) fontified t) 2947 2957 (fontified t) 2957 2958 (face (rainbow-delimiters-depth-4-face) fontified t) 2958 2959 (face (rainbow-delimiters-depth-4-face) fontified t) 2959 2987 (fontified t) 2987 2990 (face font-lock-comment-delimiter-face fontified t) 2990 3018 (face font-lock-comment-face fontified t) 3018 3026 (fontified t) 3026 3027 (face (rainbow-delimiters-depth-3-face) fontified t) 3027 3032 (fontified t) 3032 3033 (face (rainbow-delimiters-depth-2-face) fontified t) 3033 3034 (fontified t) 3034 3035 (face (rainbow-delimiters-depth-1-face) fontified t) 3035 3036 (fontified t)) . -3281) (undo-tree-id82 . -396) (undo-tree-id83 . -727) (undo-tree-id84 . -3036) (undo-tree-id85 . -1172) (undo-tree-id86 . -3036) (undo-tree-id87 . -2) (undo-tree-id88 . -323) (undo-tree-id89 . -448) (undo-tree-id90 . -588) (undo-tree-id91 . -713) (undo-tree-id92 . -776) (undo-tree-id93 . -862) (undo-tree-id94 . -953) (undo-tree-id95 . -1045) (undo-tree-id96 . -1113) (undo-tree-id97 . -1172) (undo-tree-id98 . -1223) (undo-tree-id99 . -1346) (undo-tree-id100 . -1458) (undo-tree-id101 . -1569) (undo-tree-id102 . -1633) (undo-tree-id103 . -1673) (undo-tree-id104 . -1761) (undo-tree-id105 . -1906) (undo-tree-id106 . -2007) (undo-tree-id107 . -2135) (undo-tree-id108 . -2288) (undo-tree-id109 . -2491) (undo-tree-id110 . -2876) (undo-tree-id111 . -3036) (undo-tree-id112 . -3036) (undo-tree-id113 . -3036) (undo-tree-id114 . -3036) (undo-tree-id115 . -3036) (undo-tree-id116 . -3036) (undo-tree-id117 . -3036) (undo-tree-id118 . -3036) (undo-tree-id119 . -3036) (undo-tree-id120 . -3036) (undo-tree-id121 . -3036) (undo-tree-id122 . -3036) 6317 (t 26015 47774 446761 697000)) nil (26015 47820 726500 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 7547 . 7548) (nil fontified nil 3281 . 7548) (3281 . 7548)) nil (26015 47820 726448 0) 0 nil])
([nil nil ((234 . 235) (t 26015 47820 744389 610000)) nil (26015 47855 894927 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 255 . 256) (nil fontified nil 235 . 256) (235 . 256)) nil (26015 47855 894923 0) 0 nil])
([nil nil ((255 . 256) (t 26015 47855 911084 176000)) nil (26015 47872 661418 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 289 . 290) (nil fontified nil 256 . 290) (256 . 290)) nil (26015 47872 661413 0) 0 nil])
([nil nil ((#("VirtualKeyCode" 0 14 (face font-lock-type-face fontified t)) . -4115) (undo-tree-id194 . -14) (undo-tree-id195 . -14) (undo-tree-id196 . -14) (undo-tree-id197 . -14) (undo-tree-id198 . -14) (undo-tree-id199 . -14) (undo-tree-id200 . -14) (undo-tree-id201 . -14) (undo-tree-id202 . -14) (undo-tree-id203 . -14) (undo-tree-id204 . -14) (undo-tree-id205 . -14) (undo-tree-id206 . -14) (undo-tree-id207 . -14) 4129 (t 26015 47872 678030 370000)) nil (26015 47946 42463 0) 0 nil])
([nil nil ((4115 . 4119)) nil (26015 47946 42449 0) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-type-face fontified t)) . -4118) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) 4119) nil (26015 47946 42447 0) 0 nil])
([nil nil ((4115 . 4122) (#("Key" 0 3 (fontified nil)) . 4115) (4115 . 4118) (#("KeyCode" 0 7 (fontified nil)) . -4115) (4115 . 4122) (#("Key" 0 3 (face font-lock-type-face fontified t)) . -4115) (undo-tree-id172 . -3) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -2) (undo-tree-id176 . -2) (undo-tree-id177 . -2) (undo-tree-id178 . -3) (undo-tree-id179 . -3) (undo-tree-id180 . -3) (undo-tree-id181 . -3) (undo-tree-id182 . -3) (undo-tree-id183 . -3) (undo-tree-id184 . -3) (undo-tree-id185 . -3) (undo-tree-id186 . -3) (undo-tree-id187 . -3) (undo-tree-id188 . -3) 4118) nil (26015 47946 42441 0) 0 nil])
([nil nil ((4122 . 4124)) nil (26015 47946 42420 0) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -4122) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (#(":" 0 1 (fontified t)) . -4123) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) 4124) nil (26015 47946 42418 0) 0 nil])
([nil nil ((#("VirtualKeyCode" 0 14 (face font-lock-type-face fontified t)) . -4263) (undo-tree-id150 . -14) (undo-tree-id151 . -14) (undo-tree-id152 . -14) (undo-tree-id153 . -14) (undo-tree-id154 . -14) (undo-tree-id155 . -14) (undo-tree-id156 . -14) (undo-tree-id157 . -14) (undo-tree-id158 . -14) (undo-tree-id159 . -14) (undo-tree-id160 . -14) (undo-tree-id161 . -14) 4277) nil (26015 47946 42406 0) 0 nil])
([nil nil ((4263 . 4264)) nil (26015 47946 42394 0) 0 nil])
([nil nil ((4263 . 4270) (#("K" 0 1 (fontified nil)) . 4263) (4263 . 4264) (#("KeyCode" 0 7 (fontified nil)) . -4263) (4263 . 4270) (#("K" 0 1 (face font-lock-type-face fontified t)) . -4263) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) 4264) nil (26015 47946 42392 0) 0 nil])
([nil nil ((4270 . 4273)) nil (26015 47946 42385 0) 0 nil])
([nil nil ((apply yas--snippet-revive 4272 4276 #s(yas--snippet nil nil #s(yas--exit 4276 nil) 29 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4276 nil) 29 nil nil nil nil)) (4272 . 4276) (#("KeyW$0" 0 6 (fontified nil)) . 4272) (4272 . 4278) (#("W" 0 1 (fontified nil)) . 4272) (4272 . 4273) (#("KeyW" 0 4 (fontified nil)) . -4272) (4272 . 4276) (#("W" 0 1 (face font-lock-type-face fontified t)) . -4272) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) 4273) nil (26015 47946 42383 0) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -4276) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (#(":" 0 1 (fontified t)) . -4277) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (#("W" 0 1 (face font-lock-type-face fontified t)) . -4278) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) 4279) nil (26015 47946 42372 0) 0 nil])
([nil nil ((#("Virtual" 0 7 (face font-lock-type-face fontified t)) . -4869) (4876 . 4876) (#("Virtual" 0 7 (face font-lock-type-face fontified t)) . -4761) (4768 . 4768) (#("Virtual" 0 7 (face font-lock-type-face fontified nil)) . -4650) (4657 . 4657) (#("Virtual" 0 7 (face font-lock-type-face fontified t)) . -4637) (4644 . 4644) (#("Virtual" 0 7 (face font-lock-type-face fontified nil)) . -4528) (4535 . 4535) (#("Virtual" 0 7 (face font-lock-type-face fontified t)) . -4515) (4522 . 4522) (#("Virtual" 0 7 (face font-lock-type-face fontified nil)) . -4402) (4409 . 4409) (#("Virtual" 0 7 (face font-lock-type-face fontified t)) . -4389) (4396 . 4396) (#("Virtual" 0 7 (face font-lock-type-face fontified t)) . -4279) (4286 . 4286) 4231) nil (26015 47946 42347 0) 0 nil])
([nil nil ((4288 . 4289) (t 26015 47946 59788 813000)) nil (26015 47984 372350 0) 0 nil])
([nil nil ((apply yas--snippet-revive 4288 4295 #s(yas--snippet nil nil #s(yas--exit 4295 nil) 30 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4295 nil) 30 nil nil nil nil)) (4288 . 4295) (#("ArrowUp$0" 0 9 (fontified nil)) . 4288) (4288 . 4297) (#("AUp" 0 1 (fontified nil) 1 3 (face font-lock-type-face fontified nil)) . 4288) (undo-tree-id250 . 2) (4288 . 4289) (#("ArrowUp" 0 7 (fontified nil)) . -4288) (4288 . 4295) (#("A" 0 1 (face font-lock-type-face fontified t)) . -4288) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) 4289) nil (26015 47984 372348 0) 0 nil])
([nil nil ((4403 . 4406)) nil (26015 47984 372335 0) 0 nil])
([nil nil ((4419 . 4424)) nil (26015 47984 372334 0) 0 nil])
([nil nil ((4537 . 4540)) nil (26015 47984 372334 0) 0 nil])
([nil nil ((#("E" 0 1 (face font-lock-type-face fontified t)) . -4538) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (#("y" 0 1 (face font-lock-type-face fontified t)) . -4539) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) 4540) nil (26015 47984 372332 0) 0 nil])
([nil nil ((4538 . 4540)) nil (26015 47984 372316 0) 0 nil])
([nil nil ((4553 . 4558)) nil (26015 47984 372316 0) 0 nil])
([nil nil ((4667 . 4670)) nil (26015 47984 372315 0) 0 nil])
([nil nil ((4683 . 4688)) nil (26015 47984 372314 0) 0 nil])
([nil nil ((#("LShift" 0 6 (face font-lock-type-face fontified t)) . -4907) (undo-tree-id222 . -5) (undo-tree-id223 . -6) (undo-tree-id224 . -5) (undo-tree-id225 . -5) (undo-tree-id226 . -5) (undo-tree-id227 . -5) (undo-tree-id228 . -5) (undo-tree-id229 . -5) (undo-tree-id230 . -5) (undo-tree-id231 . -5) (undo-tree-id232 . -5) (undo-tree-id233 . -5) (undo-tree-id234 . -6) 4913) nil (26015 47984 372312 0) 0 nil])
([nil nil ((4907 . 4909)) nil (26015 47984 372298 0) 0 nil])
([nil nil ((apply yas--snippet-revive 4907 4916 #s(yas--snippet nil nil #s(yas--exit 4916 nil) 31 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4916 nil) 31 nil nil nil nil)) (4907 . 4916) (#("ShiftLeft$0" 0 11 (fontified nil)) . 4907) (4907 . 4918) (#("Le" 0 2 (fontified nil)) . 4907) (4907 . 4909) (#("ShiftLeft" 0 9 (fontified nil)) . -4907) (4907 . 4916) (#("Le" 0 2 (face font-lock-type-face fontified t)) . -4907) (undo-tree-id208 . -2) (undo-tree-id209 . -2) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -2) (undo-tree-id215 . -2) (undo-tree-id216 . -2) (undo-tree-id217 . -2) (undo-tree-id218 . -2) (undo-tree-id219 . -2) (undo-tree-id220 . -2) (undo-tree-id221 . -2) 4909) nil (26015 47984 372293 0) 0 nil])
([nil nil ((#("    pub fn update_view_proj(&mut self, camera: &Camera) {
        self.view_position = camera.eye.to_homogeneous().into();
        self.view_proj = camera.build_view_projection_matrix().into();
    }" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 27 (face font-lock-function-name-face fontified t) 27 28 (face (rainbow-delimiters-depth-2-face) fontified t) 28 29 (face rust-ampersand-face fontified t) 29 32 (face font-lock-keyword-face fontified t) 32 33 (fontified t) 33 37 (face font-lock-keyword-face fontified t) 37 39 (fontified t) 39 45 (face font-lock-variable-name-face fontified t) 45 47 (fontified t) 47 48 (face rust-ampersand-face fontified t) 48 54 (face font-lock-type-face fontified t) 54 55 (face (rainbow-delimiters-depth-2-face) fontified t) 55 56 (fontified t) 56 57 (face (rainbow-delimiters-depth-2-face) fontified t) 57 58 (fontified t) 58 62 (fontified t) 62 63 (fontified t) 63 66 (fontified t) 66 70 (face font-lock-keyword-face fontified t) 70 112 (fontified t) 112 113 (face (rainbow-delimiters-depth-3-face) fontified t) 113 114 (face (rainbow-delimiters-depth-3-face) fontified t) 114 119 (fontified t) 119 120 (face (rainbow-delimiters-depth-3-face) fontified t) 120 121 (face (rainbow-delimiters-depth-3-face) fontified t) 121 122 (fontified t) 122 123 (fontified t) 123 131 (fontified t) 131 135 (face font-lock-keyword-face fontified t) 135 183 (fontified t) 183 184 (face (rainbow-delimiters-depth-3-face) fontified t) 184 185 (face (rainbow-delimiters-depth-3-face) fontified t) 185 190 (fontified t) 190 191 (face (rainbow-delimiters-depth-3-face) fontified t) 191 192 (face (rainbow-delimiters-depth-3-face) fontified t) 192 198 (fontified t) 198 199 (face (rainbow-delimiters-depth-2-face) fontified t)) . 2711) (undo-tree-id259 . -199) (undo-tree-id260 . -102) (undo-tree-id261 . -199) (undo-tree-id262 . -199) (undo-tree-id263 . -199) (undo-tree-id264 . -199) (undo-tree-id265 . -199) (undo-tree-id266 . -126) (undo-tree-id267 . -60) (undo-tree-id268 . -59) (undo-tree-id269 . -58) (undo-tree-id270 . -199) (t 26015 47984 389816 764000)) nil (26015 48007 475100 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 2963 . 2964) (nil fontified nil 2711 . 2964) (2711 . 2964)) nil (26015 48007 475074 0) 0 nil])
([nil nil ((#("camera::" 0 6 (face font-lock-constant-face fontified t) 6 8 (fontified t)) . -2755) (undo-tree-id280 . -8) (undo-tree-id281 . -8) (undo-tree-id282 . -8) (undo-tree-id283 . -8) (undo-tree-id284 . -8) (undo-tree-id285 . -8) (undo-tree-id286 . -8) (undo-tree-id287 . -8) (undo-tree-id288 . -8) 2763 (t 26015 48007 492470 437000)) nil (26015 48021 921308 0) 0 nil])
([nil nil ((#("camera::" 0 6 (face font-lock-constant-face fontified t) 6 8 (fontified t)) . -2776) (undo-tree-id271 . -8) (undo-tree-id272 . -8) (undo-tree-id273 . -8) (undo-tree-id274 . -8) (undo-tree-id275 . -8) (undo-tree-id276 . -8) (undo-tree-id277 . -8) (undo-tree-id278 . -8) (undo-tree-id279 . -8) 2784) nil (26015 48021 921296 0) 0 nil])
([nil nil ((2715 . 2719) (t 26015 48021 939430 498000)) nil (26015 48033 215 0) 0 nil])
([nil nil ((220 . 5114) (#("use cgmath::*;
use winit::event::*;
use winit::dpi::PhysicalPosition;



use instant::Duration;
use std::f32::consts::FRAC_PI_2;

#[rustfmt::skip]
pub const OPENGL_TO_WGPU_MATRIX: cgmath::Matrix4<f32> = cgmath::Matrix4::new(
    1.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.5, 0.5,
    0.0, 0.0, 0.0, 1.0,
);

const SAFE_FRAC_PI_2: f32 = FRAC_PI_2 - 0.0001;



#[derive(Debug)]
pub struct Camera {
    pub position: Point3<f32>,
    yaw: Rad<f32>,
    pitch: Rad<f32>,
}

impl Camera {
    pub fn new<
        V: Into<Point3<f32>>,
        Y: Into<Rad<f32>>,
        P: Into<Rad<f32>>,
    >(
        position: V,
        yaw: Y,
        pitch: P,
    ) -> Self {
        Self {
            position: position.into(),
            yaw: yaw.into(),
            pitch: pitch.into(),
        }
    }

    pub fn calc_matrix(&self) -> Matrix4<f32> {
        let (sin_pitch, cos_pitch) = self.pitch.0.sin_cos();
        let (sin_yaw, cos_yaw) = self.yaw.0.sin_cos();

        Matrix4::look_to_rh(
            self.position,
            Vector3::new(
                cos_pitch * cos_yaw,
                sin_pitch,
                cos_pitch * sin_yaw
            ).normalize(),
            Vector3::unit_y(),
        )
    }
}

pub struct Projection {
    aspect: f32,
    fovy: Rad<f32>,
    znear: f32,
    zfar: f32,
}

impl Projection {
    pub fn new<F: Into<Rad<f32>>>(
        width: u32,
        height: u32,
        fovy: F,
        znear: f32,
        zfar: f32,
    ) -> Self {
        Self {
            aspect: width as f32 / height as f32,
            fovy: fovy.into(),
            znear,
            zfar,
        }
    }

    pub fn resize(&mut self, width: u32, height: u32) {
        self.aspect = width as f32 / height as f32;
    }

    pub fn calc_matrix(&self) -> Matrix4<f32> {
        OPENGL_TO_WGPU_MATRIX * perspective(self.fovy, self.aspect, self.znear, self.zfar)
    }
}



// We need this for Rust to store our data correctly for the shaders
#[repr(C)]
// This is so we can store this in a buffer
#[derive(Debug, Copy, Clone, bytemuck::Pod, bytemuck::Zeroable)]
pub struct CameraUniform {
    // We can't use cgmath with bytemuck directly, so we'll have
    // to convert the Matrix4 into a 4x4 f32 array
    pub view_position: [f32; 4],

    pub view_proj: [[f32; 4]; 4],
}

impl CameraUniform {
    pub fn new() -> Self {
        Self {
            view_position: [0.0; 4],
            view_proj: cgmath::Matrix4::identity().into(),
        }
    }

    pub fn update_view_proj(&mut self, camera: &Camera, projection: &Projection) {
        self.view_position = camera.position.to_homogeneous().into();
        self.view_proj = (projection.calc_matrix() * camera.calc_matrix()).into();
    }

    pub fn create_camera_buffer(&self, device: &wgpu::Device) -> wgpu::Buffer {
        let camera_buffer = device.create_buffer_init(
            &wgpu::util::BufferInitDescriptor {
                label: Some(\"Camera Buffer\"),
                contents: bytemuck::cast_slice(&[*self]),
                usage: wgpu::BufferUsages::UNIFORM | wgpu::BufferUsages::COPY_DST,
            }
        );
        camera_buffer
    }
}

#[derive(Debug)]
pub struct CameraController {
    amount_left: f32,
    amount_right: f32,
    amount_forward: f32,
    amount_backward: f32,
    amount_up: f32,
    amount_down: f32,
    rotate_horizontal: f32,
    rotate_vertical: f32,
    scroll: f32,
    speed: f32,
    sensitivity: f32,
}

impl CameraController {
    pub fn new(speed: f32, sensitivity: f32) -> Self {
        Self {
            amount_left: 0.0,
            amount_right: 0.0,
            amount_forward: 0.0,
            amount_backward: 0.0,
            amount_up: 0.0,
            amount_down: 0.0,
            rotate_horizontal: 0.0,
            rotate_vertical: 0.0,
            scroll: 0.0,
            speed,
            sensitivity,
        }
    }

    pub fn process_keyboard(&mut self, key: KeyCode, state: ElementState) -> bool{
        let amount = if state == ElementState::Pressed { 1.0 } else { 0.0 };
        match key {
            KeyCode::KeyW | KeyCode::ArrowUp => {
                self.amount_forward = amount;
                true
            }
            KeyCode::KeyS | KeyCode::ArrowDown => {
                self.amount_backward = amount;
                true
            }
            KeyCode::KeyA | KeyCode::ArrowLeft => {
                self.amount_left = amount;
                true
            }
            KeyCode::KeyD | KeyCode::ArrowRight => {
                self.amount_right = amount;
                true
            }
            KeyCode::Space => {
                self.amount_up = amount;
                true
            }
            KeyCode::ShiftLeft => {
                self.amount_down = amount;
                true
            }
            _ => false,
        }
    }

    pub fn process_mouse(&mut self, mouse_dx: f64, mouse_dy: f64) {
        self.rotate_horizontal = mouse_dx as f32;
        self.rotate_vertical = mouse_dy as f32;
    }

    pub fn process_scroll(&mut self, delta: &MouseScrollDelta) {
        self.scroll = -match delta {
            // I'm assuming a line is about 100 pixels
            MouseScrollDelta::LineDelta(_, scroll) => scroll * 100.0,
            MouseScrollDelta::PixelDelta(PhysicalPosition {
                y: scroll,
                ..
            }) => *scroll as f32,
        };
    }

    pub fn update_camera(&mut self, camera: &mut Camera, dt: Duration) {
        let dt = dt.as_secs_f32();

        // Move forward/backward and left/right
        let (yaw_sin, yaw_cos) = camera.yaw.0.sin_cos();
        let forward = Vector3::new(yaw_cos, 0.0, yaw_sin).normalize();
        let right = Vector3::new(-yaw_sin, 0.0, yaw_cos).normalize();
        camera.position += forward * (self.amount_forward - self.amount_backward) * self.speed * dt;
        camera.position += right * (self.amount_right - self.amount_left) * self.speed * dt;

        // Move in/out (aka. \"zoom\")
        // Note: this isn't an actual zoom. The camera's position
        // changes when zooming. I've added this to make it easier
        // to get closer to an object you want to focus on.
        let (pitch_sin, pitch_cos) = camera.pitch.0.sin_cos();
        let scrollward = Vector3::new(pitch_cos * yaw_cos, pitch_sin, pitch_cos * yaw_sin).normalize();
        camera.position += scrollward * self.scroll * self.speed * self.sensitivity * dt;
        self.scroll = 0.0;

        // Move up/down. Since we don't use roll, we can just
        // modify the y coordinate directly.
        camera.position.y += (self.amount_up - self.amount_down) * self.speed * dt;

        // Rotate
        camera.yaw += Rad(self.rotate_horizontal) * self.sensitivity * dt;
        camera.pitch += Rad(-self.rotate_vertical) * self.sensitivity * dt;

        // If process_mouse isn't called every frame, these values
        // will not get set to zero, and the camera will rotate
        // when moving in a non-cardinal direction.
        self.rotate_horizontal = 0.0;
        self.rotate_vertical = 0.0;

        // Keep the camera's angle from going too high/low.
        if camera.pitch < -Rad(SAFE_FRAC_PI_2) {
            camera.pitch = -Rad(SAFE_FRAC_PI_2);
        } else if camera.pitch > Rad(SAFE_FRAC_PI_2) {
            camera.pitch = Rad(SAFE_FRAC_PI_2)" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 10 (face font-lock-constant-face fontified t) 10 15 (fontified t) 15 18 (face font-lock-keyword-face fontified t) 18 19 (fontified t) 19 24 (face font-lock-constant-face fontified t) 24 26 (fontified t) 26 31 (face font-lock-constant-face fontified t) 31 36 (fontified t) 36 39 (face font-lock-keyword-face fontified t) 39 40 (fontified t) 40 45 (face font-lock-constant-face fontified t) 45 47 (fontified t) 47 50 (face font-lock-constant-face fontified t) 50 52 (fontified t) 52 68 (face font-lock-type-face fontified t) 68 73 (fontified t) 73 76 (face font-lock-keyword-face fontified t) 76 77 (fontified t) 77 84 (face font-lock-constant-face fontified t) 84 86 (fontified t) 86 94 (face font-lock-type-face fontified t) 94 96 (fontified t) 96 99 (face font-lock-keyword-face fontified t) 99 100 (fontified t) 100 103 (face font-lock-constant-face fontified t) 103 105 (fontified t) 105 108 (face font-lock-type-face fontified t) 108 110 (fontified t) 110 116 (face font-lock-constant-face fontified t) 116 118 (fontified t) 118 127 (face font-lock-type-face fontified t) 127 130 (fontified t) 130 131 (face font-lock-preprocessor-face fontified t) 131 132 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t) 132 145 (face font-lock-preprocessor-face fontified t) 145 146 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t) 146 147 (fontified t) 147 150 (face font-lock-keyword-face fontified t) 150 151 (fontified t) 151 156 (face font-lock-keyword-face fontified t) 156 157 (fontified t) 157 178 (face font-lock-variable-name-face fontified t) 178 180 (fontified t) 180 186 (face font-lock-constant-face fontified t) 186 188 (fontified t) 188 195 (face font-lock-type-face fontified t) 195 196 (face (rainbow-delimiters-depth-1-face) fontified t) 196 199 (face font-lock-type-face fontified t) 199 200 (face (rainbow-delimiters-depth-1-face) fontified t) 200 203 (fontified t) 203 209 (face font-lock-constant-face fontified t) 209 211 (fontified t) 211 218 (face font-lock-type-face fontified t) 218 223 (fontified t) 223 224 (face (rainbow-delimiters-depth-1-face) fontified t) 224 321 (fontified t) 321 322 (face (rainbow-delimiters-depth-1-face) fontified t) 322 325 (fontified t) 325 330 (face font-lock-keyword-face fontified t) 330 331 (fontified t) 331 345 (face font-lock-variable-name-face fontified t) 345 347 (fontified t) 347 350 (face font-lock-type-face fontified t) 350 353 (fontified t) 353 362 (face font-lock-type-face fontified t) 362 376 (fontified t) 376 377 (face font-lock-preprocessor-face fontified t) 377 378 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t) 378 384 (face font-lock-preprocessor-face fontified t) 384 385 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 385 390 (face font-lock-preprocessor-face fontified t) 390 391 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 391 392 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t) 392 393 (fontified t) 393 396 (face font-lock-keyword-face fontified t) 396 397 (fontified t) 397 403 (face font-lock-keyword-face fontified t) 403 404 (fontified t) 404 410 (face font-lock-type-face fontified t) 410 411 (fontified t) 411 412 (face (rainbow-delimiters-depth-1-face) fontified t) 412 417 (fontified t) 417 420 (face font-lock-keyword-face fontified t) 420 421 (fontified t) 421 429 (face font-lock-variable-name-face fontified t) 429 431 (fontified t) 431 437 (face font-lock-type-face fontified t) 437 438 (face (rainbow-delimiters-depth-2-face) fontified t) 438 441 (face font-lock-type-face fontified t) 441 442 (face (rainbow-delimiters-depth-2-face) fontified t) 442 448 (fontified t) 448 451 (face font-lock-variable-name-face fontified t) 451 453 (fontified t) 453 456 (face font-lock-type-face fontified t) 456 457 (face (rainbow-delimiters-depth-2-face) fontified t) 457 460 (face font-lock-type-face fontified t) 460 461 (face (rainbow-delimiters-depth-2-face) fontified t) 461 467 (fontified t) 467 472 (face font-lock-variable-name-face fontified t) 472 474 (fontified t) 474 477 (face font-lock-type-face fontified t) 477 478 (face (rainbow-delimiters-depth-2-face) fontified t) 478 481 (face font-lock-type-face fontified t) 481 482 (face (rainbow-delimiters-depth-2-face) fontified t) 482 484 (fontified t) 484 485 (face (rainbow-delimiters-depth-1-face) fontified t) 485 487 (fontified t) 487 491 (face font-lock-keyword-face fontified t) 491 492 (fontified t) 492 498 (face font-lock-type-face fontified t) 498 499 (fontified t) 499 500 (face (rainbow-delimiters-depth-1-face) fontified t) 500 505 (fontified t) 505 508 (face font-lock-keyword-face fontified t) 508 509 (fontified t) 509 511 (face font-lock-keyword-face fontified t) 511 512 (fontified t) 512 515 (face font-lock-function-name-face fontified t) 515 516 (face (rainbow-delimiters-depth-2-face) fontified t) 516 525 (fontified t) 525 526 (face font-lock-variable-name-face fontified t) 526 528 (fontified t) 528 532 (face font-lock-type-face fontified t) 532 533 (face (rainbow-delimiters-depth-3-face) fontified t) 533 539 (face font-lock-type-face fontified t) 539 540 (face (rainbow-delimiters-depth-4-face) fontified t) 540 543 (face font-lock-type-face fontified t) 543 544 (face (rainbow-delimiters-depth-4-face) fontified t) 544 545 (face (rainbow-delimiters-depth-3-face) fontified t) 545 555 (fontified t) 555 556 (face font-lock-variable-name-face fontified t) 556 558 (fontified t) 558 562 (face font-lock-type-face fontified t) 562 563 (face (rainbow-delimiters-depth-3-face) fontified t) 563 566 (face font-lock-type-face fontified t) 566 567 (face (rainbow-delimiters-depth-4-face) fontified t) 567 570 (face font-lock-type-face fontified t) 570 571 (face (rainbow-delimiters-depth-4-face) fontified t) 571 572 (face (rainbow-delimiters-depth-3-face) fontified t) 572 582 (fontified t) 582 583 (face font-lock-variable-name-face fontified t) 583 585 (fontified t) 585 589 (face font-lock-type-face fontified t) 589 590 (face (rainbow-delimiters-depth-3-face) fontified t) 590 593 (face font-lock-type-face fontified t) 593 594 (face (rainbow-delimiters-depth-4-face) fontified t) 594 597 (face font-lock-type-face fontified t) 597 598 (face (rainbow-delimiters-depth-4-face) fontified t) 598 599 (face (rainbow-delimiters-depth-3-face) fontified t) 599 605 (fontified t) 605 606 (face (rainbow-delimiters-depth-2-face) fontified t) 606 607 (face (rainbow-delimiters-depth-2-face) fontified t) 607 616 (fontified t) 616 624 (face font-lock-variable-name-face fontified t) 624 626 (fontified t) 626 627 (face font-lock-type-face fontified t) 627 637 (fontified t) 637 640 (face font-lock-variable-name-face fontified t) 640 642 (fontified t) 642 643 (face font-lock-type-face fontified t) 643 653 (fontified t) 653 658 (face font-lock-variable-name-face fontified t) 658 660 (fontified t) 660 661 (face font-lock-type-face fontified t) 661 667 (fontified t) 667 668 (face (rainbow-delimiters-depth-2-face) fontified t) 668 670 (fontified t) 670 671 (syntax-table (1) fontified t) 671 672 (fontified t) 672 676 (face font-lock-type-face fontified t) 676 677 (fontified t) 677 678 (face (rainbow-delimiters-depth-2-face) fontified t) 678 687 (fontified t) 687 691 (face font-lock-type-face fontified t) 691 692 (fontified t) 692 693 (face (rainbow-delimiters-depth-3-face) fontified t) 693 706 (fontified t) 706 714 (face font-lock-variable-name-face fontified t) 714 729 (fontified t) 729 730 (face (rainbow-delimiters-depth-4-face) fontified t) 730 731 (face (rainbow-delimiters-depth-4-face) fontified t) 731 745 (fontified t) 745 748 (face font-lock-variable-name-face fontified t) 748 758 (fontified t) 758 759 (face (rainbow-delimiters-depth-4-face) fontified t) 759 760 (face (rainbow-delimiters-depth-4-face) fontified t) 760 774 (fontified t) 774 779 (face font-lock-variable-name-face fontified t) 779 791 (fontified t) 791 792 (face (rainbow-delimiters-depth-4-face) fontified t) 792 793 (face (rainbow-delimiters-depth-4-face) fontified t) 793 803 (fontified t) 803 804 (face (rainbow-delimiters-depth-3-face) fontified t) 804 809 (fontified t) 809 810 (face (rainbow-delimiters-depth-2-face) fontified t) 810 816 (fontified t) 816 819 (face font-lock-keyword-face fontified t) 819 820 (fontified t) 820 822 (face font-lock-keyword-face fontified t) 822 823 (fontified t) 823 834 (face font-lock-function-name-face fontified t) 834 835 (face (rainbow-delimiters-depth-2-face) fontified t) 835 836 (face rust-ampersand-face fontified t) 836 840 (face font-lock-keyword-face fontified t) 840 841 (face (rainbow-delimiters-depth-2-face) fontified t) 841 843 (fontified t) 843 844 (syntax-table (1) fontified t) 844 845 (fontified t) 845 852 (face font-lock-type-face fontified t) 852 853 (face (rainbow-delimiters-depth-2-face) fontified t) 853 856 (face font-lock-type-face fontified t) 856 857 (face (rainbow-delimiters-depth-2-face) fontified t) 857 858 (fontified t) 858 859 (face (rainbow-delimiters-depth-2-face) fontified t) 859 868 (fontified t) 868 871 (face font-lock-keyword-face fontified t) 871 872 (fontified t) 872 873 (face (rainbow-delimiters-depth-3-face) fontified t) 873 893 (fontified t) 893 894 (face (rainbow-delimiters-depth-3-face) fontified t) 894 897 (fontified t) 897 901 (face font-lock-keyword-face fontified t) 901 917 (fontified t) 917 918 (face (rainbow-delimiters-depth-3-face) fontified t) 918 919 (face (rainbow-delimiters-depth-3-face) fontified t) 919 929 (fontified t) 929 932 (face font-lock-keyword-face fontified t) 932 933 (fontified t) 933 934 (face (rainbow-delimiters-depth-3-face) fontified t) 934 950 (fontified t) 950 951 (face (rainbow-delimiters-depth-3-face) fontified t) 951 954 (fontified t) 954 958 (face font-lock-keyword-face fontified t) 958 972 (fontified t) 972 973 (face (rainbow-delimiters-depth-3-face) fontified t) 973 974 (face (rainbow-delimiters-depth-3-face) fontified t) 974 985 (fontified t) 985 992 (face font-lock-type-face fontified t) 992 1004 (fontified t) 1004 1005 (face (rainbow-delimiters-depth-3-face) fontified t) 1005 1018 (fontified t) 1018 1022 (face font-lock-keyword-face fontified t) 1022 1045 (fontified t) 1045 1052 (face font-lock-type-face fontified t) 1052 1057 (fontified t) 1057 1058 (face (rainbow-delimiters-depth-4-face) fontified t) 1058 1171 (fontified t) 1171 1172 (face (rainbow-delimiters-depth-4-face) fontified t) 1172 1182 (fontified t) 1182 1183 (face (rainbow-delimiters-depth-4-face) fontified t) 1183 1184 (face (rainbow-delimiters-depth-4-face) fontified t) 1184 1198 (fontified t) 1198 1205 (face font-lock-type-face fontified t) 1205 1213 (fontified t) 1213 1214 (face (rainbow-delimiters-depth-4-face) fontified t) 1214 1215 (face (rainbow-delimiters-depth-4-face) fontified t) 1215 1225 (fontified t) 1225 1226 (face (rainbow-delimiters-depth-3-face) fontified t) 1226 1231 (fontified t) 1231 1232 (face (rainbow-delimiters-depth-2-face) fontified t) 1232 1233 (fontified t) 1233 1234 (face (rainbow-delimiters-depth-1-face) fontified t) 1234 1236 (fontified t) 1236 1239 (face font-lock-keyword-face fontified t) 1239 1240 (fontified t) 1240 1246 (face font-lock-keyword-face fontified t) 1246 1247 (fontified t) 1247 1257 (face font-lock-type-face fontified t) 1257 1258 (fontified t) 1258 1259 (face (rainbow-delimiters-depth-1-face) fontified t) 1259 1264 (fontified t) 1264 1270 (face font-lock-variable-name-face fontified t) 1270 1272 (fontified t) 1272 1275 (face font-lock-type-face fontified t) 1275 1281 (fontified t) 1281 1285 (face font-lock-variable-name-face fontified t) 1285 1287 (fontified t) 1287 1290 (face font-lock-type-face fontified t) 1290 1291 (face (rainbow-delimiters-depth-2-face) fontified t) 1291 1294 (face font-lock-type-face fontified t) 1294 1295 (face (rainbow-delimiters-depth-2-face) fontified t) 1295 1297 (fontified t) 1297 1301 (fontified t) 1301 1306 (face font-lock-variable-name-face fontified t) 1306 1308 (fontified t) 1308 1311 (face font-lock-type-face fontified t) 1311 1317 (fontified t) 1317 1321 (face font-lock-variable-name-face fontified t) 1321 1323 (fontified t) 1323 1326 (face font-lock-type-face fontified t) 1326 1328 (fontified t) 1328 1329 (face (rainbow-delimiters-depth-1-face) fontified t) 1329 1331 (fontified t) 1331 1335 (face font-lock-keyword-face fontified t) 1335 1336 (fontified t) 1336 1346 (face font-lock-type-face fontified t) 1346 1347 (fontified t) 1347 1348 (face (rainbow-delimiters-depth-1-face) fontified t) 1348 1353 (fontified t) 1353 1356 (face font-lock-keyword-face fontified t) 1356 1357 (fontified t) 1357 1359 (face font-lock-keyword-face fontified t) 1359 1360 (fontified t) 1360 1363 (face font-lock-function-name-face fontified t) 1363 1364 (face (rainbow-delimiters-depth-2-face) fontified t) 1364 1365 (face font-lock-variable-name-face fontified t) 1365 1367 (fontified t) 1367 1371 (face font-lock-type-face fontified t) 1371 1372 (face (rainbow-delimiters-depth-3-face) fontified t) 1372 1375 (face font-lock-type-face fontified t) 1375 1376 (face (rainbow-delimiters-depth-4-face) fontified t) 1376 1379 (face font-lock-type-face fontified t) 1379 1380 (face (rainbow-delimiters-depth-4-face) fontified t) 1380 1381 (face (rainbow-delimiters-depth-3-face) fontified t) 1381 1382 (face (rainbow-delimiters-depth-2-face) fontified t) 1382 1383 (face (rainbow-delimiters-depth-2-face) fontified t) 1383 1392 (fontified t) 1392 1397 (face font-lock-variable-name-face fontified t) 1397 1399 (fontified t) 1399 1402 (face font-lock-type-face fontified t) 1402 1412 (fontified t) 1412 1418 (face font-lock-variable-name-face fontified t) 1418 1420 (fontified t) 1420 1423 (face font-lock-type-face fontified t) 1423 1433 (fontified t) 1433 1437 (face font-lock-variable-name-face fontified t) 1437 1439 (fontified t) 1439 1440 (face font-lock-type-face fontified t) 1440 1450 (fontified t) 1450 1455 (face font-lock-variable-name-face fontified t) 1455 1457 (fontified t) 1457 1460 (face font-lock-type-face fontified t) 1460 1470 (fontified t) 1470 1474 (face font-lock-variable-name-face fontified t) 1474 1476 (fontified t) 1476 1479 (face font-lock-type-face fontified t) 1479 1485 (fontified t) 1485 1486 (face (rainbow-delimiters-depth-2-face) fontified t) 1486 1488 (fontified t) 1488 1489 (syntax-table (1) fontified t) 1489 1490 (fontified t) 1490 1494 (face font-lock-type-face fontified t) 1494 1495 (fontified t) 1495 1496 (face (rainbow-delimiters-depth-2-face) fontified t) 1496 1505 (fontified t) 1505 1509 (face font-lock-type-face fontified t) 1509 1510 (fontified t) 1510 1511 (face (rainbow-delimiters-depth-3-face) fontified t) 1511 1524 (fontified t) 1524 1530 (face font-lock-variable-name-face fontified t) 1530 1538 (fontified t) 1538 1540 (face font-lock-keyword-face fontified t) 1540 1541 (fontified t) 1541 1544 (face font-lock-type-face fontified t) 1544 1554 (fontified t) 1554 1556 (face font-lock-keyword-face fontified t) 1556 1557 (fontified t) 1557 1560 (face font-lock-type-face fontified t) 1560 1574 (fontified t) 1574 1578 (face font-lock-variable-name-face fontified t) 1578 1589 (fontified t) 1589 1590 (face (rainbow-delimiters-depth-4-face) fontified t) 1590 1591 (face (rainbow-delimiters-depth-4-face) fontified t) 1591 1638 (fontified t) 1638 1639 (face (rainbow-delimiters-depth-3-face) fontified t) 1639 1644 (fontified t) 1644 1645 (face (rainbow-delimiters-depth-2-face) fontified t) 1645 1651 (fontified t) 1651 1654 (face font-lock-keyword-face fontified t) 1654 1655 (fontified t) 1655 1657 (face font-lock-keyword-face fontified t) 1657 1658 (fontified t) 1658 1664 (face font-lock-function-name-face fontified t) 1664 1665 (face (rainbow-delimiters-depth-2-face) fontified t) 1665 1666 (face rust-ampersand-face fontified t) 1666 1669 (face font-lock-keyword-face fontified t) 1669 1670 (fontified t) 1670 1674 (face font-lock-keyword-face fontified t) 1674 1676 (fontified t) 1676 1681 (face font-lock-variable-name-face fontified t) 1681 1683 (fontified t) 1683 1686 (face font-lock-type-face fontified t) 1686 1688 (fontified t) 1688 1694 (face font-lock-variable-name-face fontified t) 1694 1696 (fontified t) 1696 1699 (face font-lock-type-face fontified t) 1699 1700 (face (rainbow-delimiters-depth-2-face) fontified t) 1700 1701 (fontified t) 1701 1702 (face (rainbow-delimiters-depth-2-face) fontified t) 1702 1711 (fontified t) 1711 1715 (face font-lock-keyword-face fontified t) 1715 1731 (fontified t) 1731 1733 (face font-lock-keyword-face fontified t) 1733 1734 (fontified t) 1734 1737 (face font-lock-type-face fontified t) 1737 1747 (fontified t) 1747 1749 (face font-lock-keyword-face fontified t) 1749 1750 (fontified t) 1750 1753 (face font-lock-type-face fontified t) 1753 1759 (fontified t) 1759 1760 (face (rainbow-delimiters-depth-2-face) fontified t) 1760 1766 (fontified t) 1766 1769 (face font-lock-keyword-face fontified t) 1769 1770 (fontified t) 1770 1772 (face font-lock-keyword-face fontified t) 1772 1773 (fontified t) 1773 1784 (face font-lock-function-name-face fontified t) 1784 1785 (face (rainbow-delimiters-depth-2-face) fontified t) 1785 1786 (face rust-ampersand-face fontified t) 1786 1790 (face font-lock-keyword-face fontified t) 1790 1791 (face (rainbow-delimiters-depth-2-face) fontified t) 1791 1793 (fontified t) 1793 1794 (syntax-table (1) fontified t) 1794 1795 (fontified t) 1795 1802 (face font-lock-type-face fontified t) 1802 1803 (face (rainbow-delimiters-depth-2-face) fontified t) 1803 1806 (face font-lock-type-face fontified t) 1806 1807 (face (rainbow-delimiters-depth-2-face) fontified t) 1807 1808 (fontified t) 1808 1809 (face (rainbow-delimiters-depth-2-face) fontified t) 1809 1818 (fontified t) 1818 1839 (face font-lock-type-face fontified t) 1839 1853 (fontified t) 1853 1854 (face (rainbow-delimiters-depth-3-face) fontified t) 1854 1858 (face font-lock-keyword-face fontified t) 1858 1865 (fontified t) 1865 1869 (face font-lock-keyword-face fontified t) 1869 1878 (fontified t) 1878 1882 (face font-lock-keyword-face fontified t) 1882 1890 (fontified t) 1890 1894 (face font-lock-keyword-face fontified t) 1894 1899 (fontified t) 1899 1900 (face (rainbow-delimiters-depth-3-face) fontified t) 1900 1905 (fontified t) 1905 1906 (face (rainbow-delimiters-depth-2-face) fontified t) 1906 1907 (fontified t) 1907 1908 (face (rainbow-delimiters-depth-1-face) fontified t) 1908 1912 (fontified t) 1912 1915 (face font-lock-comment-delimiter-face fontified t) 1915 1981 (face font-lock-comment-face fontified t) 1981 1982 (face font-lock-preprocessor-face fontified t) 1982 1983 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t) 1983 1987 (face font-lock-preprocessor-face fontified t) 1987 1988 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 1988 1989 (face font-lock-preprocessor-face fontified t) 1989 1990 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 1990 1991 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t) 1991 1992 (fontified t) 1992 1995 (face font-lock-comment-delimiter-face fontified t) 1995 2036 (face font-lock-comment-face fontified t) 2036 2037 (face font-lock-preprocessor-face fontified t) 2037 2038 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t) 2038 2044 (face font-lock-preprocessor-face fontified t) 2044 2045 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 2045 2098 (face font-lock-preprocessor-face fontified t) 2098 2099 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 2099 2100 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t) 2100 2101 (fontified t) 2101 2104 (face font-lock-keyword-face fontified t) 2104 2105 (fontified t) 2105 2111 (face font-lock-keyword-face fontified t) 2111 2112 (fontified t) 2112 2125 (face font-lock-type-face fontified t) 2125 2126 (fontified t) 2126 2127 (face (rainbow-delimiters-depth-1-face) fontified t) 2127 2132 (fontified t) 2132 2135 (face font-lock-comment-delimiter-face fontified t) 2135 2193 (face font-lock-comment-face fontified t) 2193 2197 (fontified t) 2197 2200 (face font-lock-comment-delimiter-face fontified t) 2200 2244 (face font-lock-comment-face fontified t) 2244 2248 (fontified t) 2248 2251 (face font-lock-keyword-face fontified t) 2251 2252 (fontified t) 2252 2265 (face font-lock-variable-name-face fontified t) 2265 2267 (fontified t) 2267 2268 (face (rainbow-delimiters-depth-2-face) fontified t) 2268 2271 (face font-lock-type-face fontified t) 2271 2274 (fontified t) 2274 2275 (face (rainbow-delimiters-depth-2-face) fontified t) 2275 2282 (fontified t) 2282 2285 (face font-lock-keyword-face fontified t) 2285 2286 (fontified t) 2286 2295 (face font-lock-variable-name-face fontified t) 2295 2297 (fontified t) 2297 2298 (face (rainbow-delimiters-depth-2-face) fontified t) 2298 2299 (face (rainbow-delimiters-depth-3-face) fontified t) 2299 2302 (face font-lock-type-face fontified t) 2302 2305 (fontified t) 2305 2306 (face (rainbow-delimiters-depth-3-face) fontified t) 2306 2309 (fontified t) 2309 2310 (face (rainbow-delimiters-depth-2-face) fontified t) 2310 2312 (fontified t) 2312 2313 (face (rainbow-delimiters-depth-1-face) fontified t) 2313 2315 (fontified t) 2315 2319 (face font-lock-keyword-face fontified t) 2319 2320 (fontified t) 2320 2333 (face font-lock-type-face fontified t) 2333 2334 (fontified t) 2334 2335 (face (rainbow-delimiters-depth-1-face) fontified t) 2335 2340 (fontified t) 2340 2343 (face font-lock-keyword-face fontified t) 2343 2344 (fontified t) 2344 2346 (face font-lock-keyword-face fontified t) 2346 2347 (fontified t) 2347 2350 (face font-lock-function-name-face fontified t) 2350 2351 (face (rainbow-delimiters-depth-2-face) fontified t) 2351 2352 (face (rainbow-delimiters-depth-2-face) fontified t) 2352 2354 (fontified t) 2354 2355 (syntax-table (1) fontified t) 2355 2356 (fontified t) 2356 2360 (face font-lock-type-face fontified t) 2360 2361 (fontified t) 2361 2362 (face (rainbow-delimiters-depth-2-face) fontified t) 2362 2371 (fontified t) 2371 2375 (face font-lock-type-face fontified t) 2375 2376 (fontified t) 2376 2377 (face (rainbow-delimiters-depth-3-face) fontified t) 2377 2390 (fontified t) 2390 2403 (face font-lock-variable-name-face fontified t) 2403 2405 (fontified t) 2405 2406 (face (rainbow-delimiters-depth-4-face) fontified t) 2406 2412 (fontified t) 2412 2413 (face (rainbow-delimiters-depth-4-face) fontified t) 2413 2427 (fontified t) 2427 2436 (face font-lock-variable-name-face fontified t) 2436 2438 (fontified t) 2438 2444 (face font-lock-constant-face fontified t) 2444 2446 (fontified t) 2446 2453 (face font-lock-type-face fontified t) 2453 2463 (fontified t) 2463 2464 (face (rainbow-delimiters-depth-4-face) fontified t) 2464 2465 (face (rainbow-delimiters-depth-4-face) fontified t) 2465 2470 (fontified t) 2470 2471 (face (rainbow-delimiters-depth-4-face) fontified t) 2471 2472 (face (rainbow-delimiters-depth-4-face) fontified t) 2472 2482 (fontified t) 2482 2483 (face (rainbow-delimiters-depth-3-face) fontified t) 2483 2488 (fontified t) 2488 2489 (face (rainbow-delimiters-depth-2-face) fontified t) 2489 2495 (fontified t) 2495 2498 (face font-lock-keyword-face fontified t) 2498 2499 (fontified t) 2499 2501 (face font-lock-keyword-face fontified t) 2501 2502 (fontified t) 2502 2518 (face font-lock-function-name-face fontified t) 2518 2519 (face (rainbow-delimiters-depth-2-face) fontified t) 2519 2520 (face rust-ampersand-face fontified t) 2520 2523 (face font-lock-keyword-face fontified t) 2523 2524 (fontified t) 2524 2528 (face font-lock-keyword-face fontified t) 2528 2530 (fontified t) 2530 2536 (face font-lock-variable-name-face fontified t) 2536 2538 (fontified t) 2538 2539 (face rust-ampersand-face fontified t) 2539 2545 (face font-lock-type-face fontified t) 2545 2547 (fontified t) 2547 2557 (face font-lock-variable-name-face fontified t) 2557 2559 (fontified t) 2559 2560 (face rust-ampersand-face fontified t) 2560 2570 (face font-lock-type-face fontified t) 2570 2571 (face (rainbow-delimiters-depth-2-face) fontified t) 2571 2572 (fontified t) 2572 2573 (face (rainbow-delimiters-depth-2-face) fontified t) 2573 2582 (fontified t) 2582 2586 (face font-lock-keyword-face fontified t) 2586 2633 (fontified t) 2633 2634 (face (rainbow-delimiters-depth-3-face) fontified t) 2634 2635 (face (rainbow-delimiters-depth-3-face) fontified t) 2635 2640 (fontified t) 2640 2641 (face (rainbow-delimiters-depth-3-face) fontified t) 2641 2642 (face (rainbow-delimiters-depth-3-face) fontified t) 2642 2652 (fontified t) 2652 2656 (face font-lock-keyword-face fontified t) 2656 2669 (fontified t) 2669 2670 (face (rainbow-delimiters-depth-3-face) fontified t) 2670 2692 (fontified t) 2692 2693 (face (rainbow-delimiters-depth-4-face) fontified t) 2693 2694 (face (rainbow-delimiters-depth-4-face) fontified t) 2694 2715 (fontified t) 2715 2716 (face (rainbow-delimiters-depth-4-face) fontified t) 2716 2717 (face (rainbow-delimiters-depth-4-face) fontified t) 2717 2718 (face (rainbow-delimiters-depth-3-face) fontified t) 2718 2723 (fontified t) 2723 2724 (face (rainbow-delimiters-depth-3-face) fontified t) 2724 2725 (face (rainbow-delimiters-depth-3-face) fontified t) 2725 2731 (fontified t) 2731 2732 (face (rainbow-delimiters-depth-2-face) fontified t) 2732 2738 (fontified t) 2738 2741 (face font-lock-keyword-face fontified t) 2741 2742 (fontified t) 2742 2744 (face font-lock-keyword-face fontified t) 2744 2745 (fontified t) 2745 2765 (face font-lock-function-name-face fontified t) 2765 2766 (face (rainbow-delimiters-depth-2-face) fontified t) 2766 2767 (face rust-ampersand-face fontified t) 2767 2771 (face font-lock-keyword-face fontified t) 2771 2773 (fontified t) 2773 2779 (face font-lock-variable-name-face fontified t) 2779 2781 (fontified t) 2781 2782 (face rust-ampersand-face fontified t) 2782 2786 (face font-lock-constant-face fontified t) 2786 2788 (fontified t) 2788 2794 (face font-lock-type-face fontified t) 2794 2795 (face (rainbow-delimiters-depth-2-face) fontified t) 2795 2797 (fontified t) 2797 2798 (syntax-table (1) fontified t) 2798 2799 (fontified t) 2799 2803 (face font-lock-constant-face fontified t) 2803 2805 (fontified t) 2805 2811 (face font-lock-type-face fontified t) 2811 2812 (fontified t) 2812 2813 (face (rainbow-delimiters-depth-2-face) fontified t) 2813 2814 (fontified t) 2814 2822 (fontified t) 2822 2825 (face font-lock-keyword-face fontified t) 2825 2826 (fontified t) 2826 2839 (face font-lock-variable-name-face fontified t) 2839 2867 (fontified t) 2867 2868 (face (rainbow-delimiters-depth-3-face) fontified t) 2868 2881 (fontified t) 2881 2882 (face rust-ampersand-face fontified t) 2882 2886 (face font-lock-constant-face fontified t) 2886 2888 (fontified t) 2888 2892 (face font-lock-constant-face fontified t) 2892 2894 (fontified t) 2894 2914 (face font-lock-type-face fontified t) 2914 2915 (fontified t) 2915 2916 (face (rainbow-delimiters-depth-4-face) fontified t) 2916 2933 (fontified t) 2933 2938 (face font-lock-variable-name-face fontified t) 2938 2940 (fontified t) 2940 2944 (face font-lock-type-face fontified t) 2944 2945 (face (rainbow-delimiters-depth-5-face) fontified t) 2945 2960 (face font-lock-string-face fontified t) 2960 2961 (face (rainbow-delimiters-depth-5-face) fontified t) 2961 2979 (fontified t) 2979 2987 (face font-lock-variable-name-face fontified t) 2987 2989 (fontified t) 2989 2997 (face font-lock-constant-face fontified t) 2997 3009 (fontified t) 3009 3010 (face (rainbow-delimiters-depth-5-face) fontified t) 3010 3011 (face rust-ampersand-face fontified t) 3011 3012 (face (rainbow-delimiters-depth-6-face) fontified t) 3012 3013 (fontified t) 3013 3017 (face font-lock-keyword-face fontified t) 3017 3018 (face (rainbow-delimiters-depth-6-face) fontified t) 3018 3019 (face (rainbow-delimiters-depth-5-face) fontified t) 3019 3037 (fontified t) 3037 3042 (face font-lock-variable-name-face fontified t) 3042 3044 (fontified t) 3044 3048 (face font-lock-constant-face fontified t) 3048 3050 (fontified t) 3050 3062 (face font-lock-type-face fontified t) 3062 3064 (fontified t) 3064 3071 (face font-lock-type-face fontified t) 3071 3074 (fontified t) 3074 3078 (face font-lock-constant-face fontified t) 3078 3080 (fontified t) 3080 3092 (face font-lock-type-face fontified t) 3092 3094 (fontified t) 3094 3102 (face font-lock-type-face fontified t) 3102 3116 (fontified t) 3116 3117 (face (rainbow-delimiters-depth-4-face) fontified t) 3117 3126 (fontified t) 3126 3127 (face (rainbow-delimiters-depth-3-face) fontified t) 3127 3155 (fontified t) 3155 3156 (face (rainbow-delimiters-depth-2-face) fontified t) 3156 3157 (fontified t) 3157 3158 (face (rainbow-delimiters-depth-1-face) fontified t) 3158 3160 (fontified t) 3160 3161 (face font-lock-preprocessor-face fontified t) 3161 3162 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t) 3162 3168 (face font-lock-preprocessor-face fontified t) 3168 3169 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 3169 3174 (face font-lock-preprocessor-face fontified t) 3174 3175 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 3175 3176 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t) 3176 3177 (fontified t) 3177 3180 (face font-lock-keyword-face fontified t) 3180 3181 (fontified t) 3181 3187 (face font-lock-keyword-face fontified t) 3187 3188 (fontified t) 3188 3204 (face font-lock-type-face fontified t) 3204 3205 (fontified t) 3205 3206 (face (rainbow-delimiters-depth-1-face) fontified t) 3206 3211 (fontified t) 3211 3222 (face font-lock-variable-name-face fontified t) 3222 3224 (fontified t) 3224 3227 (face font-lock-type-face fontified t) 3227 3233 (fontified t) 3233 3245 (face font-lock-variable-name-face fontified t) 3245 3247 (fontified t) 3247 3250 (face font-lock-type-face fontified t) 3250 3256 (fontified t) 3256 3270 (face font-lock-variable-name-face fontified t) 3270 3272 (fontified t) 3272 3275 (face font-lock-type-face fontified t) 3275 3281 (fontified t) 3281 3296 (face font-lock-variable-name-face fontified t) 3296 3298 (fontified t) 3298 3301 (face font-lock-type-face fontified t) 3301 3307 (fontified t) 3307 3316 (face font-lock-variable-name-face fontified t) 3316 3318 (fontified t) 3318 3321 (face font-lock-type-face fontified t) 3321 3327 (fontified t) 3327 3338 (face font-lock-variable-name-face fontified t) 3338 3340 (fontified t) 3340 3343 (face font-lock-type-face fontified t) 3343 3349 (fontified t) 3349 3366 (face font-lock-variable-name-face fontified t) 3366 3368 (fontified t) 3368 3371 (face font-lock-type-face fontified t) 3371 3377 (fontified t) 3377 3392 (face font-lock-variable-name-face fontified t) 3392 3394 (fontified t) 3394 3397 (face font-lock-type-face fontified t) 3397 3403 (fontified t) 3403 3409 (face font-lock-variable-name-face fontified t) 3409 3411 (fontified t) 3411 3414 (face font-lock-type-face fontified t) 3414 3420 (fontified t) 3420 3425 (face font-lock-variable-name-face fontified t) 3425 3427 (fontified t) 3427 3430 (face font-lock-type-face fontified t) 3430 3436 (fontified t) 3436 3447 (face font-lock-variable-name-face fontified t) 3447 3449 (fontified t) 3449 3452 (face font-lock-type-face fontified t) 3452 3454 (fontified t) 3454 3455 (face (rainbow-delimiters-depth-1-face) fontified t) 3455 3457 (fontified t) 3457 3461 (face font-lock-keyword-face fontified t) 3461 3462 (fontified t) 3462 3478 (face font-lock-type-face fontified t) 3478 3479 (fontified t) 3479 3480 (face (rainbow-delimiters-depth-1-face) fontified t) 3480 3485 (fontified t) 3485 3488 (face font-lock-keyword-face fontified t) 3488 3489 (fontified t) 3489 3491 (face font-lock-keyword-face fontified t) 3491 3492 (fontified t) 3492 3495 (face font-lock-function-name-face fontified t) 3495 3496 (face (rainbow-delimiters-depth-2-face) fontified t) 3496 3501 (face font-lock-variable-name-face fontified t) 3501 3503 (fontified t) 3503 3506 (face font-lock-type-face fontified t) 3506 3508 (fontified t) 3508 3519 (face font-lock-variable-name-face fontified t) 3519 3521 (fontified t) 3521 3524 (face font-lock-type-face fontified t) 3524 3525 (face (rainbow-delimiters-depth-2-face) fontified t) 3525 3527 (fontified t) 3527 3528 (syntax-table (1) fontified t) 3528 3529 (fontified t) 3529 3533 (face font-lock-type-face fontified t) 3533 3534 (fontified t) 3534 3535 (face (rainbow-delimiters-depth-2-face) fontified t) 3535 3544 (fontified t) 3544 3548 (face font-lock-type-face fontified t) 3548 3549 (fontified t) 3549 3550 (face (rainbow-delimiters-depth-3-face) fontified t) 3550 3563 (fontified t) 3563 3574 (face font-lock-variable-name-face fontified t) 3574 3593 (fontified t) 3593 3605 (face font-lock-variable-name-face fontified t) 3605 3624 (fontified t) 3624 3638 (face font-lock-variable-name-face fontified t) 3638 3657 (fontified t) 3657 3672 (face font-lock-variable-name-face fontified t) 3672 3691 (fontified t) 3691 3700 (face font-lock-variable-name-face fontified t) 3700 3719 (fontified t) 3719 3730 (face font-lock-variable-name-face fontified t) 3730 3749 (fontified t) 3749 3766 (face font-lock-variable-name-face fontified t) 3766 3785 (fontified t) 3785 3800 (face font-lock-variable-name-face fontified t) 3800 3819 (fontified t) 3819 3825 (face font-lock-variable-name-face fontified t) 3825 3884 (fontified t) 3884 3885 (face (rainbow-delimiters-depth-3-face) fontified t) 3885 3890 (fontified t) 3890 3891 (face (rainbow-delimiters-depth-2-face) fontified t) 3891 3897 (fontified t) 3897 3900 (face font-lock-keyword-face fontified t) 3900 3901 (fontified t) 3901 3903 (face font-lock-keyword-face fontified t) 3903 3904 (fontified t) 3904 3920 (face font-lock-function-name-face fontified t) 3920 3921 (face (rainbow-delimiters-depth-2-face) fontified t) 3921 3922 (face rust-ampersand-face fontified t) 3922 3925 (face font-lock-keyword-face fontified t) 3925 3926 (fontified t) 3926 3930 (face font-lock-keyword-face fontified t) 3930 3932 (fontified t) 3932 3935 (face font-lock-variable-name-face fontified t) 3935 3937 (fontified t) 3937 3944 (face font-lock-type-face fontified t) 3944 3946 (fontified t) 3946 3951 (face font-lock-variable-name-face fontified t) 3951 3953 (fontified t) 3953 3965 (face font-lock-type-face fontified t) 3965 3966 (face (rainbow-delimiters-depth-2-face) fontified t) 3966 3968 (fontified t) 3968 3969 (syntax-table (1) fontified t) 3969 3970 (fontified t) 3970 3974 (face font-lock-type-face fontified t) 3974 3975 (face (rainbow-delimiters-depth-2-face) fontified t) 3975 3984 (fontified t) 3984 3987 (face font-lock-keyword-face fontified t) 3987 3988 (fontified t) 3988 3994 (face font-lock-variable-name-face fontified t) 3994 3997 (fontified t) 3997 3999 (face font-lock-keyword-face fontified t) 3999 4009 (fontified t) 4009 4021 (face font-lock-type-face fontified t) 4021 4023 (fontified t) 4023 4030 (face font-lock-type-face fontified t) 4030 4031 (fontified t) 4031 4032 (face (rainbow-delimiters-depth-3-face) fontified t) 4032 4037 (fontified t) 4037 4038 (face (rainbow-delimiters-depth-3-face) fontified t) 4038 4039 (fontified t) 4039 4043 (face font-lock-keyword-face fontified t) 4043 4044 (fontified t) 4044 4045 (face (rainbow-delimiters-depth-3-face) fontified t) 4045 4050 (fontified t) 4050 4051 (face (rainbow-delimiters-depth-3-face) fontified t) 4051 4061 (fontified t) 4061 4066 (face font-lock-keyword-face fontified t) 4066 4071 (fontified t) 4071 4072 (face (rainbow-delimiters-depth-3-face) fontified t) 4072 4085 (fontified t) 4085 4092 (face font-lock-type-face fontified t) 4092 4094 (fontified t) 4094 4098 (face font-lock-type-face fontified t) 4098 4101 (fontified t) 4101 4108 (face font-lock-type-face fontified t) 4108 4110 (fontified t) 4110 4117 (face font-lock-type-face fontified t) 4117 4119 (fontified t) 4119 4120 (syntax-table (1) fontified t) 4120 4121 (fontified t) 4121 4122 (face (rainbow-delimiters-depth-4-face) fontified t) 4122 4139 (fontified t) 4139 4143 (face font-lock-keyword-face fontified t) 4143 4185 (fontified t) 4185 4189 (face font-lock-keyword-face fontified t) 4189 4202 (fontified t) 4202 4203 (face (rainbow-delimiters-depth-4-face) fontified t) 4203 4216 (fontified t) 4216 4223 (face font-lock-type-face fontified t) 4223 4225 (fontified t) 4225 4229 (face font-lock-type-face fontified t) 4229 4232 (fontified t) 4232 4239 (face font-lock-type-face fontified t) 4239 4241 (fontified t) 4241 4250 (face font-lock-type-face fontified t) 4250 4252 (fontified t) 4252 4253 (syntax-table (1) fontified t) 4253 4254 (fontified t) 4254 4255 (face (rainbow-delimiters-depth-4-face) fontified t) 4255 4272 (fontified t) 4272 4276 (face font-lock-keyword-face fontified t) 4276 4314 (fontified t) 4314 4319 (fontified t) 4319 4323 (face font-lock-keyword-face fontified t) 4323 4324 (fontified t) 4324 4336 (fontified t) 4336 4337 (face (rainbow-delimiters-depth-4-face) fontified t) 4337 4350 (fontified t) 4350 4357 (face font-lock-type-face fontified t) 4357 4359 (fontified t) 4359 4363 (face font-lock-type-face fontified t) 4363 4366 (fontified t) 4366 4373 (face font-lock-type-face fontified t) 4373 4375 (fontified t) 4375 4384 (face font-lock-type-face fontified t) 4384 4386 (fontified t) 4386 4387 (syntax-table (1) fontified t) 4387 4388 (fontified t) 4388 4389 (face (rainbow-delimiters-depth-4-face) fontified t) 4389 4406 (fontified t) 4406 4410 (face font-lock-keyword-face fontified t) 4410 4449 (fontified t) 4449 4453 (face font-lock-keyword-face fontified t) 4453 4466 (fontified t) 4466 4467 (face (rainbow-delimiters-depth-4-face) fontified t) 4467 4480 (fontified t) 4480 4487 (face font-lock-type-face fontified t) 4487 4489 (fontified t) 4489 4493 (face font-lock-type-face fontified t) 4493 4496 (fontified t) 4496 4503 (face font-lock-type-face fontified t) 4503 4505 (fontified t) 4505 4515 (face font-lock-type-face fontified t) 4515 4517 (fontified t) 4517 4518 (syntax-table (1) fontified t) 4518 4519 (fontified t) 4519 4520 (face (rainbow-delimiters-depth-4-face) fontified t) 4520 4537 (fontified t) 4537 4541 (face font-lock-keyword-face fontified t) 4541 4581 (fontified t) 4581 4585 (face font-lock-keyword-face fontified t) 4585 4598 (fontified t) 4598 4599 (face (rainbow-delimiters-depth-4-face) fontified t) 4599 4612 (fontified t) 4612 4619 (face font-lock-type-face fontified t) 4619 4621 (fontified t) 4621 4626 (face font-lock-type-face fontified t) 4626 4628 (fontified t) 4628 4629 (syntax-table (1) fontified t) 4629 4630 (fontified t) 4630 4631 (face (rainbow-delimiters-depth-4-face) fontified t) 4631 4648 (fontified t) 4648 4652 (face font-lock-keyword-face fontified t) 4652 4689 (fontified t) 4689 4693 (face font-lock-keyword-face fontified t) 4693 4706 (fontified t) 4706 4707 (face (rainbow-delimiters-depth-4-face) fontified t) 4707 4720 (fontified t) 4720 4727 (face font-lock-type-face fontified t) 4727 4729 (fontified t) 4729 4738 (face font-lock-type-face fontified t) 4738 4740 (fontified t) 4740 4741 (syntax-table (1) fontified t) 4741 4742 (fontified t) 4742 4743 (face (rainbow-delimiters-depth-4-face) fontified t) 4743 4760 (fontified t) 4760 4764 (face font-lock-keyword-face fontified t) 4764 4803 (fontified t) 4803 4807 (face font-lock-keyword-face fontified t) 4807 4820 (fontified t) 4820 4821 (face (rainbow-delimiters-depth-4-face) fontified t) 4821 4837 (fontified t) 4837 4838 (syntax-table (1) fontified t) 4838 4839 (fontified t) 4839 4844 (face font-lock-keyword-face fontified t) 4844 4854 (fontified t) 4854 4855 (face (rainbow-delimiters-depth-3-face) fontified t) 4855 4860 (fontified t) 4860 4861 (face (rainbow-delimiters-depth-2-face) fontified t) 4861 4867 (fontified t) 4867 4870 (face font-lock-keyword-face fontified t) 4870 4871 (fontified t) 4871 4873 (face font-lock-keyword-face fontified t) 4873 4874 (fontified t) 4874 4887 (face font-lock-function-name-face fontified t) 4887 4888 (face (rainbow-delimiters-depth-2-face) fontified t) 4888 4889 (face rust-ampersand-face fontified t) 4889 4892 (face font-lock-keyword-face fontified t) 4892 4893 (fontified t) 4893 4897 (face font-lock-keyword-face fontified t) 4897 4899 (fontified t) 4899 4907 (face font-lock-variable-name-face fontified t) 4907 4909 (fontified t) 4909 4912 (face font-lock-type-face fontified t) 4912 4914 (fontified t) 4914 4922 (face font-lock-variable-name-face fontified t) 4922 4924 (fontified t) 4924 4927 (face font-lock-type-face fontified t) 4927 4928 (face (rainbow-delimiters-depth-2-face) fontified t) 4928 4929 (fontified t) 4929 4930 (face (rainbow-delimiters-depth-2-face) fontified t) 4930 4939 (fontified t) 4939 4943 (face font-lock-keyword-face fontified t) 4943 4973 (fontified t) 4973 4975 (face font-lock-keyword-face fontified t) 4975 4976 (fontified t) 4976 4979 (face font-lock-type-face fontified t) 4979 4989 (fontified t) 4989 4993 (face font-lock-keyword-face fontified t) 4993 5021 (fontified t) 5021 5023 (face font-lock-keyword-face fontified t) 5023 5024 (fontified t) 5024 5027 (face font-lock-type-face fontified t) 5027 5033 (fontified t) 5033 5034 (face (rainbow-delimiters-depth-2-face) fontified t) 5034 5040 (fontified t) 5040 5043 (face font-lock-keyword-face fontified t) 5043 5044 (fontified t) 5044 5046 (face font-lock-keyword-face fontified t) 5046 5047 (fontified t) 5047 5061 (face font-lock-function-name-face fontified t) 5061 5062 (face (rainbow-delimiters-depth-2-face) fontified t) 5062 5063 (face rust-ampersand-face fontified t) 5063 5066 (face font-lock-keyword-face fontified t) 5066 5067 (fontified t) 5067 5071 (face font-lock-keyword-face fontified t) 5071 5073 (fontified t) 5073 5078 (face font-lock-variable-name-face fontified t) 5078 5080 (fontified t) 5080 5081 (face rust-ampersand-face fontified t) 5081 5097 (face font-lock-type-face fontified t) 5097 5098 (face (rainbow-delimiters-depth-2-face) fontified t) 5098 5099 (fontified t) 5099 5100 (face (rainbow-delimiters-depth-2-face) fontified t) 5100 5109 (fontified t) 5109 5113 (face font-lock-keyword-face fontified t) 5113 5124 (fontified t) 5124 5129 (face font-lock-keyword-face fontified t) 5129 5136 (fontified t) 5136 5137 (face (rainbow-delimiters-depth-3-face) fontified t) 5137 5150 (fontified t) 5150 5153 (face font-lock-comment-delimiter-face fontified t) 5153 5193 (face font-lock-comment-face fontified t) 5193 5205 (fontified t) 5205 5221 (face font-lock-type-face fontified t) 5221 5223 (fontified t) 5223 5232 (face font-lock-type-face fontified t) 5232 5233 (face (rainbow-delimiters-depth-4-face) fontified t) 5233 5242 (fontified t) 5242 5243 (face (rainbow-delimiters-depth-4-face) fontified t) 5243 5245 (fontified t) 5245 5246 (syntax-table (1) fontified t) 5246 5275 (fontified t) 5275 5291 (face font-lock-type-face fontified t) 5291 5293 (fontified t) 5293 5303 (face font-lock-type-face fontified t) 5303 5304 (face (rainbow-delimiters-depth-4-face) fontified t) 5304 5320 (face font-lock-type-face fontified t) 5320 5321 (fontified t) 5321 5322 (face (rainbow-delimiters-depth-5-face) fontified t) 5322 5339 (fontified t) 5339 5340 (face font-lock-variable-name-face fontified t) 5340 5381 (fontified t) 5381 5382 (face (rainbow-delimiters-depth-5-face) fontified t) 5382 5383 (face (rainbow-delimiters-depth-4-face) fontified t) 5383 5385 (fontified t) 5385 5386 (syntax-table (1) fontified t) 5386 5395 (fontified t) 5395 5397 (face font-lock-keyword-face fontified t) 5397 5398 (fontified t) 5398 5401 (face font-lock-type-face fontified t) 5401 5411 (fontified t) 5411 5412 (face (rainbow-delimiters-depth-3-face) fontified t) 5412 5418 (fontified t) 5418 5419 (face (rainbow-delimiters-depth-2-face) fontified t) 5419 5425 (fontified t) 5425 5428 (face font-lock-keyword-face fontified t) 5428 5429 (fontified t) 5429 5431 (face font-lock-keyword-face fontified t) 5431 5432 (fontified t) 5432 5445 (face font-lock-function-name-face fontified t) 5445 5446 (face (rainbow-delimiters-depth-2-face) fontified t) 5446 5447 (face rust-ampersand-face fontified t) 5447 5450 (face font-lock-keyword-face fontified t) 5450 5451 (fontified t) 5451 5455 (face font-lock-keyword-face fontified t) 5455 5457 (fontified t) 5457 5463 (face font-lock-variable-name-face fontified t) 5463 5465 (fontified t) 5465 5466 (face rust-ampersand-face fontified t) 5466 5469 (face font-lock-keyword-face fontified t) 5469 5470 (fontified t) 5470 5476 (face font-lock-type-face fontified t) 5476 5478 (fontified t) 5478 5480 (face font-lock-variable-name-face fontified t) 5480 5482 (fontified t) 5482 5490 (face font-lock-type-face fontified t) 5490 5491 (face (rainbow-delimiters-depth-2-face) fontified t) 5491 5492 (fontified t) 5492 5493 (face (rainbow-delimiters-depth-2-face) fontified t) 5493 5502 (fontified t) 5502 5505 (face font-lock-keyword-face fontified t) 5505 5506 (fontified t) 5506 5508 (face font-lock-variable-name-face fontified t) 5508 5525 (fontified t) 5525 5526 (face (rainbow-delimiters-depth-3-face) fontified t) 5526 5527 (face (rainbow-delimiters-depth-3-face) fontified t) 5527 5538 (fontified t) 5538 5541 (face font-lock-comment-delimiter-face fontified t) 5541 5578 (face font-lock-comment-face fontified t) 5578 5586 (fontified t) 5586 5589 (face font-lock-keyword-face fontified t) 5589 5590 (fontified t) 5590 5591 (face (rainbow-delimiters-depth-3-face) fontified t) 5591 5607 (fontified t) 5607 5608 (face (rainbow-delimiters-depth-3-face) fontified t) 5608 5631 (fontified t) 5631 5632 (face (rainbow-delimiters-depth-3-face) fontified t) 5632 5633 (face (rainbow-delimiters-depth-3-face) fontified t) 5633 5643 (fontified t) 5643 5646 (face font-lock-keyword-face fontified t) 5646 5647 (fontified t) 5647 5654 (face font-lock-variable-name-face fontified t) 5654 5657 (fontified t) 5657 5664 (face font-lock-type-face fontified t) 5664 5669 (fontified t) 5669 5670 (face (rainbow-delimiters-depth-3-face) fontified t) 5670 5691 (fontified t) 5691 5692 (face (rainbow-delimiters-depth-3-face) fontified t) 5692 5702 (fontified t) 5702 5703 (face (rainbow-delimiters-depth-3-face) fontified t) 5703 5704 (face (rainbow-delimiters-depth-3-face) fontified t) 5704 5714 (fontified t) 5714 5717 (face font-lock-keyword-face fontified t) 5717 5718 (fontified t) 5718 5723 (face font-lock-variable-name-face fontified t) 5723 5726 (fontified t) 5726 5733 (face font-lock-type-face fontified t) 5733 5738 (fontified t) 5738 5739 (face (rainbow-delimiters-depth-3-face) fontified t) 5739 5761 (fontified t) 5761 5762 (face (rainbow-delimiters-depth-3-face) fontified t) 5762 5772 (fontified t) 5772 5773 (face (rainbow-delimiters-depth-3-face) fontified t) 5773 5774 (face (rainbow-delimiters-depth-3-face) fontified t) 5774 5813 (fontified t) 5813 5814 (face (rainbow-delimiters-depth-3-face) fontified t) 5814 5818 (face font-lock-keyword-face fontified t) 5818 5824 (fontified t) 5824 5836 (fontified t) 5836 5840 (face font-lock-keyword-face fontified t) 5840 5856 (fontified t) 5856 5857 (face (rainbow-delimiters-depth-3-face) fontified t) 5857 5860 (fontified t) 5860 5864 (face font-lock-keyword-face fontified t) 5864 5877 (fontified t) 5877 5912 (fontified t) 5912 5913 (face (rainbow-delimiters-depth-3-face) fontified t) 5913 5917 (face font-lock-keyword-face fontified t) 5917 5933 (fontified t) 5933 5937 (face font-lock-keyword-face fontified t) 5937 5949 (fontified t) 5949 5950 (face (rainbow-delimiters-depth-3-face) fontified t) 5950 5953 (fontified t) 5953 5957 (face font-lock-keyword-face fontified t) 5957 5979 (fontified t) 5979 5982 (face font-lock-comment-delimiter-face fontified t) 5982 6008 (face font-lock-comment-face fontified t) 6008 6016 (fontified t) 6016 6019 (face font-lock-comment-delimiter-face fontified t) 6019 6074 (face font-lock-comment-face fontified t) 6074 6082 (fontified t) 6082 6085 (face font-lock-comment-delimiter-face fontified t) 6085 6141 (face font-lock-comment-face fontified t) 6141 6149 (fontified t) 6149 6152 (face font-lock-comment-delimiter-face fontified t) 6152 6201 (face font-lock-comment-face fontified t) 6201 6209 (fontified t) 6209 6212 (face font-lock-keyword-face fontified t) 6212 6213 (fontified t) 6213 6214 (face (rainbow-delimiters-depth-3-face) fontified t) 6214 6234 (fontified t) 6234 6235 (face (rainbow-delimiters-depth-3-face) fontified t) 6235 6260 (fontified t) 6260 6261 (face (rainbow-delimiters-depth-3-face) fontified t) 6261 6262 (face (rainbow-delimiters-depth-3-face) fontified t) 6262 6272 (fontified t) 6272 6275 (face font-lock-keyword-face fontified t) 6275 6276 (fontified t) 6276 6286 (face font-lock-variable-name-face fontified t) 6286 6289 (fontified t) 6289 6296 (face font-lock-type-face fontified t) 6296 6301 (fontified t) 6301 6302 (face (rainbow-delimiters-depth-3-face) fontified t) 6302 6353 (fontified t) 6353 6354 (face (rainbow-delimiters-depth-3-face) fontified t) 6354 6364 (fontified t) 6364 6365 (face (rainbow-delimiters-depth-3-face) fontified t) 6365 6366 (face (rainbow-delimiters-depth-3-face) fontified t) 6366 6408 (fontified t) 6408 6412 (face font-lock-keyword-face fontified t) 6412 6422 (fontified t) 6422 6426 (face font-lock-keyword-face fontified t) 6426 6435 (fontified t) 6435 6439 (face font-lock-keyword-face fontified t) 6439 6466 (fontified t) 6466 6470 (face font-lock-keyword-face fontified t) 6470 6494 (fontified t) 6494 6497 (face font-lock-comment-delimiter-face fontified t) 6497 6548 (face font-lock-comment-face fontified t) 6548 6556 (fontified t) 6556 6559 (face font-lock-comment-delimiter-face fontified t) 6559 6593 (face font-lock-comment-face fontified t) 6593 6622 (fontified t) 6622 6623 (face (rainbow-delimiters-depth-3-face) fontified t) 6623 6627 (face font-lock-keyword-face fontified t) 6627 6640 (fontified t) 6640 6644 (face font-lock-keyword-face fontified t) 6644 6656 (fontified t) 6656 6657 (face (rainbow-delimiters-depth-3-face) fontified t) 6657 6660 (fontified t) 6660 6664 (face font-lock-keyword-face fontified t) 6664 6686 (fontified t) 6686 6689 (face font-lock-comment-delimiter-face fontified t) 6689 6696 (face font-lock-comment-face fontified t) 6696 6718 (fontified t) 6718 6721 (face font-lock-type-face fontified t) 6721 6722 (face (rainbow-delimiters-depth-3-face) fontified t) 6722 6726 (face font-lock-keyword-face fontified t) 6726 6744 (fontified t) 6744 6745 (face (rainbow-delimiters-depth-3-face) fontified t) 6745 6748 (fontified t) 6748 6752 (face font-lock-keyword-face fontified t) 6752 6795 (fontified t) 6795 6798 (face font-lock-type-face fontified t) 6798 6799 (face (rainbow-delimiters-depth-3-face) fontified t) 6799 6800 (fontified t) 6800 6804 (face font-lock-keyword-face fontified t) 6804 6820 (fontified t) 6820 6821 (face (rainbow-delimiters-depth-3-face) fontified t) 6821 6824 (fontified t) 6824 6828 (face font-lock-keyword-face fontified t) 6828 6856 (fontified t) 6856 6859 (face font-lock-comment-delimiter-face fontified t) 6859 6915 (face font-lock-comment-face fontified t) 6915 6923 (fontified t) 6923 6926 (face font-lock-comment-delimiter-face fontified t) 6926 6979 (face font-lock-comment-face fontified t) 6979 6987 (fontified t) 6987 6990 (face font-lock-comment-delimiter-face fontified t) 6990 7031 (face font-lock-comment-face fontified t) 7031 7039 (fontified t) 7039 7043 (face font-lock-keyword-face fontified t) 7043 7077 (fontified t) 7077 7081 (face font-lock-keyword-face fontified t) 7081 7114 (fontified t) 7114 7117 (face font-lock-comment-delimiter-face fontified t) 7117 7166 (face font-lock-comment-face fontified t) 7166 7174 (fontified t) 7174 7176 (face font-lock-keyword-face fontified t) 7176 7190 (fontified t) 7190 7191 (syntax-table (1) fontified t) 7191 7193 (fontified t) 7193 7196 (face font-lock-type-face fontified t) 7196 7197 (face (rainbow-delimiters-depth-3-face) fontified t) 7197 7211 (face font-lock-type-face fontified t) 7211 7212 (face (rainbow-delimiters-depth-3-face) fontified t) 7212 7213 (fontified t) 7213 7214 (face (rainbow-delimiters-depth-3-face) fontified t) 7214 7243 (fontified t) 7243 7246 (face font-lock-type-face fontified t) 7246 7247 (face (rainbow-delimiters-depth-4-face) fontified t) 7247 7261 (face font-lock-type-face fontified t) 7261 7262 (face (rainbow-delimiters-depth-4-face) fontified t) 7262 7272 (fontified t) 7272 7273 (face (rainbow-delimiters-depth-3-face) fontified t) 7273 7274 (fontified t) 7274 7278 (face font-lock-keyword-face fontified t) 7278 7279 (fontified t) 7279 7281 (face font-lock-keyword-face fontified t) 7281 7295 (fontified t) 7295 7296 (syntax-table (1) fontified t) 7296 7297 (fontified t) 7297 7300 (face font-lock-type-face fontified t) 7300 7301 (face (rainbow-delimiters-depth-3-face) fontified t) 7301 7315 (face font-lock-type-face fontified t) 7315 7316 (face (rainbow-delimiters-depth-3-face) fontified t) 7316 7317 (fontified t) 7317 7318 (face (rainbow-delimiters-depth-3-face) fontified t) 7318 7346 (fontified t) 7346 7349 (face font-lock-type-face fontified t) 7349 7350 (face (rainbow-delimiters-depth-4-face) fontified t) 7350 7364 (face font-lock-type-face fontified t) 7364 7365 (face (rainbow-delimiters-depth-4-face) fontified t)) . 220) (undo-tree-id64 . -1844) (undo-tree-id65 . -1844) (undo-tree-id66 . -1260) (undo-tree-id67 . -1755) (t 26015 63803 165324 980000)) nil (26018 24855 842866 0) 0 nil])
([nil nil ((220 . 7585) ("#[rustfmt::skip]
pub const OPENGL_TO_WGPU_MATRIX: cgmath::Matrix4<f32> = cgmath::Matrix4::new(
    1.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.5, 0.5,
    0.0, 0.0, 0.0, 1.0,
);


pub struct Camera {
    pub eye: cgmath::Point3<f32>,
    pub target: cgmath::Point3<f32>,
    pub up: cgmath::Vector3<f32>,
    pub aspect: f32,
    pub fovy: f32,
    pub znear: f32,
    pub zfar: f32,
}

impl Camera {
    pub fn build_view_projection_matrix(&self) -> cgmath::Matrix4<f32> {
        // 1.
        let view = cgmath::Matrix4::look_at_rh(self.eye, self.target, self.up);
        // 2.
        let proj = cgmath::perspective(cgmath::Deg(self.fovy), self.aspect, self.znear, self.zfar);

        // 3.
        return OPENGL_TO_WGPU_MATRIX * proj * view;
    }
}

// We need this for Rust to store our data correctly for the shaders
#[repr(C)]
// This is so we can store this in a buffer
#[derive(Debug, Copy, Clone, bytemuck::Pod, bytemuck::Zeroable)]
pub struct CameraUniform {
    // We can't use cgmath with bytemuck directly, so we'll have
    // to convert the Matrix4 into a 4x4 f32 array
    pub view_proj: [[f32; 4]; 4],
}

impl CameraUniform {
    pub fn new() -> Self {
        use cgmath::SquareMatrix;
        Self {
            view_proj: cgmath::Matrix4::identity().into(),
        }
    }

    pub fn update_view_proj(&mut self, camera: &Camera) {
        self.view_proj = camera.build_view_projection_matrix().into();
    }

    pub fn create_camera_buffer(&self, device: &wgpu::Device) -> wgpu::Buffer {
        let camera_buffer = device.create_buffer_init(
            &wgpu::util::BufferInitDescriptor {
                label: Some(\"Camera Buffer\"),
                contents: bytemuck::cast_slice(&[*self]),
                usage: wgpu::BufferUsages::UNIFORM | wgpu::BufferUsages::COPY_DST,
            }
        );
        camera_buffer
    }
}


pub struct CameraController {
    pub speed: f32,
    pub is_forward_pressed: bool,
    pub is_backward_pressed: bool,
    pub is_left_pressed: bool,
    pub is_right_pressed: bool,
}

impl CameraController {
    pub fn new(speed: f32) -> Self {
        Self {
            speed,
            is_forward_pressed: false,
            is_backward_pressed: false,
            is_left_pressed: false,
            is_right_pressed: false,
        }
    }

    pub fn process_events(&mut self, event: &WindowEvent) -> bool {
        match event {
            WindowEvent::KeyboardInput {
                event: KeyEvent {
                    physical_key: PhysicalKey::Code(keycode),
                    state,
                    ..
                },
                ..
            } => {
                let is_pressed = *state == ElementState::Pressed;
                match keycode {
                    KeyCode::KeyW | KeyCode::ArrowUp => {
                        self.is_forward_pressed = is_pressed;
                        true
                    }
                    KeyCode::KeyA | KeyCode::ArrowLeft => {
                        self.is_left_pressed = is_pressed;
                        true
                    }
                    KeyCode::KeyS | KeyCode::ArrowDown => {
                        self.is_backward_pressed = is_pressed;
                        true
                    }
                    KeyCode::KeyD | KeyCode::ArrowRight => {
                        self.is_right_pressed = is_pressed;
                        true
                    }
                    _ => false,
                }
            }
            _ => false,
        }
    }

    pub fn update_camera(&self, camera: &mut Camera) {
        use cgmath::InnerSpace;
        let forward = camera.target - camera.eye;
        let forward_norm = forward.normalize();
        let forward_mag = forward.magnitude();

        // Prevents glitching when the camera gets too close to the
        // center of the scene.
        if self.is_forward_pressed && forward_mag > self.speed {
            camera.eye += forward_norm * self.speed;
        }
        if self.is_backward_pressed {
            camera.eye -= forward_norm * self.speed;
        }

        let right = forward_norm.cross(camera.up);

        // Redo radius calc in case the forward/backward is pressed.
        let forward = camera.target - camera.eye;
        let forward_mag = forward.magnitude();

        if self.is_right_pressed {
            // Rescale the distance between the target and the eye so 
            // that it doesn't change. The eye, therefore, still 
            // lies on the circle made by the target and eye.
            camera.eye = camera.target - (forward + right * self.speed).normalize() * forward_mag;
            // camera.eye.x += self.speed;
        }
        if self.is_left_pressed {
            camera.eye = camera.target - (forward - right * self.speed).normalize() * forward_mag;
            // camera.eye.x -= self.speed" . 220) (t 26018 21663 796631 227000)) nil (26018 24855 842855 0) 0 nil])
([nil nil ((2985 . 2996) (t 26018 23638 665487 540000)) nil (26018 24855 842854 0) 0 nil])
([nil nil ((3361 . 3369) (#("        " 0 8 (fontified nil)) . 3360) (undo-tree-id63 . -8) (3359 . 3369)) nil (26018 24855 842852 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 4418 . 4419) (nil fontified nil 4417 . 4419) (nil fontified nil 4416 . 4417) (nil fontified nil 4415 . 4416) (nil fontified nil 4407 . 4415) (nil fontified nil 4405 . 4407) (nil fontified nil 4404 . 4405) (nil fontified nil 4385 . 4404) (nil fontified nil 4384 . 4385) (nil fontified nil 4380 . 4384) (nil fontified nil 4378 . 4380) (nil fontified nil 4376 . 4378) (nil fontified nil 4375 . 4376) (nil fontified nil 4373 . 4375) (nil fontified nil 4359 . 4373) (nil fontified nil 4358 . 4359) (nil fontified nil 4345 . 4358) (nil fontified nil 4344 . 4345) (nil fontified nil 4326 . 4344) (nil fontified nil 4325 . 4326) (nil fontified nil 4324 . 4325) (nil fontified nil 4291 . 4324) (nil fontified nil 4283 . 4291) (nil fontified nil 4258 . 4283) (nil fontified nil 4251 . 4258) (nil fontified nil 4231 . 4251) (nil fontified nil 4230 . 4231) (nil fontified nil 4229 . 4230) (nil fontified nil 4228 . 4229) (nil fontified nil 4214 . 4228) (nil fontified nil 4212 . 4214) (nil fontified nil 4208 . 4212) (nil fontified nil 4194 . 4208) (nil fontified nil 4191 . 4194) (nil fontified nil 4190 . 4191) (nil fontified nil 4189 . 4190) (nil fontified nil 4187 . 4189) (nil fontified nil 4180 . 4187) (nil fontified nil 4142 . 4180) (nil fontified nil 4141 . 4142) (nil fontified nil 4139 . 4141) (nil fontified nil 4133 . 4139) (nil fontified nil 4121 . 4133) (nil fontified nil 4120 . 4121) (nil fontified nil 4119 . 4120) (nil fontified nil 4118 . 4119) (nil fontified nil 4099 . 4118) (nil fontified nil 4097 . 4099) (nil fontified nil 4093 . 4097) (nil fontified nil 4092 . 4093) (nil fontified nil 4091 . 4092) (nil fontified nil 4086 . 4091) (nil fontified nil 4064 . 4086) (nil fontified nil 4047 . 4064) (nil fontified nil 4046 . 4047) (nil fontified nil 4043 . 4046) (nil fontified nil 4032 . 4043) (nil fontified nil 4031 . 4032) (nil fontified nil 4030 . 4031) (nil fontified nil 4020 . 4030) (nil fontified nil 4019 . 4020) (nil fontified nil 3993 . 4019) (nil fontified nil 3992 . 3993) (nil fontified nil 3988 . 3992) (nil fontified nil 3986 . 3988) (nil fontified nil 3981 . 3986) (nil fontified nil 3967 . 3981) (nil fontified nil 3966 . 3967) (nil fontified nil 3953 . 3966) (nil fontified nil 3952 . 3953) (nil fontified nil 3934 . 3952) (nil fontified nil 3930 . 3934) (nil fontified nil 3928 . 3930) (nil fontified nil 3923 . 3928) (nil fontified nil 3901 . 3923) (nil fontified nil 3900 . 3901) (nil fontified nil 3878 . 3900) (nil fontified nil 3874 . 3878) (nil fontified nil 3872 . 3874) (nil fontified nil 3856 . 3872) (nil fontified nil 3830 . 3856) (nil fontified nil 3825 . 3830) (nil fontified nil 3823 . 3825) (nil fontified nil 3805 . 3823) (nil fontified nil 3779 . 3805) (nil fontified nil 3772 . 3779) (nil fontified nil 3770 . 3772) (nil fontified nil 3753 . 3770) (nil fontified nil 3751 . 3753) (nil fontified nil 3747 . 3751) (nil fontified nil 3745 . 3747) (nil fontified nil 3743 . 3745) (nil fontified nil 3718 . 3743) (nil fontified nil 3717 . 3718) (nil fontified nil 3716 . 3717) (nil fontified nil 3710 . 3716) (nil fontified nil 3708 . 3710) (nil fontified nil 3697 . 3708) (nil fontified nil 3695 . 3697) (nil fontified nil 3691 . 3695) (nil fontified nil 3689 . 3691) (nil fontified nil 3687 . 3689) (nil fontified nil 3665 . 3687) (nil fontified nil 3657 . 3665) (nil fontified nil 3655 . 3657) (nil fontified nil 3643 . 3655) (nil fontified nil 3641 . 3643) (nil fontified nil 3637 . 3641) (nil fontified nil 3634 . 3637) (nil fontified nil 3628 . 3634) (nil fontified nil 3626 . 3628) (nil fontified nil 3614 . 3626) (nil fontified nil 3612 . 3614) (nil fontified nil 3608 . 3612) (nil fontified nil 3606 . 3608) (nil fontified nil 3596 . 3606) (nil fontified nil 3576 . 3596) (nil fontified nil 3571 . 3576) (nil fontified nil 3564 . 3571) (nil fontified nil 3544 . 3564) (nil fontified nil 3543 . 3544) (nil fontified nil 3542 . 3543) (nil fontified nil 3541 . 3542) (nil fontified nil 3521 . 3541) (nil fontified nil 3519 . 3521) (nil fontified nil 3515 . 3519) (nil fontified nil 3498 . 3515) (nil fontified nil 3497 . 3498) (nil fontified nil 3496 . 3497) (nil fontified nil 3494 . 3496) (nil fontified nil 3487 . 3494) (nil fontified nil 3474 . 3487) (nil fontified nil 3473 . 3474) (nil fontified nil 3472 . 3473) (nil fontified nil 3447 . 3472) (nil fontified nil 3445 . 3447) (nil fontified nil 3441 . 3445) (nil fontified nil 3440 . 3441) (nil fontified nil 3439 . 3440) (nil fontified nil 3405 . 3439) (nil fontified nil 3381 . 3405) (nil fontified nil 3380 . 3381) (nil fontified nil 3377 . 3380) (nil fontified nil 3369 . 3377) (3369 . 4419)) nil (26018 24855 842844 0) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -3369) 3152) nil (26018 24855 842806 0) 0 nil])
([nil nil ((#("buffer" 0 6 (fontified t)) . -4292) (undo-tree-id60 . -5) (undo-tree-id61 . -6) (undo-tree-id62 . -5) 4298) nil (26018 24855 842804 0) 0 nil])
([nil nil ((#("camera_" 0 7 (fontified t)) . -4285) (undo-tree-id57 . -7) (undo-tree-id58 . -7) (undo-tree-id59 . -7) 4292) nil (26018 24855 842800 0) 0 nil])
([nil nil ((4285 . 4289)) nil (26018 24855 842796 0) 0 nil])
([nil nil ((4285 . 4289) (#("self" 0 4 (fontified nil)) . 4285) (4285 . 4289) (#("self" 0 4 (face font-lock-keyword-face fontified t)) . -4285) (undo-tree-id55 . -4) (undo-tree-id56 . -4) 4289) nil (26018 24855 842794 0) 0 nil])
([nil nil ((2997 . 3006)) nil (26018 24855 842790 0) 0 nil])
([nil nil ((3013 . 3021) (#(" " 0 1 (fontified nil)) . 3012) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (3013 . 3014)) nil (26018 24855 842789 0) 0 nil])
([nil nil ((3042 . 3047)) nil (26018 24855 842785 0) 0 nil])
([nil nil ((3052 . 3053)) nil (26018 24855 842784 0) 0 nil])
([nil nil ((3065 . 3066)) nil (26018 24855 842777 0) 0 nil])
([nil nil ((3065 . 3068)) nil (26018 24855 842776 0) 0 nil])
([nil nil ((3067 . 3071) (#("w" 0 1 (fontified nil)) . 3067) (3067 . 3068) (#("wgpu" 0 4 (fontified nil)) . -3067) (3067 . 3071) (#("w" 0 1 (fontified t)) . -3067) (undo-tree-id52 . -1) 3068) nil (26018 24855 842774 0) 0 nil])
([nil nil ((3071 . 3078)) nil (26018 24855 842770 0) 0 nil])
([nil nil ((#("g" 0 1 (face font-lock-type-face fontified t)) . -3077) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) 3078) nil (26018 24855 842769 0) 0 nil])
([nil nil ((3077 . 3078)) nil (26018 24855 842763 0) 0 nil])
([nil nil ((3073 . 3088) (#("BindG" 0 5 (fontified nil)) . 3073) (3073 . 3078) (#("BindGroupLayout" 0 15 (fontified nil)) . -3073) (3073 . 3088) (#("BindG" 0 5 (face font-lock-type-face fontified t)) . -3073) (undo-tree-id32 . -5) (undo-tree-id33 . -4) (undo-tree-id34 . -4) (undo-tree-id35 . -4) (undo-tree-id36 . -4) (undo-tree-id37 . -4) (undo-tree-id38 . -4) (undo-tree-id39 . -4) (undo-tree-id40 . -4) (undo-tree-id41 . -5) (undo-tree-id42 . -5) (undo-tree-id43 . -5) (undo-tree-id44 . -5) (undo-tree-id45 . -5) (undo-tree-id46 . -5) 3078) nil (26018 24855 842761 0) 0 nil])
([nil nil ((3088 . 3092)) nil (26018 24855 842744 0) 0 nil])
([nil nil ((3090 . 3094) (#("wg" 0 2 (fontified nil)) . 3090) (3090 . 3092) (#("wgpu" 0 4 (fontified nil)) . -3090) (3090 . 3094) (#("wg" 0 2 (fontified t)) . -3090) (undo-tree-id26 . -2) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -2) (undo-tree-id30 . -2) (undo-tree-id31 . -2) 3092) nil (26018 24855 842742 0) 0 nil])
([nil nil ((3094 . 3096)) nil (26018 24855 842734 0) 0 nil])
([nil nil ((#("L" 0 1 (fontified t)) . -3094) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (#("L" 0 1 (fontified t)) . -3095) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) 3096) nil (26018 24855 842732 0) 0 nil])
([nil nil ((3094 . 3100)) nil (26018 24855 842721 0) 0 nil])
([nil nil ((3096 . 3105) (#("Bind" 0 4 (fontified nil)) . 3096) (3096 . 3100) (#("BindGroup" 0 9 (fontified nil)) . -3096) (3096 . 3105) (#("Bind" 0 4 (face font-lock-type-face fontified t)) . -3096) (undo-tree-id0 . -4) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -2) (undo-tree-id8 . -2) (undo-tree-id9 . -2) (undo-tree-id10 . -3) (undo-tree-id11 . -3) (undo-tree-id12 . -4) (undo-tree-id13 . -4) (undo-tree-id14 . -4) (undo-tree-id15 . -4) 3100) nil (26018 24855 842716 0) 0 nil])
([nil nil ((4488 . 4490) (t 26018 24855 863550 455000)) nil (26018 24871 955606 0) 0 nil])
([nil nil ((4490 . 4496)) nil (26018 24871 955604 0) 0 nil])
([nil nil ((4490 . 4514) (#("camera" 0 6 (fontified nil)) . 4490) (4490 . 4496) (#("camera_bind_group_layout" 0 24 (fontified nil)) . -4490) (4490 . 4514) (#("camera" 0 6 (fontified t)) . -4490) (undo-tree-id84 . -6) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -2) (undo-tree-id89 . -2) (undo-tree-id90 . -2) (undo-tree-id91 . -3) (undo-tree-id92 . -3) (undo-tree-id93 . -4) (undo-tree-id94 . -5) (undo-tree-id95 . -6) (undo-tree-id96 . -6) (undo-tree-id97 . -6) (undo-tree-id98 . -6) 4496) nil (26018 24871 955602 0) 0 nil])
([nil nil ((4514 . 4520)) nil (26018 24871 955586 0) 0 nil])
([nil nil ((4516 . 4533) (#("came" 0 4 (fontified nil)) . 4516) (4516 . 4520) (#("camera_bind_group" 0 17 (fontified nil)) . -4516) (4516 . 4533) (#("came" 0 4 (fontified t)) . -4516) (undo-tree-id68 . -4) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -2) (undo-tree-id75 . -2) (undo-tree-id76 . -2) (undo-tree-id77 . -2) (undo-tree-id78 . -3) (undo-tree-id79 . -3) (undo-tree-id80 . -4) (undo-tree-id81 . -4) (undo-tree-id82 . -4) (undo-tree-id83 . -4) 4520) nil (26018 24882 122141 0) 0 nil])
([nil nil ((4533 . 4534)) nil (26018 24887 209905 0) 0 nil] [nil nil ((4533 . 4534)) ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . 4533)) (26018 24881 854569 0) 0 nil])
([nil nil ((4475 . 4476)) nil (26018 24887 209901 0) 0 nil])
([nil nil ((4475 . 4476)) ((#("(" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . 4475) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (t 26018 24871 977319 861000)) (26018 24871 955554 0) 0 nil])
([nil nil ((#("self" 0 4 (face font-lock-keyword-face fontified t)) . -4349) (undo-tree-id174 . -4) (undo-tree-id175 . -4) (undo-tree-id176 . -4) (undo-tree-id177 . -4) (undo-tree-id178 . -4) (undo-tree-id179 . -4) (undo-tree-id180 . -4) (undo-tree-id181 . -4) (undo-tree-id182 . -4) (undo-tree-id183 . -4) (undo-tree-id184 . -4) (undo-tree-id185 . -4) (undo-tree-id186 . -4) (undo-tree-id187 . -4) (undo-tree-id188 . -4) (undo-tree-id189 . -4) (undo-tree-id190 . -4) (undo-tree-id191 . -4) (undo-tree-id192 . -4) 4353 (t 26018 24887 231486 724000)) nil (26018 24898 78869 0) 0 nil])
nil
([nil nil ((4349 . 4353)) nil (26018 24898 78845 0) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -4351) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (#("e" 0 1 (fontified t)) . -4352) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) 4353) nil (26018 24898 78843 0) 0 nil])
([nil nil ((4351 . 4355)) nil (26018 24898 78821 0) 0 nil])
([nil current ((4349 . 4362) (#("camera" 0 6 (fontified nil)) . 4349) (4349 . 4355) (#("camera_buffer" 0 13 (fontified nil)) . -4349) (4349 . 4362) (#("camera" 0 6 (fontified t)) . -4349) (undo-tree-id114 . -6) (undo-tree-id115 . -6) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -2) (undo-tree-id119 . -2) (undo-tree-id120 . -2) (undo-tree-id121 . -2) (undo-tree-id122 . -2) (undo-tree-id123 . -2) (undo-tree-id124 . -2) (undo-tree-id125 . -2) (undo-tree-id126 . -2) (undo-tree-id127 . -2) (undo-tree-id128 . -2) (undo-tree-id129 . -2) (undo-tree-id130 . -2) (undo-tree-id131 . -2) (undo-tree-id132 . -2) (undo-tree-id133 . -2) (undo-tree-id134 . -2) (undo-tree-id135 . -2) (undo-tree-id136 . -2) (undo-tree-id137 . -2) (undo-tree-id138 . -3) (undo-tree-id139 . -4) (undo-tree-id140 . -4) (undo-tree-id141 . -4) (undo-tree-id142 . -4) (undo-tree-id143 . -5) (undo-tree-id144 . -5) (undo-tree-id145 . -5) (undo-tree-id146 . -6) (undo-tree-id147 . -6) (undo-tree-id148 . -6) (undo-tree-id149 . -6) (undo-tree-id150 . -6) (undo-tree-id151 . -6) 4355) nil (26018 24898 78815 0) 0 nil])
nil
