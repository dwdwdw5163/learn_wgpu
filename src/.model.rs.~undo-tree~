(undo-tree-save-format-version . 1)
"c940bc8f7ca90df592beaab2a29a884899a95ef4"
[nil nil nil nil (26014 21983 65434 0) 0 nil]
([nil nil ((nil rear-nonsticky nil 382 . 383) (nil fontified nil 1 . 383) (1 . 383) (t 26014 21924 479302 749000)) nil (26014 21983 65433 0) 0 nil])
([nil nil ((383 . 385)) nil (26014 21983 65431 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1380 . 1381) (nil fontified nil 385 . 1381) (385 . 1381)) nil (26014 21983 65426 0) 0 nil])
([nil nil ((1381 . 1383) (t 26014 21983 69532 563000)) nil (26014 22454 212801 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1476 . 1477) (nil fontified nil 1383 . 1477) (1383 . 1477)) nil (26014 22454 212800 0) 0 nil])
([nil nil ((1477 . 1478)) nil (26014 22454 212799 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1771 . 1772) (nil fontified nil 1478 . 1772) (1478 . 1772)) nil (26014 22454 212798 0) 0 nil])
([nil nil ((1772 . 1773)) nil (26014 22454 212796 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 2027 . 2028) (nil fontified nil 1773 . 2028) (1773 . 2028)) nil (26014 22454 212795 0) 0 nil])
([nil nil ((#("async " 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t)) . -1778) (undo-tree-id81 . -6) (undo-tree-id82 . -6) (undo-tree-id83 . -6) 1784) nil (26014 22454 212793 0) 0 nil])
([nil nil ((#("    let data = load_binary(file_name).await?;" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 12 (face font-lock-variable-name-face fontified t) 12 26 (fontified t) 26 27 (face (rainbow-delimiters-depth-2-face) fontified t) 27 36 (fontified t) 36 37 (face (rainbow-delimiters-depth-2-face) fontified t) 37 38 (fontified t) 38 43 (face font-lock-keyword-face fontified t) 43 44 (face rust-question-mark fontified t) 44 45 (fontified t)) . 1908) (undo-tree-id79 . -45) (undo-tree-id80 . -45)) nil (26014 22454 212789 0) 0 nil])
([nil nil ((1908 . 1912)) nil (26014 22454 212786 0) 0 nil])
([nil nil ((#("    texture::Texture::from_bytes(device, queue, &data, file_name)" 0 4 (fontified t) 4 11 (face font-lock-constant-face fontified t) 11 13 (fontified t) 13 20 (face font-lock-type-face fontified t) 20 32 (fontified t) 32 33 (face (rainbow-delimiters-depth-2-face) fontified t) 33 48 (fontified t) 48 49 (face rust-ampersand-face fontified t) 49 64 (fontified t) 64 65 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1913) (undo-tree-id78 . -46)) nil (26014 22454 212785 0) 0 nil])
([nil nil ((1913 . 1914)) nil (26014 22454 212783 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1912) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (#("p" 0 1 (fontified t)) . -1913) (undo-tree-id77 . -1) 1914) nil (26014 22454 212781 0) 0 nil])
([nil nil ((1912 . 1919)) nil (26014 22454 212773 0) 0 nil])
([nil nil ((1 . 22) (1912 . 1912) (1912 . 1919) (#("texture" 0 7 (fontified nil)) . 1912) (1912 . 1919) (#("texture (use crate::texture)" 0 28 (fontified nil)) . -1912) (1912 . 1940) (#("texture" 0 7 (fontified t)) . -1912) (undo-tree-id73 . -7) 1919) nil (26014 22454 212771 0) 0 nil])
([nil nil ((1940 . 1943)) nil (26014 22454 212767 0) 0 nil])
([nil nil ((1942 . 1949) (#("T" 0 1 (fontified nil)) . 1942) (1942 . 1943) (#("Texture" 0 7 (fontified nil)) . -1942) (1942 . 1949) (#("T" 0 1 (face font-lock-type-face fontified t)) . -1942) (undo-tree-id72 . -1) 1943) nil (26014 22454 212766 0) 0 nil])
([nil nil ((1949 . 1951)) nil (26014 22454 212762 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1961 1965 nil nil nil nil #s(yas--field 2 1967 1973 nil nil nil nil #s(yas--field 3 1975 1980 nil nil nil nil #s(yas--field 4 1982 1987 nil nil nil nil #s(yas--exit 1988 nil))))) #s(yas--field 2 1967 1973 nil nil nil nil #s(yas--field 3 1975 1980 nil nil nil nil #s(yas--field 4 1982 1987 nil nil nil nil #s(yas--exit 1988 nil)))) #s(yas--field 3 1975 1980 nil nil nil nil #s(yas--field 4 1982 1987 nil nil nil nil #s(yas--exit 1988 nil))) #s(yas--field 4 1982 1987 nil nil nil nil #s(yas--exit 1988 nil))) #s(yas--exit 1988 nil) 110 nil #s(yas--field 1 1961 1965 nil nil nil nil #s(yas--field 2 1967 1973 nil nil nil nil #s(yas--field 3 1975 1980 nil nil nil nil #s(yas--field 4 1982 1987 nil nil nil nil #s(yas--exit 1988 nil))))) nil nil)) (1951 . 1988) (#("from_path(${1:path}, ${2:device}, ${3:queue}, ${4:label})$0" 0 59 (fontified nil)) . 1951) (1951 . 2010) (#("from_path(…)" 0 12 (fontified nil)) . -1951) (1951 . 1963)) nil (26014 22454 212760 0) 0 nil])
([nil nil ((apply yas--snippet-revive 1951 1988 #s(yas--snippet nil (#s(yas--field 1 1961 1965 nil nil nil nil #s(yas--field 2 1967 1973 nil nil nil nil #s(yas--field 3 1975 1980 nil nil nil nil #s(yas--field 4 1982 1987 nil nil nil nil #s(yas--exit 1988 nil))))) #s(yas--field 2 1967 1973 nil nil nil nil #s(yas--field 3 1975 1980 nil nil nil nil #s(yas--field 4 1982 1987 nil nil nil nil #s(yas--exit 1988 nil)))) #s(yas--field 3 1975 1980 nil nil nil nil #s(yas--field 4 1982 1987 nil nil nil nil #s(yas--exit 1988 nil))) #s(yas--field 4 1982 1987 nil nil nil nil #s(yas--exit 1988 nil))) #s(yas--exit 1988 nil) 110 nil #s(yas--field 1 1961 1965 nil nil nil nil #s(yas--field 2 1967 1973 nil nil nil nil #s(yas--field 3 1975 1980 nil nil nil nil #s(yas--field 4 1982 1987 nil nil nil nil #s(yas--exit 1988 nil))))) nil nil))) nil (26014 22454 212758 0) 0 nil])
([nil nil ((1988 . 1989)) nil (26014 22454 212757 0) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -1961) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (#("a" 0 1 (fontified t)) . -1962) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (#("t" 0 1 (fontified t)) . -1963) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (#("h" 0 1 (fontified t)) . -1964) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) 1965) nil (26014 22454 212755 0) 0 nil])
([nil nil ((1961 . 1967)) nil (26014 22454 212732 0) 0 nil])
([nil nil ((#("P" 0 1 (face font-lock-type-face fontified t)) . -1966) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) 1967) nil (26014 22454 212731 0) 0 nil])
([nil nil ((1966 . 1968)) nil (26014 22454 212725 0) 0 nil])
([nil nil ((1966 . 1970) (#("pa" 0 2 (fontified nil)) . 1966) (1966 . 1968) (#("path" 0 4 (fontified nil)) . -1966) (1966 . 1970) (#("pa" 0 2 (fontified t)) . -1966) (undo-tree-id43 . -2) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -2) (undo-tree-id47 . -2) (undo-tree-id48 . -2) (undo-tree-id49 . -2) (undo-tree-id50 . -2) 1968) nil (26014 22454 212723 0) 0 nil])
([nil nil ((1970 . 1973)) nil (26014 22454 212713 0) 0 nil])
([nil nil ((1972 . 1976) (#("P" 0 1 (fontified nil)) . 1972) (1972 . 1973) (#("Path" 0 4 (fontified nil)) . -1972) (1972 . 1976) (#("P" 0 1 (face font-lock-type-face fontified t)) . -1972) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) 1973) nil (26014 22454 212711 0) 0 nil])
([nil nil ((1976 . 1982)) nil (26014 22454 212702 0) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -1981) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) 1982) nil (26014 22454 212701 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1983 1992 nil nil nil t #s(yas--exit 1993 nil))) #s(yas--exit 1993 nil) 111 nil #s(yas--field 1 1983 1992 nil nil nil t #s(yas--exit 1993 nil)) nil nil)) (1978 . 1989) (#("from(${1:value})$0" 0 18 (fontified nil)) . 1978) (1978 . 1996) (#("fro" 0 3 (fontified nil)) . 1978) (1978 . 1981) (#("from(…) (as From)" 0 17 (fontified nil)) . -1978) (1978 . 1995) (#("fro" 0 3 (fontified t)) . -1978) (undo-tree-id13 . -3) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -2) (undo-tree-id18 . -2) (undo-tree-id19 . -2) (undo-tree-id20 . -3) (undo-tree-id21 . -3) (undo-tree-id22 . -3) (undo-tree-id23 . -3) (undo-tree-id24 . -3) (undo-tree-id25 . -3) (undo-tree-id26 . -3) (undo-tree-id27 . -3) (undo-tree-id28 . -3) (undo-tree-id29 . -3) (undo-tree-id30 . -3) (undo-tree-id31 . -3) (undo-tree-id32 . -3) 1981) nil (26014 22454 212694 0) 0 nil])
([nil nil ((#("value" 0 5 (fontified nil)) . 1984) (undo-tree-id12 . -5) (1983 . 1984)) nil (26014 22454 212668 0) 0 nil])
([nil nil ((1983 . 1992) (#("f" 0 1 (fontified nil)) . 1983) (undo-tree-id0 . -1) (1983 . 1984) (#("file_name" 0 9 (fontified nil)) . -1983) (undo-tree-id1 . -9) (1983 . 1992) (#("f" 0 1 (fontified t)) . -1983) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) 1984) nil (26014 22454 212661 0) 0 nil])
([nil nil ((apply yas--snippet-revive 1978 1993 #s(yas--snippet nil (#s(yas--field 1 1983 1992 nil nil nil t #s(yas--exit 1993 nil))) #s(yas--exit 1993 nil) 111 nil #s(yas--field 1 1983 1992 nil nil nil t #s(yas--exit 1993 nil)) nil nil))) nil (26014 22463 601581 0) 0 nil])
([nil nil ((1961 . 1962) (t 26014 22454 218831 476000)) nil (26014 22463 601577 0) 0 nil])
([nil nil ((#("label" 0 5 (fontified t)) . -2011) (undo-tree-id84 . -5) (undo-tree-id85 . -5) (undo-tree-id86 . -5) (undo-tree-id87 . -5) (undo-tree-id88 . -5) (undo-tree-id89 . -5) (undo-tree-id90 . -5) (undo-tree-id91 . -5) (undo-tree-id92 . -5) (undo-tree-id93 . -5) 2016 (t 26014 22463 607752 908000)) nil (26014 22499 463835 0) 0 nil])
([nil nil ((1928 . 1933)) nil (26014 22499 463815 0) 0 nil])
([nil nil ((1933 . 1944)) nil (26014 22499 463814 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1975 . 1976) (nil fontified nil 1975 . 1976) (nil fontified nil 1966 . 1975) (nil fontified nil 1965 . 1966) (nil fontified nil 1961 . 1965) (nil fontified nil 1959 . 1961) (nil fontified nil 1955 . 1959) (nil fontified nil 1953 . 1955) (nil fontified nil 1949 . 1953) (nil fontified nil 1947 . 1949) (nil fontified nil 1944 . 1947) (1944 . 1976)) nil (26014 22499 463813 0) 0 nil])
([nil nil ((1976 . 1977)) nil (26014 22499 463806 0) 0 nil])
([nil nil ((#("pub fn load_texture(
    file_name: &str,
    device: &wgpu::Device,
    queue: &wgpu::Queue,
) -> anyhow::Result<texture::Texture> {
    let path = std::path::Path::from(file_name);
    texture::Texture::from_path(&std::path::Path::from(file_name), device, queue, );
}" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 19 (face font-lock-function-name-face fontified t) 19 20 (face (rainbow-delimiters-depth-1-face) fontified t) 20 21 (fontified t) 21 25 (fontified t) 25 34 (face font-lock-variable-name-face fontified t) 34 36 (fontified t) 36 37 (face rust-ampersand-face fontified t) 37 40 (face font-lock-type-face fontified t) 40 46 (fontified t) 46 52 (face font-lock-variable-name-face fontified t) 52 54 (fontified t) 54 55 (face rust-ampersand-face fontified t) 55 59 (face font-lock-constant-face fontified t) 59 61 (fontified t) 61 67 (face font-lock-type-face fontified t) 67 73 (fontified t) 73 78 (face font-lock-variable-name-face fontified t) 78 80 (fontified t) 80 81 (face rust-ampersand-face fontified t) 81 85 (face font-lock-constant-face fontified t) 85 87 (fontified t) 87 92 (face font-lock-type-face fontified t) 92 94 (fontified t) 94 95 (face (rainbow-delimiters-depth-1-face) fontified t) 95 97 (fontified t) 97 98 (syntax-table (1) fontified t) 98 99 (fontified t) 99 105 (face font-lock-constant-face fontified t) 105 107 (fontified t) 107 113 (face font-lock-type-face fontified t) 113 114 (face (rainbow-delimiters-depth-1-face) fontified t) 114 121 (face font-lock-constant-face fontified t) 121 123 (fontified t) 123 130 (face font-lock-type-face fontified t) 130 131 (face (rainbow-delimiters-depth-1-face) fontified t) 131 132 (fontified t) 132 133 (face (rainbow-delimiters-depth-1-face) fontified t) 133 134 (fontified t) 134 138 (fontified t) 138 141 (face font-lock-keyword-face fontified t) 141 142 (fontified t) 142 146 (face font-lock-variable-name-face fontified t) 146 149 (fontified t) 149 152 (face font-lock-constant-face fontified t) 152 154 (fontified t) 154 158 (face font-lock-constant-face fontified t) 158 160 (fontified t) 160 164 (face font-lock-type-face fontified t) 164 166 (fontified t) 166 170 (fontified t) 170 171 (face (rainbow-delimiters-depth-2-face) fontified t) 171 180 (fontified t) 180 181 (face (rainbow-delimiters-depth-2-face) rear-nonsticky t fontified t) 181 182 (fontified t) 182 183 (fontified t) 183 187 (fontified t) 187 194 (face font-lock-constant-face fontified t) 194 196 (fontified t) 196 203 (face font-lock-type-face fontified t) 203 205 (fontified t) 205 214 (fontified t) 214 215 (face (rainbow-delimiters-depth-2-face) fontified t) 215 216 (face rust-ampersand-face fontified t) 216 219 (face font-lock-constant-face fontified t) 219 221 (fontified t) 221 225 (face font-lock-constant-face fontified t) 225 227 (fontified t) 227 231 (face font-lock-type-face fontified t) 231 233 (fontified t) 233 237 (fontified t) 237 238 (face (rainbow-delimiters-depth-3-face) fontified t) 238 247 (fontified t) 247 248 (face (rainbow-delimiters-depth-3-face) fontified t) 248 265 (fontified t) 265 266 (face (rainbow-delimiters-depth-2-face) fontified t) 266 267 (fontified t) 267 268 (fontified t) 268 269 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1795) (undo-tree-id190 . -269) (undo-tree-id191 . -5) (undo-tree-id192 . -4) (undo-tree-id193 . -183) (undo-tree-id194 . -187) (undo-tree-id195 . -266) (undo-tree-id196 . -238) (undo-tree-id197 . -265) (undo-tree-id198 . -265) (undo-tree-id199 . -265) (undo-tree-id200 . -265) (undo-tree-id201 . -265) (undo-tree-id202 . -265) (undo-tree-id203 . -265) (undo-tree-id204 . -265) (undo-tree-id205 . 87) (undo-tree-id206 . -216) (undo-tree-id207 . -149) (undo-tree-id208 . -182) (undo-tree-id209 . -182) (undo-tree-id210 . -182) (undo-tree-id211 . -182) (undo-tree-id212 . -182) (undo-tree-id213 . -182) (undo-tree-id214 . -182) (undo-tree-id215 . -182) (undo-tree-id216 . -182) (undo-tree-id217 . -182) (undo-tree-id218 . -182) (undo-tree-id219 . -182) (undo-tree-id220 . -182) (undo-tree-id221 . -182) (undo-tree-id222 . -182) (undo-tree-id223 . -182) (undo-tree-id224 . -182) (undo-tree-id225 . -182) (undo-tree-id226 . -182) (undo-tree-id227 . -182) (undo-tree-id228 . -182) (undo-tree-id229 . -182) (undo-tree-id230 . -182) (undo-tree-id231 . -182) (undo-tree-id232 . -182) (undo-tree-id233 . -182) (undo-tree-id234 . -182) (undo-tree-id235 . -182) (undo-tree-id236 . -182) (undo-tree-id237 . -182) (undo-tree-id238 . -182) (undo-tree-id239 . -182) (undo-tree-id240 . -182) (undo-tree-id241 . -182) (undo-tree-id242 . -182) (undo-tree-id243 . -182) (undo-tree-id244 . -182) (undo-tree-id245 . -182) (undo-tree-id246 . -182) (undo-tree-id247 . -182) (undo-tree-id248 . -182) (undo-tree-id249 . -182) (undo-tree-id250 . -182) (undo-tree-id251 . -182) (undo-tree-id252 . -269) (undo-tree-id253 . -269) (undo-tree-id254 . -269) (undo-tree-id255 . -269) (undo-tree-id256 . -269) (undo-tree-id257 . -269) (undo-tree-id258 . -269) (undo-tree-id259 . -202) (undo-tree-id260 . -200) (undo-tree-id261 . -150) (undo-tree-id262 . -148) (undo-tree-id263 . -107) (undo-tree-id264 . -81) (undo-tree-id265 . -80) (undo-tree-id266 . -51) (undo-tree-id267 . -29) (undo-tree-id268 . -6) (undo-tree-id269 . -5) (undo-tree-id270 . -4) (undo-tree-id271 . -149) (undo-tree-id272 . -269) (t 26014 22499 470022 568000)) nil (26014 22515 653949 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1794) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) 1795) nil (26014 22515 653847 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 5012 . 5013) (nil fontified nil 1794 . 5013) (1794 . 5013) (t 26014 22515 660444 272000)) nil (26014 22541 669797 0) 0 nil])
([nil nil ((#("async " 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t)) . -1798) (undo-tree-id273 . -6) (undo-tree-id274 . -6) (undo-tree-id275 . -6) (undo-tree-id276 . -6) (undo-tree-id277 . -6) (undo-tree-id278 . -6) (undo-tree-id279 . -6) (undo-tree-id280 . -6) (undo-tree-id281 . -6) (undo-tree-id282 . -6) (undo-tree-id283 . -6) (undo-tree-id284 . -6) 1804) nil (26014 22541 669792 0) 0 nil])
([nil nil ((#("pub fn load_model(
    file_name: &str,
    device: &wgpu::Device,
    queue: &wgpu::Queue,
    layout: &wgpu::BindGroupLayout,
) -> anyhow::Result<model::Model> {
    let obj_text = load_string(file_name).await?;
    let obj_cursor = Cursor::new(obj_text);
    let mut obj_reader = BufReader::new(obj_cursor);

    let (models, obj_materials) = tobj::load_obj_buf_async(
        &mut obj_reader,
        &tobj::LoadOptions {
            triangulate: true,
            single_index: true,
            ..Default::default()
        },
        |p| async move {
            let mat_text = load_string(&p).await.unwrap();
            tobj::load_mtl_buf(&mut BufReader::new(Cursor::new(mat_text)))
        },
    )
    .await?;

    let mut materials = Vec::new();
    for m in obj_materials? {
        let diffuse_texture = load_texture(&m.diffuse_texture, device, queue).await?;
        let bind_group = device.create_bind_group(&wgpu::BindGroupDescriptor {
            layout,
            entries: &[
                wgpu::BindGroupEntry {
                    binding: 0,
                    resource: wgpu::BindingResource::TextureView(&diffuse_texture.view),
                },
                wgpu::BindGroupEntry {
                    binding: 1,
                    resource: wgpu::BindingResource::Sampler(&diffuse_texture.sampler),
                },
            ],
            label: None,
        });

        materials.push(model::Material {
            name: m.name,
            diffuse_texture,
            bind_group,
        })
    }

    let meshes = models
        .into_iter()
        .map(|m| {
            let vertices = (0..m.mesh.positions.len() / 3)
                .map(|i| model::ModelVertex {
                    position: [
                        m.mesh.positions[i * 3],
                        m.mesh.positions[i * 3 + 1],
                        m.mesh.positions[i * 3 + 2],
                    ],
                    tex_coords: [m.mesh.texcoords[i * 2], m.mesh.texcoords[i * 2 + 1]],
                    normal: [
                        m.mesh.normals[i * 3],
                        m.mesh.normals[i * 3 + 1],
                        m.mesh.normals[i * 3 + 2],
                    ],
                })
                .collect::<Vec<_>>();

            let vertex_buffer = device.create_buffer_init(&wgpu::util::BufferInitDescriptor {
                label: Some(&format!(\"{:?} Vertex Buffer\", file_name)),
                contents: bytemuck::cast_slice(&vertices),
                usage: wgpu::BufferUsages::VERTEX,
            });
            let index_buffer = device.create_buffer_init(&wgpu::util::BufferInitDescriptor {
                label: Some(&format!(\"{:?} Index Buffer\", file_name)),
                contents: bytemuck::cast_slice(&m.mesh.indices),
                usage: wgpu::BufferUsages::INDEX,
            });

            model::Mesh {
                name: file_name.to_string(),
                vertex_buffer,
                index_buffer,
                num_elements: m.mesh.indices.len() as u32,
                material: m.mesh.material_id.unwrap_or(0),
            }
        })
        .collect::<Vec<_>>();

    Ok(model::Model { meshes, materials })
}


" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 17 (face font-lock-function-name-face fontified t) 17 18 (face (rainbow-delimiters-depth-1-face) fontified t) 18 19 (fontified t) 19 23 (fontified t) 23 32 (face font-lock-variable-name-face fontified t) 32 34 (fontified t) 34 35 (face rust-ampersand-face fontified t) 35 38 (face font-lock-type-face fontified t) 38 44 (fontified t) 44 50 (face font-lock-variable-name-face fontified t) 50 52 (fontified t) 52 53 (face rust-ampersand-face fontified t) 53 57 (face font-lock-constant-face fontified t) 57 59 (fontified t) 59 65 (face font-lock-type-face fontified t) 65 71 (fontified t) 71 76 (face font-lock-variable-name-face fontified t) 76 78 (fontified t) 78 79 (face rust-ampersand-face fontified t) 79 83 (face font-lock-constant-face fontified t) 83 85 (fontified t) 85 90 (face font-lock-type-face fontified t) 90 96 (fontified t) 96 102 (face font-lock-variable-name-face fontified t) 102 104 (fontified t) 104 105 (face rust-ampersand-face fontified t) 105 109 (face font-lock-constant-face fontified t) 109 111 (fontified t) 111 126 (face font-lock-type-face fontified t) 126 128 (fontified t) 128 129 (face (rainbow-delimiters-depth-1-face) fontified t) 129 131 (fontified t) 131 132 (fontified t syntax-table (1)) 132 133 (fontified t) 133 139 (face font-lock-constant-face fontified t) 139 141 (fontified t) 141 147 (face font-lock-type-face fontified t) 147 148 (face (rainbow-delimiters-depth-1-face) fontified t) 148 153 (face font-lock-constant-face fontified t) 153 155 (fontified t) 155 160 (face font-lock-type-face fontified t) 160 161 (face (rainbow-delimiters-depth-1-face) fontified t) 161 162 (fontified t) 162 163 (face (rainbow-delimiters-depth-1-face) fontified t) 163 168 (fontified t) 168 171 (face font-lock-keyword-face fontified t) 171 172 (fontified t) 172 180 (face font-lock-variable-name-face fontified t) 180 194 (fontified t) 194 195 (face (rainbow-delimiters-depth-2-face) fontified t) 195 204 (fontified t) 204 205 (face (rainbow-delimiters-depth-2-face) fontified t) 205 206 (fontified t) 206 211 (face font-lock-keyword-face fontified t) 211 212 (face rust-question-mark fontified t) 212 218 (fontified t) 218 221 (face font-lock-keyword-face fontified t) 221 222 (fontified t) 222 232 (face font-lock-variable-name-face fontified t) 232 235 (fontified t) 235 241 (face font-lock-type-face fontified t) 241 246 (fontified t) 246 247 (face (rainbow-delimiters-depth-2-face) fontified t) 247 255 (fontified t) 255 256 (face (rainbow-delimiters-depth-2-face) fontified t) 256 262 (fontified t) 262 265 (face font-lock-keyword-face fontified t) 265 266 (fontified t) 266 269 (face font-lock-keyword-face fontified t) 269 270 (fontified t) 270 280 (face font-lock-variable-name-face fontified t) 280 283 (fontified t) 283 292 (face font-lock-type-face fontified t) 292 297 (fontified t) 297 298 (face (rainbow-delimiters-depth-2-face) fontified t) 298 308 (fontified t) 308 309 (face (rainbow-delimiters-depth-2-face) fontified t) 309 316 (fontified t) 316 319 (face font-lock-keyword-face fontified t) 319 320 (fontified t) 320 321 (face (rainbow-delimiters-depth-2-face) fontified t) 321 342 (fontified t) 342 343 (face (rainbow-delimiters-depth-2-face) fontified t) 343 346 (fontified t) 346 350 (face font-lock-constant-face fontified t) 350 370 (fontified t) 370 371 (face (rainbow-delimiters-depth-2-face) fontified t) 371 380 (fontified t) 380 381 (face rust-ampersand-face fontified t) 381 384 (face font-lock-keyword-face fontified t) 384 405 (fontified t) 405 406 (face rust-ampersand-face fontified t) 406 410 (face font-lock-constant-face fontified t) 410 412 (fontified t) 412 423 (face font-lock-type-face fontified t) 423 424 (fontified t) 424 425 (face (rainbow-delimiters-depth-3-face) fontified t) 425 438 (fontified t) 438 449 (face font-lock-variable-name-face fontified t) 449 451 (fontified t) 451 455 (face font-lock-keyword-face fontified t) 455 469 (fontified t) 469 481 (face font-lock-variable-name-face fontified t) 481 483 (fontified t) 483 487 (face font-lock-keyword-face fontified t) 487 503 (fontified t) 503 510 (face font-lock-type-face fontified t) 510 519 (fontified t) 519 520 (face (rainbow-delimiters-depth-4-face) fontified t) 520 521 (face (rainbow-delimiters-depth-4-face) fontified t) 521 530 (fontified t) 530 531 (face (rainbow-delimiters-depth-3-face) fontified t) 531 545 (fontified t) 545 550 (face font-lock-keyword-face fontified t) 550 551 (fontified t) 551 555 (face font-lock-keyword-face fontified t) 555 556 (fontified t) 556 557 (face (rainbow-delimiters-depth-3-face) fontified t) 557 570 (fontified t) 570 573 (face font-lock-keyword-face fontified t) 573 574 (fontified t) 574 582 (face font-lock-variable-name-face fontified t) 582 596 (fontified t) 596 597 (face (rainbow-delimiters-depth-4-face) fontified t) 597 598 (face rust-ampersand-face fontified t) 598 599 (fontified t) 599 600 (face (rainbow-delimiters-depth-4-face) fontified t) 600 601 (fontified t) 601 606 (face font-lock-keyword-face fontified t) 606 613 (fontified t) 613 614 (face (rainbow-delimiters-depth-4-face) fontified t) 614 615 (face (rainbow-delimiters-depth-4-face) fontified t) 615 629 (fontified t) 629 633 (face font-lock-constant-face fontified t) 633 647 (fontified t) 647 648 (face (rainbow-delimiters-depth-4-face) fontified t) 648 649 (face rust-ampersand-face fontified t) 649 652 (face font-lock-keyword-face fontified t) 652 653 (fontified t) 653 662 (face font-lock-type-face fontified t) 662 667 (fontified t) 667 668 (face (rainbow-delimiters-depth-5-face) fontified t) 668 674 (face font-lock-type-face fontified t) 674 679 (fontified t) 679 680 (face (rainbow-delimiters-depth-6-face) fontified t) 680 688 (fontified t) 688 689 (face (rainbow-delimiters-depth-6-face) fontified t) 689 690 (face (rainbow-delimiters-depth-5-face) fontified t) 690 691 (face (rainbow-delimiters-depth-4-face) fontified t) 691 700 (fontified t) 700 701 (face (rainbow-delimiters-depth-3-face) fontified t) 701 707 (fontified t) 707 708 (face (rainbow-delimiters-depth-2-face) fontified t) 708 714 (fontified t) 714 719 (face font-lock-keyword-face fontified t) 719 720 (face rust-question-mark fontified t) 720 727 (fontified t) 727 730 (face font-lock-keyword-face fontified t) 730 731 (fontified t) 731 734 (face font-lock-keyword-face fontified t) 734 735 (fontified t) 735 744 (face font-lock-variable-name-face fontified t) 744 747 (fontified t) 747 750 (face font-lock-type-face fontified t) 750 755 (fontified t) 755 756 (face (rainbow-delimiters-depth-2-face) fontified t) 756 757 (face (rainbow-delimiters-depth-2-face) fontified t) 757 763 (fontified t) 763 766 (face font-lock-keyword-face fontified t) 766 767 (fontified t) 767 768 (face font-lock-variable-name-face fontified t) 768 769 (fontified t) 769 771 (face font-lock-keyword-face fontified t) 771 785 (fontified t) 785 786 (face rust-question-mark fontified t) 786 787 (fontified t) 787 788 (face (rainbow-delimiters-depth-2-face) fontified t) 788 797 (fontified t) 797 800 (face font-lock-keyword-face fontified t) 800 801 (fontified t) 801 816 (face font-lock-variable-name-face fontified t) 816 831 (fontified t) 831 832 (face (rainbow-delimiters-depth-3-face) fontified t) 832 833 (face rust-ampersand-face fontified t) 833 865 (fontified t) 865 866 (face (rainbow-delimiters-depth-3-face) fontified t) 866 867 (fontified t) 867 872 (face font-lock-keyword-face fontified t) 872 873 (face rust-question-mark fontified t) 873 883 (fontified t) 883 886 (face font-lock-keyword-face fontified t) 886 887 (fontified t) 887 897 (face font-lock-variable-name-face fontified t) 897 924 (fontified t) 924 925 (face (rainbow-delimiters-depth-3-face) fontified t) 925 926 (face rust-ampersand-face fontified t) 926 930 (face font-lock-constant-face fontified t) 930 932 (fontified t) 932 951 (face font-lock-type-face fontified t) 951 952 (fontified t) 952 953 (face (rainbow-delimiters-depth-4-face) fontified t) 953 986 (fontified t) 986 993 (face font-lock-variable-name-face fontified t) 993 995 (fontified t) 995 996 (face rust-ampersand-face fontified t) 996 997 (face (rainbow-delimiters-depth-5-face) fontified t) 997 1014 (fontified t) 1014 1018 (face font-lock-constant-face fontified t) 1018 1020 (fontified t) 1020 1034 (face font-lock-type-face fontified t) 1034 1035 (fontified t) 1035 1036 (face (rainbow-delimiters-depth-6-face) fontified t) 1036 1057 (fontified t) 1057 1064 (face font-lock-variable-name-face fontified t) 1064 1089 (fontified t) 1089 1097 (face font-lock-variable-name-face fontified t) 1097 1099 (fontified t) 1099 1103 (face font-lock-constant-face fontified t) 1103 1105 (fontified t) 1105 1120 (face font-lock-type-face fontified t) 1120 1122 (fontified t) 1122 1133 (face font-lock-type-face fontified t) 1133 1134 (face (rainbow-delimiters-depth-7-face) fontified t) 1134 1135 (face rust-ampersand-face fontified t) 1135 1155 (fontified t) 1155 1156 (face (rainbow-delimiters-depth-7-face) fontified t) 1156 1174 (fontified t) 1174 1175 (face (rainbow-delimiters-depth-6-face) fontified t) 1175 1193 (fontified t) 1193 1197 (face font-lock-constant-face fontified t) 1197 1199 (fontified t) 1199 1213 (face font-lock-type-face fontified t) 1213 1214 (fontified t) 1214 1215 (face (rainbow-delimiters-depth-6-face) fontified t) 1215 1236 (fontified t) 1236 1243 (face font-lock-variable-name-face fontified t) 1243 1268 (fontified t) 1268 1276 (face font-lock-variable-name-face fontified t) 1276 1278 (fontified t) 1278 1282 (face font-lock-constant-face fontified t) 1282 1284 (fontified t) 1284 1299 (face font-lock-type-face fontified t) 1299 1301 (fontified t) 1301 1308 (face font-lock-type-face fontified t) 1308 1309 (face (rainbow-delimiters-depth-7-face) fontified t) 1309 1310 (face rust-ampersand-face fontified t) 1310 1333 (fontified t) 1333 1334 (face (rainbow-delimiters-depth-7-face) fontified t) 1334 1352 (fontified t) 1352 1353 (face (rainbow-delimiters-depth-6-face) fontified t) 1353 1367 (fontified t) 1367 1368 (face (rainbow-delimiters-depth-5-face) fontified t) 1368 1382 (fontified t) 1382 1387 (face font-lock-variable-name-face fontified t) 1387 1389 (fontified t) 1389 1393 (face font-lock-type-face fontified t) 1393 1403 (fontified t) 1403 1404 (face (rainbow-delimiters-depth-4-face) fontified t) 1404 1405 (face (rainbow-delimiters-depth-3-face) fontified t) 1405 1430 (fontified t) 1430 1431 (face (rainbow-delimiters-depth-3-face) fontified t) 1431 1436 (face font-lock-constant-face fontified t) 1436 1438 (fontified t) 1438 1446 (face font-lock-type-face fontified t) 1446 1447 (fontified t) 1447 1448 (face (rainbow-delimiters-depth-4-face) fontified t) 1448 1461 (fontified t) 1461 1465 (face font-lock-variable-name-face fontified t) 1465 1494 (fontified t) 1494 1504 (fontified t) 1504 1519 (fontified t) 1519 1528 (fontified t) 1528 1536 (fontified t) 1536 1537 (face (rainbow-delimiters-depth-4-face) fontified t) 1537 1538 (face (rainbow-delimiters-depth-3-face) fontified t) 1538 1539 (fontified t) 1539 1543 (fontified t) 1543 1544 (face (rainbow-delimiters-depth-2-face) fontified t) 1544 1545 (fontified t) 1545 1550 (fontified t) 1550 1553 (face font-lock-keyword-face fontified t) 1553 1554 (fontified t) 1554 1560 (face font-lock-variable-name-face fontified t) 1560 1588 (fontified t) 1588 1589 (face (rainbow-delimiters-depth-2-face) fontified t) 1589 1590 (face (rainbow-delimiters-depth-2-face) fontified t) 1590 1591 (fontified t) 1591 1603 (fontified t) 1603 1604 (face (rainbow-delimiters-depth-2-face) fontified t) 1604 1608 (fontified t) 1608 1609 (face (rainbow-delimiters-depth-3-face) fontified t) 1609 1610 (fontified t) 1610 1622 (fontified t) 1622 1625 (face font-lock-keyword-face fontified t) 1625 1626 (fontified t) 1626 1634 (face font-lock-variable-name-face fontified t) 1634 1637 (fontified t) 1637 1638 (face (rainbow-delimiters-depth-4-face) fontified t) 1638 1661 (fontified t) 1661 1662 (face (rainbow-delimiters-depth-5-face) fontified t) 1662 1663 (face (rainbow-delimiters-depth-5-face) fontified t) 1663 1667 (fontified t) 1667 1668 (face (rainbow-delimiters-depth-4-face) fontified t) 1668 1689 (fontified t) 1689 1690 (face (rainbow-delimiters-depth-4-face) fontified t) 1690 1694 (fontified t) 1694 1699 (face font-lock-constant-face fontified t) 1699 1701 (fontified t) 1701 1712 (face font-lock-type-face fontified t) 1712 1713 (fontified t) 1713 1714 (face (rainbow-delimiters-depth-5-face) fontified t) 1714 1735 (fontified t) 1735 1743 (face font-lock-variable-name-face fontified t) 1743 1745 (fontified t) 1745 1746 (face (rainbow-delimiters-depth-6-face) fontified t) 1746 1787 (fontified t) 1787 1788 (face (rainbow-delimiters-depth-7-face) fontified t) 1788 1793 (fontified t) 1793 1794 (face (rainbow-delimiters-depth-7-face) fontified t) 1794 1836 (fontified t) 1836 1837 (face (rainbow-delimiters-depth-7-face) fontified t) 1837 1846 (fontified t) 1846 1847 (face (rainbow-delimiters-depth-7-face) fontified t) 1847 1889 (fontified t) 1889 1890 (face (rainbow-delimiters-depth-7-face) fontified t) 1890 1899 (fontified t) 1899 1900 (face (rainbow-delimiters-depth-7-face) fontified t) 1900 1922 (fontified t) 1922 1923 (face (rainbow-delimiters-depth-6-face) fontified t) 1923 1925 (fontified t) 1925 1945 (fontified t) 1945 1955 (face font-lock-variable-name-face fontified t) 1955 1957 (fontified t) 1957 1958 (face (rainbow-delimiters-depth-6-face) fontified t) 1958 1974 (fontified t) 1974 1975 (face (rainbow-delimiters-depth-7-face) fontified t) 1975 1980 (fontified t) 1980 1981 (face (rainbow-delimiters-depth-7-face) fontified t) 1981 1999 (fontified t) 1999 2000 (face (rainbow-delimiters-depth-7-face) fontified t) 2000 2009 (fontified t) 2009 2010 (face (rainbow-delimiters-depth-7-face) fontified t) 2010 2011 (face (rainbow-delimiters-depth-6-face) fontified t) 2011 2013 (fontified t) 2013 2033 (fontified t) 2033 2039 (face font-lock-variable-name-face fontified t) 2039 2041 (fontified t) 2041 2042 (face (rainbow-delimiters-depth-6-face) fontified t) 2042 2043 (fontified t) 2043 2081 (fontified t) 2081 2082 (face (rainbow-delimiters-depth-7-face) fontified t) 2082 2087 (fontified t) 2087 2088 (face (rainbow-delimiters-depth-7-face) fontified t) 2088 2090 (fontified t) 2090 2128 (fontified t) 2128 2129 (face (rainbow-delimiters-depth-7-face) fontified t) 2129 2138 (fontified t) 2138 2139 (face (rainbow-delimiters-depth-7-face) fontified t) 2139 2141 (fontified t) 2141 2179 (fontified t) 2179 2180 (face (rainbow-delimiters-depth-7-face) fontified t) 2180 2189 (fontified t) 2189 2190 (face (rainbow-delimiters-depth-7-face) fontified t) 2190 2192 (fontified t) 2192 2212 (fontified t) 2212 2213 (face (rainbow-delimiters-depth-6-face) fontified t) 2213 2215 (fontified t) 2215 2231 (fontified t) 2231 2232 (face (rainbow-delimiters-depth-5-face) fontified t) 2232 2233 (face (rainbow-delimiters-depth-4-face) fontified t) 2233 2260 (fontified t) 2260 2261 (face (rainbow-delimiters-depth-4-face) fontified t) 2261 2264 (face font-lock-type-face fontified t) 2264 2265 (face (rainbow-delimiters-depth-5-face) fontified t) 2265 2266 (fontified t) 2266 2267 (face (rainbow-delimiters-depth-5-face) fontified t) 2267 2268 (face (rainbow-delimiters-depth-4-face) fontified t) 2268 2269 (face (rainbow-delimiters-depth-4-face) fontified t) 2269 2270 (face (rainbow-delimiters-depth-4-face) fontified t) 2270 2285 (fontified t) 2285 2288 (face font-lock-keyword-face fontified t) 2288 2289 (fontified t) 2289 2302 (face font-lock-variable-name-face fontified t) 2302 2330 (fontified t) 2330 2331 (face (rainbow-delimiters-depth-4-face) fontified t) 2331 2332 (face rust-ampersand-face fontified t) 2332 2336 (face font-lock-constant-face fontified t) 2336 2338 (fontified t) 2338 2342 (face font-lock-constant-face fontified t) 2342 2344 (fontified t) 2344 2364 (face font-lock-type-face fontified t) 2364 2365 (fontified t) 2365 2366 (face (rainbow-delimiters-depth-5-face) fontified t) 2366 2383 (fontified t) 2383 2388 (face font-lock-variable-name-face fontified t) 2388 2390 (fontified t) 2390 2394 (face font-lock-type-face fontified t) 2394 2395 (face (rainbow-delimiters-depth-6-face) fontified t) 2395 2396 (face rust-ampersand-face fontified t) 2396 2403 (face rust-builtin-formatting-macro fontified t) 2403 2404 (face (rainbow-delimiters-depth-7-face) fontified t) 2404 2405 (face font-lock-string-face fontified t) 2405 2409 (face rust-string-interpolation fontified t) 2409 2424 (face font-lock-string-face fontified t) 2424 2435 (fontified t) 2435 2436 (face (rainbow-delimiters-depth-7-face) fontified t) 2436 2437 (face (rainbow-delimiters-depth-6-face) fontified t) 2437 2455 (fontified t) 2455 2463 (face font-lock-variable-name-face fontified t) 2463 2465 (fontified t) 2465 2473 (face font-lock-constant-face fontified t) 2473 2485 (fontified t) 2485 2486 (face (rainbow-delimiters-depth-6-face) fontified t) 2486 2487 (face rust-ampersand-face fontified t) 2487 2495 (fontified t) 2495 2496 (face (rainbow-delimiters-depth-6-face) fontified t) 2496 2514 (fontified t) 2514 2519 (face font-lock-variable-name-face fontified t) 2519 2521 (fontified t) 2521 2525 (face font-lock-constant-face fontified t) 2525 2527 (fontified t) 2527 2539 (face font-lock-type-face fontified t) 2539 2541 (fontified t) 2541 2547 (face font-lock-type-face fontified t) 2547 2561 (fontified t) 2561 2562 (face (rainbow-delimiters-depth-5-face) fontified t) 2562 2563 (face (rainbow-delimiters-depth-4-face) fontified t) 2563 2577 (fontified t) 2577 2580 (face font-lock-keyword-face fontified t) 2580 2581 (fontified t) 2581 2593 (face font-lock-variable-name-face fontified t) 2593 2621 (fontified t) 2621 2622 (face (rainbow-delimiters-depth-4-face) fontified t) 2622 2623 (face rust-ampersand-face fontified t) 2623 2627 (face font-lock-constant-face fontified t) 2627 2629 (fontified t) 2629 2633 (face font-lock-constant-face fontified t) 2633 2635 (fontified t) 2635 2655 (face font-lock-type-face fontified t) 2655 2656 (fontified t) 2656 2657 (face (rainbow-delimiters-depth-5-face) fontified t) 2657 2674 (fontified t) 2674 2679 (face font-lock-variable-name-face fontified t) 2679 2681 (fontified t) 2681 2685 (face font-lock-type-face fontified t) 2685 2686 (face (rainbow-delimiters-depth-6-face) fontified t) 2686 2687 (face rust-ampersand-face fontified t) 2687 2694 (face rust-builtin-formatting-macro fontified t) 2694 2695 (face (rainbow-delimiters-depth-7-face) fontified t) 2695 2696 (face font-lock-string-face fontified t) 2696 2700 (face rust-string-interpolation fontified t) 2700 2714 (face font-lock-string-face fontified t) 2714 2725 (fontified t) 2725 2726 (face (rainbow-delimiters-depth-7-face) fontified t) 2726 2727 (face (rainbow-delimiters-depth-6-face) fontified t) 2727 2745 (fontified t) 2745 2753 (face font-lock-variable-name-face fontified t) 2753 2755 (fontified t) 2755 2763 (face font-lock-constant-face fontified t) 2763 2775 (fontified t) 2775 2776 (face (rainbow-delimiters-depth-6-face) fontified t) 2776 2777 (face rust-ampersand-face fontified t) 2777 2791 (fontified t) 2791 2792 (face (rainbow-delimiters-depth-6-face) fontified t) 2792 2810 (fontified t) 2810 2815 (face font-lock-variable-name-face fontified t) 2815 2817 (fontified t) 2817 2821 (face font-lock-constant-face fontified t) 2821 2823 (fontified t) 2823 2835 (face font-lock-type-face fontified t) 2835 2837 (fontified t) 2837 2842 (face font-lock-type-face fontified t) 2842 2856 (fontified t) 2856 2857 (face (rainbow-delimiters-depth-5-face) fontified t) 2857 2858 (face (rainbow-delimiters-depth-4-face) fontified t) 2858 2873 (fontified t) 2873 2878 (face font-lock-constant-face fontified t) 2878 2880 (fontified t) 2880 2884 (face font-lock-type-face fontified t) 2884 2885 (fontified t) 2885 2886 (face (rainbow-delimiters-depth-4-face) fontified t) 2886 2903 (fontified t) 2903 2907 (face font-lock-variable-name-face fontified t) 2907 2928 (fontified t) 2928 2929 (face (rainbow-delimiters-depth-5-face) fontified t) 2929 2930 (face (rainbow-delimiters-depth-5-face) fontified t) 2930 3009 (fontified t) 3009 3021 (face font-lock-variable-name-face fontified t) 3021 3028 (fontified t) 3028 3041 (fontified t) 3041 3042 (fontified t face (rainbow-delimiters-depth-5-face)) 3042 3043 (fontified t face (rainbow-delimiters-depth-5-face)) 3043 3044 (fontified t) 3044 3046 (fontified t face font-lock-keyword-face) 3046 3047 (fontified t) 3047 3050 (fontified t face font-lock-type-face) 3050 3052 (fontified t) 3052 3068 (fontified t) 3068 3076 (face font-lock-variable-name-face fontified t) 3076 3106 (fontified t) 3106 3107 (face (rainbow-delimiters-depth-5-face) fontified t) 3107 3108 (fontified t) 3108 3109 (face (rainbow-delimiters-depth-5-face) fontified t) 3109 3123 (fontified t) 3123 3124 (face (rainbow-delimiters-depth-4-face) fontified t) 3124 3133 (fontified t) 3133 3134 (face (rainbow-delimiters-depth-3-face) fontified t) 3134 3135 (face (rainbow-delimiters-depth-2-face) fontified t) 3135 3154 (fontified t) 3154 3155 (face (rainbow-delimiters-depth-2-face) fontified t) 3155 3158 (face font-lock-type-face fontified t) 3158 3159 (face (rainbow-delimiters-depth-3-face) fontified t) 3159 3160 (fontified t) 3160 3161 (face (rainbow-delimiters-depth-3-face) fontified t) 3161 3162 (face (rainbow-delimiters-depth-2-face) fontified t) 3162 3163 (face (rainbow-delimiters-depth-2-face) fontified t) 3163 3164 (face (rainbow-delimiters-depth-2-face) fontified t) 3164 3171 (fontified t) 3171 3173 (face font-lock-type-face fontified t) 3173 3174 (face (rainbow-delimiters-depth-2-face) fontified t) 3174 3179 (face font-lock-constant-face fontified t) 3179 3181 (fontified t) 3181 3186 (face font-lock-type-face fontified t) 3186 3187 (fontified t) 3187 3188 (face (rainbow-delimiters-depth-3-face) fontified t) 3188 3207 (fontified t) 3207 3208 (face (rainbow-delimiters-depth-3-face) fontified t) 3208 3209 (face (rainbow-delimiters-depth-2-face) fontified t) 3209 3210 (fontified t) 3210 3211 (face (rainbow-delimiters-depth-1-face) fontified t) 3211 3212 (fontified t) 3212 3213 (fontified t rear-nonsticky t) 3213 3214 (fontified t rear-nonsticky t)) . -1794) (undo-tree-id285 . -3214) (undo-tree-id286 . -2234) (undo-tree-id287 . 1) (undo-tree-id288 . -4) (undo-tree-id289 . -4) (undo-tree-id290 . -4) (undo-tree-id291 . -4) (undo-tree-id292 . -4) (undo-tree-id293 . -4) (undo-tree-id294 . -4) (undo-tree-id295 . -4) (undo-tree-id296 . -4) (undo-tree-id297 . -4) (undo-tree-id298 . -3214) (undo-tree-id299 . -4) (undo-tree-id300 . -4) (undo-tree-id301 . -4) (undo-tree-id302 . -4) (undo-tree-id303 . -4) (undo-tree-id304 . -4) (undo-tree-id305 . -4) (undo-tree-id306 . -4) (undo-tree-id307 . -4) (undo-tree-id308 . -4) (undo-tree-id309 . -4) (undo-tree-id310 . -4) (undo-tree-id311 . -4) (undo-tree-id312 . -4) (undo-tree-id313 . -4) (undo-tree-id314 . -4) (undo-tree-id315 . -4) (undo-tree-id316 . -4) (undo-tree-id317 . -4) (undo-tree-id318 . -4) (undo-tree-id319 . -4) (undo-tree-id320 . -4) (undo-tree-id321 . -4) (undo-tree-id322 . -4) (undo-tree-id323 . -202) (undo-tree-id324 . -202) (undo-tree-id325 . -202) (undo-tree-id326 . -202) (undo-tree-id327 . -202) (undo-tree-id328 . -202) (undo-tree-id329 . -202) (undo-tree-id330 . -202) (undo-tree-id331 . -202) (undo-tree-id332 . -202) (undo-tree-id333 . -202) (undo-tree-id334 . -202) (undo-tree-id335 . -202) (undo-tree-id336 . -202) (undo-tree-id337 . -202) (undo-tree-id338 . -202) (undo-tree-id339 . -202) (undo-tree-id340 . -202) (undo-tree-id341 . -202) (undo-tree-id342 . -202) (undo-tree-id343 . -202) (undo-tree-id344 . -202) (undo-tree-id345 . -192) (undo-tree-id346 . -192) (undo-tree-id347 . -192) (undo-tree-id348 . -192) (undo-tree-id349 . -192) (undo-tree-id350 . -192) (undo-tree-id351 . -192) (undo-tree-id352 . -192) (undo-tree-id353 . -192) (undo-tree-id354 . -192) (undo-tree-id355 . -192) (undo-tree-id356 . -192) (undo-tree-id357 . -192) (undo-tree-id358 . -192) (undo-tree-id359 . -192) (undo-tree-id360 . -192) (undo-tree-id361 . -192) (undo-tree-id362 . -192) (undo-tree-id363 . -192) (undo-tree-id364 . -192) (undo-tree-id365 . -192) (undo-tree-id366 . -192) (undo-tree-id367 . -192) (undo-tree-id368 . -192) (undo-tree-id369 . -192) (undo-tree-id370 . -192) (undo-tree-id371 . -192) (undo-tree-id372 . -192) (undo-tree-id373 . -192) (undo-tree-id374 . -192) (undo-tree-id375 . -237) (undo-tree-id376 . -237) (undo-tree-id377 . -237) (undo-tree-id378 . -237) (undo-tree-id379 . -237) (undo-tree-id380 . -237) (undo-tree-id381 . -237) (undo-tree-id382 . -237) (undo-tree-id383 . -237) (undo-tree-id384 . -237) (undo-tree-id385 . -237) (undo-tree-id386 . -237) (undo-tree-id387 . -237) (undo-tree-id388 . -237) (undo-tree-id389 . -237) (undo-tree-id390 . -237) (undo-tree-id391 . -237) (undo-tree-id392 . -237) (undo-tree-id393 . -237) (undo-tree-id394 . -237) (undo-tree-id395 . -237) (undo-tree-id396 . -237) (undo-tree-id397 . -237) (undo-tree-id398 . -237) (undo-tree-id399 . -237) (undo-tree-id400 . -237) (undo-tree-id401 . -237) (undo-tree-id402 . -237) (undo-tree-id403 . -237) (undo-tree-id404 . -237) (undo-tree-id405 . -237) (undo-tree-id406 . -237) (undo-tree-id407 . -237) (undo-tree-id408 . -237) (undo-tree-id409 . -237) (undo-tree-id410 . -237) (undo-tree-id411 . -237) (undo-tree-id412 . -237) (undo-tree-id413 . -237) (undo-tree-id414 . -237) (undo-tree-id415 . -237) (undo-tree-id416 . -237) (undo-tree-id417 . -237) (undo-tree-id418 . -237) (undo-tree-id419 . -237) (undo-tree-id420 . -237) (undo-tree-id421 . -237) (undo-tree-id422 . -237) (undo-tree-id423 . -237) (undo-tree-id424 . -237) (undo-tree-id425 . -237) (undo-tree-id426 . -237) (undo-tree-id427 . -237) (undo-tree-id428 . -237) (undo-tree-id429 . -237) (undo-tree-id430 . -237) (undo-tree-id431 . -237) (undo-tree-id432 . -237) (undo-tree-id433 . -237) (undo-tree-id434 . -237) (undo-tree-id435 . -237) (undo-tree-id436 . -237) (undo-tree-id437 . -237) (undo-tree-id438 . -237) (undo-tree-id439 . -237) (undo-tree-id440 . -237) (undo-tree-id441 . -237) (undo-tree-id442 . -237) (undo-tree-id443 . -237) (undo-tree-id444 . -237) (undo-tree-id445 . -237) (undo-tree-id446 . -237) (undo-tree-id447 . -237) (undo-tree-id448 . -237) (undo-tree-id449 . -237) (undo-tree-id450 . -237) (undo-tree-id451 . -237) (undo-tree-id452 . -237) (undo-tree-id453 . -237) (undo-tree-id454 . -237) (undo-tree-id455 . -237) (undo-tree-id456 . -237) (undo-tree-id457 . -258) (undo-tree-id458 . -311) (undo-tree-id459 . -312) (undo-tree-id460 . -312) (undo-tree-id461 . -312) (undo-tree-id462 . -312) (undo-tree-id463 . -312) (undo-tree-id464 . -312) (undo-tree-id465 . -312) (undo-tree-id466 . -372) (undo-tree-id467 . -397) (undo-tree-id468 . -426) (undo-tree-id469 . -457) (undo-tree-id470 . -522) (undo-tree-id471 . -533) (undo-tree-id472 . -558) (undo-tree-id473 . -617) (undo-tree-id474 . -692) (undo-tree-id475 . -703) (undo-tree-id476 . -709) (undo-tree-id477 . -759) (undo-tree-id478 . -954) (undo-tree-id479 . -998) (undo-tree-id480 . -1037) (undo-tree-id481 . -1158) (undo-tree-id482 . -1177) (undo-tree-id483 . -1248) (undo-tree-id484 . -1370) (undo-tree-id485 . -1449) (undo-tree-id486 . -1504) (undo-tree-id487 . -1546) (undo-tree-id488 . -1591) (undo-tree-id489 . -1715) (undo-tree-id490 . -1796) (undo-tree-id491 . -1902) (undo-tree-id492 . -2043) (undo-tree-id493 . -2192) (undo-tree-id494 . -2215) (undo-tree-id495 . -2234) (undo-tree-id496 . -2273) (undo-tree-id497 . -2273) (undo-tree-id498 . -2273) (undo-tree-id499 . -2273) (undo-tree-id500 . -2273) (undo-tree-id501 . -2273) (undo-tree-id502 . -2273) (undo-tree-id503 . -2273) (undo-tree-id504 . -2273) (undo-tree-id505 . -2273) (undo-tree-id506 . -2273) (undo-tree-id507 . -2273) (undo-tree-id508 . -2273) (undo-tree-id509 . -2273) (undo-tree-id510 . -2273) (undo-tree-id511 . -2273) (undo-tree-id512 . -2273) (undo-tree-id513 . -2273) (undo-tree-id514 . -2273) (undo-tree-id515 . -2273) (undo-tree-id516 . -2273) (undo-tree-id517 . -2273) (undo-tree-id518 . -2273) (undo-tree-id519 . -2272) (undo-tree-id520 . -2215) (undo-tree-id521 . -2141) (undo-tree-id522 . -2090) (undo-tree-id523 . -2043) (undo-tree-id524 . -2013) (undo-tree-id525 . -1849) (undo-tree-id526 . -1796) (undo-tree-id527 . -1747) (undo-tree-id528 . -1715) (undo-tree-id529 . -1715) (undo-tree-id530 . -1715) (undo-tree-id531 . -1669) (undo-tree-id532 . -1591) (undo-tree-id533 . -1545) (undo-tree-id534 . -1528) (undo-tree-id535 . -1475) (undo-tree-id536 . -1449) (undo-tree-id537 . -1408) (undo-tree-id538 . -1408) (undo-tree-id539 . -1408) (undo-tree-id540 . -1408) (undo-tree-id541 . -1408) (undo-tree-id542 . -1408) (undo-tree-id543 . -1408) (undo-tree-id544 . -1408) (undo-tree-id545 . -1408) (undo-tree-id546 . -1408) (undo-tree-id547 . -1408) (undo-tree-id548 . -1408) (undo-tree-id549 . -1408) (undo-tree-id550 . -20) (undo-tree-id551 . -169) (undo-tree-id552 . -500) (undo-tree-id553 . -807) (undo-tree-id554 . -1200) (undo-tree-id555 . -1407) (undo-tree-id556 . -1504) (undo-tree-id557 . -1570) (undo-tree-id558 . -1796) (undo-tree-id559 . -2141) (undo-tree-id560 . -2498) (undo-tree-id561 . -2861) (undo-tree-id562 . -3136) (undo-tree-id563 . -3214) (undo-tree-id564 . -3214) (undo-tree-id565 . -3214) (undo-tree-id566 . -3214) (undo-tree-id567 . -3214) (undo-tree-id568 . -3214) (undo-tree-id569 . -3214) (undo-tree-id570 . -3214) (undo-tree-id571 . -3214) (undo-tree-id572 . -3214) (undo-tree-id573 . -3214) 5008 (t 26014 22541 676179 318000)) nil (26014 22596 888310 0) 0 nil])
([nil nil ((1794 . 1808) (t 26014 22596 896820 539000)) nil (26014 22872 623024 0) 0 nil])
([nil nil ((1808 . 1811)) nil (26014 22872 623023 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . 1811) (1811 . 1815) (1810 . 1812)) nil (26014 22872 623021 0) 0 nil])
([nil nil ((1813 . 1816)) nil (26014 22872 623020 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . 1817) (1817 . 1821) (1817 . 1818) (#("    " 0 4 (fontified nil)) . 1816) (1816 . 1820) (1815 . 1817)) nil (26014 22872 623019 0) 0 nil])
([nil nil ((1817 . 1821)) nil (26014 22872 623016 0) 0 nil])
([nil nil ((1816 . 1820)) nil (26014 22872 623015 0) 0 nil])
([nil nil ((1820 . 1822)) nil (26014 22872 623014 0) 0 nil])
([nil nil ((apply yas--snippet-revive 1820 1824 #s(yas--snippet nil nil #s(yas--exit 1824 nil) 112 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1824 nil) 112 nil nil nil nil)) (1820 . 1824) (#("use $0" 0 6 (fontified nil)) . 1820) (1820 . 1826) (#("us" 0 2 (fontified nil)) . 1820) (1820 . 1822) (#("use" 0 3 (fontified nil)) . -1820) (1820 . 1823) (#("us" 0 2 (fontified t)) . -1820) (undo-tree-id670 . -2) 1822) nil (26014 22872 623013 0) 0 nil])
([nil nil ((1824 . 1825)) nil (26014 22872 623008 0) 0 nil])
([nil nil ((#("o" 0 1 (face font-lock-constant-face fontified t)) . -1824) (undo-tree-id669 . -1) 1825) nil (26014 22872 623007 0) 0 nil])
([nil nil ((1824 . 1826)) nil (26014 22872 623005 0) 0 nil])
([nil nil ((1824 . 1828) (#("to" 0 2 (fontified nil)) . 1824) (1824 . 1826) (#("tobj" 0 4 (fontified nil)) . -1824) (1824 . 1828) (#("to" 0 2 (face font-lock-constant-face fontified t)) . -1824) (undo-tree-id668 . -2) 1826) nil (26014 22872 623003 0) 0 nil])
([nil nil ((1828 . 1829)) nil (26014 22872 623000 0) 0 nil])
([nil nil ((1831 . 1835) (#("    " 0 4 (fontified nil)) . 1830) (undo-tree-id667 . -4) (1829 . 1835)) nil (26014 22872 622998 0) 0 nil])
([nil nil ((1835 . 1845)) nil (26014 22872 622996 0) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -1843) (undo-tree-id665 . -1) (#(" " 0 1 (fontified t)) . -1844) (undo-tree-id666 . -1) 1845) nil (26014 22872 622994 0) 0 nil])
([nil nil ((1843 . 1845)) nil (26014 22872 622991 0) 0 nil])
([nil nil ((1845 . 1849)) nil (26014 22872 622990 0) 0 nil])
([nil nil ((1845 . 1849) (#("tobj" 0 4 (fontified nil)) . 1845) (1845 . 1849) (#("tobj" 0 4 (fontified t)) . -1845) (undo-tree-id664 . -4) 1849) nil (26014 22872 622989 0) 0 nil])
([nil nil ((1849 . 1853)) nil (26014 22872 622986 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1860 1869 nil nil nil nil #s(yas--field 2 1871 1883 nil nil nil nil #s(yas--exit 1884 nil))) #s(yas--field 2 1871 1883 nil nil nil nil #s(yas--exit 1884 nil))) #s(yas--exit 1884 nil) 113 nil #s(yas--field 1 1860 1869 nil nil nil nil #s(yas--field 2 1871 1883 nil nil nil nil #s(yas--exit 1884 nil))) nil nil)) (1851 . 1884) (#("load_obj(${1:file_name}, ${2:load_options})$0" 0 45 (fontified nil)) . 1851) (1851 . 1896) (#("lo" 0 2 (fontified nil)) . 1851) (1851 . 1853) (#("load_obj(…)" 0 11 (fontified nil)) . -1851) (1851 . 1862) (#("lo" 0 2 (fontified t)) . -1851) (undo-tree-id663 . -2) 1853) nil (26014 22872 622984 0) 0 nil])
([nil nil ((apply yas--snippet-revive 1851 1884 #s(yas--snippet nil (#s(yas--field 1 1860 1869 nil nil nil nil #s(yas--field 2 1871 1883 nil nil nil nil #s(yas--exit 1884 nil))) #s(yas--field 2 1871 1883 nil nil nil nil #s(yas--exit 1884 nil))) #s(yas--exit 1884 nil) 113 nil #s(yas--field 1 1860 1869 nil nil nil nil #s(yas--field 2 1871 1883 nil nil nil nil #s(yas--exit 1884 nil))) nil nil))) nil (26014 22872 622979 0) 0 nil])
([nil nil ((1811 . 1815)) nil (26014 22872 622978 0) 0 nil])
([nil nil ((1815 . 1825)) nil (26014 22872 622977 0) 0 nil])
([nil nil ((1825 . 1830)) nil (26014 22872 622976 0) 0 nil])
([nil nil ((#("P" 0 1 (face font-lock-type-face fontified t)) . -1826) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -1827) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1828) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (#("h" 0 1 (face font-lock-type-face fontified t)) . -1829) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) 1830) nil (26014 22872 622973 0) 0 nil])
([nil nil ((1826 . 1831)) nil (26014 22872 622918 0) 0 nil])
([nil nil ((#("options" 0 7 (fontified t)) . -1896) (undo-tree-id601 . -7) (undo-tree-id602 . -7) (undo-tree-id603 . -7) (undo-tree-id604 . -7) (undo-tree-id605 . -7) (undo-tree-id606 . -7) (undo-tree-id607 . -7) (undo-tree-id608 . -7) (undo-tree-id609 . -7) (undo-tree-id610 . -7) 1903) nil (26014 22872 622917 0) 0 nil])
([nil nil ((#("load_" 0 5 (fontified t)) . -1891) (undo-tree-id588 . -5) (undo-tree-id589 . -5) (undo-tree-id590 . -5) (undo-tree-id591 . -5) (undo-tree-id592 . -5) (undo-tree-id593 . -5) (undo-tree-id594 . -5) (undo-tree-id595 . -5) (undo-tree-id596 . -5) (undo-tree-id597 . -5) (undo-tree-id598 . -5) (undo-tree-id599 . -5) (undo-tree-id600 . -5) 1896) nil (26014 22872 622906 0) 0 nil])
([nil nil ((1891 . 1893)) nil (26014 22872 622892 0) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -1892) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) 1893) nil (26014 22872 622890 0) 0 nil])
([nil nil ((1892 . 1894)) nil (26014 22872 624100 0) 0 nil])
([nil nil ((1894 . 1898)) nil (26014 22877 956187 0) 0 nil] [nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1926 1928 nil nil nil nil #s(yas--field 2 1943 1945 nil nil nil nil #s(yas--field 3 1962 1964 nil nil nil nil #s(yas--field 4 1980 1982 nil nil nil nil #s(yas--exit 1984 nil))))) #s(yas--field 2 1943 1945 nil nil nil nil #s(yas--field 3 1962 1964 nil nil nil nil #s(yas--field 4 1980 1982 nil nil nil nil #s(yas--exit 1984 nil)))) #s(yas--field 3 1962 1964 nil nil nil nil #s(yas--field 4 1980 1982 nil nil nil nil #s(yas--exit 1984 nil))) #s(yas--field 4 1980 1982 nil nil nil nil #s(yas--exit 1984 nil))) #s(yas--exit 1984 nil) 114 nil #s(yas--field 1 1926 1928 nil nil nil nil #s(yas--field 2 1943 1945 nil nil nil nil #s(yas--field 3 1962 1964 nil nil nil nil #s(yas--field 4 1980 1982 nil nil nil nil #s(yas--exit 1984 nil))))) nil nil)) (1892 . 1984) (#("tobj::LoadOptions { single_index: ${1:()}, triangulate: ${2:()}, ignore_points: ${3:()}, ignore_lines: ${4:()} }$0" 0 114 (fontified nil)) . 1892) (1892 . 2006) (#("to" 0 2 (fontified nil)) . 1892) (1892 . 1894) (#("tobj::LoadOptions {…}" 0 21 (fontified nil)) . -1892) (1892 . 1913) (#("to" 0 2 (fontified t)) . -1892) (undo-tree-id574 . -2) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -2) (undo-tree-id580 . -2) 1894) ((1892 . 1894) (#("tobj::LoadOptions {…}" 0 21 (fontified nil)) . 1892) (1892 . 1913) (#("to" 0 2 (fontified nil)) . 1892) (1892 . 1894) (#("tobj::LoadOptions { single_index: ${1:()}, triangulate: ${2:()}, ignore_points: ${3:()}, ignore_lines: ${4:()} }$0" 0 114 (fontified nil)) . 1892) (1892 . 2006) (#("tobj::LoadOptions { single_index: (), triangulate: (), ignore_points: (), ignore_lines: () }" 0 4 (face font-lock-constant-face fontified t) 4 6 (fontified t) 6 17 (face font-lock-type-face fontified t) 17 18 (fontified t) 18 19 (face (rainbow-delimiters-depth-3-face) fontified t) 19 20 (fontified t) 20 32 (face font-lock-variable-name-face fontified t) 32 34 (fontified t) 34 35 (face (rainbow-delimiters-depth-4-face) fontified t) 35 36 (face (rainbow-delimiters-depth-4-face) fontified t) 36 38 (fontified t) 38 49 (face font-lock-variable-name-face fontified t) 49 51 (fontified t) 51 52 (face (rainbow-delimiters-depth-4-face) fontified t) 52 53 (face (rainbow-delimiters-depth-4-face) fontified t) 53 55 (fontified t) 55 68 (face font-lock-variable-name-face fontified t) 68 70 (fontified t) 70 71 (face (rainbow-delimiters-depth-4-face) fontified t) 71 72 (face (rainbow-delimiters-depth-4-face) fontified t) 72 74 (fontified t) 74 86 (face font-lock-variable-name-face fontified t) 86 88 (fontified t) 88 89 (face (rainbow-delimiters-depth-4-face) fontified t) 89 90 (face (rainbow-delimiters-depth-4-face) fontified t) 90 91 (fontified t) 91 92 (face (rainbow-delimiters-depth-3-face) fontified t)) . 1892) (undo-tree-id671 . -34) (undo-tree-id672 . -34) (undo-tree-id673 . -34) (apply yas--snippet-revive 1892 1984 #s(yas--snippet nil (#s(yas--field 1 1926 1928 nil nil nil nil #s(yas--field 2 1943 1945 nil nil nil nil #s(yas--field 3 1962 1964 nil nil nil nil #s(yas--field 4 1980 1982 nil nil nil nil #s(yas--exit 1984 nil))))) #s(yas--field 2 1943 1945 nil nil nil nil #s(yas--field 3 1962 1964 nil nil nil nil #s(yas--field 4 1980 1982 nil nil nil nil #s(yas--exit 1984 nil)))) #s(yas--field 3 1962 1964 nil nil nil nil #s(yas--field 4 1980 1982 nil nil nil nil #s(yas--exit 1984 nil))) #s(yas--field 4 1980 1982 nil nil nil nil #s(yas--exit 1984 nil))) #s(yas--exit 1984 nil) 114 nil #s(yas--field 1 1926 1928 nil nil nil nil #s(yas--field 2 1943 1945 nil nil nil nil #s(yas--field 3 1962 1964 nil nil nil nil #s(yas--field 4 1980 1982 nil nil nil nil #s(yas--exit 1984 nil))))) nil nil))) (26014 22872 622876 0) 0 nil])
([nil nil ((1898 . 1914) (#("GPU_LOAD_OPTIONS" 0 16 (fontified nil)) . -1898) (1898 . 1914)) nil (26014 22877 956185 0) 0 nil])
nil
([nil nil ((1915 . 1916)) nil (26014 22877 956184 0) 0 nil])
([nil nil ((1923 . 1924) 1916) nil (26014 22877 956179 0) 0 nil])
([nil nil ((1916 . 1921) (t 26014 22877 965618 827000)) nil (26014 22888 924555 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1993 . 1994) (nil fontified nil 1921 . 1994) (1921 . 1994)) nil (26014 22888 924551 0) 0 nil])
([nil nil ((#("box" 0 3 (fontified t)) . -1955) (undo-tree-id698 . -3) (undo-tree-id699 . -3) (undo-tree-id700 . -3) (undo-tree-id701 . -3) (undo-tree-id702 . -3) (undo-tree-id703 . -3) (undo-tree-id704 . -3) (undo-tree-id705 . -3) (undo-tree-id706 . -3) (undo-tree-id707 . -3) (undo-tree-id708 . -3) (undo-tree-id709 . -3) 1958 (t 26014 22888 934268 434000)) nil (26014 22893 252450 0) 0 nil])
([nil nil ((#("cornell_" 0 8 (fontified t)) . -1947) (undo-tree-id681 . -8) (undo-tree-id682 . -8) (undo-tree-id683 . -8) (undo-tree-id684 . -8) (undo-tree-id685 . -8) (undo-tree-id686 . -8) (undo-tree-id687 . -8) (undo-tree-id688 . -8) (undo-tree-id689 . -8) (undo-tree-id690 . -8) (undo-tree-id691 . -8) (undo-tree-id692 . -8) (undo-tree-id693 . -8) (undo-tree-id694 . -8) (undo-tree-id695 . -8) (undo-tree-id696 . -8) (undo-tree-id697 . -8) 1955) nil (26014 22893 252437 0) 0 nil])
([nil nil ((1947 . 1949)) nil (26014 22893 252419 0) 0 nil])
([nil nil ((1947 . 1950) (#("ob" 0 2 (fontified nil)) . 1947) (1947 . 1949) (#("obj" 0 3 (fontified nil)) . -1947) (1947 . 1950) (#("ob" 0 2 (fontified t)) . -1947) (undo-tree-id674 . -2) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -2) (undo-tree-id679 . -2) (undo-tree-id680 . -2) 1949) nil (26014 22893 252415 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 2046 . 2047) (nil fontified nil 1986 . 2047) (1986 . 2047) (t 26014 22893 261622 328000)) nil (26014 22935 441877 0) 0 nil])
([nil nil ((1986 . 1990) 2033) nil (26014 22935 441872 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 2141 . 2142) (nil fontified nil 2051 . 2142) (2051 . 2142) (t 26014 22935 451122 567000)) nil (26014 22948 874390 0) 0 nil])
([nil nil ((2098 . 2102) (2051 . 2055) 2063) nil (26014 22948 874388 0) 0 nil])
([nil nil ((2050 . 2055)) nil (26014 22948 874384 0) 0 nil])
([nil nil ((2157 . 2161) (#("    " 0 4 (fontified nil)) . 2156) (undo-tree-id710 . -4) (undo-tree-id711 . -4) (undo-tree-id712 . -4) (undo-tree-id713 . -4) (2155 . 2161) (t 26014 22948 883733 970000)) nil (26014 22978 720415 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 4874 . 4875) (nil fontified nil 2161 . 4875) (2161 . 4875)) nil (26014 23010 748046 0) 0 nil] [nil nil ((nil rear-nonsticky nil 4872 . 4873) (nil fontified nil 2161 . 4873) (2161 . 4873)) ((#("for (i, m) in models.iter().enumerate() {
    let mesh = &m.mesh;

    println!(\"model[{}].name = \\'{}\\'\", i, m.name);
    println!(\"model[{}].mesh.material_id = {:?}\", i, mesh.material_id);

    println!(
        \"Size of model[{}].face_arities: {}\",
        i,
        mesh.face_arities.len()
    );

    let mut next_face = 0;
    for f in 0..mesh.face_arities.len() {
        let end = next_face + mesh.face_arities[f] as usize;
        let face_indices: Vec<_> = mesh.indices[next_face..end].iter().collect();
        println!(\"    face[{}] = {:?}\", f, face_indices);
        next_face = end;
    }

    // Normals and texture coordinates are also loaded, but not printed in this example
    println!(\"model[{}].vertices: {}\", i, mesh.positions.len() / 3);

    assert!(mesh.positions.len() % 3 == 0);
    for v in 0..mesh.positions.len() / 3 {
        println!(
            \"    v[{}] = ({}, {}, {})\",
            v,
            mesh.positions[3 * v],
            mesh.positions[3 * v + 1],
            mesh.positions[3 * v + 2]
        );
    }
}

for (i, m) in materials.iter().enumerate() {
    println!(\"material[{}].name = \\'{}\\'\", i, m.name);
    if let Some(ambient) = m.ambient {
        println!(
            \"    material.Ka = ({}, {}, {})\",
            ambient[0], ambient[1], ambient[2]
        );
    }
    if let Some(diffuse) = m.diffuse {
        println!(
            \"    material.Kd = ({}, {}, {})\",
            diffuse[0], diffuse[1], diffuse[2]
        );
    }
    if let Some(specular) = m.specular {
        println!(
            \"    material.Ks = ({}, {}, {})\",
            specular[0], specular[1], specular[2]
        );
    }
    if let Some(shininess) = m.shininess {
        println!(\"    material.Ns = {}\", shininess);
    }
    if let Some(dissolve) = m.dissolve {
        println!(\"    material.d = {}\", dissolve);
    }
    if let Some(ambient_texture) = &m.ambient_texture {
        println!(\"    material.map_Ka = {}\", ambient_texture);
    }
    if let Some(diffuse_texture) = &m.diffuse_texture {
        println!(\"    material.map_Kd = {}\", diffuse_texture);
    }
    if let Some(specular_texture) = &m.specular_texture {
        println!(\"    material.map_Ks = {}\", specular_texture);
    }
    if let Some(shininess_texture) = &m.shininess_texture {
        println!(\"    material.map_Ns = {}\", shininess_texture);
    }
    if let Some(normal_texture) = &m.normal_texture {
        println!(\"    material.map_Bump = {}\", normal_texture);
    }
    if let Some(dissolve_texture) = &m.dissolve_texture {
        println!(\"    material.map_d = {}\", dissolve_texture);
    }

    for (k, v) in &m.unknown_param {
        println!(\"    material.{} = {}\", k, v);
    }" 0 3 (face font-lock-keyword-face fontified nil) 3 4 (fontified nil) 4 5 (face (rainbow-delimiters-depth-2-face) fontified nil) 5 9 (fontified nil) 9 10 (face (rainbow-delimiters-depth-2-face) fontified nil) 10 11 (fontified nil) 11 13 (face font-lock-keyword-face fontified nil) 13 25 (fontified nil) 25 26 (face (rainbow-delimiters-depth-2-face) fontified nil) 26 27 (face (rainbow-delimiters-depth-2-face) fontified nil) 27 37 (fontified nil) 37 38 (face (rainbow-delimiters-depth-2-face) fontified nil) 38 39 (face (rainbow-delimiters-depth-2-face) fontified nil) 39 40 (fontified nil) 40 41 (face (rainbow-delimiters-depth-2-face) fontified nil) 41 46 (fontified nil) 46 49 (face font-lock-keyword-face fontified nil) 49 50 (fontified nil) 50 54 (face font-lock-variable-name-face fontified nil) 54 57 (fontified nil) 57 58 (face rust-ampersand-face fontified nil) 58 71 (fontified nil) 71 79 (face rust-builtin-formatting-macro fontified nil) 79 80 (face (rainbow-delimiters-depth-3-face) fontified nil) 80 87 (face font-lock-string-face fontified nil) 87 89 (face rust-string-interpolation fontified nil) 89 100 (face font-lock-string-face fontified nil) 100 102 (face rust-string-interpolation fontified nil) 102 105 (face font-lock-string-face fontified nil) 105 116 (fontified nil) 116 117 (face (rainbow-delimiters-depth-3-face) fontified nil) 117 123 (fontified nil) 123 131 (face rust-builtin-formatting-macro fontified nil) 131 132 (face (rainbow-delimiters-depth-3-face) fontified nil) 132 139 (face font-lock-string-face fontified nil) 139 141 (face rust-string-interpolation fontified nil) 141 162 (face font-lock-string-face fontified nil) 162 166 (face rust-string-interpolation fontified nil) 166 167 (face font-lock-string-face fontified nil) 167 188 (fontified nil) 188 189 (face (rainbow-delimiters-depth-3-face) fontified nil) 189 196 (fontified nil) 196 204 (face rust-builtin-formatting-macro fontified nil) 204 205 (face (rainbow-delimiters-depth-3-face) fontified nil) 205 214 (fontified nil) 214 229 (face font-lock-string-face fontified nil) 229 231 (face rust-string-interpolation fontified nil) 231 247 (face font-lock-string-face fontified nil) 247 249 (face rust-string-interpolation fontified nil) 249 250 (face font-lock-string-face fontified nil) 250 292 (fontified nil) 292 293 (face (rainbow-delimiters-depth-4-face) fontified nil) 293 294 (face (rainbow-delimiters-depth-4-face) fontified nil) 294 299 (fontified nil) 299 300 (face (rainbow-delimiters-depth-3-face) fontified nil) 300 307 (fontified nil) 307 310 (face font-lock-keyword-face fontified nil) 310 311 (fontified nil) 311 314 (face font-lock-keyword-face fontified nil) 314 315 (fontified nil) 315 324 (face font-lock-variable-name-face fontified nil) 324 334 (fontified nil) 334 337 (face font-lock-keyword-face fontified nil) 337 338 (fontified nil) 338 339 (face font-lock-variable-name-face fontified nil) 339 340 (fontified nil) 340 342 (face font-lock-keyword-face fontified nil) 342 367 (fontified nil) 367 368 (face (rainbow-delimiters-depth-3-face) fontified nil) 368 369 (face (rainbow-delimiters-depth-3-face) fontified nil) 369 370 (fontified nil) 370 371 (face (rainbow-delimiters-depth-3-face) fontified nil) 371 380 (fontified nil) 380 383 (face font-lock-keyword-face fontified nil) 383 384 (fontified nil) 384 387 (face font-lock-variable-name-face fontified nil) 387 419 (fontified nil) 419 420 (face (rainbow-delimiters-depth-4-face) fontified nil) 420 421 (fontified nil) 421 422 (face (rainbow-delimiters-depth-4-face) fontified nil) 422 423 (fontified nil) 423 425 (face font-lock-keyword-face fontified nil) 425 426 (fontified nil) 426 431 (face font-lock-type-face fontified nil) 431 441 (fontified nil) 441 444 (face font-lock-keyword-face fontified nil) 444 445 (fontified nil) 445 457 (face font-lock-variable-name-face fontified nil) 457 459 (fontified nil) 459 462 (face font-lock-type-face fontified nil) 462 463 (face (rainbow-delimiters-depth-4-face) fontified nil) 463 464 (fontified nil) 464 465 (face (rainbow-delimiters-depth-4-face) fontified nil) 465 480 (fontified nil) 480 481 (face (rainbow-delimiters-depth-4-face) fontified nil) 481 495 (fontified nil) 495 496 (face (rainbow-delimiters-depth-4-face) fontified nil) 496 501 (fontified nil) 501 502 (face (rainbow-delimiters-depth-4-face) fontified nil) 502 503 (face (rainbow-delimiters-depth-4-face) fontified nil) 503 511 (fontified nil) 511 512 (face (rainbow-delimiters-depth-4-face) fontified nil) 512 513 (face (rainbow-delimiters-depth-4-face) fontified nil) 513 523 (fontified nil) 523 531 (face rust-builtin-formatting-macro fontified nil) 531 532 (face (rainbow-delimiters-depth-4-face) fontified nil) 532 542 (face font-lock-string-face fontified nil) 542 544 (face rust-string-interpolation fontified nil) 544 548 (face font-lock-string-face fontified nil) 548 552 (face rust-string-interpolation fontified nil) 552 553 (face font-lock-string-face fontified nil) 553 570 (fontified nil) 570 571 (face (rainbow-delimiters-depth-4-face) fontified nil) 571 602 (fontified nil) 602 603 (face (rainbow-delimiters-depth-3-face) fontified nil) 603 609 (fontified nil) 609 612 (face font-lock-comment-delimiter-face fontified nil) 612 693 (face font-lock-comment-face fontified nil) 693 697 (fontified nil) 697 705 (face rust-builtin-formatting-macro fontified nil) 705 706 (face (rainbow-delimiters-depth-3-face) fontified nil) 706 713 (face font-lock-string-face fontified nil) 713 715 (face rust-string-interpolation fontified nil) 715 727 (face font-lock-string-face fontified nil) 727 729 (face rust-string-interpolation fontified nil) 729 730 (face font-lock-string-face fontified nil) 730 753 (fontified nil) 753 754 (face (rainbow-delimiters-depth-4-face) fontified nil) 754 755 (face (rainbow-delimiters-depth-4-face) fontified nil) 755 759 (fontified nil) 759 760 (face (rainbow-delimiters-depth-3-face) fontified nil) 760 762 (fontified nil) 762 763 (fontified nil) 763 767 (fontified nil) 767 774 (face font-lock-preprocessor-face fontified nil) 774 775 (face (rainbow-delimiters-depth-3-face) fontified nil) 775 793 (fontified nil) 793 794 (face (rainbow-delimiters-depth-4-face) fontified nil) 794 795 (face (rainbow-delimiters-depth-4-face) fontified nil) 795 804 (fontified nil) 804 805 (face (rainbow-delimiters-depth-3-face) fontified nil) 805 807 (fontified nil) 807 811 (fontified nil) 811 814 (face font-lock-keyword-face fontified nil) 814 815 (fontified nil) 815 816 (face font-lock-variable-name-face fontified nil) 816 817 (fontified nil) 817 819 (face font-lock-keyword-face fontified nil) 819 841 (fontified nil) 841 842 (face (rainbow-delimiters-depth-3-face) fontified nil) 842 843 (face (rainbow-delimiters-depth-3-face) fontified nil) 843 848 (fontified nil) 848 849 (face (rainbow-delimiters-depth-3-face) fontified nil) 849 850 (fontified nil) 850 858 (fontified nil) 858 866 (face rust-builtin-formatting-macro fontified nil) 866 867 (face (rainbow-delimiters-depth-4-face) fontified nil) 867 868 (fontified nil) 868 880 (fontified nil) 880 887 (face font-lock-string-face fontified nil) 887 889 (face rust-string-interpolation fontified nil) 889 894 (face font-lock-string-face fontified nil) 894 896 (face rust-string-interpolation fontified nil) 896 898 (face font-lock-string-face fontified nil) 898 900 (face rust-string-interpolation fontified nil) 900 902 (face font-lock-string-face fontified nil) 902 904 (face rust-string-interpolation fontified nil) 904 906 (face font-lock-string-face fontified nil) 906 908 (fontified nil) 908 920 (fontified nil) 920 923 (fontified nil) 923 935 (fontified nil) 935 949 (fontified nil) 949 950 (face (rainbow-delimiters-depth-5-face) fontified nil) 950 955 (fontified nil) 955 956 (face (rainbow-delimiters-depth-5-face) fontified nil) 956 958 (fontified nil) 958 970 (fontified nil) 970 984 (fontified nil) 984 985 (face (rainbow-delimiters-depth-5-face) fontified nil) 985 994 (fontified nil) 994 995 (face (rainbow-delimiters-depth-5-face) fontified nil) 995 997 (fontified nil) 997 1009 (fontified nil) 1009 1023 (fontified nil) 1023 1024 (face (rainbow-delimiters-depth-5-face) fontified nil) 1024 1033 (fontified nil) 1033 1034 (face (rainbow-delimiters-depth-5-face) fontified nil) 1034 1035 (fontified nil) 1035 1043 (fontified nil) 1043 1044 (face (rainbow-delimiters-depth-4-face) fontified nil) 1044 1046 (fontified nil) 1046 1050 (fontified nil) 1050 1051 (face (rainbow-delimiters-depth-3-face) fontified nil) 1051 1052 (fontified nil) 1052 1053 (face (rainbow-delimiters-depth-2-face) fontified nil) 1053 1054 (fontified nil) 1054 1055 (fontified nil) 1055 1058 (face font-lock-keyword-face fontified nil) 1058 1059 (fontified nil) 1059 1060 (face (rainbow-delimiters-depth-2-face) fontified nil) 1060 1064 (fontified nil) 1064 1065 (face (rainbow-delimiters-depth-2-face) fontified nil) 1065 1066 (fontified nil) 1066 1068 (face font-lock-keyword-face fontified nil) 1068 1083 (fontified nil) 1083 1084 (face (rainbow-delimiters-depth-2-face) fontified nil) 1084 1085 (face (rainbow-delimiters-depth-2-face) fontified nil) 1085 1095 (fontified nil) 1095 1096 (face (rainbow-delimiters-depth-2-face) fontified nil) 1096 1097 (face (rainbow-delimiters-depth-2-face) fontified nil) 1097 1098 (fontified nil) 1098 1099 (face (rainbow-delimiters-depth-2-face) fontified nil) 1099 1100 (fontified nil) 1100 1104 (fontified nil) 1104 1112 (face rust-builtin-formatting-macro fontified nil) 1112 1113 (face (rainbow-delimiters-depth-3-face) fontified nil) 1113 1123 (face font-lock-string-face fontified nil) 1123 1125 (face rust-string-interpolation fontified nil) 1125 1136 (face font-lock-string-face fontified nil) 1136 1138 (face rust-string-interpolation fontified nil) 1138 1141 (face font-lock-string-face fontified nil) 1141 1152 (fontified nil) 1152 1153 (face (rainbow-delimiters-depth-3-face) fontified nil) 1153 1155 (fontified nil) 1155 1159 (fontified nil) 1159 1161 (face font-lock-keyword-face fontified nil) 1161 1162 (fontified nil) 1162 1165 (face font-lock-keyword-face fontified nil) 1165 1166 (fontified nil) 1166 1170 (face font-lock-type-face fontified nil) 1170 1171 (face (rainbow-delimiters-depth-3-face) fontified nil) 1171 1178 (fontified nil) 1178 1179 (face (rainbow-delimiters-depth-3-face) fontified nil) 1179 1192 (fontified nil) 1192 1193 (face (rainbow-delimiters-depth-3-face) fontified nil) 1193 1194 (fontified nil) 1194 1202 (fontified nil) 1202 1210 (face rust-builtin-formatting-macro fontified nil) 1210 1211 (face (rainbow-delimiters-depth-4-face) fontified nil) 1211 1212 (fontified nil) 1212 1224 (fontified nil) 1224 1244 (face font-lock-string-face fontified nil) 1244 1246 (face rust-string-interpolation fontified nil) 1246 1248 (face font-lock-string-face fontified nil) 1248 1250 (face rust-string-interpolation fontified nil) 1250 1252 (face font-lock-string-face fontified nil) 1252 1254 (face rust-string-interpolation fontified nil) 1254 1256 (face font-lock-string-face fontified nil) 1256 1258 (fontified nil) 1258 1270 (fontified nil) 1270 1277 (fontified nil) 1277 1278 (face (rainbow-delimiters-depth-5-face) fontified nil) 1278 1279 (fontified nil) 1279 1280 (face (rainbow-delimiters-depth-5-face) fontified nil) 1280 1289 (fontified nil) 1289 1290 (face (rainbow-delimiters-depth-5-face) fontified nil) 1290 1291 (fontified nil) 1291 1292 (face (rainbow-delimiters-depth-5-face) fontified nil) 1292 1301 (fontified nil) 1301 1302 (face (rainbow-delimiters-depth-5-face) fontified nil) 1302 1303 (fontified nil) 1303 1304 (face (rainbow-delimiters-depth-5-face) fontified nil) 1304 1305 (fontified nil) 1305 1313 (fontified nil) 1313 1314 (face (rainbow-delimiters-depth-4-face) fontified nil) 1314 1320 (fontified nil) 1320 1321 (face (rainbow-delimiters-depth-3-face) fontified nil) 1321 1326 (fontified nil) 1326 1328 (face font-lock-keyword-face fontified nil) 1328 1329 (fontified nil) 1329 1332 (face font-lock-keyword-face fontified nil) 1332 1333 (fontified nil) 1333 1337 (face font-lock-type-face fontified nil) 1337 1338 (face (rainbow-delimiters-depth-3-face) fontified nil) 1338 1345 (fontified nil) 1345 1346 (face (rainbow-delimiters-depth-3-face) fontified nil) 1346 1359 (fontified nil) 1359 1360 (face (rainbow-delimiters-depth-3-face) fontified nil) 1360 1369 (fontified nil) 1369 1377 (face rust-builtin-formatting-macro fontified nil) 1377 1378 (face (rainbow-delimiters-depth-4-face) fontified nil) 1378 1391 (fontified nil) 1391 1411 (face font-lock-string-face fontified nil) 1411 1413 (face rust-string-interpolation fontified nil) 1413 1415 (face font-lock-string-face fontified nil) 1415 1417 (face rust-string-interpolation fontified nil) 1417 1419 (face font-lock-string-face fontified nil) 1419 1421 (face rust-string-interpolation fontified nil) 1421 1423 (face font-lock-string-face fontified nil) 1423 1444 (fontified nil) 1444 1445 (face (rainbow-delimiters-depth-5-face) fontified nil) 1445 1446 (fontified nil) 1446 1447 (face (rainbow-delimiters-depth-5-face) fontified nil) 1447 1456 (fontified nil) 1456 1457 (face (rainbow-delimiters-depth-5-face) fontified nil) 1457 1458 (fontified nil) 1458 1459 (face (rainbow-delimiters-depth-5-face) fontified nil) 1459 1468 (fontified nil) 1468 1469 (face (rainbow-delimiters-depth-5-face) fontified nil) 1469 1470 (fontified nil) 1470 1471 (face (rainbow-delimiters-depth-5-face) fontified nil) 1471 1480 (fontified nil) 1480 1481 (face (rainbow-delimiters-depth-4-face) fontified nil) 1481 1487 (fontified nil) 1487 1488 (face (rainbow-delimiters-depth-3-face) fontified nil) 1488 1493 (fontified nil) 1493 1495 (face font-lock-keyword-face fontified nil) 1495 1496 (fontified nil) 1496 1499 (face font-lock-keyword-face fontified nil) 1499 1500 (fontified nil) 1500 1504 (face font-lock-type-face fontified nil) 1504 1505 (face (rainbow-delimiters-depth-3-face) fontified nil) 1505 1513 (fontified nil) 1513 1514 (face (rainbow-delimiters-depth-3-face) fontified nil) 1514 1528 (fontified nil) 1528 1529 (face (rainbow-delimiters-depth-3-face) fontified nil) 1529 1530 (fontified nil) 1530 1538 (fontified nil) 1538 1546 (face rust-builtin-formatting-macro fontified nil) 1546 1547 (face (rainbow-delimiters-depth-4-face) fontified nil) 1547 1548 (fontified nil) 1548 1560 (fontified nil) 1560 1580 (face font-lock-string-face fontified nil) 1580 1582 (face rust-string-interpolation fontified nil) 1582 1584 (face font-lock-string-face fontified nil) 1584 1586 (face rust-string-interpolation fontified nil) 1586 1588 (face font-lock-string-face fontified nil) 1588 1590 (face rust-string-interpolation fontified nil) 1590 1592 (face font-lock-string-face fontified nil) 1592 1594 (fontified nil) 1594 1614 (fontified nil) 1614 1615 (face (rainbow-delimiters-depth-5-face) fontified nil) 1615 1616 (fontified nil) 1616 1617 (face (rainbow-delimiters-depth-5-face) fontified nil) 1617 1627 (fontified nil) 1627 1628 (face (rainbow-delimiters-depth-5-face) fontified nil) 1628 1629 (fontified nil) 1629 1630 (face (rainbow-delimiters-depth-5-face) fontified nil) 1630 1640 (fontified nil) 1640 1641 (face (rainbow-delimiters-depth-5-face) fontified nil) 1641 1642 (fontified nil) 1642 1643 (face (rainbow-delimiters-depth-5-face) fontified nil) 1643 1644 (fontified nil) 1644 1652 (fontified nil) 1652 1653 (face (rainbow-delimiters-depth-4-face) fontified nil) 1653 1655 (fontified nil) 1655 1659 (fontified nil) 1659 1660 (face (rainbow-delimiters-depth-3-face) fontified nil) 1660 1661 (fontified nil) 1661 1665 (fontified nil) 1665 1667 (face font-lock-keyword-face fontified nil) 1667 1668 (fontified nil) 1668 1671 (face font-lock-keyword-face fontified nil) 1671 1672 (fontified nil) 1672 1676 (face font-lock-type-face fontified nil) 1676 1677 (face (rainbow-delimiters-depth-3-face) fontified nil) 1677 1686 (fontified nil) 1686 1687 (face (rainbow-delimiters-depth-3-face) fontified nil) 1687 1702 (fontified nil) 1702 1703 (face (rainbow-delimiters-depth-3-face) fontified nil) 1703 1704 (fontified nil) 1704 1712 (fontified nil) 1712 1720 (face rust-builtin-formatting-macro fontified nil) 1720 1721 (face (rainbow-delimiters-depth-4-face) fontified nil) 1721 1740 (face font-lock-string-face fontified nil) 1740 1742 (face rust-string-interpolation fontified nil) 1742 1743 (face font-lock-string-face fontified nil) 1743 1754 (fontified nil) 1754 1755 (face (rainbow-delimiters-depth-4-face) fontified nil) 1755 1761 (fontified nil) 1761 1762 (face (rainbow-delimiters-depth-3-face) fontified nil) 1762 1767 (fontified nil) 1767 1769 (face font-lock-keyword-face fontified nil) 1769 1770 (fontified nil) 1770 1773 (face font-lock-keyword-face fontified nil) 1773 1774 (fontified nil) 1774 1778 (face font-lock-type-face fontified nil) 1778 1779 (face (rainbow-delimiters-depth-3-face) fontified nil) 1779 1787 (fontified nil) 1787 1788 (face (rainbow-delimiters-depth-3-face) fontified nil) 1788 1802 (fontified nil) 1802 1803 (face (rainbow-delimiters-depth-3-face) fontified nil) 1803 1812 (fontified nil) 1812 1820 (face rust-builtin-formatting-macro fontified nil) 1820 1821 (face (rainbow-delimiters-depth-4-face) fontified nil) 1821 1839 (face font-lock-string-face fontified nil) 1839 1841 (face rust-string-interpolation fontified nil) 1841 1842 (face font-lock-string-face fontified nil) 1842 1852 (fontified nil) 1852 1853 (face (rainbow-delimiters-depth-4-face) fontified nil) 1853 1859 (fontified nil) 1859 1860 (face (rainbow-delimiters-depth-3-face) fontified nil) 1860 1865 (fontified nil) 1865 1867 (face font-lock-keyword-face fontified nil) 1867 1868 (fontified nil) 1868 1871 (face font-lock-keyword-face fontified nil) 1871 1872 (fontified nil) 1872 1876 (face font-lock-type-face fontified nil) 1876 1877 (face (rainbow-delimiters-depth-3-face) fontified nil) 1877 1892 (fontified nil) 1892 1893 (face (rainbow-delimiters-depth-3-face) fontified nil) 1893 1896 (fontified nil) 1896 1897 (face rust-ampersand-face fontified nil) 1897 1915 (fontified nil) 1915 1916 (face (rainbow-delimiters-depth-3-face) fontified nil) 1916 1925 (fontified nil) 1925 1933 (face rust-builtin-formatting-macro fontified nil) 1933 1934 (face (rainbow-delimiters-depth-4-face) fontified nil) 1934 1957 (face font-lock-string-face fontified nil) 1957 1959 (face rust-string-interpolation fontified nil) 1959 1960 (face font-lock-string-face fontified nil) 1960 1977 (fontified nil) 1977 1978 (face (rainbow-delimiters-depth-4-face) fontified nil) 1978 1984 (fontified nil) 1984 1985 (face (rainbow-delimiters-depth-3-face) fontified nil) 1985 1990 (fontified nil) 1990 1992 (face font-lock-keyword-face fontified nil) 1992 1993 (fontified nil) 1993 1996 (face font-lock-keyword-face fontified nil) 1996 1997 (fontified nil) 1997 2001 (face font-lock-type-face fontified nil) 2001 2002 (face (rainbow-delimiters-depth-3-face) fontified nil) 2002 2017 (fontified nil) 2017 2018 (face (rainbow-delimiters-depth-3-face) fontified nil) 2018 2021 (fontified nil) 2021 2022 (face rust-ampersand-face fontified nil) 2022 2040 (fontified nil) 2040 2041 (face (rainbow-delimiters-depth-3-face) fontified nil) 2041 2050 (fontified nil) 2050 2058 (face rust-builtin-formatting-macro fontified nil) 2058 2059 (face (rainbow-delimiters-depth-4-face) fontified nil) 2059 2082 (face font-lock-string-face fontified nil) 2082 2084 (face rust-string-interpolation fontified nil) 2084 2085 (face font-lock-string-face fontified nil) 2085 2102 (fontified nil) 2102 2103 (face (rainbow-delimiters-depth-4-face) fontified nil) 2103 2109 (fontified nil) 2109 2110 (face (rainbow-delimiters-depth-3-face) fontified nil) 2110 2115 (fontified nil) 2115 2117 (face font-lock-keyword-face fontified nil) 2117 2118 (fontified nil) 2118 2121 (face font-lock-keyword-face fontified nil) 2121 2122 (fontified nil) 2122 2126 (face font-lock-type-face fontified nil) 2126 2127 (face (rainbow-delimiters-depth-3-face) fontified nil) 2127 2143 (fontified nil) 2143 2144 (face (rainbow-delimiters-depth-3-face) fontified nil) 2144 2147 (fontified nil) 2147 2148 (face rust-ampersand-face fontified nil) 2148 2167 (fontified nil) 2167 2168 (face (rainbow-delimiters-depth-3-face) fontified nil) 2168 2177 (fontified nil) 2177 2185 (face rust-builtin-formatting-macro fontified nil) 2185 2186 (face (rainbow-delimiters-depth-4-face) fontified nil) 2186 2194 (face font-lock-string-face fontified nil) 2194 2209 (face font-lock-string-face fontified nil) 2209 2211 (face rust-string-interpolation fontified nil) 2211 2212 (face font-lock-string-face fontified nil) 2212 2230 (fontified nil) 2230 2231 (face (rainbow-delimiters-depth-4-face) fontified nil) 2231 2233 (fontified nil) 2233 2237 (fontified nil) 2237 2238 (face (rainbow-delimiters-depth-3-face) fontified nil) 2238 2243 (fontified nil) 2243 2245 (face font-lock-keyword-face fontified nil) 2245 2246 (fontified nil) 2246 2249 (face font-lock-keyword-face fontified nil) 2249 2250 (fontified nil) 2250 2254 (face font-lock-type-face fontified nil) 2254 2255 (face (rainbow-delimiters-depth-3-face) fontified nil) 2255 2262 (fontified nil) 2262 2272 (fontified nil) 2272 2273 (fontified nil face (rainbow-delimiters-depth-3-face)) 2273 2276 (fontified nil) 2276 2277 (fontified nil face rust-ampersand-face) 2277 2297 (fontified nil) 2297 2298 (fontified nil face (rainbow-delimiters-depth-3-face)) 2298 2299 (fontified nil) 2299 2307 (fontified nil) 2307 2315 (fontified nil face rust-builtin-formatting-macro) 2315 2316 (fontified nil face (rainbow-delimiters-depth-4-face)) 2316 2339 (fontified nil face font-lock-string-face) 2339 2341 (fontified nil face rust-string-interpolation) 2341 2342 (fontified nil face font-lock-string-face) 2342 2361 (fontified nil) 2361 2362 (fontified nil face (rainbow-delimiters-depth-4-face)) 2362 2368 (fontified nil) 2368 2369 (fontified nil face (rainbow-delimiters-depth-3-face)) 2369 2374 (fontified nil) 2374 2376 (fontified nil face font-lock-keyword-face) 2376 2377 (fontified nil) 2377 2380 (fontified nil face font-lock-keyword-face) 2380 2381 (fontified nil) 2381 2385 (fontified nil face font-lock-type-face) 2385 2386 (fontified nil face (rainbow-delimiters-depth-3-face)) 2386 2400 (fontified nil) 2400 2401 (fontified nil face (rainbow-delimiters-depth-3-face)) 2401 2404 (fontified nil) 2404 2405 (fontified nil face rust-ampersand-face) 2405 2422 (fontified nil) 2422 2423 (fontified nil face (rainbow-delimiters-depth-3-face)) 2423 2432 (fontified nil) 2432 2440 (fontified nil face rust-builtin-formatting-macro) 2440 2441 (fontified nil face (rainbow-delimiters-depth-4-face)) 2441 2466 (fontified nil face font-lock-string-face) 2466 2468 (fontified nil face rust-string-interpolation) 2468 2469 (fontified nil face font-lock-string-face) 2469 2485 (fontified nil) 2485 2486 (fontified nil face (rainbow-delimiters-depth-4-face)) 2486 2492 (fontified nil) 2492 2493 (fontified nil face (rainbow-delimiters-depth-3-face)) 2493 2498 (fontified nil) 2498 2500 (fontified nil face font-lock-keyword-face) 2500 2501 (fontified nil) 2501 2504 (fontified nil face font-lock-keyword-face) 2504 2505 (fontified nil) 2505 2509 (fontified nil face font-lock-type-face) 2509 2510 (fontified nil face (rainbow-delimiters-depth-3-face)) 2510 2526 (fontified nil) 2526 2527 (fontified nil face (rainbow-delimiters-depth-3-face)) 2527 2530 (fontified nil) 2530 2531 (fontified nil face rust-ampersand-face) 2531 2550 (fontified nil) 2550 2551 (fontified nil face (rainbow-delimiters-depth-3-face)) 2551 2560 (fontified nil) 2560 2568 (fontified nil face rust-builtin-formatting-macro) 2568 2569 (fontified nil face (rainbow-delimiters-depth-4-face)) 2569 2591 (fontified nil face font-lock-string-face) 2591 2593 (fontified nil face rust-string-interpolation) 2593 2594 (fontified nil face font-lock-string-face) 2594 2612 (fontified nil) 2612 2613 (fontified nil face (rainbow-delimiters-depth-4-face)) 2613 2619 (fontified nil) 2619 2620 (fontified nil face (rainbow-delimiters-depth-3-face)) 2620 2626 (fontified nil) 2626 2629 (fontified nil face font-lock-keyword-face) 2629 2630 (fontified nil) 2630 2631 (fontified nil face (rainbow-delimiters-depth-3-face)) 2631 2635 (fontified nil) 2635 2636 (fontified nil face (rainbow-delimiters-depth-3-face)) 2636 2637 (fontified nil) 2637 2639 (fontified nil face font-lock-keyword-face) 2639 2640 (fontified nil) 2640 2641 (fontified nil face rust-ampersand-face) 2641 2657 (fontified nil) 2657 2658 (fontified nil face (rainbow-delimiters-depth-3-face)) 2658 2667 (fontified nil) 2667 2675 (fontified nil face rust-builtin-formatting-macro) 2675 2676 (fontified nil face (rainbow-delimiters-depth-4-face)) 2676 2690 (fontified nil face font-lock-string-face) 2690 2692 (fontified nil face rust-string-interpolation) 2692 2695 (fontified nil face font-lock-string-face) 2695 2697 (fontified nil face rust-string-interpolation) 2697 2698 (fontified nil face font-lock-string-face) 2698 2704 (fontified nil) 2704 2705 (fontified nil face (rainbow-delimiters-depth-4-face)) 2705 2707 (fontified nil) 2707 2711 (fontified nil) 2711 2712 (fontified nil face (rainbow-delimiters-depth-3-face) rear-nonsticky nil)) . 2161) (undo-tree-id727 . -1267) (undo-tree-id728 . -702) (undo-tree-id729 . -1009) (undo-tree-id730 . -969) (undo-tree-id731 . -917) (undo-tree-id732 . -876) (undo-tree-id733 . -876) (undo-tree-id734 . -876) (undo-tree-id735 . -1267) (undo-tree-id736 . -1267) (undo-tree-id737 . -1267) (undo-tree-id738 . -1051) (undo-tree-id739 . -1267) (undo-tree-id740 . -693) (undo-tree-id741 . -702) (undo-tree-id742 . -702) (undo-tree-id743 . -702) (undo-tree-id744 . -702) (undo-tree-id745 . -702) (undo-tree-id746 . -702) (undo-tree-id747 . -702) (nil fontified nil 4866 . 4868) (nil fontified nil 4865 . 4866) (nil fontified nil 4859 . 4865) (nil fontified nil 4858 . 4859) (nil fontified nil 4856 . 4858) (nil fontified nil 4853 . 4856) (nil fontified nil 4851 . 4853) (nil fontified nil 4837 . 4851) (nil fontified nil 4836 . 4837) (nil fontified nil 4828 . 4836) (nil fontified nil 4819 . 4828) (nil fontified nil 4818 . 4819) (nil fontified nil 4802 . 4818) (nil fontified nil 4801 . 4802) (nil fontified nil 4800 . 4801) (nil fontified nil 4798 . 4800) (nil fontified nil 4797 . 4798) (nil fontified nil 4796 . 4797) (nil fontified nil 4792 . 4796) (nil fontified nil 4791 . 4792) (nil fontified nil 4790 . 4791) (nil fontified nil 4787 . 4790) (nil fontified nil 4781 . 4787) (nil fontified nil 4780 . 4781) (nil fontified nil 4774 . 4780) (nil fontified nil 4773 . 4774) (nil fontified nil 4755 . 4773) (nil fontified nil 4754 . 4755) (nil fontified nil 4752 . 4754) (nil fontified nil 4730 . 4752) (nil fontified nil 4729 . 4730) (nil fontified nil 4721 . 4729) (nil fontified nil 4712 . 4721) (nil fontified nil 4711 . 4712) (nil fontified nil 4692 . 4711) (nil fontified nil 4691 . 4692) (nil fontified nil 4688 . 4691) (nil fontified nil 4687 . 4688) (nil fontified nil 4671 . 4687) (nil fontified nil 4670 . 4671) (nil fontified nil 4666 . 4670) (nil fontified nil 4665 . 4666) (nil fontified nil 4662 . 4665) (nil fontified nil 4661 . 4662) (nil fontified nil 4659 . 4661) (nil fontified nil 4654 . 4659) (nil fontified nil 4653 . 4654) (nil fontified nil 4647 . 4653) (nil fontified nil 4646 . 4647) (nil fontified nil 4630 . 4646) (nil fontified nil 4629 . 4630) (nil fontified nil 4627 . 4629) (nil fontified nil 4602 . 4627) (nil fontified nil 4601 . 4602) (nil fontified nil 4593 . 4601) (nil fontified nil 4584 . 4593) (nil fontified nil 4583 . 4584) (nil fontified nil 4566 . 4583) (nil fontified nil 4565 . 4566) (nil fontified nil 4562 . 4565) (nil fontified nil 4561 . 4562) (nil fontified nil 4547 . 4561) (nil fontified nil 4546 . 4547) (nil fontified nil 4542 . 4546) (nil fontified nil 4541 . 4542) (nil fontified nil 4538 . 4541) (nil fontified nil 4537 . 4538) (nil fontified nil 4535 . 4537) (nil fontified nil 4530 . 4535) (nil fontified nil 4529 . 4530) (nil fontified nil 4523 . 4529) (nil fontified nil 4522 . 4523) (nil fontified nil 4503 . 4522) (nil fontified nil 4502 . 4503) (nil fontified nil 4500 . 4502) (nil fontified nil 4477 . 4500) (nil fontified nil 4476 . 4477) (nil fontified nil 4468 . 4476) (nil fontified nil 4460 . 4468) (nil fontified t 4459 . 4460) (nil fontified t 4458 . 4459) (nil fontified t 4438 . 4458) (nil fontified t 4437 . 4438) (nil fontified t 4434 . 4437) (nil fontified t 4433 . 4434) (nil fontified t 4423 . 4433) (nil fontified t 4416 . 4423) (nil fontified t 4415 . 4416) (nil fontified t 4411 . 4415) (nil fontified t 4410 . 4411) (nil fontified t 4407 . 4410) (nil fontified t 4406 . 4407) (nil fontified t 4404 . 4406) (nil fontified t 4399 . 4404) (nil fontified t 4398 . 4399) (nil fontified t 4394 . 4398) (nil fontified t 4392 . 4394) (nil fontified t 4391 . 4392) (nil fontified t 4373 . 4391) (nil fontified t 4372 . 4373) (nil fontified t 4370 . 4372) (nil fontified t 4355 . 4370) (nil fontified t 4347 . 4355) (nil fontified t 4346 . 4347) (nil fontified t 4338 . 4346) (nil fontified t 4329 . 4338) (nil fontified t 4328 . 4329) (nil fontified t 4309 . 4328) (nil fontified t 4308 . 4309) (nil fontified t 4305 . 4308) (nil fontified t 4304 . 4305) (nil fontified t 4288 . 4304) (nil fontified t 4287 . 4288) (nil fontified t 4283 . 4287) (nil fontified t 4282 . 4283) (nil fontified t 4279 . 4282) (nil fontified t 4278 . 4279) (nil fontified t 4276 . 4278) (nil fontified t 4271 . 4276) (nil fontified t 4270 . 4271) (nil fontified t 4264 . 4270) (nil fontified t 4263 . 4264) (nil fontified t 4246 . 4263) (nil fontified t 4245 . 4246) (nil fontified t 4243 . 4245) (nil fontified t 4220 . 4243) (nil fontified t 4219 . 4220) (nil fontified t 4211 . 4219) (nil fontified t 4202 . 4211) (nil fontified t 4201 . 4202) (nil fontified t 4183 . 4201) (nil fontified t 4182 . 4183) (nil fontified t 4179 . 4182) (nil fontified t 4178 . 4179) (nil fontified t 4163 . 4178) (nil fontified t 4162 . 4163) (nil fontified t 4158 . 4162) (nil fontified t 4157 . 4158) (nil fontified t 4154 . 4157) (nil fontified t 4153 . 4154) (nil fontified t 4151 . 4153) (nil fontified t 4146 . 4151) (nil fontified t 4145 . 4146) (nil fontified t 4139 . 4145) (nil fontified t 4138 . 4139) (nil fontified t 4121 . 4138) (nil fontified t 4120 . 4121) (nil fontified t 4118 . 4120) (nil fontified t 4095 . 4118) (nil fontified t 4094 . 4095) (nil fontified t 4086 . 4094) (nil fontified t 4077 . 4086) (nil fontified t 4076 . 4077) (nil fontified t 4058 . 4076) (nil fontified t 4057 . 4058) (nil fontified t 4054 . 4057) (nil fontified t 4053 . 4054) (nil fontified t 4038 . 4053) (nil fontified t 4037 . 4038) (nil fontified t 4033 . 4037) (nil fontified t 4032 . 4033) (nil fontified t 4029 . 4032) (nil fontified t 4028 . 4029) (nil fontified t 4026 . 4028) (nil fontified t 4021 . 4026) (nil fontified t 4020 . 4021) (nil fontified t 4014 . 4020) (nil fontified t 4013 . 4014) (nil fontified t 4003 . 4013) (nil fontified t 4002 . 4003) (nil fontified t 4000 . 4002) (nil fontified t 3982 . 4000) (nil fontified t 3981 . 3982) (nil fontified t 3973 . 3981) (nil fontified t 3964 . 3973) (nil fontified t 3963 . 3964) (nil fontified t 3949 . 3963) (nil fontified t 3948 . 3949) (nil fontified t 3940 . 3948) (nil fontified t 3939 . 3940) (nil fontified t 3935 . 3939) (nil fontified t 3934 . 3935) (nil fontified t 3931 . 3934) (nil fontified t 3930 . 3931) (nil fontified t 3928 . 3930) (nil fontified t 3923 . 3928) (nil fontified t 3922 . 3923) (nil fontified t 3916 . 3922) (nil fontified t 3915 . 3916) (nil fontified t 3904 . 3915) (nil fontified t 3903 . 3904) (nil fontified t 3901 . 3903) (nil fontified t 3882 . 3901) (nil fontified t 3881 . 3882) (nil fontified t 3873 . 3881) (nil fontified t 3865 . 3873) (nil fontified t 3864 . 3865) (nil fontified t 3863 . 3864) (nil fontified t 3848 . 3863) (nil fontified t 3847 . 3848) (nil fontified t 3838 . 3847) (nil fontified t 3837 . 3838) (nil fontified t 3833 . 3837) (nil fontified t 3832 . 3833) (nil fontified t 3829 . 3832) (nil fontified t 3828 . 3829) (nil fontified t 3826 . 3828) (nil fontified t 3822 . 3826) (nil fontified t 3821 . 3822) (nil fontified t 3820 . 3821) (nil fontified t 3816 . 3820) (nil fontified t 3814 . 3816) (nil fontified t 3813 . 3814) (nil fontified t 3805 . 3813) (nil fontified t 3804 . 3805) (nil fontified t 3803 . 3804) (nil fontified t 3802 . 3803) (nil fontified t 3801 . 3802) (nil fontified t 3791 . 3801) (nil fontified t 3790 . 3791) (nil fontified t 3789 . 3790) (nil fontified t 3788 . 3789) (nil fontified t 3778 . 3788) (nil fontified t 3777 . 3778) (nil fontified t 3776 . 3777) (nil fontified t 3775 . 3776) (nil fontified t 3755 . 3775) (nil fontified t 3753 . 3755) (nil fontified t 3751 . 3753) (nil fontified t 3749 . 3751) (nil fontified t 3747 . 3749) (nil fontified t 3745 . 3747) (nil fontified t 3743 . 3745) (nil fontified t 3741 . 3743) (nil fontified t 3721 . 3741) (nil fontified t 3709 . 3721) (nil fontified t 3708 . 3709) (nil fontified t 3707 . 3708) (nil fontified t 3699 . 3707) (nil fontified t 3691 . 3699) (nil fontified t 3690 . 3691) (nil fontified t 3689 . 3690) (nil fontified t 3675 . 3689) (nil fontified t 3674 . 3675) (nil fontified t 3666 . 3674) (nil fontified t 3665 . 3666) (nil fontified t 3661 . 3665) (nil fontified t 3660 . 3661) (nil fontified t 3657 . 3660) (nil fontified t 3656 . 3657) (nil fontified t 3654 . 3656) (nil fontified t 3649 . 3654) (nil fontified t 3648 . 3649) (nil fontified t 3642 . 3648) (nil fontified t 3641 . 3642) (nil fontified t 3632 . 3641) (nil fontified t 3631 . 3632) (nil fontified t 3630 . 3631) (nil fontified t 3629 . 3630) (nil fontified t 3620 . 3629) (nil fontified t 3619 . 3620) (nil fontified t 3618 . 3619) (nil fontified t 3617 . 3618) (nil fontified t 3608 . 3617) (nil fontified t 3607 . 3608) (nil fontified t 3606 . 3607) (nil fontified t 3605 . 3606) (nil fontified t 3584 . 3605) (nil fontified t 3582 . 3584) (nil fontified t 3580 . 3582) (nil fontified t 3578 . 3580) (nil fontified t 3576 . 3578) (nil fontified t 3574 . 3576) (nil fontified t 3572 . 3574) (nil fontified t 3552 . 3572) (nil fontified t 3539 . 3552) (nil fontified t 3538 . 3539) (nil fontified t 3530 . 3538) (nil fontified t 3521 . 3530) (nil fontified t 3520 . 3521) (nil fontified t 3507 . 3520) (nil fontified t 3506 . 3507) (nil fontified t 3499 . 3506) (nil fontified t 3498 . 3499) (nil fontified t 3494 . 3498) (nil fontified t 3493 . 3494) (nil fontified t 3490 . 3493) (nil fontified t 3489 . 3490) (nil fontified t 3487 . 3489) (nil fontified t 3482 . 3487) (nil fontified t 3481 . 3482) (nil fontified t 3475 . 3481) (nil fontified t 3474 . 3475) (nil fontified t 3466 . 3474) (nil fontified t 3465 . 3466) (nil fontified t 3464 . 3465) (nil fontified t 3463 . 3464) (nil fontified t 3462 . 3463) (nil fontified t 3453 . 3462) (nil fontified t 3452 . 3453) (nil fontified t 3451 . 3452) (nil fontified t 3450 . 3451) (nil fontified t 3441 . 3450) (nil fontified t 3440 . 3441) (nil fontified t 3439 . 3440) (nil fontified t 3438 . 3439) (nil fontified t 3431 . 3438) (nil fontified t 3419 . 3431) (nil fontified t 3417 . 3419) (nil fontified t 3415 . 3417) (nil fontified t 3413 . 3415) (nil fontified t 3411 . 3413) (nil fontified t 3409 . 3411) (nil fontified t 3407 . 3409) (nil fontified t 3405 . 3407) (nil fontified t 3385 . 3405) (nil fontified t 3373 . 3385) (nil fontified t 3372 . 3373) (nil fontified t 3371 . 3372) (nil fontified t 3363 . 3371) (nil fontified t 3355 . 3363) (nil fontified t 3354 . 3355) (nil fontified t 3353 . 3354) (nil fontified t 3340 . 3353) (nil fontified t 3339 . 3340) (nil fontified t 3332 . 3339) (nil fontified t 3331 . 3332) (nil fontified t 3327 . 3331) (nil fontified t 3326 . 3327) (nil fontified t 3323 . 3326) (nil fontified t 3322 . 3323) (nil fontified t 3320 . 3322) (nil fontified t 3316 . 3320) (nil fontified t 3314 . 3316) (nil fontified t 3313 . 3314) (nil fontified t 3302 . 3313) (nil fontified t 3299 . 3302) (nil fontified t 3297 . 3299) (nil fontified t 3286 . 3297) (nil fontified t 3284 . 3286) (nil fontified t 3274 . 3284) (nil fontified t 3273 . 3274) (nil fontified t 3265 . 3273) (nil fontified t 3261 . 3265) (nil fontified t 3260 . 3261) (nil fontified t 3259 . 3260) (nil fontified t 3258 . 3259) (nil fontified t 3257 . 3258) (nil fontified t 3256 . 3257) (nil fontified t 3246 . 3256) (nil fontified t 3245 . 3246) (nil fontified t 3244 . 3245) (nil fontified t 3229 . 3244) (nil fontified t 3227 . 3229) (nil fontified t 3226 . 3227) (nil fontified t 3225 . 3226) (nil fontified t 3221 . 3225) (nil fontified t 3220 . 3221) (nil fontified t 3219 . 3220) (nil fontified t 3216 . 3219) (nil fontified t 3215 . 3216) (nil fontified t 3214 . 3215) (nil fontified t 3213 . 3214) (nil fontified t 3212 . 3213) (nil fontified t 3211 . 3212) (nil fontified t 3207 . 3211) (nil fontified t 3205 . 3207) (nil fontified t 3204 . 3205) (nil fontified t 3196 . 3204) (nil fontified t 3195 . 3196) (nil fontified t 3194 . 3195) (nil fontified t 3185 . 3194) (nil fontified t 3184 . 3185) (nil fontified t 3170 . 3184) (nil fontified t 3158 . 3170) (nil fontified t 3156 . 3158) (nil fontified t 3155 . 3156) (nil fontified t 3146 . 3155) (nil fontified t 3145 . 3146) (nil fontified t 3131 . 3145) (nil fontified t 3119 . 3131) (nil fontified t 3117 . 3119) (nil fontified t 3116 . 3117) (nil fontified t 3111 . 3116) (nil fontified t 3110 . 3111) (nil fontified t 3096 . 3110) (nil fontified t 3084 . 3096) (nil fontified t 3081 . 3084) (nil fontified t 3069 . 3081) (nil fontified t 3067 . 3069) (nil fontified t 3065 . 3067) (nil fontified t 3063 . 3065) (nil fontified t 3061 . 3063) (nil fontified t 3059 . 3061) (nil fontified t 3057 . 3059) (nil fontified t 3055 . 3057) (nil fontified t 3050 . 3055) (nil fontified t 3048 . 3050) (nil fontified t 3041 . 3048) (nil fontified t 3029 . 3041) (nil fontified t 3028 . 3029) (nil fontified t 3027 . 3028) (nil fontified t 3019 . 3027) (nil fontified t 3011 . 3019) (nil fontified t 3010 . 3011) (nil fontified t 3009 . 3010) (nil fontified t 3004 . 3009) (nil fontified t 3003 . 3004) (nil fontified t 3002 . 3003) (nil fontified t 2980 . 3002) (nil fontified t 2978 . 2980) (nil fontified t 2977 . 2978) (nil fontified t 2976 . 2977) (nil fontified t 2975 . 2976) (nil fontified t 2972 . 2975) (nil fontified t 2968 . 2972) (nil fontified t 2966 . 2968) (nil fontified t 2965 . 2966) (nil fontified t 2956 . 2965) (nil fontified t 2955 . 2956) (nil fontified t 2954 . 2955) (nil fontified t 2936 . 2954) (nil fontified t 2935 . 2936) (nil fontified t 2928 . 2935) (nil fontified t 2924 . 2928) (nil fontified t 2923 . 2924) (nil fontified t 2921 . 2923) (nil fontified t 2920 . 2921) (nil fontified t 2916 . 2920) (nil fontified t 2915 . 2916) (nil fontified t 2914 . 2915) (nil fontified t 2891 . 2914) (nil fontified t 2890 . 2891) (nil fontified t 2888 . 2890) (nil fontified t 2876 . 2888) (nil fontified t 2874 . 2876) (nil fontified t 2867 . 2874) (nil fontified t 2866 . 2867) (nil fontified t 2858 . 2866) (nil fontified t 2854 . 2858) (nil fontified t 2773 . 2854) (nil fontified t 2770 . 2773) (nil fontified t 2764 . 2770) (nil fontified t 2763 . 2764) (nil fontified t 2732 . 2763) (nil fontified t 2731 . 2732) (nil fontified t 2714 . 2731) (nil fontified t 2713 . 2714) (nil fontified t 2709 . 2713) (nil fontified t 2705 . 2709) (nil fontified t 2703 . 2705) (nil fontified t 2693 . 2703) (nil fontified t 2692 . 2693) (nil fontified t 2684 . 2692) (nil fontified t 2674 . 2684) (nil fontified t 2673 . 2674) (nil fontified t 2672 . 2673) (nil fontified t 2664 . 2672) (nil fontified t 2663 . 2664) (nil fontified t 2662 . 2663) (nil fontified t 2657 . 2662) (nil fontified t 2656 . 2657) (nil fontified t 2642 . 2656) (nil fontified t 2641 . 2642) (nil fontified t 2626 . 2641) (nil fontified t 2625 . 2626) (nil fontified t 2624 . 2625) (nil fontified t 2623 . 2624) (nil fontified t 2620 . 2623) (nil fontified t 2618 . 2620) (nil fontified t 2606 . 2618) (nil fontified t 2605 . 2606) (nil fontified t 2602 . 2605) (nil fontified t 2592 . 2602) (nil fontified t 2587 . 2592) (nil fontified t 2586 . 2587) (nil fontified t 2584 . 2586) (nil fontified t 2583 . 2584) (nil fontified t 2582 . 2583) (nil fontified t 2581 . 2582) (nil fontified t 2580 . 2581) (nil fontified t 2548 . 2580) (nil fontified t 2545 . 2548) (nil fontified t 2544 . 2545) (nil fontified t 2541 . 2544) (nil fontified t 2532 . 2541) (nil fontified t 2531 . 2532) (nil fontified t 2530 . 2531) (nil fontified t 2529 . 2530) (nil fontified t 2528 . 2529) (nil fontified t 2503 . 2528) (nil fontified t 2501 . 2503) (nil fontified t 2500 . 2501) (nil fontified t 2499 . 2500) (nil fontified t 2498 . 2499) (nil fontified t 2495 . 2498) (nil fontified t 2485 . 2495) (nil fontified t 2476 . 2485) (nil fontified t 2475 . 2476) (nil fontified t 2472 . 2475) (nil fontified t 2471 . 2472) (nil fontified t 2468 . 2471) (nil fontified t 2461 . 2468) (nil fontified t 2460 . 2461) (nil fontified t 2455 . 2460) (nil fontified t 2454 . 2455) (nil fontified t 2453 . 2454) (nil fontified t 2411 . 2453) (nil fontified t 2410 . 2411) (nil fontified t 2408 . 2410) (nil fontified t 2392 . 2408) (nil fontified t 2390 . 2392) (nil fontified t 2375 . 2390) (nil fontified t 2366 . 2375) (nil fontified t 2365 . 2366) (nil fontified t 2357 . 2365) (nil fontified t 2350 . 2357) (nil fontified t 2349 . 2350) (nil fontified t 2328 . 2349) (nil fontified t 2327 . 2328) (nil fontified t 2323 . 2327) (nil fontified t 2302 . 2323) (nil fontified t 2300 . 2302) (nil fontified t 2293 . 2300) (nil fontified t 2292 . 2293) (nil fontified t 2284 . 2292) (nil fontified t 2278 . 2284) (nil fontified t 2277 . 2278) (nil fontified t 2266 . 2277) (nil fontified t 2263 . 2266) (nil fontified t 2261 . 2263) (nil fontified t 2250 . 2261) (nil fontified t 2248 . 2250) (nil fontified t 2241 . 2248) (nil fontified t 2240 . 2241) (nil fontified t 2232 . 2240) (nil fontified t 2219 . 2232) (nil fontified t 2218 . 2219) (nil fontified t 2215 . 2218) (nil fontified t 2211 . 2215) (nil fontified t 2210 . 2211) (nil fontified t 2207 . 2210) (nil fontified t 2202 . 2207) (nil fontified t 2201 . 2202) (nil fontified t 2200 . 2201) (nil fontified t 2199 . 2200) (nil fontified t 2198 . 2199) (nil fontified t 2188 . 2198) (nil fontified t 2187 . 2188) (nil fontified t 2186 . 2187) (nil fontified t 2174 . 2186) (nil fontified t 2172 . 2174) (nil fontified t 2171 . 2172) (nil fontified t 2170 . 2171) (nil fontified t 2166 . 2170) (nil fontified t 2165 . 2166) (nil fontified t 2164 . 2165) (nil fontified t 2161 . 2164) (nil rear-nonsticky t 4872 . 4873) (t 26014 22970 36199 559000)) (26014 22978 149281 0) 0 nil])
([nil nil ((5062 . 5066) (5052 . 5060) (#("    " 0 4 (fontified t)) . 5052) (5008 . 5012) (4959 . 4967) (#("    " 0 4 (fontified t)) . 4959) (4948 . 4956) (#("    " 0 4 (fontified t)) . 4948) (4889 . 4893) (4819 . 4827) (#("    " 0 4 (fontified t)) . 4819) (4809 . 4817) (#("    " 0 4 (fontified t)) . 4809) (4749 . 4753) (4683 . 4691) (#("    " 0 4 (fontified t)) . 4683) (4673 . 4681) (#("    " 0 4 (fontified t)) . 4673) (4612 . 4616) (4540 . 4548) (#("    " 0 4 (fontified t)) . 4540) (4530 . 4538) (#("    " 0 4 (fontified t)) . 4530) (4470 . 4474) (4400 . 4408) (#("    " 0 4 (fontified t)) . 4400) (4390 . 4398) (#("    " 0 4 (fontified t)) . 4390) (4331 . 4335) (4263 . 4271) (#("    " 0 4 (fontified t)) . 4263) (4253 . 4261) (#("    " 0 4 (fontified t)) . 4253) (4194 . 4198) (4126 . 4134) (#("    " 0 4 (fontified t)) . 4126) (4116 . 4124) (#("    " 0 4 (fontified t)) . 4116) (4069 . 4073) (4016 . 4024) (#("    " 0 4 (fontified t)) . 4016) (4006 . 4014) (#("    " 0 4 (fontified t)) . 4006) (3957 . 3961) (3902 . 3910) (#("    " 0 4 (fontified t)) . 3902) (3892 . 3900) (#("    " 0 4 (fontified t)) . 3892) (3885 . 3889) (3823 . 3839) (#("            " 0 12 (fontified t)) . 3823) (3773 . 3789) (#("            " 0 12 (fontified t)) . 3773) (3759 . 3763) (3706 . 3714) (#("    " 0 4 (fontified t)) . 3706) (3696 . 3704) (#("    " 0 4 (fontified t)) . 3696) (3689 . 3693) (3630 . 3646) (#("            " 0 12 (fontified t)) . 3630) (3580 . 3596) (#("            " 0 12 (fontified t)) . 3580) (3566 . 3570) (3515 . 3523) (#("    " 0 4 (fontified t)) . 3515) (3505 . 3513) (#("    " 0 4 (fontified t)) . 3505) (3498 . 3502) (3439 . 3455) (#("            " 0 12 (fontified t)) . 3439) (3389 . 3405) (#("            " 0 12 (fontified t)) . 3389) (3375 . 3379) (3324 . 3332) (#("    " 0 4 (fontified t)) . 3324) (3265 . 3273) (#("    " 0 4 (fontified t)) . 3265) (3216 . 3220) 3215 (t 26014 23010 759984 947000)) nil (26014 23022 430719 0) 0 nil])
([nil nil ((3487 . 3503) (#("            " 0 12 (fontified t)) . 3487) (undo-tree-id714 . -9) (undo-tree-id715 . -9) (undo-tree-id716 . -9) (undo-tree-id717 . -9) (undo-tree-id718 . -9) (undo-tree-id719 . -9) (3437 . 3453) (#("            " 0 12 (fontified t)) . 3437) (3423 . 3427) (3372 . 3380) (#("    " 0 4 (fontified t)) . 3372) (3313 . 3321) (#("    " 0 4 (fontified t)) . 3313) (3264 . 3268) (3257 . 3261) (3247 . 3255) (#("    " 0 4 (fontified t)) . 3247) (3240 . 3244) (3190 . 3206) (#("            " 0 12 (fontified t)) . 3190) (undo-tree-id720 . -12) (3147 . 3163) (#("            " 0 12 (fontified t)) . 3147) (undo-tree-id721 . -11) (3108 . 3124) (#("            " 0 12 (fontified t)) . 3108) (3089 . 3105) (#("            " 0 12 (fontified t)) . 3089) (undo-tree-id722 . -9) (3045 . 3061) (#("            " 0 12 (fontified t)) . 3045) (undo-tree-id723 . -8) (undo-tree-id724 . -8) (undo-tree-id725 . -8) (undo-tree-id726 . -8) (3031 . 3035) (2976 . 2984) (#("    " 0 4 (fontified t)) . 2976) (2928 . 2936) (#("    " 0 4 (fontified t)) . 2928) (2854 . 2862) (#("    " 0 4 (fontified t)) . 2854) 2863 (t 26014 22970 36199 559000)) ((2854 . 2858) (#("        " 0 8 (fontified t)) . 2854) (2928 . 2932) (#("        " 0 8 (fontified t)) . 2928) (2976 . 2980) (#("        " 0 8 (fontified t)) . 2976) (#("    " 0 4 (fontified t)) . 3031) (3045 . 3057) (#("                " 0 16 (fontified t)) . 3045) (3089 . 3101) (#("                " 0 16 (fontified t)) . 3089) (3108 . 3120) (#("                " 0 16 (fontified t)) . 3108) (3147 . 3159) (#("                " 0 16 (fontified t)) . 3147) (3190 . 3202) (#("                " 0 16 (fontified t)) . 3190) (#("    " 0 4 (fontified t)) . 3240) (3247 . 3251) (#("        " 0 8 (fontified t)) . 3247) (#("    " 0 4 (fontified t)) . 3257) (#("    " 0 4 (fontified t)) . 3264) (3313 . 3317) (#("        " 0 8 (fontified t)) . 3313) (3372 . 3376) (#("        " 0 8 (fontified t)) . 3372) (#("    " 0 4 (fontified t)) . 3423) (3437 . 3449) (#("                " 0 16 (fontified t)) . 3437) (3487 . 3499) (#("                " 0 16 (fontified t)) . 3487)) (26014 22978 145708 0) 0 nil])
([nil nil ((3321 . 3325) (3311 . 3319) (#("    " 0 4 (fontified t)) . 3311) (3304 . 3308) (3254 . 3270) (#("            " 0 12 (fontified t)) . 3254) (3211 . 3227) (#("            " 0 12 (fontified t)) . 3211) (3172 . 3188) (#("            " 0 12 (fontified t)) . 3172) (3153 . 3169) (#("            " 0 12 (fontified t)) . 3153) (3109 . 3125) (#("            " 0 12 (fontified t)) . 3109) (3095 . 3099) (3040 . 3048) (#("    " 0 4 (fontified t)) . 3040) (2992 . 3000) (#("    " 0 4 (fontified t)) . 2992) (2918 . 2926) (#("    " 0 4 (fontified t)) . 2918) (2826 . 2834) (#("    " 0 4 (fontified t)) . 2826) (2815 . 2823) (#("    " 0 4 (fontified t)) . 2815) (2794 . 2798) (2732 . 2736) (2646 . 2650) (2581 . 2585) (2527 . 2535) (#("    " 0 4 (fontified t)) . 2527) (2496 . 2504) (#("    " 0 4 (fontified t)) . 2496) (2484 . 2492) (#("    " 0 4 (fontified t)) . 2484) (2456 . 2460) (2441 . 2445) (2391 . 2395) (2365 . 2373) (#("    " 0 4 (fontified t)) . 2365) (2288 . 2296) (#("    " 0 4 (fontified t)) . 2288) (2232 . 2240) (#("    " 0 4 (fontified t)) . 2232) (2203 . 2211) (#("    " 0 4 (fontified t)) . 2203) 2165) nil (26014 23022 430690 0) 0 nil])
nil
([nil nil ((#("
impl Vertex for ModelVertex {
    fn desc() -> wgpu::VertexBufferLayout<'static> {
        todo!();
    }
}" 0 1 (fontified t) 1 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 12 (face font-lock-type-face fontified t) 12 13 (fontified t) 13 16 (face font-lock-keyword-face fontified t) 16 17 (fontified t) 17 28 (face font-lock-type-face fontified t) 28 29 (fontified t) 29 30 (face (rainbow-delimiters-depth-1-face) fontified t) 30 35 (fontified t) 35 37 (face font-lock-keyword-face fontified t) 37 38 (fontified t) 38 42 (face font-lock-function-name-face fontified t) 42 43 (face (rainbow-delimiters-depth-2-face) fontified t) 43 44 (face (rainbow-delimiters-depth-2-face) fontified t) 44 46 (fontified t) 46 47 (fontified t syntax-table (1)) 47 48 (fontified t) 48 52 (face font-lock-constant-face fontified t) 52 54 (fontified t) 54 72 (face font-lock-type-face fontified t) 72 73 (face (rainbow-delimiters-depth-2-face) fontified t) 73 74 (fontified t) 74 80 (face font-lock-keyword-face fontified t) 80 81 (face (rainbow-delimiters-depth-2-face) fontified t) 81 82 (fontified t) 82 83 (face (rainbow-delimiters-depth-2-face) fontified t) 83 92 (fontified t) 92 97 (face font-lock-preprocessor-face fontified t) 97 98 (face (rainbow-delimiters-depth-3-face) fontified t) 98 99 (face (rainbow-delimiters-depth-3-face) fontified t) 99 105 (fontified t) 105 106 (face (rainbow-delimiters-depth-2-face) fontified t) 106 107 (fontified t) 107 108 (face (rainbow-delimiters-depth-1-face) fontified t)) . 295) (undo-tree-id750 . -108) (undo-tree-id751 . -108) (undo-tree-id752 . -108) (undo-tree-id753 . -108) (undo-tree-id754 . -106) (undo-tree-id755 . -92) (undo-tree-id756 . -91) (undo-tree-id757 . -90) (undo-tree-id758 . -36) (undo-tree-id759 . -5) (undo-tree-id760 . -108) (t 26014 23022 442879 437000)) nil (26014 23898 445450 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t rear-nonsticky t)) . -295) (undo-tree-id748 . -1) (undo-tree-id749 . -1) 296) nil (26014 23898 445435 0) 0 nil])
([nil nil ((#("texture" 0 7 (fontified t)) . -12) (undo-tree-id842 . -7) (undo-tree-id843 . -7) (undo-tree-id844 . -7) (undo-tree-id845 . -7) 19 (t 26014 23898 458185 530000)) nil (26014 23939 160660 0) 0 nil])
([nil nil ((12 . 14)) nil (26014 23939 160655 0) 0 nil])
([nil nil ((#("use crate::te;" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 9 (face font-lock-keyword-face fontified t) 9 14 (fontified t)) . 1) (undo-tree-id838 . -11) (undo-tree-id839 . -11) (undo-tree-id840 . -11) (undo-tree-id841 . 1)) nil (26014 23939 160654 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1) (undo-tree-id837 . 1)) nil (26014 23939 160649 0) 0 nil])
([nil nil ((1 . 2)) nil (26014 23939 160647 0) 0 nil])
([nil nil ((2 . 6)) nil (26014 23939 160646 0) 0 nil])
([nil nil ((5 . 12) (#("c" 0 1 (fontified nil)) . 5) (5 . 6) (#("crate::" 0 7 (fontified nil)) . -5) (5 . 12) (#("c" 0 1 (face font-lock-constant-face fontified t)) . -5) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) 6) nil (26014 23939 160644 0) 0 nil])
([nil nil ((12 . 13)) nil (26014 23939 160637 0) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -12) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) 13) nil (26014 23939 160636 0) 0 nil])
([nil nil ((12 . 14)) nil (26014 23939 160628 0) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -12) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (#("e" 0 1 (fontified t)) . -13) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) 14) nil (26014 23939 160626 0) 0 nil])
([nil nil ((12 . 13)) nil (26014 23939 160609 0) 0 nil])
([nil nil ((#("T" 0 1 (face font-lock-type-face fontified t)) . -12) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) 13) nil (26014 23939 160607 0) 0 nil])
([nil nil ((12 . 14)) nil (26014 23939 160603 0) 0 nil])
([nil nil ((#("use crate::te" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 9 (face font-lock-keyword-face fontified t) 9 13 (fontified t)) . 1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -2) (undo-tree-id767 . -2) (undo-tree-id768 . -2) (undo-tree-id769 . -3) (undo-tree-id770 . -3) (undo-tree-id771 . -3) (undo-tree-id772 . -4) (undo-tree-id773 . -4) (undo-tree-id774 . -4) (undo-tree-id775 . -4) (undo-tree-id776 . -4) (undo-tree-id777 . -4) (undo-tree-id778 . -4) (undo-tree-id779 . -11) (undo-tree-id780 . -11) (undo-tree-id781 . -11) (undo-tree-id782 . -11) (undo-tree-id783 . -11) (undo-tree-id784 . -11) (undo-tree-id785 . -11) (undo-tree-id786 . -11) (undo-tree-id787 . -11) (undo-tree-id788 . -11) (undo-tree-id789 . -11) (undo-tree-id790 . -11) (undo-tree-id791 . -11) (undo-tree-id792 . -11) (undo-tree-id793 . -11) (undo-tree-id794 . -11) (undo-tree-id795 . -11) (undo-tree-id796 . -11) (undo-tree-id797 . -11) (undo-tree-id798 . -11) (undo-tree-id799 . -11) (undo-tree-id800 . -11) (undo-tree-id801 . -11) (undo-tree-id802 . -11) (undo-tree-id803 . -12) (undo-tree-id804 . -13) (undo-tree-id805 . -13) (undo-tree-id806 . -13) (undo-tree-id807 . -13) (undo-tree-id808 . -13)) nil (26014 23939 160600 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1) (undo-tree-id761 . 1) (undo-tree-id762 . -1)) nil (26014 23939 160550 0) 0 nil])
([nil nil ((#("Texture" 0 7 (face font-lock-type-face fontified t)) . -1447) (undo-tree-id873 . -6) (undo-tree-id874 . -7) (undo-tree-id875 . -6) (undo-tree-id876 . -6) 1454 (t 26014 23939 172753 512000)) nil (26014 23986 78129 0) 0 nil])
([nil nil ((#("texture::" 0 7 (face font-lock-constant-face fontified t) 7 9 (fontified t)) . -1438) (undo-tree-id869 . -9) (undo-tree-id870 . -9) (undo-tree-id871 . -9) (undo-tree-id872 . -9) 1447) nil (26014 23986 78123 0) 0 nil])
([nil nil ((1438 . 1445)) nil (26014 23986 78117 0) 0 nil])
([nil nil ((#("texture" 0 7 (fontified t)) . -1438) (undo-tree-id868 . -7) 1445) nil (26014 23986 78116 0) 0 nil])
([nil nil ((1438 . 1442)) nil (26014 23986 78114 0) 0 nil])
([nil nil ((#("Texu" 0 4 (face font-lock-type-face fontified t)) . -1438) (undo-tree-id867 . -4) 1442) nil (26014 23986 78113 0) 0 nil])
([nil nil ((1438 . 1440)) nil (26014 23986 78111 0) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -1438) (undo-tree-id865 . -1) (#("e" 0 1 (fontified t)) . -1439) (undo-tree-id866 . -1) 1440) nil (26014 23986 78109 0) 0 nil])
([nil nil ((1438 . 1443)) nil (26014 23986 78106 0) 0 nil])
([nil nil ((1 . 22) (1438 . 1438) (1438 . 1445) (#("textu" 0 5 (fontified nil)) . 1438) (1438 . 1443) (#("texture (use crate::texture)" 0 28 (fontified nil)) . -1438) (1438 . 1466) (#("textu" 0 5 (fontified t)) . -1438) (undo-tree-id850 . -5) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -2) (undo-tree-id855 . -2) (undo-tree-id856 . -3) (undo-tree-id857 . -3) (undo-tree-id858 . -4) (undo-tree-id859 . -4) (undo-tree-id860 . -5) (undo-tree-id861 . -5) (undo-tree-id862 . -5) (undo-tree-id863 . -5) (undo-tree-id864 . -5) 1443) nil (26014 23986 78104 0) 0 nil])
([nil nil ((1466 . 1469)) nil (26014 23986 78085 0) 0 nil])
([nil nil ((1468 . 1475) (#("T" 0 1 (fontified nil)) . 1468) (1468 . 1469) (#("Texture" 0 7 (fontified nil)) . -1468) (1468 . 1475) (#("T" 0 1 (face font-lock-type-face fontified t)) . -1468) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) 1469) nil (26014 24158 302836 0) 0 nil])
([nil nil ((1876 . 1881) (t 26014 24159 49323 110000)) nil (26014 27630 329602 0) 0 nil] [nil nil ((1877 . 1879) (t 26014 23986 90422 570000)) ((#("//" 0 2 (face font-lock-comment-delimiter-face fontified t)) . 1877)) (26014 24157 333803 0) 0 nil])
([nil nil ((1881 . 1883)) nil (26014 27630 329601 0) 0 nil])
([nil nil ((1996 . 1998)) ((#("//" 0 2 (face font-lock-comment-delimiter-face fontified t)) . 1996)) (26014 24156 790548 0) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -1881) (undo-tree-id1295 . -1) (#("b" 0 1 (fontified t)) . -1882) (undo-tree-id1296 . -1) 1883) nil (26014 27630 329600 0) 0 nil])
([nil nil ((apply -144 3224 5219 undo--wrap-and-run-primitive-undo 3224 5219 ((" " . 3224) (5215 . 5218) (5202 . 5205) (5147 . 5150) (5103 . 5106) (5089 . 5092) (5019 . 5022) (4954 . 4957) (4941 . 4944) (4870 . 4873) (4809 . 4812) (4796 . 4799) (4724 . 4727) (4657 . 4660) (4644 . 4647) (4573 . 4576) (4508 . 4511) (4495 . 4498) (4425 . 4428) (4362 . 4365) (4349 . 4352) (4279 . 4282) (4216 . 4219) (4203 . 4206) (4145 . 4148) (4097 . 4100) (4084 . 4087) (4024 . 4027) (3974 . 3977) (3961 . 3964) (3943 . 3946) (3886 . 3889) (3833 . 3836) (3808 . 3811) (3760 . 3763) (3747 . 3750) (3729 . 3732) (3675 . 3678) (3622 . 3625) (3597 . 3600) (3551 . 3554) (3538 . 3541) (3520 . 3523) (3466 . 3469) (3413 . 3416) (3388 . 3391) (3342 . 3345) (3280 . 3283) (3228 . 3231) (3224 . 3225) 5074))) ((apply 144 3224 5075 undo--wrap-and-run-primitive-undo 3224 5075 ((" " . 3224) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3228) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3280) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3342) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3388) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3413) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3466) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3520) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3538) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3551) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3597) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3622) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3675) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3729) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3747) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3760) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3808) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3833) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3886) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3943) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3961) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3974) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 4024) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 4084) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 4097) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 4145) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 4203) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 4216) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 4279) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 4349) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 4362) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 4425) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 4495) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 4508) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 4573) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 4644) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 4657) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 4724) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 4796) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 4809) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 4870) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 4941) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 4954) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 5019) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 5089) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 5103) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 5147) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 5202) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 5215) (3224 . 3225) 3275))) (26014 24123 376592 0) 0 nil])
([nil nil ((1881 . 1884)) nil (26014 27630 329596 0) 0 nil])
nil
([nil nil ((1881 . 1885) (#("tob" 0 3 (fontified nil)) . 1881) (1881 . 1884) (#("tobj" 0 4 (fontified nil)) . -1881) (1881 . 1885) (#("tob" 0 3 (fontified t)) . -1881) (undo-tree-id1294 . -3) 1884) nil (26014 27630 329595 0) 0 nil])
([nil nil ((1885 . 1891)) nil (26014 27630 329591 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1912 1916 nil nil nil t #s(yas--exit 1917 nil))) #s(yas--exit 1917 nil) 116 nil #s(yas--field 1 1912 1916 nil nil nil t #s(yas--exit 1917 nil)) nil nil)) (1887 . 1906) (#("load_mtl(${1:file_name})$0" 0 26 (fontified nil)) . 1887) (1887 . 1913) (#("load" 0 4 (fontified nil)) . 1887) (1887 . 1891) (#("load_mtl(…)" 0 11 (fontified nil)) . -1887) (1887 . 1898) (#("load" 0 4 (fontified t)) . -1887) (undo-tree-id1293 . -4) 1891) nil (26014 27630 329589 0) 0 nil])
([nil nil ((1905 . 1909)) nil (26014 27630 329585 0) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -1906) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (#("s" 0 1 (face font-lock-keyword-face fontified t)) . -1907) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (#("p" 0 1 (fontified t)) . -1908) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) 1909) nil (26014 27630 329583 0) 0 nil])
([nil nil ((1906 . 1910)) nil (26014 27630 329576 0) 0 nil])
([nil nil ((#("h" 0 1 (fontified t)) . -1909) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) 1910) nil (26014 27630 329575 0) 0 nil])
([nil nil ((#("pat" 0 3 (fontified t)) . -1906) (undo-tree-id1283 . -3) (undo-tree-id1284 . -3) 1909) nil (26014 27630 329571 0) 0 nil])
([nil nil ((#("name." 0 5 (fontified t)) . -1901) (undo-tree-id1281 . -5) (undo-tree-id1282 . -5) 1906) nil (26014 27630 329568 0) 0 nil])
([nil nil ((#("file_" 0 5 (fontified t)) . -1896) (undo-tree-id1279 . -5) (undo-tree-id1280 . -5) 1901) nil (26014 27630 329564 0) 0 nil])
([nil nil ((1896 . 1900)) nil (26014 27630 329561 0) 0 nil])
([nil nil ((1 . 17) (1896 . 1896) (1896 . 1900) (#("path" 0 4 (fontified nil)) . 1896) (1896 . 1900) (#("path (use std::path)" 0 20 (fontified nil)) . -1896) (1896 . 1916) (#("path" 0 4 (fontified t)) . -1896) (undo-tree-id1277 . -4) (undo-tree-id1278 . -4) 1900) nil (26014 27630 329559 0) 0 nil])
([nil nil ((apply yas--snippet-revive 1903 1917 #s(yas--snippet nil (#s(yas--field 1 1912 1916 nil nil nil t #s(yas--exit 1917 nil))) #s(yas--exit 1917 nil) 116 nil #s(yas--field 1 1912 1916 nil nil nil t #s(yas--exit 1917 nil)) nil nil))) nil (26014 27630 329538 0) 0 nil])
([nil nil ((#("path" 0 4 (fontified t)) . -1912) (undo-tree-id1273 . -4) (undo-tree-id1274 . -4) (undo-tree-id1275 . -4) (undo-tree-id1276 . -4) 1916) nil (26014 27630 329537 0) 0 nil])
([nil nil ((1912 . 1913)) nil (26014 27630 329532 0) 0 nil])
([nil nil ((1913 . 1916)) nil (26014 27630 329531 0) 0 nil])
([nil nil ((14 . 28) (1912 . 1912) (1912 . 1916) (#("Path" 0 4 (fontified nil)) . 1912) (1912 . 1916) (#("Path (use std::path::Path)" 0 26 (fontified nil)) . -1912) (1912 . 1938) (#("Path" 0 4 (face font-lock-type-face fontified t)) . -1912) (undo-tree-id1271 . -4) (undo-tree-id1272 . -4) 1916) nil (26014 27630 329530 0) 0 nil])
([nil nil ((1930 . 1933)) nil (26014 27630 329525 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1936 1945 nil nil nil t #s(yas--exit 1946 nil))) #s(yas--exit 1946 nil) 117 nil #s(yas--field 1 1936 1945 nil nil nil t #s(yas--exit 1946 nil)) nil nil)) (1932 . 1938) (#("new(${1:s})$0" 0 13 (fontified nil)) . 1932) (1932 . 1945) (#("n" 0 1 (fontified nil)) . 1932) (1932 . 1933) (#("new(…)" 0 6 (fontified nil)) . -1932) (1932 . 1938) (#("n" 0 1 (fontified t)) . -1932) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) 1933) nil (26014 27630 329522 0) 0 nil])
([nil nil ((#("s" 0 1 (fontified nil)) . 1937) (undo-tree-id1263 . -1) (1936 . 1937)) nil (26014 27630 329512 0) 0 nil])
([nil nil ((1936 . 1945) (#("f" 0 1 (fontified nil)) . 1936) (undo-tree-id1251 . -1) (1936 . 1937) (#("file_name" 0 9 (fontified nil)) . -1936) (undo-tree-id1252 . -9) (1936 . 1945) (#("f" 0 1 (fontified t)) . -1936) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) 1937) nil (26014 27630 329509 0) 0 nil])
([nil nil ((apply yas--snippet-revive 1932 1946 #s(yas--snippet nil (#s(yas--field 1 1936 1945 nil nil nil t #s(yas--exit 1946 nil))) #s(yas--exit 1946 nil) 117 nil #s(yas--field 1 1936 1945 nil nil nil t #s(yas--exit 1946 nil)) nil nil))) nil (26014 27630 329495 0) 0 nil])
([nil nil ((1946 . 1947)) nil (26014 27630 329494 0) 0 nil])
([nil nil ((1947 . 1951)) nil (26014 27630 329493 0) 0 nil])
([nil nil ((#("nane" 0 4 (fontified t)) . -1947) (undo-tree-id1214 . -4) (undo-tree-id1215 . -4) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -2) (undo-tree-id1223 . -2) (undo-tree-id1224 . -2) (undo-tree-id1225 . -2) (undo-tree-id1226 . -2) (undo-tree-id1227 . -2) (undo-tree-id1228 . -2) (undo-tree-id1229 . -2) (undo-tree-id1230 . -3) (undo-tree-id1231 . -3) (undo-tree-id1232 . -3) (undo-tree-id1233 . -3) (undo-tree-id1234 . -4) (undo-tree-id1235 . -4) (undo-tree-id1236 . -4) (undo-tree-id1237 . -4) (undo-tree-id1238 . -4) (undo-tree-id1239 . -4) (undo-tree-id1240 . -4) (undo-tree-id1241 . -4) (undo-tree-id1242 . -4) (undo-tree-id1243 . -4) (undo-tree-id1244 . -4) (undo-tree-id1245 . -4) (undo-tree-id1246 . -4) (undo-tree-id1247 . -4) (undo-tree-id1248 . -4) (undo-tree-id1249 . -4) (undo-tree-id1250 . -4) 1951) nil (26014 27630 329490 0) 0 nil])
([nil nil ((1947 . 1949)) nil (26014 27630 329454 0) 0 nil])
([nil nil ((apply yas--snippet-revive 1947 1958 #s(yas--snippet nil nil #s(yas--exit 1958 nil) 118 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1958 nil) 118 nil nil nil nil)) (1947 . 1958) (#("file_name()$0" 0 13 (fontified nil)) . 1947) (1947 . 1960) (#("fi" 0 2 (fontified nil)) . 1947) (1947 . 1949) (#("file_name() (alias basename)" 0 28 (fontified nil)) . -1947) (1947 . 1975) (#("fi" 0 2 (fontified t)) . -1947) (undo-tree-id1201 . -2) (undo-tree-id1202 . -2) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -2) (undo-tree-id1209 . -2) (undo-tree-id1210 . -2) (undo-tree-id1211 . -2) (undo-tree-id1212 . -2) (undo-tree-id1213 . -2) 1949) nil (26014 27630 329451 0) 0 nil])
([nil nil ((1958 . 1960)) nil (26014 27630 329436 0) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -1959) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) 1960) nil (26014 27630 329434 0) 0 nil])
([nil nil ((1959 . 1960)) nil (26014 27630 329425 0) 0 nil])
([nil nil ((apply yas--snippet-revive 1959 1967 #s(yas--snippet nil nil #s(yas--exit 1967 nil) 119 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1967 nil) 119 nil nil nil nil)) (1959 . 1967) (#("unwrap()$0" 0 10 (fontified nil)) . 1959) (1959 . 1969) (#("u" 0 1 (fontified nil)) . 1959) (1959 . 1960) (#("unwrap()" 0 8 (fontified nil)) . -1959) (1959 . 1967) (#("u" 0 1 (fontified t)) . -1959) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) 1960) nil (26014 27630 329423 0) 0 nil])
([nil nil ((1967 . 1970)) nil (26014 27630 329413 0) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -1969) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) 1970) nil (26014 27630 329411 0) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -1966) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (#("." 0 1 (fontified t)) . -1967) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (#("p" 0 1 (fontified t)) . -1968) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) 1969) nil (26014 27630 329399 0) 0 nil])
([nil nil ((#("    tobj::load_mtl(Path::new(file_name).file_name().unwrap()" 0 4 (fontified t) 4 8 (face font-lock-constant-face fontified t) 8 10 (fontified t) 10 18 (fontified t) 18 19 (face (rainbow-delimiters-depth-2-face) fontified t) 19 23 (face font-lock-type-face fontified t) 23 25 (fontified t) 25 28 (fontified t) 28 29 (face (rainbow-delimiters-depth-3-face) fontified t) 29 38 (fontified t) 38 39 (face (rainbow-delimiters-depth-3-face) fontified t) 39 40 (fontified t) 40 49 (fontified t) 49 50 (face (rainbow-delimiters-depth-3-face) fontified t) 50 51 (face (rainbow-delimiters-depth-3-face) fontified t) 51 52 (fontified t) 52 58 (fontified t) 58 59 (face (rainbow-delimiters-depth-3-face) fontified t) 59 60 (face (rainbow-delimiters-depth-3-face) fontified t)) . 1907) (undo-tree-id880 . -46) (undo-tree-id881 . -46) (undo-tree-id882 . -19) (undo-tree-id883 . -19) (undo-tree-id884 . -25) (undo-tree-id885 . -25) (undo-tree-id886 . -25) (undo-tree-id887 . -25) (undo-tree-id888 . -25) (undo-tree-id889 . -25) (undo-tree-id890 . -39) (undo-tree-id891 . -39) (undo-tree-id892 . -29) (undo-tree-id893 . -29) (undo-tree-id894 . -29) (undo-tree-id895 . -29) (undo-tree-id896 . -29) (undo-tree-id897 . -29) (undo-tree-id898 . -29) (undo-tree-id899 . -29) (undo-tree-id900 . -29) (undo-tree-id901 . -29) (undo-tree-id902 . -29) (undo-tree-id903 . -29) (undo-tree-id904 . -29) (undo-tree-id905 . -29) (undo-tree-id906 . -29) (undo-tree-id907 . -29) (undo-tree-id908 . -29) (undo-tree-id909 . -29) (undo-tree-id910 . -29) (undo-tree-id911 . -29) (undo-tree-id912 . -29) (undo-tree-id913 . -29) (undo-tree-id914 . -38) (undo-tree-id915 . -38) (undo-tree-id916 . -38) (undo-tree-id917 . -39) (undo-tree-id918 . -39) (undo-tree-id919 . -39) (undo-tree-id920 . -39) (undo-tree-id921 . -39) (undo-tree-id922 . -40) (undo-tree-id923 . -40) (undo-tree-id924 . -40) (undo-tree-id925 . -40) (undo-tree-id926 . -40) (undo-tree-id927 . -40) (undo-tree-id928 . -40) (undo-tree-id929 . -40) (undo-tree-id930 . -40) (undo-tree-id931 . -40) (undo-tree-id932 . -40) (undo-tree-id933 . -40) (undo-tree-id934 . -40) (undo-tree-id935 . -40) (undo-tree-id936 . -40) (undo-tree-id937 . -40) (undo-tree-id938 . -40) (undo-tree-id939 . -40) (undo-tree-id940 . -40) (undo-tree-id941 . -40) (undo-tree-id942 . -40) (undo-tree-id943 . -40) (undo-tree-id944 . -40) (undo-tree-id945 . -40) (undo-tree-id946 . -40) (undo-tree-id947 . -40) (undo-tree-id948 . -40) (undo-tree-id949 . -40) (undo-tree-id950 . -40) (undo-tree-id951 . -40) (undo-tree-id952 . -40) (undo-tree-id953 . -40) (undo-tree-id954 . -40) (undo-tree-id955 . -40) (undo-tree-id956 . -40) (undo-tree-id957 . -40) (undo-tree-id958 . -40) (undo-tree-id959 . -40) (undo-tree-id960 . -40) (undo-tree-id961 . -40) (undo-tree-id962 . -40) (undo-tree-id963 . -40) (undo-tree-id964 . -40) (undo-tree-id965 . -40) (undo-tree-id966 . -40) (undo-tree-id967 . -40) (undo-tree-id968 . -40) (undo-tree-id969 . -40) (undo-tree-id970 . -40) (undo-tree-id971 . -40) (undo-tree-id972 . -40) (undo-tree-id973 . -40) (undo-tree-id974 . -40) (undo-tree-id975 . -40) (undo-tree-id976 . -40) (undo-tree-id977 . -40) (undo-tree-id978 . -40) (undo-tree-id979 . -40) (undo-tree-id980 . -40) (undo-tree-id981 . -40) (undo-tree-id982 . -40) (undo-tree-id983 . -40) (undo-tree-id984 . -40) (undo-tree-id985 . -40) (undo-tree-id986 . -40) (undo-tree-id987 . -51) (undo-tree-id988 . -51) (undo-tree-id989 . -51) (undo-tree-id990 . -51) (undo-tree-id991 . -51) (undo-tree-id992 . -51) (undo-tree-id993 . -51) (undo-tree-id994 . -46) (undo-tree-id995 . -59) (undo-tree-id996 . -46) (undo-tree-id997 . -46) (undo-tree-id998 . -46) (undo-tree-id999 . -46) (undo-tree-id1000 . -46) (undo-tree-id1001 . -46) (undo-tree-id1002 . -46) (undo-tree-id1003 . -46) (undo-tree-id1004 . -46) (undo-tree-id1005 . -46) (undo-tree-id1006 . -46) (undo-tree-id1007 . -46) (undo-tree-id1008 . -46) (undo-tree-id1009 . -46) (undo-tree-id1010 . -46) (undo-tree-id1011 . -46) (undo-tree-id1012 . -46) (undo-tree-id1013 . -46) (undo-tree-id1014 . -46) (undo-tree-id1015 . -46) (undo-tree-id1016 . -47) (undo-tree-id1017 . -48) (undo-tree-id1018 . -49) (undo-tree-id1019 . -50) (undo-tree-id1020 . -51) (undo-tree-id1021 . -52) (undo-tree-id1022 . -52) (undo-tree-id1023 . -52) (undo-tree-id1024 . -52) (undo-tree-id1025 . -52) (undo-tree-id1026 . -52) (undo-tree-id1027 . -52) (undo-tree-id1028 . -52) (undo-tree-id1029 . -52) (undo-tree-id1030 . -52) (undo-tree-id1031 . -52) (undo-tree-id1032 . -52) (undo-tree-id1033 . -52) (undo-tree-id1034 . -52) (undo-tree-id1035 . -52) (undo-tree-id1036 . -52) (undo-tree-id1037 . -52) (undo-tree-id1038 . -52) (undo-tree-id1039 . -52) (undo-tree-id1040 . -52) (undo-tree-id1041 . -59) (undo-tree-id1042 . -59) (undo-tree-id1043 . -59) (undo-tree-id1044 . -59) (undo-tree-id1045 . -59) (undo-tree-id1046 . -59) (undo-tree-id1047 . -59) (undo-tree-id1048 . -59) (undo-tree-id1049 . -59) (undo-tree-id1050 . -59) (undo-tree-id1051 . -59) (undo-tree-id1052 . -59) (undo-tree-id1053 . -59) (undo-tree-id1054 . -59) (undo-tree-id1055 . -59) (undo-tree-id1056 . -59) (undo-tree-id1057 . -59) (undo-tree-id1058 . -59) (undo-tree-id1059 . -59) (undo-tree-id1060 . -59) (undo-tree-id1061 . -59) (undo-tree-id1062 . -59) (undo-tree-id1063 . -59) (undo-tree-id1064 . -59) (undo-tree-id1065 . -59) (undo-tree-id1066 . -59) (undo-tree-id1067 . -59) (undo-tree-id1068 . -59) (undo-tree-id1069 . -59) (undo-tree-id1070 . -59) (undo-tree-id1071 . -59) (undo-tree-id1072 . -59) (undo-tree-id1073 . 1) (undo-tree-id1074 . -59) (undo-tree-id1075 . -59) (undo-tree-id1076 . -59) (undo-tree-id1077 . -59) (undo-tree-id1078 . -59) (undo-tree-id1079 . -59) (undo-tree-id1080 . -59) (undo-tree-id1081 . -59) (undo-tree-id1082 . -60)) nil (26014 27630 329293 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t rear-nonsticky t)) . 1907) (undo-tree-id877 . -1) (undo-tree-id878 . 1) (undo-tree-id879 . -1)) nil (26014 27630 329084 0) 0 nil])
([nil nil ((#("    println!(\"# of models: {}\", models.len());" 0 4 (fontified t) 4 12 (face rust-builtin-formatting-macro fontified t) 12 13 (face (rainbow-delimiters-depth-2-face) fontified t) 13 27 (face font-lock-string-face fontified t) 27 29 (face rust-string-interpolation fontified t) 29 30 (face font-lock-string-face fontified t) 30 42 (fontified t) 42 43 (face (rainbow-delimiters-depth-3-face) fontified t) 43 44 (face (rainbow-delimiters-depth-3-face) fontified t) 44 45 (face (rainbow-delimiters-depth-2-face) fontified t) 45 46 (fontified t)) . 1977) (undo-tree-id1400 . -2) (t 26014 27630 344102 111000)) nil (26014 28217 789923 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977)) nil (26014 28217 789920 0) 0 nil])
([nil nil ((#("    println!(\"# of materials: {}\", materials.len());" 0 4 (fontified t) 4 12 (face rust-builtin-formatting-macro fontified t) 12 13 (face (rainbow-delimiters-depth-2-face) fontified t) 13 30 (face font-lock-string-face fontified t) 30 32 (face rust-string-interpolation fontified t) 32 33 (face font-lock-string-face fontified t) 33 48 (fontified t) 48 49 (face (rainbow-delimiters-depth-3-face) fontified t) 49 50 (face (rainbow-delimiters-depth-3-face) fontified t) 50 51 (face (rainbow-delimiters-depth-2-face) fontified t) 51 52 (fontified t rear-nonsticky t)) . 1977)) nil (26014 28217 789919 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977)) nil (26014 28217 789918 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977)) nil (26014 28217 789917 0) 0 nil])
([nil nil ((#("    for (i, m) in models.iter().enumerate() {" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t) 9 13 (fontified t) 13 14 (face (rainbow-delimiters-depth-2-face) fontified t) 14 15 (fontified t) 15 17 (face font-lock-keyword-face fontified t) 17 29 (fontified t) 29 30 (face (rainbow-delimiters-depth-2-face) fontified t) 30 31 (face (rainbow-delimiters-depth-2-face) fontified t) 31 41 (fontified t) 41 42 (face (rainbow-delimiters-depth-2-face) fontified t) 42 43 (face (rainbow-delimiters-depth-2-face) fontified t) 43 44 (fontified t) 44 45 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1977) (undo-tree-id1399 . -4)) nil (26014 28217 789916 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977)) nil (26014 28217 789914 0) 0 nil])
([nil nil ((#("        let mesh = &m.mesh;" 0 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 16 (face font-lock-variable-name-face fontified t) 16 19 (fontified t) 19 20 (face rust-ampersand-face fontified t) 20 27 (fontified t)) . 1977)) nil (26014 28217 789913 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977)) nil (26014 28217 789912 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977)) nil (26014 28217 789911 0) 0 nil])
([nil nil ((#("        println!(\"model[{}].name = \\'{}\\'\", i, m.name);" 0 8 (fontified t) 8 16 (face rust-builtin-formatting-macro fontified t) 16 17 (face (rainbow-delimiters-depth-2-face) fontified t) 17 24 (face font-lock-string-face fontified t) 24 26 (face rust-string-interpolation fontified t) 26 37 (face font-lock-string-face fontified t) 37 39 (face rust-string-interpolation fontified t) 39 42 (face font-lock-string-face fontified t) 42 53 (fontified t) 53 54 (face (rainbow-delimiters-depth-2-face) fontified t) 54 55 (fontified t)) . 1977)) nil (26014 28217 789910 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977)) nil (26014 28217 789909 0) 0 nil])
([nil nil ((#("        println!(\"model[{}].mesh.material_id = {:?}\", i, mesh.material_id);" 0 8 (fontified t) 8 16 (face rust-builtin-formatting-macro fontified t) 16 17 (face (rainbow-delimiters-depth-2-face) fontified t) 17 24 (face font-lock-string-face fontified t) 24 26 (face rust-string-interpolation fontified t) 26 47 (face font-lock-string-face fontified t) 47 51 (face rust-string-interpolation fontified t) 51 52 (face font-lock-string-face fontified t) 52 73 (fontified t) 73 74 (face (rainbow-delimiters-depth-2-face) fontified t) 74 75 (fontified t)) . 1977)) nil (26014 28217 789908 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977)) nil (26014 28217 789906 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977)) nil (26014 28217 789905 0) 0 nil])
([nil nil ((#("        println!(" 0 8 (fontified t) 8 16 (face rust-builtin-formatting-macro fontified t) 16 17 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1977)) nil (26014 28217 789904 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977)) nil (26014 28217 789903 0) 0 nil])
([nil nil ((#("            \"Size of model[{}].face_arities: {}\"," 0 12 (fontified t) 12 27 (face font-lock-string-face fontified t) 27 29 (face font-lock-string-face fontified t) 29 45 (face font-lock-string-face fontified t) 45 47 (face font-lock-string-face fontified t) 47 48 (face font-lock-string-face fontified t) 48 49 (fontified t)) . 1977)) nil (26014 28217 789902 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977)) nil (26014 28217 789901 0) 0 nil])
([nil nil ((#("            i," 0 14 (fontified t)) . 1977)) nil (26014 28217 789900 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977)) nil (26014 28217 789899 0) 0 nil])
([nil nil ((#("            mesh.face_arities.len()" 0 33 (fontified t) 33 34 (face (rainbow-delimiters-depth-2-face) fontified t) 34 35 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1977)) nil (26014 28217 789898 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977)) nil (26014 28217 789897 0) 0 nil])
([nil nil ((#("        );" 0 8 (fontified t) 8 9 (face (rainbow-delimiters-mismatched-face) fontified t) 9 10 (fontified t)) . 1977)) nil (26014 28217 789896 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977)) nil (26014 28217 789895 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977)) nil (26014 28217 789894 0) 0 nil])
([nil nil ((#("        let mut next_face = 0;" 0 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 15 (face font-lock-keyword-face fontified t) 15 16 (fontified t) 16 25 (face font-lock-variable-name-face fontified t) 25 30 (fontified t)) . 1977)) nil (26014 28217 789893 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977)) nil (26014 28217 789892 0) 0 nil])
([nil nil ((#("        for f in 0..mesh.face_arities.len() {" 0 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 13 (face font-lock-variable-name-face fontified t) 13 14 (fontified t) 14 16 (face font-lock-keyword-face fontified t) 16 41 (fontified t) 41 42 (face (rainbow-delimiters-depth-2-face) fontified t) 42 43 (face (rainbow-delimiters-depth-2-face) fontified t) 43 44 (fontified t) 44 45 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1977)) nil (26014 28217 789891 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977)) nil (26014 28217 789890 0) 0 nil])
([nil nil ((#("            let end = next_face + mesh.face_arities[f] as usize;" 0 12 (fontified t) 12 15 (face font-lock-keyword-face fontified t) 15 16 (fontified t) 16 19 (face font-lock-variable-name-face fontified t) 19 40 (fontified t) 40 51 (fontified t) 51 52 (face (rainbow-delimiters-depth-2-face) fontified t) 52 53 (fontified t) 53 54 (face (rainbow-delimiters-depth-2-face) fontified t) 54 55 (fontified t) 55 57 (face font-lock-keyword-face fontified t) 57 58 (fontified t) 58 63 (face font-lock-type-face fontified t) 63 64 (fontified t)) . 1977) (undo-tree-id1398 . -9)) nil (26014 28217 789889 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977)) nil (26014 28217 789886 0) 0 nil])
([nil nil ((#("            let face_indices: Vec<_> = mesh.indices[next_face..end].iter().collect();" 0 12 (fontified t) 12 15 (face font-lock-keyword-face fontified t) 15 16 (fontified t) 16 28 (face font-lock-variable-name-face fontified t) 28 30 (fontified t) 30 33 (face font-lock-type-face fontified t) 33 34 (face (rainbow-delimiters-depth-2-face) fontified t) 34 35 (fontified t) 35 36 (face (rainbow-delimiters-depth-2-face) fontified t) 36 51 (fontified t) 51 52 (face (rainbow-delimiters-depth-2-face) fontified t) 52 66 (fontified t) 66 67 (face (rainbow-delimiters-depth-2-face) fontified t) 67 72 (fontified t) 72 73 (face (rainbow-delimiters-depth-2-face) fontified t) 73 74 (face (rainbow-delimiters-depth-2-face) fontified t) 74 82 (fontified t) 82 83 (face (rainbow-delimiters-depth-2-face) fontified t) 83 84 (face (rainbow-delimiters-depth-2-face) fontified t) 84 85 (fontified t)) . 1977)) nil (26014 28217 789885 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977)) nil (26014 28217 789884 0) 0 nil])
([nil nil ((#("            println!(\"    face[{}] = {:?}\", f, face_indices);" 0 12 (fontified t) 12 20 (face rust-builtin-formatting-macro fontified t) 20 21 (face (rainbow-delimiters-depth-2-face) fontified t) 21 31 (face font-lock-string-face fontified t) 31 33 (face rust-string-interpolation fontified t) 33 37 (face font-lock-string-face fontified t) 37 41 (face rust-string-interpolation fontified t) 41 42 (face font-lock-string-face fontified t) 42 59 (fontified t) 59 60 (face (rainbow-delimiters-depth-2-face) fontified t) 60 61 (fontified t)) . 1977)) nil (26014 28217 789883 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977)) nil (26014 28217 789882 0) 0 nil])
([nil nil ((#("            next_face = end;" 0 28 (fontified t)) . 1977)) nil (26014 28217 789881 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977)) nil (26014 28217 789880 0) 0 nil])
([nil nil ((#("        }" 0 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1977)) nil (26014 28217 789879 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977)) nil (26014 28217 789878 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977)) nil (26014 28217 789877 0) 0 nil])
([nil nil ((#("        // Normals and texture coordinates are also loaded, but not printed in this example" 0 8 (fontified t) 8 11 (face font-lock-comment-delimiter-face fontified t) 11 91 (face font-lock-comment-face fontified t)) . 1977)) nil (26014 28217 789876 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977)) nil (26014 28217 789875 0) 0 nil])
([nil nil ((#("        println!(\"model[{}].vertices: {}\", i, mesh.positions.len() / 3);" 0 8 (fontified t) 8 16 (face rust-builtin-formatting-macro fontified t) 16 17 (face (rainbow-delimiters-depth-2-face) fontified t) 17 19 (face font-lock-string-face fontified t) 19 24 (face font-lock-string-face fontified t) 24 26 (face rust-string-interpolation fontified t) 26 38 (face font-lock-string-face fontified t) 38 40 (face rust-string-interpolation fontified t) 40 41 (face font-lock-string-face fontified t) 41 64 (fontified t) 64 65 (face (rainbow-delimiters-depth-3-face) fontified t) 65 66 (face (rainbow-delimiters-depth-3-face) fontified t) 66 70 (fontified t) 70 71 (face (rainbow-delimiters-depth-2-face) fontified t) 71 72 (fontified t)) . 1977)) nil (26014 28217 789873 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977)) nil (26014 28217 789872 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977)) nil (26014 28217 789871 0) 0 nil])
([nil nil ((#("        assert!(mesh.positions.len() % 3 == 0);" 0 8 (fontified t) 8 15 (face font-lock-preprocessor-face fontified t) 15 16 (face (rainbow-delimiters-depth-2-face) fontified t) 16 34 (fontified t) 34 35 (face (rainbow-delimiters-depth-3-face) fontified t) 35 36 (face (rainbow-delimiters-depth-3-face) fontified t) 36 45 (fontified t) 45 46 (face (rainbow-delimiters-depth-2-face) fontified t) 46 47 (fontified t)) . 1977)) nil (26014 28217 789870 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977)) nil (26014 28217 789869 0) 0 nil])
([nil nil ((#("        for v in 0..mesh.positions.len() / 3 {" 0 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 13 (face font-lock-variable-name-face fontified t) 13 14 (fontified t) 14 16 (face font-lock-keyword-face fontified t) 16 38 (fontified t) 38 39 (face (rainbow-delimiters-depth-2-face) fontified t) 39 40 (face (rainbow-delimiters-depth-2-face) fontified t) 40 45 (fontified t) 45 46 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1977)) nil (26014 28217 789868 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977)) nil (26014 28217 789867 0) 0 nil])
([nil nil ((#("            println!(" 0 12 (fontified t) 12 20 (face rust-builtin-formatting-macro fontified t) 20 21 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1977)) nil (26014 28217 789866 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977)) nil (26014 28217 789864 0) 0 nil])
([nil nil ((#("                \"    v[{}] = ({}, {}, {})\"," 0 16 (fontified t) 16 23 (face font-lock-string-face fontified t) 23 25 (face font-lock-string-face fontified t) 25 30 (face font-lock-string-face fontified t) 30 32 (face font-lock-string-face fontified t) 32 34 (face font-lock-string-face fontified t) 34 35 (face font-lock-string-face fontified t) 35 36 (face font-lock-string-face fontified t) 36 38 (face font-lock-string-face fontified t) 38 40 (face font-lock-string-face fontified t) 40 42 (face font-lock-string-face fontified t) 42 43 (fontified t)) . 1977)) nil (26014 28217 789863 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977)) nil (26014 28217 789862 0) 0 nil])
([nil nil ((#("                v," 0 16 (fontified t) 16 18 (fontified t)) . 1977)) nil (26014 28217 789861 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977)) nil (26014 28217 789860 0) 0 nil])
([nil nil ((#("                mesh.positions[3 * v]," 0 16 (fontified t) 16 30 (fontified t) 30 31 (face (rainbow-delimiters-depth-2-face) fontified t) 31 36 (fontified t) 36 37 (face (rainbow-delimiters-depth-2-face) fontified t) 37 38 (fontified t)) . 1977)) nil (26014 28217 789858 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977)) nil (26014 28217 789857 0) 0 nil])
([nil nil ((#("                mesh.positions[3 * v + 1]," 0 16 (fontified t) 16 30 (fontified t) 30 31 (face (rainbow-delimiters-depth-2-face) fontified t) 31 40 (fontified t) 40 41 (face (rainbow-delimiters-depth-2-face) fontified t) 41 42 (fontified t)) . 1977)) nil (26014 28217 789856 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977)) nil (26014 28217 789855 0) 0 nil])
([nil nil ((#("                mesh.positions[3 * v + 2]" 0 16 (fontified t) 16 30 (fontified t) 30 31 (face (rainbow-delimiters-depth-2-face) fontified t) 31 40 (fontified t) 40 41 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1977)) nil (26014 28217 789854 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977)) nil (26014 28217 789853 0) 0 nil])
([nil nil ((#("            );" 0 12 (fontified t) 12 13 (face (rainbow-delimiters-mismatched-face) fontified t) 13 14 (fontified t)) . 1977)) nil (26014 28217 789852 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977)) nil (26014 28217 789851 0) 0 nil])
([nil nil ((#("        }" 0 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1977)) nil (26014 28217 789850 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977)) nil (26014 28217 789849 0) 0 nil])
([nil nil ((#("    }" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1977)) nil (26014 28217 789848 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977)) nil (26014 28217 789847 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977)) nil (26014 28217 789846 0) 0 nil])
([nil nil ((#("    for (i, m) in materials.iter().enumerate() {" 0 1 (fontified t) 1 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t) 9 13 (fontified t) 13 14 (face (rainbow-delimiters-depth-2-face) fontified t) 14 15 (fontified t) 15 17 (face font-lock-keyword-face fontified t) 17 32 (fontified t) 32 33 (face (rainbow-delimiters-depth-2-face) fontified t) 33 34 (face (rainbow-delimiters-depth-2-face) fontified t) 34 44 (fontified t) 44 45 (face (rainbow-delimiters-depth-2-face) fontified t) 45 46 (face (rainbow-delimiters-depth-2-face) fontified t) 46 47 (fontified t) 47 48 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1977) (undo-tree-id1397 . -1)) nil (26014 28217 789844 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977) (undo-tree-id1396 . -1)) nil (26014 28217 789842 0) 0 nil])
([nil nil ((#("        println!(\"material[{}].name = \\'{}\\'\", i, m.name);" 0 4 (fontified t) 4 8 (fontified t) 8 16 (face rust-builtin-formatting-macro fontified t) 16 17 (face (rainbow-delimiters-depth-2-face) fontified t) 17 27 (face font-lock-string-face fontified t) 27 29 (face rust-string-interpolation fontified t) 29 40 (face font-lock-string-face fontified t) 40 42 (face rust-string-interpolation fontified t) 42 45 (face font-lock-string-face fontified t) 45 56 (fontified t) 56 57 (face (rainbow-delimiters-depth-2-face) fontified t) 57 58 (fontified t)) . 1977) (undo-tree-id1395 . -58)) nil (26014 28217 789840 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977) (undo-tree-id1394 . -1)) nil (26014 28217 789838 0) 0 nil])
([nil nil ((#("        if let Some(ambient) = m.ambient {" 0 4 (fontified t) 4 8 (fontified t) 8 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 14 (face font-lock-keyword-face fontified t) 14 15 (fontified t) 15 19 (face font-lock-type-face fontified t) 19 20 (face (rainbow-delimiters-depth-2-face) fontified t) 20 24 (fontified t) 24 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-2-face) fontified t) 28 29 (fontified t) 29 41 (fontified t) 41 42 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1977) (undo-tree-id1393 . -42)) nil (26014 28217 789836 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977) (undo-tree-id1392 . -1)) nil (26014 28217 789834 0) 0 nil])
([nil nil ((#("            println!(" 0 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 12 (fontified t) 12 20 (face rust-builtin-formatting-macro fontified t) 20 21 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1977) (undo-tree-id1391 . -21)) nil (26014 28217 789832 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977) (undo-tree-id1390 . -1)) nil (26014 28217 789830 0) 0 nil])
([nil nil ((#("                \"    material.Ka = ({}, {}, {})\"," 0 4 (fontified t) 4 16 (fontified t) 16 36 (face font-lock-string-face fontified t) 36 38 (face font-lock-string-face fontified t) 38 40 (face font-lock-string-face fontified t) 40 42 (face font-lock-string-face fontified t) 42 44 (face font-lock-string-face fontified t) 44 46 (face font-lock-string-face fontified t) 46 48 (face font-lock-string-face fontified t) 48 49 (fontified t)) . 1977) (undo-tree-id1389 . -49)) nil (26014 28217 789828 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977) (undo-tree-id1388 . -1)) nil (26014 28217 789825 0) 0 nil])
([nil nil ((#("                ambient[0], ambient[1], ambient[2]" 0 4 (fontified t) 4 16 (fontified t) 16 23 (fontified t) 23 24 (face (rainbow-delimiters-depth-2-face) fontified t) 24 25 (fontified t) 25 26 (face (rainbow-delimiters-depth-2-face) fontified t) 26 35 (fontified t) 35 36 (face (rainbow-delimiters-depth-2-face) fontified t) 36 37 (fontified t) 37 38 (face (rainbow-delimiters-depth-2-face) fontified t) 38 47 (fontified t) 47 48 (face (rainbow-delimiters-depth-2-face) fontified t) 48 49 (fontified t) 49 50 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1977) (undo-tree-id1386 . -40) (undo-tree-id1387 . -50)) nil (26014 28217 789823 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977) (undo-tree-id1385 . -1)) nil (26014 28217 789820 0) 0 nil])
([nil nil ((#("            );" 0 1 (fontified t) 1 4 (fontified t) 4 12 (fontified t) 12 13 (face (rainbow-delimiters-mismatched-face) fontified t) 13 14 (fontified t)) . 1977) (undo-tree-id1384 . -14)) nil (26014 28217 789818 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977) (undo-tree-id1383 . -1)) nil (26014 28217 789816 0) 0 nil])
([nil nil ((#("        }" 0 4 (fontified t) 4 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1977) (undo-tree-id1382 . -9)) nil (26014 28217 789814 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977) (undo-tree-id1381 . -1)) nil (26014 28217 789812 0) 0 nil])
([nil nil ((#("        if let Some(diffuse) = m.diffuse {" 0 4 (fontified t) 4 8 (fontified t) 8 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 14 (face font-lock-keyword-face fontified t) 14 15 (fontified t) 15 19 (face font-lock-type-face fontified t) 19 20 (face (rainbow-delimiters-depth-2-face) fontified t) 20 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-2-face) fontified t) 28 29 (fontified t) 29 41 (fontified t) 41 42 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1977) (undo-tree-id1379 . -10) (undo-tree-id1380 . -42)) nil (26014 28217 789810 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977) (undo-tree-id1378 . -1)) nil (26014 28217 789807 0) 0 nil])
([nil nil ((#("            println!(" 0 4 (fontified t) 4 12 (fontified t) 12 20 (face rust-builtin-formatting-macro fontified t) 20 21 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1977) (undo-tree-id1377 . -21)) nil (26014 28217 789805 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977) (undo-tree-id1376 . -1)) nil (26014 28217 789803 0) 0 nil])
([nil nil ((#("                \"    material.Kd = ({}, {}, {})\"," 0 4 (fontified t) 4 10 (fontified t) 10 16 (fontified t) 16 36 (face font-lock-string-face fontified t) 36 38 (face font-lock-string-face fontified t) 38 39 (face font-lock-string-face fontified t) 39 40 (face font-lock-string-face fontified t) 40 42 (face font-lock-string-face fontified t) 42 44 (face font-lock-string-face fontified t) 44 46 (face font-lock-string-face fontified t) 46 48 (face font-lock-string-face fontified t) 48 49 (fontified t)) . 1977) (undo-tree-id1375 . -49)) nil (26014 28217 789800 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977) (undo-tree-id1374 . -1)) nil (26014 28217 789798 0) 0 nil])
([nil nil ((#("                diffuse[0], diffuse[1], diffuse[2]" 0 4 (fontified t) 4 16 (fontified t) 16 23 (fontified t) 23 24 (face (rainbow-delimiters-depth-2-face) fontified t) 24 25 (fontified t) 25 26 (face (rainbow-delimiters-depth-2-face) fontified t) 26 35 (fontified t) 35 36 (face (rainbow-delimiters-depth-2-face) fontified t) 36 37 (fontified t) 37 38 (face (rainbow-delimiters-depth-2-face) fontified t) 38 45 (fontified t) 45 47 (fontified t) 47 48 (face (rainbow-delimiters-depth-2-face) fontified t) 48 49 (fontified t) 49 50 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1977) (undo-tree-id1373 . -50)) nil (26014 28217 789796 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977) (undo-tree-id1372 . -1)) nil (26014 28217 789794 0) 0 nil])
([nil nil ((#("            );" 0 4 (fontified t) 4 12 (fontified t) 12 13 (face (rainbow-delimiters-mismatched-face) fontified t) 13 14 (fontified t)) . 1977) (undo-tree-id1371 . -14)) nil (26014 28217 789792 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977) (undo-tree-id1370 . -1)) nil (26014 28217 789790 0) 0 nil])
([nil nil ((#("        }" 0 4 (fontified t) 4 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1977) (undo-tree-id1369 . -9)) nil (26014 28217 789788 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977) (undo-tree-id1368 . -1)) nil (26014 28217 789786 0) 0 nil])
([nil nil ((#("        if let Some(specular) = m.specular {" 0 4 (fontified t) 4 8 (fontified t) 8 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 14 (face font-lock-keyword-face fontified t) 14 15 (fontified t) 15 19 (face font-lock-type-face fontified t) 19 20 (face (rainbow-delimiters-depth-2-face) fontified t) 20 28 (fontified t) 28 29 (face (rainbow-delimiters-depth-2-face) fontified t) 29 43 (fontified t) 43 44 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1977) (undo-tree-id1367 . -44)) nil (26014 28217 789784 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977) (undo-tree-id1366 . -1)) nil (26014 28217 789782 0) 0 nil])
([nil nil ((#("            println!(" 0 1 (fontified t) 1 4 (fontified t) 4 12 (fontified t) 12 20 (face rust-builtin-formatting-macro fontified t) 20 21 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1977) (undo-tree-id1365 . -21)) nil (26014 28217 789780 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977) (undo-tree-id1364 . -1)) nil (26014 28217 789777 0) 0 nil])
([nil nil ((#("                \"    material.Ks = ({}, {}, {})\"," 0 4 (fontified t) 4 16 (fontified t) 16 36 (face font-lock-string-face fontified t) 36 38 (face font-lock-string-face fontified t) 38 40 (face font-lock-string-face fontified t) 40 42 (face font-lock-string-face fontified t) 42 44 (face font-lock-string-face fontified t) 44 46 (face font-lock-string-face fontified t) 46 47 (face font-lock-string-face fontified t) 47 48 (face font-lock-string-face fontified t) 48 49 (fontified t)) . 1977) (undo-tree-id1363 . -49)) nil (26014 28217 789775 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977) (undo-tree-id1362 . -1)) nil (26014 28217 789773 0) 0 nil])
([nil nil ((#("                specular[0], specular[1], specular[2]" 0 4 (fontified t) 4 12 (fontified t) 12 16 (fontified t) 16 24 (fontified t) 24 25 (face (rainbow-delimiters-depth-2-face) fontified t) 25 26 (fontified t) 26 27 (face (rainbow-delimiters-depth-2-face) fontified t) 27 37 (fontified t) 37 38 (face (rainbow-delimiters-depth-2-face) fontified t) 38 39 (fontified t) 39 40 (face (rainbow-delimiters-depth-2-face) fontified t) 40 50 (fontified t) 50 51 (face (rainbow-delimiters-depth-2-face) fontified t) 51 52 (fontified t) 52 53 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1977) (undo-tree-id1361 . -53)) nil (26014 28217 789770 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977) (undo-tree-id1360 . -1)) nil (26014 28217 789768 0) 0 nil])
([nil nil ((#("            );" 0 4 (fontified t) 4 5 (fontified t) 5 12 (fontified t) 12 13 (face (rainbow-delimiters-mismatched-face) fontified t) 13 14 (fontified t)) . 1977) (undo-tree-id1359 . -14)) nil (26014 28217 789766 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977) (undo-tree-id1358 . -1)) nil (26014 28217 789764 0) 0 nil])
([nil nil ((#("        }" 0 4 (fontified t) 4 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1977) (undo-tree-id1357 . -9)) nil (26014 28217 789762 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977) (undo-tree-id1356 . -1)) nil (26014 28217 789760 0) 0 nil])
([nil nil ((#("        if let Some(shininess) = m.shininess {" 0 4 (fontified nil) 4 8 (fontified nil) 8 10 (face font-lock-keyword-face fontified nil) 10 11 (fontified nil) 11 12 (face font-lock-keyword-face fontified nil) 12 14 (face font-lock-keyword-face fontified nil) 14 15 (fontified nil) 15 19 (face font-lock-type-face fontified nil) 19 20 (face (rainbow-delimiters-depth-2-face) fontified nil) 20 29 (fontified nil) 29 30 (face (rainbow-delimiters-depth-2-face) fontified nil) 30 45 (fontified nil) 45 46 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 1977) (undo-tree-id1355 . -46)) nil (26014 28217 789758 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 1977) (undo-tree-id1354 . -1)) nil (26014 28217 789756 0) 0 nil])
([nil nil ((#("            println!(\"    material.Ns = {}\", shininess);" 0 4 (fontified nil) 4 11 (fontified nil) 11 12 (fontified nil) 12 20 (face rust-builtin-formatting-macro fontified nil) 20 21 (face (rainbow-delimiters-depth-3-face) fontified nil) 21 40 (face font-lock-string-face fontified nil) 40 42 (face rust-string-interpolation fontified nil) 42 43 (face font-lock-string-face fontified nil) 43 54 (fontified nil) 54 55 (face (rainbow-delimiters-depth-3-face) fontified nil) 55 56 (fontified nil)) . 1977) (undo-tree-id1353 . -56)) nil (26014 28217 789753 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 1977) (undo-tree-id1352 . -1)) nil (26014 28217 789751 0) 0 nil])
([nil nil ((#("        }" 0 4 (fontified nil) 4 8 (fontified nil) 8 9 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 1977) (undo-tree-id1351 . -9)) nil (26014 28217 789749 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 1977) (undo-tree-id1350 . -1)) nil (26014 28217 789747 0) 0 nil])
([nil nil ((#("        if let Some(dissolve) = m.dissolve {" 0 4 (fontified nil) 4 8 (fontified nil) 8 9 (face font-lock-keyword-face fontified nil) 9 10 (face font-lock-keyword-face fontified nil) 10 11 (fontified nil) 11 14 (face font-lock-keyword-face fontified nil) 14 15 (fontified nil) 15 19 (face font-lock-type-face fontified nil) 19 20 (face (rainbow-delimiters-depth-2-face) fontified nil) 20 28 (fontified nil) 28 29 (face (rainbow-delimiters-depth-2-face) fontified nil) 29 43 (fontified nil) 43 44 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 1977) (undo-tree-id1349 . -44)) nil (26014 28217 789745 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 1977) (undo-tree-id1348 . -1)) nil (26014 28217 789743 0) 0 nil])
([nil nil ((#("            println!(\"    material.d = {}\", dissolve);" 0 4 (fontified nil) 4 12 (fontified nil) 12 20 (face rust-builtin-formatting-macro fontified nil) 20 21 (face (rainbow-delimiters-depth-3-face) fontified nil) 21 39 (face font-lock-string-face fontified nil) 39 41 (face rust-string-interpolation fontified nil) 41 42 (face font-lock-string-face fontified nil) 42 50 (fontified nil) 50 52 (fontified nil) 52 53 (face (rainbow-delimiters-depth-3-face) fontified nil) 53 54 (fontified nil)) . 1977) (undo-tree-id1347 . -54)) nil (26014 28217 789741 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 1977) (undo-tree-id1346 . -1)) nil (26014 28217 789739 0) 0 nil])
([nil nil ((#("        }" 0 4 (fontified nil) 4 8 (fontified nil) 8 9 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 1977) (undo-tree-id1345 . -9)) nil (26014 28217 789737 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977) (undo-tree-id1344 . -1)) nil (26014 28217 789735 0) 0 nil])
([nil nil ((#("        if let Some(ambient_texture) = &m.ambient_texture {" 0 4 (fontified t) 4 8 (fontified t) 8 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 14 (face font-lock-keyword-face fontified t) 14 15 (fontified t) 15 19 (face font-lock-type-face fontified t) 19 20 (face (rainbow-delimiters-depth-2-face) fontified t) 20 35 (fontified t) 35 36 (face (rainbow-delimiters-depth-2-face) fontified t) 36 39 (fontified t) 39 40 (face rust-ampersand-face fontified t) 40 47 (fontified t) 47 58 (fontified t) 58 59 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1977) (undo-tree-id1343 . -59)) nil (26014 28217 789732 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977) (undo-tree-id1342 . -1)) nil (26014 28217 789730 0) 0 nil])
([nil nil ((#("            println!(\"    material.map_Ka = {}\", ambient_texture);" 0 4 (fontified t) 4 12 (fontified t) 12 16 (face rust-builtin-formatting-macro fontified t) 16 20 (face rust-builtin-formatting-macro fontified t) 20 21 (face (rainbow-delimiters-depth-2-face) fontified t) 21 44 (face font-lock-string-face fontified t) 44 46 (face rust-string-interpolation fontified t) 46 47 (face font-lock-string-face fontified t) 47 64 (fontified t) 64 65 (face (rainbow-delimiters-depth-2-face) fontified t) 65 66 (fontified t)) . 1977) (undo-tree-id1341 . -66)) nil (26014 28217 789728 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977) (undo-tree-id1340 . -1)) nil (26014 28217 789726 0) 0 nil])
([nil nil ((#("        }" 0 4 (fontified t) 4 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1977) (undo-tree-id1339 . -9)) nil (26014 28217 789724 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977) (undo-tree-id1338 . -1)) nil (26014 28217 789722 0) 0 nil])
([nil nil ((#("        if let Some(diffuse_texture) = &m.diffuse_texture {" 0 4 (fontified t) 4 8 (fontified t) 8 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 14 (face font-lock-keyword-face fontified t) 14 15 (fontified t) 15 19 (face font-lock-type-face fontified t) 19 20 (face (rainbow-delimiters-depth-2-face) fontified t) 20 35 (fontified t) 35 36 (face (rainbow-delimiters-depth-2-face) fontified t) 36 39 (fontified t) 39 40 (face rust-ampersand-face fontified t) 40 42 (fontified t) 42 58 (fontified t) 58 59 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1977) (undo-tree-id1337 . -59)) nil (26014 28217 789720 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977) (undo-tree-id1336 . -1)) nil (26014 28217 789718 0) 0 nil])
([nil nil ((#("            println!(\"    material.map_Kd = {}\", diffuse_texture);" 0 4 (fontified t) 4 12 (fontified t) 12 20 (face rust-builtin-formatting-macro fontified t) 20 21 (face (rainbow-delimiters-depth-2-face) fontified t) 21 44 (face font-lock-string-face fontified t) 44 46 (face rust-string-interpolation fontified t) 46 47 (face font-lock-string-face fontified t) 47 55 (fontified t) 55 64 (fontified t) 64 65 (face (rainbow-delimiters-depth-2-face) fontified t) 65 66 (fontified t)) . 1977) (undo-tree-id1335 . -66)) nil (26014 28217 789716 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977) (undo-tree-id1334 . -1)) nil (26014 28217 789714 0) 0 nil])
([nil nil ((#("        }" 0 4 (fontified t) 4 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1977) (undo-tree-id1333 . -9)) nil (26014 28217 789712 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977) (undo-tree-id1332 . -1)) nil (26014 28217 789710 0) 0 nil])
([nil nil ((#("        if let Some(specular_texture) = &m.specular_texture {" 0 4 (fontified t) 4 8 (fontified t) 8 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 14 (face font-lock-keyword-face fontified t) 14 15 (fontified t) 15 19 (face font-lock-type-face fontified t) 19 20 (face (rainbow-delimiters-depth-2-face) fontified t) 20 27 (fontified t) 27 36 (fontified t) 36 37 (face (rainbow-delimiters-depth-2-face) fontified t) 37 40 (fontified t) 40 41 (face rust-ampersand-face fontified t) 41 60 (fontified t) 60 61 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1977) (undo-tree-id1331 . -61)) nil (26014 28217 789707 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977) (undo-tree-id1330 . -1)) nil (26014 28217 789705 0) 0 nil])
([nil nil ((#("            println!(\"    material.map_Ks = {}\", specular_texture);" 0 4 (fontified t) 4 12 (fontified t) 12 20 (face rust-builtin-formatting-macro fontified t) 20 21 (face (rainbow-delimiters-depth-2-face) fontified t) 21 44 (face font-lock-string-face fontified t) 44 46 (face rust-string-interpolation fontified t) 46 47 (face font-lock-string-face fontified t) 47 65 (fontified t) 65 66 (face (rainbow-delimiters-depth-2-face) fontified t) 66 67 (fontified t)) . 1977) (undo-tree-id1329 . -67)) nil (26014 28217 789703 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977) (undo-tree-id1328 . -1)) nil (26014 28217 789701 0) 0 nil])
([nil nil ((#("        }" 0 4 (fontified t) 4 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1977) (undo-tree-id1327 . -9)) nil (26014 28217 789699 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977) (undo-tree-id1326 . -1)) nil (26014 28217 789697 0) 0 nil])
([nil nil ((#("        if let Some(shininess_texture) = &m.shininess_texture {" 0 1 (fontified t) 1 4 (fontified t) 4 8 (fontified t) 8 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 14 (face font-lock-keyword-face fontified t) 14 15 (fontified t) 15 19 (face font-lock-type-face fontified t) 19 20 (face (rainbow-delimiters-depth-2-face) fontified t) 20 37 (fontified t) 37 38 (face (rainbow-delimiters-depth-2-face) fontified t) 38 41 (fontified t) 41 42 (face rust-ampersand-face fontified t) 42 62 (fontified t) 62 63 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1977) (undo-tree-id1325 . -63)) nil (26014 28217 789695 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977) (undo-tree-id1324 . -1)) nil (26014 28217 789693 0) 0 nil])
([nil nil ((#("            println!(\"    material.map_Ns = {}\", shininess_texture);" 0 4 (fontified t) 4 12 (fontified t) 12 20 (face rust-builtin-formatting-macro fontified t) 20 21 (face (rainbow-delimiters-depth-2-face) fontified t) 21 37 (face font-lock-string-face fontified t) 37 44 (face font-lock-string-face fontified t) 44 46 (face rust-string-interpolation fontified t) 46 47 (face font-lock-string-face fontified t) 47 66 (fontified t) 66 67 (face (rainbow-delimiters-depth-2-face) fontified t) 67 68 (fontified t)) . 1977) (undo-tree-id1323 . -68)) nil (26014 28217 789690 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977) (undo-tree-id1322 . -1)) nil (26014 28217 789688 0) 0 nil])
([nil nil ((#("        }" 0 4 (fontified t) 4 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1977) (undo-tree-id1321 . -9)) nil (26014 28217 789686 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977) (undo-tree-id1320 . -1)) nil (26014 28217 789684 0) 0 nil])
([nil nil ((#("        if let Some(normal_texture) = &m.normal_texture {" 0 1 (fontified t) 1 4 (fontified t) 4 8 (fontified t) 8 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 14 (face font-lock-keyword-face fontified t) 14 15 (fontified t) 15 19 (face font-lock-type-face fontified t) 19 20 (face (rainbow-delimiters-depth-2-face) fontified t) 20 33 (fontified t) 33 34 (fontified t) 34 35 (face (rainbow-delimiters-depth-2-face) fontified t) 35 38 (fontified t) 38 39 (face rust-ampersand-face fontified t) 39 56 (fontified t) 56 57 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1977) (undo-tree-id1319 . -57)) nil (26014 28217 789682 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977) (undo-tree-id1318 . -1)) nil (26014 28217 789680 0) 0 nil])
([nil nil ((#("            println!(\"    material.map_Bump = {}\", normal_texture);" 0 4 (fontified t) 4 12 (fontified t) 12 20 (face rust-builtin-formatting-macro fontified t) 20 21 (face (rainbow-delimiters-depth-2-face) fontified t) 21 46 (face font-lock-string-face fontified t) 46 48 (face rust-string-interpolation fontified t) 48 49 (face font-lock-string-face fontified t) 49 65 (fontified t) 65 66 (face (rainbow-delimiters-depth-2-face) fontified t) 66 67 (fontified t)) . 1977) (undo-tree-id1317 . -67)) nil (26014 28217 789678 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977) (undo-tree-id1316 . -1)) nil (26014 28217 789675 0) 0 nil])
([nil nil ((#("        }" 0 4 (fontified t) 4 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1977) (undo-tree-id1315 . -9)) nil (26014 28217 789673 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977) (undo-tree-id1314 . -1)) nil (26014 28217 789671 0) 0 nil])
([nil nil ((#("        if let Some(dissolve_texture) = &m.dissolve_texture {" 0 4 (fontified t) 4 8 (fontified t) 8 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 14 (face font-lock-keyword-face fontified t) 14 15 (fontified t) 15 19 (face font-lock-type-face fontified t) 19 20 (face (rainbow-delimiters-depth-2-face) fontified t) 20 36 (fontified t) 36 37 (face (rainbow-delimiters-depth-2-face) fontified t) 37 40 (fontified t) 40 41 (face rust-ampersand-face fontified t) 41 60 (fontified t) 60 61 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1977) (undo-tree-id1313 . -61)) nil (26014 28217 789669 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977) (undo-tree-id1312 . -1)) nil (26014 28217 789667 0) 0 nil])
([nil nil ((#("            println!(\"    material.map_d = {}\", dissolve_texture);" 0 4 (fontified t) 4 12 (fontified t) 12 20 (face rust-builtin-formatting-macro fontified t) 20 21 (face (rainbow-delimiters-depth-2-face) fontified t) 21 43 (face font-lock-string-face fontified t) 43 45 (face rust-string-interpolation fontified t) 45 46 (face font-lock-string-face fontified t) 46 58 (fontified t) 58 64 (fontified t) 64 65 (face (rainbow-delimiters-depth-2-face) fontified t) 65 66 (fontified t)) . 1977) (undo-tree-id1311 . -66)) nil (26014 28217 789665 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977) (undo-tree-id1310 . -1)) nil (26014 28217 789663 0) 0 nil])
([nil nil ((#("        }" 0 4 (fontified t) 4 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1977) (undo-tree-id1309 . -9)) nil (26014 28217 789660 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977) (undo-tree-id1308 . -1)) nil (26014 28217 789658 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977) (undo-tree-id1307 . -1)) nil (26014 28217 789656 0) 0 nil])
([nil nil ((#("        for (k, v) in &m.unknown_param {" 0 4 (fontified t) 4 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 13 (face (rainbow-delimiters-depth-2-face) fontified t) 13 17 (fontified t) 17 18 (face (rainbow-delimiters-depth-2-face) fontified t) 18 19 (fontified t) 19 21 (face font-lock-keyword-face fontified t) 21 22 (fontified t) 22 23 (face rust-ampersand-face fontified t) 23 39 (fontified t) 39 40 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1977) (undo-tree-id1306 . -40)) nil (26014 28217 789654 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977) (undo-tree-id1305 . -1)) nil (26014 28217 789651 0) 0 nil])
([nil nil ((#("            println!(\"    material.{} = {}\", k, v);" 0 4 (fontified t) 4 12 (fontified t) 12 20 (face rust-builtin-formatting-macro fontified t) 20 21 (face (rainbow-delimiters-depth-2-face) fontified t) 21 35 (face font-lock-string-face fontified t) 35 37 (face rust-string-interpolation fontified t) 37 40 (face font-lock-string-face fontified t) 40 42 (face rust-string-interpolation fontified t) 42 43 (face font-lock-string-face fontified t) 43 49 (fontified t) 49 50 (face (rainbow-delimiters-depth-2-face) fontified t) 50 51 (fontified t)) . 1977) (undo-tree-id1304 . -51)) nil (26014 28217 789649 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977) (undo-tree-id1303 . -1)) nil (26014 28217 789647 0) 0 nil])
([nil nil ((#("        }" 0 4 (fontified t) 4 6 (fontified t) 6 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1977) (undo-tree-id1302 . -9)) nil (26014 28217 789645 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977) (undo-tree-id1301 . -1)) nil (26014 28217 789643 0) 0 nil])
([nil nil ((#("    }" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-1-face) fontified t rear-nonsticky t)) . 1977) (undo-tree-id1298 . -5) (undo-tree-id1299 . -5) (undo-tree-id1300 . -5)) nil (26014 28217 789640 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1977) (undo-tree-id1297 . -1)) nil (26014 28217 789633 0) 0 nil])
([nil nil ((1978 . 1982) (#("    " 0 4 (fontified nil)) . 1977) (undo-tree-id1444 . -4) (undo-tree-id1445 . -4) (undo-tree-id1446 . -4) (undo-tree-id1447 . -4) (undo-tree-id1448 . -4) (undo-tree-id1449 . -4) (undo-tree-id1450 . -4) (undo-tree-id1451 . -4) (undo-tree-id1452 . -4) (undo-tree-id1453 . -4) (undo-tree-id1454 . -4) (undo-tree-id1455 . -4) (undo-tree-id1456 . -4) (undo-tree-id1457 . -4) (undo-tree-id1458 . -4) (undo-tree-id1459 . -4) (undo-tree-id1460 . -4) (undo-tree-id1461 . -4) (undo-tree-id1462 . -4) (undo-tree-id1463 . -4) (undo-tree-id1464 . -4) (undo-tree-id1465 . -4) (undo-tree-id1466 . -4) (undo-tree-id1467 . -4) (undo-tree-id1468 . -4) (undo-tree-id1469 . -4) (undo-tree-id1470 . -4) (undo-tree-id1471 . -4) (undo-tree-id1472 . -4) (1981 . 1982) (t 26014 28217 806952 503000)) nil (26014 28337 291646 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 2017 . 2018) (nil fontified nil 1982 . 2018) (1982 . 2018)) nil (26014 28337 291613 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1982) 2009) nil (26014 28337 291611 0) 0 nil])
([nil nil ((#("    let mut materials = Vec::new();" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 21 (face font-lock-variable-name-face fontified t) 21 24 (fontified t) 24 27 (face font-lock-type-face fontified t) 27 32 (fontified t) 32 33 (face (rainbow-delimiters-depth-2-face) fontified t) 33 34 (face (rainbow-delimiters-depth-2-face) fontified t) 34 35 (fontified t)) . 1978) (undo-tree-id1406 . -4) (undo-tree-id1407 . -35) (undo-tree-id1408 . -4) (undo-tree-id1409 . -4) (undo-tree-id1410 . -4) (undo-tree-id1411 . -4) (undo-tree-id1412 . -27) (undo-tree-id1413 . -27) (undo-tree-id1414 . -27) (undo-tree-id1415 . -27) (undo-tree-id1416 . -27) (undo-tree-id1417 . -27) (undo-tree-id1418 . -27) (undo-tree-id1419 . -27) (undo-tree-id1420 . -27) (undo-tree-id1421 . -27) (undo-tree-id1422 . -27) (undo-tree-id1423 . -27) (undo-tree-id1424 . -27) (undo-tree-id1425 . -27) (undo-tree-id1426 . -27) (undo-tree-id1427 . -35) (undo-tree-id1428 . -35) (undo-tree-id1429 . -35) (undo-tree-id1430 . -35) (undo-tree-id1431 . -35) (undo-tree-id1432 . -35) (undo-tree-id1433 . -35) (undo-tree-id1434 . -35) (undo-tree-id1435 . -35) (undo-tree-id1436 . -35) (undo-tree-id1437 . -35) (undo-tree-id1438 . -35) (undo-tree-id1439 . -35) (undo-tree-id1440 . -35) (undo-tree-id1441 . -35) (undo-tree-id1442 . -35) (undo-tree-id1443 . -35)) nil (26014 28337 291608 0) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . 1978) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1)) nil (26014 28337 291567 0) 0 nil])
([nil nil ((1847 . 1851)) nil (26014 28337 291555 0) 0 nil])
([nil nil ((1859 . 1863)) nil (26014 28337 291554 0) 0 nil])
([nil nil ((1935 . 1939)) nil (26014 28337 291553 0) 0 nil])
([nil nil ((1923 . 1925)) nil (26014 28337 291551 0) 0 nil])
([nil nil ((1925 . 1927)) nil (26014 28337 291547 0) 0 nil])
([nil nil ((1993 . 1997) (t 26014 28337 309376 745000)) nil (26014 28352 220289 0) 0 nil])
([nil nil ((1997 . 2016)) nil (26014 28352 220288 0) 0 nil])
([nil nil ((#("v" 0 1 (fontified t)) . -2013) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (#("e" 0 1 (fontified t)) . -2014) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (#("c" 0 1 (fontified t)) . -2015) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) 2016) nil (26014 28352 220284 0) 0 nil])
([nil nil ((#("    let materials = " 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 17 (face font-lock-variable-name-face fontified t) 17 20 (fontified t)) . 1993) (undo-tree-id1522 . -8) (undo-tree-id1523 . -4) (undo-tree-id1524 . -4) (undo-tree-id1525 . -4) (undo-tree-id1526 . -4) (undo-tree-id1527 . -4) (undo-tree-id1528 . -4) (undo-tree-id1529 . -4) (undo-tree-id1530 . -4) (undo-tree-id1531 . -5) (undo-tree-id1532 . -5) (undo-tree-id1533 . -6) (undo-tree-id1534 . -6) (undo-tree-id1535 . -7) (undo-tree-id1536 . -7) (undo-tree-id1537 . -7) (undo-tree-id1538 . -7) (undo-tree-id1539 . -8) (undo-tree-id1540 . -8) (undo-tree-id1541 . -8) (undo-tree-id1542 . -8) (undo-tree-id1543 . -8) (undo-tree-id1544 . -9) (undo-tree-id1545 . -9) (undo-tree-id1546 . -9) (undo-tree-id1547 . -9) (undo-tree-id1548 . -9) (undo-tree-id1549 . -10) (undo-tree-id1550 . -10) (undo-tree-id1551 . -10) (undo-tree-id1552 . -11) (undo-tree-id1553 . -11) (undo-tree-id1554 . -12) (undo-tree-id1555 . -12) (undo-tree-id1556 . -13) (undo-tree-id1557 . -13) (undo-tree-id1558 . -14) (undo-tree-id1559 . -14) (undo-tree-id1560 . -14) (undo-tree-id1561 . -14) (undo-tree-id1562 . -15) (undo-tree-id1563 . -15) (undo-tree-id1564 . -15) (undo-tree-id1565 . -15) (undo-tree-id1566 . -16) (undo-tree-id1567 . -16) (undo-tree-id1568 . -16) (undo-tree-id1569 . -16) (undo-tree-id1570 . -16) (undo-tree-id1571 . -16) (undo-tree-id1572 . -17) (undo-tree-id1573 . -17) (undo-tree-id1574 . -17) (undo-tree-id1575 . -17) (undo-tree-id1576 . -18) (undo-tree-id1577 . -18) (undo-tree-id1578 . -19) (undo-tree-id1579 . -19) (undo-tree-id1580 . -20) (undo-tree-id1581 . -20) (undo-tree-id1582 . -20) (undo-tree-id1583 . -20) (undo-tree-id1584 . -20) (undo-tree-id1585 . -20) (undo-tree-id1586 . -20) (undo-tree-id1587 . -20) (undo-tree-id1588 . -20) (undo-tree-id1589 . -20) (undo-tree-id1590 . -20) (undo-tree-id1591 . -20) (undo-tree-id1592 . -20) (undo-tree-id1593 . -20) (undo-tree-id1594 . -20) (undo-tree-id1595 . -20) (undo-tree-id1596 . -20) (undo-tree-id1597 . -20) (undo-tree-id1598 . -20) (undo-tree-id1599 . -20) (undo-tree-id1600 . -20) (undo-tree-id1601 . -20) (undo-tree-id1602 . -20) (undo-tree-id1603 . -20) (undo-tree-id1604 . -20) (undo-tree-id1605 . -20) (undo-tree-id1606 . -20) (undo-tree-id1607 . -20) (undo-tree-id1608 . -20) (undo-tree-id1609 . -20) (undo-tree-id1610 . -20) (undo-tree-id1611 . -20) (undo-tree-id1612 . -20)) nil (26014 28352 220237 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1993) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . 1) (undo-tree-id1521 . -1)) nil (26014 28352 220141 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 2027 . 2028) (nil fontified nil 1993 . 2028) (1993 . 2028)) nil (26014 28352 220079 0) 0 nil])
([nil nil ((2030 . 2034) (#("    " 0 4 (fontified nil)) . 2029) (undo-tree-id1679 . -4) (undo-tree-id1680 . -4) (undo-tree-id1681 . -4) (undo-tree-id1682 . -4) (2028 . 2034) (t 26014 28352 237946 7000)) nil (26014 28380 633834 0) 0 nil])
([nil nil ((2014 . 2019)) nil (26014 28380 633828 0) 0 nil])
([nil nil ((2016 . 2022) (#("Vec" 0 3 (fontified nil)) . 2016) (2016 . 2019) (#("Vec<_>" 0 6 (fontified nil)) . -2016) (2016 . 2022) (#("Vec" 0 3 (face font-lock-type-face fontified t)) . -2016) (undo-tree-id1668 . -3) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (undo-tree-id1672 . -2) (undo-tree-id1673 . -2) (undo-tree-id1674 . -2) (undo-tree-id1675 . -3) (undo-tree-id1676 . -3) (undo-tree-id1677 . -3) (undo-tree-id1678 . -3) 2019) nil (26014 28380 633826 0) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -2020) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) 2021) nil (26014 28380 633813 0) 0 nil])
([nil nil ((2020 . 2022)) nil (26014 28380 633809 0) 0 nil])
([nil nil ((2020 . 2028) (#("Ma" 0 2 (fontified nil)) . 2020) (2020 . 2022) (#("Material" 0 8 (fontified nil)) . -2020) (2020 . 2028) (#("Ma" 0 2 (face font-lock-type-face fontified t)) . -2020) (undo-tree-id1656 . -2) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -2) (undo-tree-id1662 . -2) (undo-tree-id1663 . -2) (undo-tree-id1664 . -2) (undo-tree-id1665 . -2) 2022) nil (26014 28380 633805 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2045) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (#(" " 0 1 (fontified t)) . -2046) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (#(" " 0 1 (fontified t)) . -2047) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (#(" " 0 1 (fontified t)) . -2048) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) 2049 (t 26014 28380 651885 762000)) nil (26014 28520 533746 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2044) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) 2045) nil (26014 28520 533690 0) 0 nil])
([nil nil ((2044 . 2048)) nil (26014 28520 533660 0) 0 nil])
([nil nil ((2048 . 2051)) nil (26014 28520 533659 0) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -2048) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (#("o" 0 1 (fontified t)) . -2049) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (#("r" 0 1 (face font-lock-keyword-face fontified t)) . -2050) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) 2051) nil (26014 28520 533656 0) 0 nil])
([nil nil ((2048 . 2051)) nil (26014 28520 533624 0) 0 nil])
([nil nil ((2048 . 2061) (#("obj" 0 3 (fontified nil)) . 2048) (2048 . 2051) (#("obj_materials" 0 13 (fontified nil)) . -2048) (2048 . 2061) (#("obj" 0 3 (fontified t)) . -2048) (undo-tree-id1844 . -3) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -2) (undo-tree-id1848 . -2) (undo-tree-id1849 . -2) (undo-tree-id1850 . -3) (undo-tree-id1851 . -3) (undo-tree-id1852 . -3) (undo-tree-id1853 . -3) 2051) nil (26014 28520 533622 0) 0 nil])
([nil nil ((2061 . 2065)) nil (26014 28520 533609 0) 0 nil])
([nil nil ((apply yas--snippet-revive 2062 2073 #s(yas--snippet nil nil #s(yas--exit 2073 nil) 120 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2073 nil) 120 nil nil nil nil)) (2062 . 2073) (#("into_iter()$0" 0 13 (fontified nil)) . 2062) (2062 . 2075) (#("int" 0 3 (fontified nil)) . 2062) (2062 . 2065) (#("into_iter() (as IntoIterator)" 0 29 (fontified nil)) . -2062) (2062 . 2091) (#("int" 0 3 (fontified t)) . -2062) (undo-tree-id1829 . -3) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (undo-tree-id1834 . -2) (undo-tree-id1835 . -2) (undo-tree-id1836 . -2) (undo-tree-id1837 . -2) (undo-tree-id1838 . -3) (undo-tree-id1839 . -3) (undo-tree-id1840 . -3) (undo-tree-id1841 . -3) (undo-tree-id1842 . -3) (undo-tree-id1843 . -3) 2065) nil (26014 28520 533607 0) 0 nil])
([nil nil ((2073 . 2077)) nil (26014 28520 533589 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2083 2086 nil nil nil t #s(yas--exit 2087 nil))) #s(yas--exit 2087 nil) 121 nil #s(yas--field 1 2083 2086 nil nil nil t #s(yas--exit 2087 nil)) nil nil)) (2074 . 2085) (#("for_each(${1:f})$0" 0 18 (fontified nil)) . 2074) (2074 . 2092) (#("for" 0 3 (fontified nil)) . 2074) (2074 . 2077) (#("for_each(…) (as Iterator)" 0 25 (fontified nil)) . -2074) (2074 . 2099) (#("for" 0 3 (face font-lock-keyword-face fontified t)) . -2074) (undo-tree-id1815 . -3) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -2) (undo-tree-id1821 . -2) (undo-tree-id1822 . -3) (undo-tree-id1823 . -3) (undo-tree-id1824 . -3) (undo-tree-id1825 . -3) (undo-tree-id1826 . -3) (undo-tree-id1827 . -3) (undo-tree-id1828 . -3) 2077) nil (26014 28520 533586 0) 0 nil])
([nil nil ((2084 . 2085) (#("f" 0 1 (fontified nil)) . 2084) (undo-tree-id1814 . -1) (2083 . 2084)) nil (26014 28520 533568 0) 0 nil])
([nil nil ((2084 . 2085)) nil (26014 28520 533566 0) 0 nil])
([nil nil ((apply yas--snippet-revive 2074 2087 #s(yas--snippet nil (#s(yas--field 1 2083 2086 nil nil nil t #s(yas--exit 2087 nil))) #s(yas--exit 2087 nil) 121 nil #s(yas--field 1 2083 2086 nil nil nil t #s(yas--exit 2087 nil)) nil nil))) nil (26014 28520 533565 0) 0 nil])
([nil nil ((2087 . 2088)) nil (26014 28520 533564 0) 0 nil])
([nil nil ((2087 . 2088)) nil (26014 28520 533563 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2087) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) 2088) nil (26014 28520 533561 0) 0 nil])
([nil nil ((2086 . 2089)) nil (26014 28520 533554 0) 0 nil])
([nil nil ((2091 . 2095) (#("        " 0 8 (fontified nil)) . 2090) (2090 . 2098) (#("    " 0 4 (fontified nil)) . 2090) (undo-tree-id1800 . -4) (undo-tree-id1801 . -4) (undo-tree-id1802 . -4) (undo-tree-id1803 . -4) (2090 . 2095) (#("        " 0 8 (fontified nil)) . 2089) (2089 . 2097) (#("    " 0 4 (fontified nil)) . 2089) (undo-tree-id1804 . -4) (undo-tree-id1805 . -4) (undo-tree-id1806 . -4) (undo-tree-id1807 . -4) (2088 . 2094)) nil (26014 28520 533552 0) 0 nil])
([nil nil ((2089 . 2097)) nil (26014 28520 533540 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 2182 . 2183) (nil fontified nil 2097 . 2183) (2097 . 2183)) nil (26014 28520 533539 0) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -2097) 2114) nil (26014 28520 533538 0) 0 nil])
([nil nil ((#("        let diffuse_texture = load_texture(&m.diffuse_texture, device, queue).await?;" 0 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 27 (face font-lock-variable-name-face fontified t) 27 42 (fontified t) 42 43 (face (rainbow-delimiters-depth-4-face) fontified t) 43 44 (face rust-ampersand-face fontified t) 44 76 (fontified t) 76 77 (face (rainbow-delimiters-depth-4-face) fontified t) 77 78 (fontified t) 78 83 (face font-lock-keyword-face fontified t) 83 84 (face rust-question-mark fontified t) 84 85 (fontified t)) . 2089) (undo-tree-id1721 . -8) (undo-tree-id1722 . -8) (undo-tree-id1723 . -8) (undo-tree-id1724 . -8) (undo-tree-id1725 . -8) (undo-tree-id1726 . -8) (undo-tree-id1727 . -17) (undo-tree-id1728 . -17) (undo-tree-id1729 . -17) (undo-tree-id1730 . -17) (undo-tree-id1731 . -17) (undo-tree-id1732 . -17) (undo-tree-id1733 . -17) (undo-tree-id1734 . -17) (undo-tree-id1735 . -17) (undo-tree-id1736 . -17) (undo-tree-id1737 . -17) (undo-tree-id1738 . -17) (undo-tree-id1739 . -17) (undo-tree-id1740 . -17) (undo-tree-id1741 . -17) (undo-tree-id1742 . -17) (undo-tree-id1743 . -17) (undo-tree-id1744 . -17) (undo-tree-id1745 . -17) (undo-tree-id1746 . -17) (undo-tree-id1747 . -17) (undo-tree-id1748 . -17) (undo-tree-id1749 . -8) (undo-tree-id1750 . -15) (undo-tree-id1751 . -15) (undo-tree-id1752 . -12) (undo-tree-id1753 . -12) (undo-tree-id1754 . -12) (undo-tree-id1755 . -12) (undo-tree-id1756 . -12) (undo-tree-id1757 . -12) (undo-tree-id1758 . -12) (undo-tree-id1759 . -12) (undo-tree-id1760 . -12) (undo-tree-id1761 . -12) (undo-tree-id1762 . -12) (undo-tree-id1763 . -12) (undo-tree-id1764 . -12) (undo-tree-id1765 . -12) (undo-tree-id1766 . -12) (undo-tree-id1767 . -12) (undo-tree-id1768 . -12) (undo-tree-id1769 . -12) (undo-tree-id1770 . -12) (undo-tree-id1771 . -12) (undo-tree-id1772 . -12) (undo-tree-id1773 . -12) (undo-tree-id1774 . -12) (undo-tree-id1775 . -15) (undo-tree-id1776 . -38) (undo-tree-id1777 . -38) (undo-tree-id1778 . -38) (undo-tree-id1779 . -38) (undo-tree-id1780 . -38) (undo-tree-id1781 . -38) (undo-tree-id1782 . -38) (undo-tree-id1783 . -38) (undo-tree-id1784 . -38) (undo-tree-id1785 . -38) (undo-tree-id1786 . -38) (undo-tree-id1787 . -38) (undo-tree-id1788 . -38) (undo-tree-id1789 . -38) (undo-tree-id1790 . -38) (undo-tree-id1791 . -38) (undo-tree-id1792 . -38) (undo-tree-id1793 . -27) (undo-tree-id1794 . -27) (undo-tree-id1795 . -27) (undo-tree-id1796 . -27) (undo-tree-id1797 . -27) (undo-tree-id1798 . -27) (undo-tree-id1799 . -85)) nil (26014 28520 533533 0) 0 nil])
([nil nil ((2089 . 2097)) nil (26014 28520 533452 0) 0 nil])
([nil nil ((2097 . 2100)) nil (26014 28520 533451 0) 0 nil])
([nil nil ((apply yas--snippet-revive 2097 2107 #s(yas--snippet nil nil #s(yas--exit 2106 nil) 122 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2106 nil) 122 nil nil nil nil)) (2097 . 2107) (#("println!($0)" 0 12 (fontified nil)) . 2097) (2097 . 2109) (#("pri" 0 3 (fontified nil)) . 2097) (2097 . 2100) (#("println!(…)" 0 11 (fontified nil)) . -2097) (2097 . 2108) (#("pri" 0 3 (fontified t)) . -2097) (undo-tree-id1712 . -3) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (undo-tree-id1715 . -2) (undo-tree-id1716 . -2) (undo-tree-id1717 . -3) (undo-tree-id1718 . -3) (undo-tree-id1719 . -3) (undo-tree-id1720 . -3) 2100) nil (26014 28520 533449 0) 0 nil])
([nil nil ((2106 . 2108)) nil (26014 28520 533436 0) 0 nil])
([nil nil ((2107 . 2109)) nil (26014 28520 533435 0) 0 nil])
([nil nil ((2108 . 2109)) nil (26014 28520 533434 0) 0 nil])
([nil nil ((2109 . 2110)) nil (26014 28520 533433 0) 0 nil])
([nil nil ((#(";" 0 1 (face rust-string-interpolation fontified t)) . -2108) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (#("?" 0 1 (face rust-string-interpolation fontified t)) . -2109) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) 2110) nil (26014 28520 533431 0) 0 nil])
([nil nil ((2108 . 2110)) nil (26014 28520 533420 0) 0 nil])
([nil nil ((2112 . 2116)) nil (26014 28520 533419 0) 0 nil])
([nil nil ((2116 . 2131) (#("diffuse_texture" 0 15 (fontified nil)) . -2116) (2116 . 2131)) nil (26014 28520 533417 0) 0 nil])
([nil nil ((2131 . 2133)) nil (26014 28520 533416 0) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2131) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (#("u" 0 1 (fontified t)) . -2132) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) 2133) nil (26014 28520 533413 0) 0 nil])
([nil nil ((2132 . 2133)) nil (26014 28520 533379 0) 0 nil])
([nil nil ((2134 . 2142) (t 26014 28520 552608 817000)) nil (26014 28624 236673 0) 0 nil])
([nil nil ((2114 . 2115)) nil (26014 28624 236672 0) 0 nil])
([nil nil ((1772 . 1776) (#("    " 0 4 (fontified nil)) . 1771) (1771 . 1775) (1771 . 1772)) nil (26014 28624 236671 0) 0 nil])
([nil nil ((1771 . 1775)) nil (26014 28624 236669 0) 0 nil])
([nil nil ((1775 . 1777)) nil (26014 28624 236668 0) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -1776) (undo-tree-id2181 . -1) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1) (undo-tree-id2186 . -1) (undo-tree-id2187 . -1) 1777) nil (26014 28624 236667 0) 0 nil])
([nil nil ((1776 . 1786)) nil (26014 28624 236658 0) 0 nil])
([nil nil ((1786 . 1788)) nil (26014 28624 236656 0) 0 nil])
([nil nil ((1786 . 1795) (#("fi" 0 2 (fontified nil)) . 1786) (1786 . 1788) (#("file_name" 0 9 (fontified nil)) . -1786) (1786 . 1795) (#("fi" 0 2 (fontified t)) . -1786) (undo-tree-id2172 . -2) (undo-tree-id2173 . -1) (undo-tree-id2174 . -1) (undo-tree-id2175 . -2) (undo-tree-id2176 . -2) (undo-tree-id2177 . -2) (undo-tree-id2178 . -2) (undo-tree-id2179 . -2) (undo-tree-id2180 . -2) 1788) nil (26014 28624 236654 0) 0 nil])
([nil nil ((1795 . 1796)) nil (26014 28624 236642 0) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -1786) (undo-tree-id1996 . -1) (undo-tree-id1997 . -1) (undo-tree-id1998 . -1) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (undo-tree-id2005 . -1) (undo-tree-id2006 . -1) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) (undo-tree-id2016 . -1) (undo-tree-id2017 . -1) (undo-tree-id2018 . -1) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (undo-tree-id2022 . -1) (#("i" 0 1 (fontified t)) . -1787) (undo-tree-id2023 . -1) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (#("l" 0 1 (fontified t)) . -1788) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) (#("e" 0 1 (fontified t)) . -1789) (undo-tree-id2071 . -1) (undo-tree-id2072 . -1) (undo-tree-id2073 . -1) (undo-tree-id2074 . -1) (undo-tree-id2075 . -1) (undo-tree-id2076 . -1) (undo-tree-id2077 . -1) (undo-tree-id2078 . -1) (undo-tree-id2079 . -1) (undo-tree-id2080 . -1) (undo-tree-id2081 . -1) (undo-tree-id2082 . -1) (undo-tree-id2083 . -1) (undo-tree-id2084 . -1) (undo-tree-id2085 . -1) (undo-tree-id2086 . -1) (undo-tree-id2087 . -1) (undo-tree-id2088 . -1) (undo-tree-id2089 . -1) (undo-tree-id2090 . -1) (undo-tree-id2091 . -1) (#("_" 0 1 (fontified t)) . -1790) (undo-tree-id2092 . -1) (undo-tree-id2093 . -1) (undo-tree-id2094 . -1) (undo-tree-id2095 . -1) (undo-tree-id2096 . -1) (undo-tree-id2097 . -1) (undo-tree-id2098 . -1) (undo-tree-id2099 . -1) (undo-tree-id2100 . -1) (undo-tree-id2101 . -1) (undo-tree-id2102 . -1) (undo-tree-id2103 . -1) (undo-tree-id2104 . -1) (undo-tree-id2105 . -1) (undo-tree-id2106 . -1) (undo-tree-id2107 . -1) (undo-tree-id2108 . -1) (undo-tree-id2109 . -1) (undo-tree-id2110 . -1) (#("n" 0 1 (fontified t)) . -1791) (undo-tree-id2111 . -1) (undo-tree-id2112 . -1) (undo-tree-id2113 . -1) (undo-tree-id2114 . -1) (undo-tree-id2115 . -1) (undo-tree-id2116 . -1) (undo-tree-id2117 . -1) (undo-tree-id2118 . -1) (undo-tree-id2119 . -1) (undo-tree-id2120 . -1) (undo-tree-id2121 . -1) (undo-tree-id2122 . -1) (undo-tree-id2123 . -1) (undo-tree-id2124 . -1) (undo-tree-id2125 . -1) (undo-tree-id2126 . -1) (undo-tree-id2127 . -1) (#("a" 0 1 (fontified t)) . -1792) (undo-tree-id2128 . -1) (undo-tree-id2129 . -1) (undo-tree-id2130 . -1) (undo-tree-id2131 . -1) (undo-tree-id2132 . -1) (undo-tree-id2133 . -1) (undo-tree-id2134 . -1) (undo-tree-id2135 . -1) (undo-tree-id2136 . -1) (undo-tree-id2137 . -1) (undo-tree-id2138 . -1) (undo-tree-id2139 . -1) (undo-tree-id2140 . -1) (undo-tree-id2141 . -1) (undo-tree-id2142 . -1) (#("m" 0 1 (fontified t)) . -1793) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (undo-tree-id2145 . -1) (undo-tree-id2146 . -1) (undo-tree-id2147 . -1) (undo-tree-id2148 . -1) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (#("e" 0 1 (fontified t)) . -1794) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1) (undo-tree-id2164 . -1) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) (#("." 0 1 (fontified t)) . -1795) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) (undo-tree-id2171 . -1) 1796) nil (26014 28624 236632 0) 0 nil])
([nil nil ((1786 . 1787)) nil (26014 28624 236445 0) 0 nil])
([nil nil ((1787 . 1793)) nil (26014 28624 236444 0) 0 nil])
([nil nil ((#("N" 0 1 (face font-lock-type-face fontified t)) . -1792) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (undo-tree-id1995 . -1) 1793) nil (26014 28624 236443 0) 0 nil])
([nil nil ((1792 . 1793)) nil (26014 28624 236435 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1796 1805 nil nil nil t #s(yas--exit 1806 nil))) #s(yas--exit 1806 nil) 123 nil #s(yas--field 1 1796 1805 nil nil nil t #s(yas--exit 1806 nil)) nil nil)) (1792 . 1798) (#("new(${1:s})$0" 0 13 (fontified nil)) . 1792) (1792 . 1805) (#("n" 0 1 (fontified nil)) . 1792) (1792 . 1793) (#("new(…)" 0 6 (fontified nil)) . -1792) (1792 . 1798) (#("n" 0 1 (fontified t)) . -1792) (undo-tree-id1982 . -1) (undo-tree-id1983 . -1) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) 1793) nil (26014 28624 236433 0) 0 nil])
([nil nil ((1797 . 1798) (#("s" 0 1 (fontified nil)) . 1797) (undo-tree-id1981 . -1) (1796 . 1797)) nil (26014 28624 236422 0) 0 nil])
([nil nil ((1796 . 1805) (#("fi" 0 2 (fontified nil)) . 1796) (undo-tree-id1970 . -2) (1796 . 1798) (#("file_name" 0 9 (fontified nil)) . -1796) (undo-tree-id1971 . -9) (1796 . 1805) (#("fi" 0 2 (fontified t)) . -1796) (undo-tree-id1972 . -2) (undo-tree-id1973 . -2) (undo-tree-id1974 . -2) (undo-tree-id1975 . -1) (undo-tree-id1976 . -1) (undo-tree-id1977 . -1) (undo-tree-id1978 . -2) (undo-tree-id1979 . -2) (undo-tree-id1980 . -2) 1798) nil (26014 28624 236418 0) 0 nil])
([nil nil ((apply yas--snippet-revive 1792 1806 #s(yas--snippet nil (#s(yas--field 1 1796 1805 nil nil nil t #s(yas--exit 1806 nil))) #s(yas--exit 1806 nil) 123 nil #s(yas--field 1 1796 1805 nil nil nil t #s(yas--exit 1806 nil)) nil nil))) nil (26014 28624 236397 0) 0 nil])
([nil nil ((1806 . 1807)) nil (26014 28624 236393 0) 0 nil])
([nil nil ((#("name" 0 4 (fontified t)) . -1847) (undo-tree-id2202 . -4) (undo-tree-id2203 . -4) 1851 (t 26014 28624 256413 449000)) nil (26014 28633 679542 0) 0 nil])
([nil nil ((#("file_" 0 5 (fontified t)) . -1842) (undo-tree-id2195 . -5) (undo-tree-id2196 . -5) (undo-tree-id2197 . -5) (undo-tree-id2198 . -5) (undo-tree-id2199 . -5) (undo-tree-id2200 . -5) (undo-tree-id2201 . -5) 1847) nil (26014 28633 679537 0) 0 nil])
([nil nil ((1842 . 1844)) nil (26014 28633 679529 0) 0 nil])
([nil nil ((1842 . 1846) (#("pa" 0 2 (fontified nil)) . 1842) (1842 . 1844) (#("path" 0 4 (fontified nil)) . -1842) (1842 . 1846) (#("pa" 0 2 (fontified t)) . -1842) (undo-tree-id2188 . -2) (undo-tree-id2189 . -1) (undo-tree-id2190 . -1) (undo-tree-id2191 . -2) (undo-tree-id2192 . -2) (undo-tree-id2193 . -2) (undo-tree-id2194 . -2) 1844) nil (26014 28633 679525 0) 0 nil])
([nil nil ((1842 . 1843) (t 26014 28633 697972 492000)) nil (26014 28636 808162 0) 0 nil])
([nil nil ((2151 . 2153) (t 26014 28636 826714 536000)) nil (26014 28697 181327 0) 0 nil])
([nil nil ((2151 . 2155) (#("pa" 0 2 (fontified nil)) . 2151) (2151 . 2153) (#("path" 0 4 (fontified nil)) . -2151) (2151 . 2155) (#("pa" 0 2 (fontified t)) . -2151) (undo-tree-id2983 . -2) (undo-tree-id2984 . -1) (undo-tree-id2985 . -1) (undo-tree-id2986 . -2) (undo-tree-id2987 . -2) (undo-tree-id2988 . -2) (undo-tree-id2989 . -2) 2153) nil (26014 28697 181325 0) 0 nil])
([nil nil ((2155 . 2157)) nil (26014 28697 181315 0) 0 nil])
([nil nil ((apply yas--snippet-revive 2156 2164 #s(yas--snippet nil nil #s(yas--exit 2164 nil) 124 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2164 nil) 124 nil nil nil nil)) (2156 . 2164) (#("parent()$0" 0 10 (fontified nil)) . 2156) (2156 . 2166) (#("p" 0 1 (fontified nil)) . 2156) (2156 . 2157) (#("parent() (alias dirname)" 0 24 (fontified nil)) . -2156) (2156 . 2180) (#("p" 0 1 (fontified t)) . -2156) (undo-tree-id2975 . -1) (undo-tree-id2976 . -1) (undo-tree-id2977 . -1) (undo-tree-id2978 . -1) (undo-tree-id2979 . -1) (undo-tree-id2980 . -1) (undo-tree-id2981 . -1) (undo-tree-id2982 . -1) 2157) nil (26014 28697 181313 0) 0 nil])
([nil nil ((2164 . 2167)) nil (26014 28697 181301 0) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2164) (undo-tree-id2934 . -1) (undo-tree-id2935 . -1) (undo-tree-id2936 . -1) (undo-tree-id2937 . -1) (undo-tree-id2938 . -1) (undo-tree-id2939 . -1) (undo-tree-id2940 . -1) (undo-tree-id2941 . -1) (undo-tree-id2942 . -1) (undo-tree-id2943 . -1) (undo-tree-id2944 . -1) (undo-tree-id2945 . -1) (undo-tree-id2946 . -1) (undo-tree-id2947 . -1) (undo-tree-id2948 . -1) (undo-tree-id2949 . -1) (undo-tree-id2950 . -1) (undo-tree-id2951 . -1) (undo-tree-id2952 . -1) (undo-tree-id2953 . -1) (undo-tree-id2954 . -1) (undo-tree-id2955 . -1) (#("j" 0 1 (fontified t)) . -2165) (undo-tree-id2956 . -1) (undo-tree-id2957 . -1) (undo-tree-id2958 . -1) (undo-tree-id2959 . -1) (undo-tree-id2960 . -1) (undo-tree-id2961 . -1) (undo-tree-id2962 . -1) (undo-tree-id2963 . -1) (undo-tree-id2964 . -1) (undo-tree-id2965 . -1) (undo-tree-id2966 . -1) (undo-tree-id2967 . -1) (undo-tree-id2968 . -1) (undo-tree-id2969 . -1) (undo-tree-id2970 . -1) (undo-tree-id2971 . -1) (#("o" 0 1 (fontified t)) . -2166) (undo-tree-id2972 . -1) (undo-tree-id2973 . -1) (undo-tree-id2974 . -1) 2167) nil (26014 28697 181298 0) 0 nil])
([nil nil ((2164 . 2165)) nil (26014 28697 181258 0) 0 nil])
([nil nil ((2164 . 2167)) nil (26014 28697 181257 0) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -2156) (undo-tree-id2413 . -1) (undo-tree-id2414 . -1) (undo-tree-id2415 . -1) (undo-tree-id2416 . -1) (undo-tree-id2417 . -1) (undo-tree-id2418 . -1) (undo-tree-id2419 . -1) (undo-tree-id2420 . -1) (undo-tree-id2421 . -1) (undo-tree-id2422 . -1) (undo-tree-id2423 . -1) (undo-tree-id2424 . -1) (undo-tree-id2425 . -1) (undo-tree-id2426 . -1) (undo-tree-id2427 . -1) (undo-tree-id2428 . -1) (undo-tree-id2429 . -1) (undo-tree-id2430 . -1) (undo-tree-id2431 . -1) (undo-tree-id2432 . -1) (undo-tree-id2433 . -1) (undo-tree-id2434 . -1) (undo-tree-id2435 . -1) (undo-tree-id2436 . -1) (undo-tree-id2437 . -1) (undo-tree-id2438 . -1) (undo-tree-id2439 . -1) (undo-tree-id2440 . -1) (undo-tree-id2441 . -1) (undo-tree-id2442 . -1) (undo-tree-id2443 . -1) (undo-tree-id2444 . -1) (undo-tree-id2445 . -1) (undo-tree-id2446 . -1) (undo-tree-id2447 . -1) (undo-tree-id2448 . -1) (undo-tree-id2449 . -1) (undo-tree-id2450 . -1) (undo-tree-id2451 . -1) (undo-tree-id2452 . -1) (undo-tree-id2453 . -1) (undo-tree-id2454 . -1) (undo-tree-id2455 . -1) (undo-tree-id2456 . -1) (undo-tree-id2457 . -1) (undo-tree-id2458 . -1) (undo-tree-id2459 . -1) (undo-tree-id2460 . -1) (undo-tree-id2461 . -1) (undo-tree-id2462 . -1) (undo-tree-id2463 . -1) (undo-tree-id2464 . -1) (undo-tree-id2465 . -1) (undo-tree-id2466 . -1) (undo-tree-id2467 . -1) (undo-tree-id2468 . -1) (undo-tree-id2469 . -1) (undo-tree-id2470 . -1) (undo-tree-id2471 . -1) (undo-tree-id2472 . -1) (undo-tree-id2473 . -1) (undo-tree-id2474 . -1) (undo-tree-id2475 . -1) (undo-tree-id2476 . -1) (undo-tree-id2477 . -1) (undo-tree-id2478 . -1) (undo-tree-id2479 . -1) (undo-tree-id2480 . -1) (undo-tree-id2481 . -1) (#("a" 0 1 (fontified t)) . -2157) (undo-tree-id2482 . -1) (undo-tree-id2483 . -1) (undo-tree-id2484 . -1) (undo-tree-id2485 . -1) (undo-tree-id2486 . -1) (undo-tree-id2487 . -1) (undo-tree-id2488 . -1) (undo-tree-id2489 . -1) (undo-tree-id2490 . -1) (undo-tree-id2491 . -1) (undo-tree-id2492 . -1) (undo-tree-id2493 . -1) (undo-tree-id2494 . -1) (undo-tree-id2495 . -1) (undo-tree-id2496 . -1) (undo-tree-id2497 . -1) (undo-tree-id2498 . -1) (undo-tree-id2499 . -1) (undo-tree-id2500 . -1) (undo-tree-id2501 . -1) (undo-tree-id2502 . -1) (undo-tree-id2503 . -1) (undo-tree-id2504 . -1) (undo-tree-id2505 . -1) (undo-tree-id2506 . -1) (undo-tree-id2507 . -1) (undo-tree-id2508 . -1) (undo-tree-id2509 . -1) (undo-tree-id2510 . -1) (undo-tree-id2511 . -1) (undo-tree-id2512 . -1) (undo-tree-id2513 . -1) (undo-tree-id2514 . -1) (undo-tree-id2515 . -1) (undo-tree-id2516 . -1) (undo-tree-id2517 . -1) (undo-tree-id2518 . -1) (undo-tree-id2519 . -1) (undo-tree-id2520 . -1) (undo-tree-id2521 . -1) (undo-tree-id2522 . -1) (undo-tree-id2523 . -1) (undo-tree-id2524 . -1) (undo-tree-id2525 . -1) (undo-tree-id2526 . -1) (undo-tree-id2527 . -1) (undo-tree-id2528 . -1) (undo-tree-id2529 . -1) (undo-tree-id2530 . -1) (undo-tree-id2531 . -1) (undo-tree-id2532 . -1) (undo-tree-id2533 . -1) (undo-tree-id2534 . -1) (undo-tree-id2535 . -1) (undo-tree-id2536 . -1) (undo-tree-id2537 . -1) (undo-tree-id2538 . -1) (undo-tree-id2539 . -1) (undo-tree-id2540 . -1) (undo-tree-id2541 . -1) (undo-tree-id2542 . -1) (undo-tree-id2543 . -1) (undo-tree-id2544 . -1) (undo-tree-id2545 . -1) (undo-tree-id2546 . -1) (undo-tree-id2547 . -1) (undo-tree-id2548 . -1) (#("r" 0 1 (fontified t)) . -2158) (undo-tree-id2549 . -1) (undo-tree-id2550 . -1) (undo-tree-id2551 . -1) (undo-tree-id2552 . -1) (undo-tree-id2553 . -1) (undo-tree-id2554 . -1) (undo-tree-id2555 . -1) (undo-tree-id2556 . -1) (undo-tree-id2557 . -1) (undo-tree-id2558 . -1) (undo-tree-id2559 . -1) (undo-tree-id2560 . -1) (undo-tree-id2561 . -1) (undo-tree-id2562 . -1) (undo-tree-id2563 . -1) (undo-tree-id2564 . -1) (undo-tree-id2565 . -1) (undo-tree-id2566 . -1) (undo-tree-id2567 . -1) (undo-tree-id2568 . -1) (undo-tree-id2569 . -1) (undo-tree-id2570 . -1) (undo-tree-id2571 . -1) (undo-tree-id2572 . -1) (undo-tree-id2573 . -1) (undo-tree-id2574 . -1) (undo-tree-id2575 . -1) (undo-tree-id2576 . -1) (undo-tree-id2577 . -1) (undo-tree-id2578 . -1) (undo-tree-id2579 . -1) (undo-tree-id2580 . -1) (undo-tree-id2581 . -1) (undo-tree-id2582 . -1) (undo-tree-id2583 . -1) (undo-tree-id2584 . -1) (undo-tree-id2585 . -1) (undo-tree-id2586 . -1) (undo-tree-id2587 . -1) (undo-tree-id2588 . -1) (undo-tree-id2589 . -1) (undo-tree-id2590 . -1) (undo-tree-id2591 . -1) (undo-tree-id2592 . -1) (undo-tree-id2593 . -1) (undo-tree-id2594 . -1) (undo-tree-id2595 . -1) (undo-tree-id2596 . -1) (undo-tree-id2597 . -1) (undo-tree-id2598 . -1) (undo-tree-id2599 . -1) (undo-tree-id2600 . -1) (undo-tree-id2601 . -1) (undo-tree-id2602 . -1) (undo-tree-id2603 . -1) (undo-tree-id2604 . -1) (undo-tree-id2605 . -1) (undo-tree-id2606 . -1) (undo-tree-id2607 . -1) (undo-tree-id2608 . -1) (undo-tree-id2609 . -1) (undo-tree-id2610 . -1) (undo-tree-id2611 . -1) (undo-tree-id2612 . -1) (undo-tree-id2613 . -1) (#("e" 0 1 (fontified t)) . -2159) (undo-tree-id2614 . -1) (undo-tree-id2615 . -1) (undo-tree-id2616 . -1) (undo-tree-id2617 . -1) (undo-tree-id2618 . -1) (undo-tree-id2619 . -1) (undo-tree-id2620 . -1) (undo-tree-id2621 . -1) (undo-tree-id2622 . -1) (undo-tree-id2623 . -1) (undo-tree-id2624 . -1) (undo-tree-id2625 . -1) (undo-tree-id2626 . -1) (undo-tree-id2627 . -1) (undo-tree-id2628 . -1) (undo-tree-id2629 . -1) (undo-tree-id2630 . -1) (undo-tree-id2631 . -1) (undo-tree-id2632 . -1) (undo-tree-id2633 . -1) (undo-tree-id2634 . -1) (undo-tree-id2635 . -1) (undo-tree-id2636 . -1) (undo-tree-id2637 . -1) (undo-tree-id2638 . -1) (undo-tree-id2639 . -1) (undo-tree-id2640 . -1) (undo-tree-id2641 . -1) (undo-tree-id2642 . -1) (undo-tree-id2643 . -1) (undo-tree-id2644 . -1) (undo-tree-id2645 . -1) (undo-tree-id2646 . -1) (undo-tree-id2647 . -1) (undo-tree-id2648 . -1) (undo-tree-id2649 . -1) (undo-tree-id2650 . -1) (undo-tree-id2651 . -1) (undo-tree-id2652 . -1) (undo-tree-id2653 . -1) (undo-tree-id2654 . -1) (undo-tree-id2655 . -1) (undo-tree-id2656 . -1) (undo-tree-id2657 . -1) (undo-tree-id2658 . -1) (undo-tree-id2659 . -1) (undo-tree-id2660 . -1) (undo-tree-id2661 . -1) (undo-tree-id2662 . -1) (undo-tree-id2663 . -1) (undo-tree-id2664 . -1) (undo-tree-id2665 . -1) (undo-tree-id2666 . -1) (undo-tree-id2667 . -1) (undo-tree-id2668 . -1) (undo-tree-id2669 . -1) (undo-tree-id2670 . -1) (undo-tree-id2671 . -1) (undo-tree-id2672 . -1) (undo-tree-id2673 . -1) (undo-tree-id2674 . -1) (undo-tree-id2675 . -1) (undo-tree-id2676 . -1) (#("n" 0 1 (fontified t)) . -2160) (undo-tree-id2677 . -1) (undo-tree-id2678 . -1) (undo-tree-id2679 . -1) (undo-tree-id2680 . -1) (undo-tree-id2681 . -1) (undo-tree-id2682 . -1) (undo-tree-id2683 . -1) (undo-tree-id2684 . -1) (undo-tree-id2685 . -1) (undo-tree-id2686 . -1) (undo-tree-id2687 . -1) (undo-tree-id2688 . -1) (undo-tree-id2689 . -1) (undo-tree-id2690 . -1) (undo-tree-id2691 . -1) (undo-tree-id2692 . -1) (undo-tree-id2693 . -1) (undo-tree-id2694 . -1) (undo-tree-id2695 . -1) (undo-tree-id2696 . -1) (undo-tree-id2697 . -1) (undo-tree-id2698 . -1) (undo-tree-id2699 . -1) (undo-tree-id2700 . -1) (undo-tree-id2701 . -1) (undo-tree-id2702 . -1) (undo-tree-id2703 . -1) (undo-tree-id2704 . -1) (undo-tree-id2705 . -1) (undo-tree-id2706 . -1) (undo-tree-id2707 . -1) (undo-tree-id2708 . -1) (undo-tree-id2709 . -1) (undo-tree-id2710 . -1) (undo-tree-id2711 . -1) (undo-tree-id2712 . -1) (undo-tree-id2713 . -1) (undo-tree-id2714 . -1) (undo-tree-id2715 . -1) (undo-tree-id2716 . -1) (undo-tree-id2717 . -1) (undo-tree-id2718 . -1) (undo-tree-id2719 . -1) (undo-tree-id2720 . -1) (undo-tree-id2721 . -1) (undo-tree-id2722 . -1) (undo-tree-id2723 . -1) (undo-tree-id2724 . -1) (undo-tree-id2725 . -1) (undo-tree-id2726 . -1) (undo-tree-id2727 . -1) (undo-tree-id2728 . -1) (undo-tree-id2729 . -1) (undo-tree-id2730 . -1) (undo-tree-id2731 . -1) (undo-tree-id2732 . -1) (undo-tree-id2733 . -1) (undo-tree-id2734 . -1) (undo-tree-id2735 . -1) (undo-tree-id2736 . -1) (undo-tree-id2737 . -1) (#("t" 0 1 (fontified t)) . -2161) (undo-tree-id2738 . -1) (undo-tree-id2739 . -1) (undo-tree-id2740 . -1) (undo-tree-id2741 . -1) (undo-tree-id2742 . -1) (undo-tree-id2743 . -1) (undo-tree-id2744 . -1) (undo-tree-id2745 . -1) (undo-tree-id2746 . -1) (undo-tree-id2747 . -1) (undo-tree-id2748 . -1) (undo-tree-id2749 . -1) (undo-tree-id2750 . -1) (undo-tree-id2751 . -1) (undo-tree-id2752 . -1) (undo-tree-id2753 . -1) (undo-tree-id2754 . -1) (undo-tree-id2755 . -1) (undo-tree-id2756 . -1) (undo-tree-id2757 . -1) (undo-tree-id2758 . -1) (undo-tree-id2759 . -1) (undo-tree-id2760 . -1) (undo-tree-id2761 . -1) (undo-tree-id2762 . -1) (undo-tree-id2763 . -1) (undo-tree-id2764 . -1) (undo-tree-id2765 . -1) (undo-tree-id2766 . -1) (undo-tree-id2767 . -1) (undo-tree-id2768 . -1) (undo-tree-id2769 . -1) (undo-tree-id2770 . -1) (undo-tree-id2771 . -1) (undo-tree-id2772 . -1) (undo-tree-id2773 . -1) (undo-tree-id2774 . -1) (undo-tree-id2775 . -1) (undo-tree-id2776 . -1) (undo-tree-id2777 . -1) (undo-tree-id2778 . -1) (undo-tree-id2779 . -1) (undo-tree-id2780 . -1) (undo-tree-id2781 . -1) (undo-tree-id2782 . -1) (undo-tree-id2783 . -1) (undo-tree-id2784 . -1) (undo-tree-id2785 . -1) (undo-tree-id2786 . -1) (undo-tree-id2787 . -1) (undo-tree-id2788 . -1) (undo-tree-id2789 . -1) (undo-tree-id2790 . -1) (undo-tree-id2791 . -1) (undo-tree-id2792 . -1) (undo-tree-id2793 . -1) (undo-tree-id2794 . -1) (undo-tree-id2795 . -1) (undo-tree-id2796 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -2162) (undo-tree-id2797 . -1) (undo-tree-id2798 . -1) (undo-tree-id2799 . -1) (undo-tree-id2800 . -1) (undo-tree-id2801 . -1) (undo-tree-id2802 . -1) (undo-tree-id2803 . -1) (undo-tree-id2804 . -1) (undo-tree-id2805 . -1) (undo-tree-id2806 . -1) (undo-tree-id2807 . -1) (undo-tree-id2808 . -1) (undo-tree-id2809 . -1) (undo-tree-id2810 . -1) (undo-tree-id2811 . -1) (undo-tree-id2812 . -1) (undo-tree-id2813 . -1) (undo-tree-id2814 . -1) (undo-tree-id2815 . -1) (undo-tree-id2816 . -1) (undo-tree-id2817 . -1) (undo-tree-id2818 . -1) (undo-tree-id2819 . -1) (undo-tree-id2820 . -1) (undo-tree-id2821 . -1) (undo-tree-id2822 . -1) (undo-tree-id2823 . -1) (undo-tree-id2824 . -1) (undo-tree-id2825 . -1) (undo-tree-id2826 . -1) (undo-tree-id2827 . -1) (undo-tree-id2828 . -1) (undo-tree-id2829 . -1) (undo-tree-id2830 . -1) (undo-tree-id2831 . -1) (undo-tree-id2832 . -1) (undo-tree-id2833 . -1) (undo-tree-id2834 . -1) (undo-tree-id2835 . -1) (undo-tree-id2836 . -1) (undo-tree-id2837 . -1) (undo-tree-id2838 . -1) (undo-tree-id2839 . -1) (undo-tree-id2840 . -1) (undo-tree-id2841 . -1) (undo-tree-id2842 . -1) (undo-tree-id2843 . -1) (undo-tree-id2844 . -1) (undo-tree-id2845 . -1) (undo-tree-id2846 . -1) (undo-tree-id2847 . -1) (undo-tree-id2848 . -1) (undo-tree-id2849 . -1) (undo-tree-id2850 . -1) (undo-tree-id2851 . -1) (undo-tree-id2852 . -1) (undo-tree-id2853 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -2163) (undo-tree-id2854 . -1) (undo-tree-id2855 . -1) (undo-tree-id2856 . -1) (undo-tree-id2857 . -1) (undo-tree-id2858 . -1) (undo-tree-id2859 . -1) (undo-tree-id2860 . -1) (undo-tree-id2861 . -1) (undo-tree-id2862 . -1) (undo-tree-id2863 . -1) (undo-tree-id2864 . -1) (undo-tree-id2865 . -1) (undo-tree-id2866 . -1) (undo-tree-id2867 . -1) (undo-tree-id2868 . -1) (undo-tree-id2869 . -1) (undo-tree-id2870 . -1) (undo-tree-id2871 . -1) (undo-tree-id2872 . -1) (undo-tree-id2873 . -1) (undo-tree-id2874 . -1) (undo-tree-id2875 . -1) (undo-tree-id2876 . -1) (undo-tree-id2877 . -1) (undo-tree-id2878 . -1) (undo-tree-id2879 . -1) (undo-tree-id2880 . -1) (undo-tree-id2881 . -1) (undo-tree-id2882 . -1) (undo-tree-id2883 . -1) (undo-tree-id2884 . -1) (undo-tree-id2885 . -1) (undo-tree-id2886 . -1) (undo-tree-id2887 . -1) (undo-tree-id2888 . -1) (undo-tree-id2889 . -1) (undo-tree-id2890 . -1) (undo-tree-id2891 . -1) (undo-tree-id2892 . -1) (undo-tree-id2893 . -1) (undo-tree-id2894 . -1) (undo-tree-id2895 . -1) (undo-tree-id2896 . -1) (undo-tree-id2897 . -1) (undo-tree-id2898 . -1) (undo-tree-id2899 . -1) (undo-tree-id2900 . -1) (undo-tree-id2901 . -1) (undo-tree-id2902 . -1) (undo-tree-id2903 . -1) (undo-tree-id2904 . -1) (undo-tree-id2905 . -1) (undo-tree-id2906 . -1) (undo-tree-id2907 . -1) (undo-tree-id2908 . -1) (#("." 0 1 (fontified t)) . -2164) (undo-tree-id2909 . -1) (undo-tree-id2910 . -1) (undo-tree-id2911 . -1) (undo-tree-id2912 . -1) (undo-tree-id2913 . -1) (undo-tree-id2914 . -1) (undo-tree-id2915 . -1) (undo-tree-id2916 . -1) (undo-tree-id2917 . -1) (undo-tree-id2918 . -1) (undo-tree-id2919 . -1) (undo-tree-id2920 . -1) (undo-tree-id2921 . -1) (#("j" 0 1 (fontified t)) . -2165) (undo-tree-id2922 . -1) (undo-tree-id2923 . -1) (undo-tree-id2924 . -1) (undo-tree-id2925 . -1) (undo-tree-id2926 . -1) (undo-tree-id2927 . -1) (undo-tree-id2928 . -1) (undo-tree-id2929 . -1) (undo-tree-id2930 . -1) (#("o" 0 1 (fontified t)) . -2166) (undo-tree-id2931 . -1) (undo-tree-id2932 . -1) (undo-tree-id2933 . -1) 2167) nil (26014 28697 181232 0) 0 nil])
([nil nil ((2156 . 2157)) nil (26014 28697 180712 0) 0 nil])
([nil nil ((apply yas--snippet-revive 2156 2164 #s(yas--snippet nil nil #s(yas--exit 2164 nil) 125 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2164 nil) 125 nil nil nil nil)) (2156 . 2164) (#("parent()$0" 0 10 (fontified nil)) . 2156) (2156 . 2166) (#("p" 0 1 (fontified nil)) . 2156) (2156 . 2157) (#("parent() (alias dirname)" 0 24 (fontified nil)) . -2156) (2156 . 2180) (#("p" 0 1 (fontified t)) . -2156) (undo-tree-id2408 . -1) (undo-tree-id2409 . -1) (undo-tree-id2410 . -1) (undo-tree-id2411 . -1) (undo-tree-id2412 . -1) 2157) nil (26014 28697 180710 0) 0 nil])
([nil nil ((2164 . 2166)) nil (26014 28697 180700 0) 0 nil])
([nil nil ((apply yas--snippet-revive 2165 2173 #s(yas--snippet nil nil #s(yas--exit 2173 nil) 126 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2173 nil) 126 nil nil nil nil)) (2165 . 2173) (#("unwrap()$0" 0 10 (fontified nil)) . 2165) (2165 . 2175) (#("u" 0 1 (fontified nil)) . 2165) (2165 . 2166) (#("unwrap()" 0 8 (fontified nil)) . -2165) (2165 . 2173) (#("u" 0 1 (fontified t)) . -2165) (undo-tree-id2404 . -1) (undo-tree-id2405 . -1) (undo-tree-id2406 . -1) (undo-tree-id2407 . -1) 2166) nil (26014 28697 180698 0) 0 nil])
([nil nil ((2173 . 2175)) nil (26014 28697 180691 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2179 2183 nil nil nil nil #s(yas--exit 2184 nil))) #s(yas--exit 2184 nil) 127 nil #s(yas--field 1 2179 2183 nil nil nil nil #s(yas--exit 2184 nil)) nil nil)) (2174 . 2184) (#("join(${1:path})$0" 0 17 (fontified nil)) . 2174) (2174 . 2191) (#("j" 0 1 (fontified nil)) . 2174) (2174 . 2175) (#("join(…)" 0 7 (fontified nil)) . -2174) (2174 . 2181) (#("j" 0 1 (fontified t)) . -2174) (undo-tree-id2398 . -1) (undo-tree-id2399 . -1) (undo-tree-id2400 . -1) (undo-tree-id2401 . -1) (undo-tree-id2402 . -1) (undo-tree-id2403 . -1) 2175) nil (26014 28697 180688 0) 0 nil])
([nil nil ((apply yas--snippet-revive 2174 2184 #s(yas--snippet nil (#s(yas--field 1 2179 2183 nil nil nil nil #s(yas--exit 2184 nil))) #s(yas--exit 2184 nil) 127 nil #s(yas--field 1 2179 2183 nil nil nil nil #s(yas--exit 2184 nil)) nil nil))) nil (26014 28697 180679 0) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -2179) (undo-tree-id2324 . -1) (undo-tree-id2325 . -1) (undo-tree-id2326 . -1) (undo-tree-id2327 . -1) (undo-tree-id2328 . -1) (undo-tree-id2329 . -1) (undo-tree-id2330 . -1) (undo-tree-id2331 . -1) (undo-tree-id2332 . -1) (undo-tree-id2333 . -1) (undo-tree-id2334 . -1) (undo-tree-id2335 . -1) (undo-tree-id2336 . -1) (undo-tree-id2337 . -1) (undo-tree-id2338 . -1) (undo-tree-id2339 . -1) (undo-tree-id2340 . -1) (undo-tree-id2341 . -1) (undo-tree-id2342 . -1) (undo-tree-id2343 . -1) (undo-tree-id2344 . -1) (undo-tree-id2345 . -1) (#("a" 0 1 (fontified t)) . -2180) (undo-tree-id2346 . -1) (undo-tree-id2347 . -1) (undo-tree-id2348 . -1) (undo-tree-id2349 . -1) (undo-tree-id2350 . -1) (undo-tree-id2351 . -1) (undo-tree-id2352 . -1) (undo-tree-id2353 . -1) (undo-tree-id2354 . -1) (undo-tree-id2355 . -1) (undo-tree-id2356 . -1) (undo-tree-id2357 . -1) (undo-tree-id2358 . -1) (undo-tree-id2359 . -1) (undo-tree-id2360 . -1) (undo-tree-id2361 . -1) (undo-tree-id2362 . -1) (undo-tree-id2363 . -1) (undo-tree-id2364 . -1) (#("t" 0 1 (fontified t)) . -2181) (undo-tree-id2365 . -1) (undo-tree-id2366 . -1) (undo-tree-id2367 . -1) (undo-tree-id2368 . -1) (undo-tree-id2369 . -1) (undo-tree-id2370 . -1) (undo-tree-id2371 . -1) (undo-tree-id2372 . -1) (undo-tree-id2373 . -1) (undo-tree-id2374 . -1) (undo-tree-id2375 . -1) (undo-tree-id2376 . -1) (undo-tree-id2377 . -1) (undo-tree-id2378 . -1) (undo-tree-id2379 . -1) (#("h" 0 1 (fontified t)) . -2182) (undo-tree-id2380 . -1) (undo-tree-id2381 . -1) (undo-tree-id2382 . -1) (undo-tree-id2383 . -1) (undo-tree-id2384 . -1) (undo-tree-id2385 . -1) (undo-tree-id2386 . -1) (undo-tree-id2387 . -1) (undo-tree-id2388 . -1) (undo-tree-id2389 . -1) (undo-tree-id2390 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -2183) (undo-tree-id2391 . -1) (undo-tree-id2392 . -1) (undo-tree-id2393 . -1) (undo-tree-id2394 . -1) (undo-tree-id2395 . -1) (undo-tree-id2396 . -1) (undo-tree-id2397 . -1) 2184) nil (26014 28697 180674 0) 0 nil])
([nil nil ((2198 . 2199)) nil (26014 28697 180602 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2180) (undo-tree-id2315 . -1) (undo-tree-id2316 . -1) (undo-tree-id2317 . -1) (undo-tree-id2318 . -1) (undo-tree-id2319 . -1) (undo-tree-id2320 . -1) (undo-tree-id2321 . -1) (undo-tree-id2322 . -1) (undo-tree-id2323 . -1) 2181) nil (26014 28697 180601 0) 0 nil])
([nil nil ((2180 . 2184)) nil (26014 28697 180591 0) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -2180) (undo-tree-id2271 . -1) (undo-tree-id2272 . -1) (undo-tree-id2273 . -1) (undo-tree-id2274 . -1) (undo-tree-id2275 . -1) (undo-tree-id2276 . -1) (undo-tree-id2277 . -1) (undo-tree-id2278 . -1) (undo-tree-id2279 . -1) (undo-tree-id2280 . -1) (undo-tree-id2281 . -1) (undo-tree-id2282 . -1) (undo-tree-id2283 . -1) (undo-tree-id2284 . -1) (undo-tree-id2285 . -1) (undo-tree-id2286 . -1) (undo-tree-id2287 . -1) (#("a" 0 1 (fontified t)) . -2181) (undo-tree-id2288 . -1) (undo-tree-id2289 . -1) (undo-tree-id2290 . -1) (undo-tree-id2291 . -1) (undo-tree-id2292 . -1) (undo-tree-id2293 . -1) (undo-tree-id2294 . -1) (undo-tree-id2295 . -1) (undo-tree-id2296 . -1) (undo-tree-id2297 . -1) (undo-tree-id2298 . -1) (undo-tree-id2299 . -1) (undo-tree-id2300 . -1) (#("t" 0 1 (fontified t)) . -2182) (undo-tree-id2301 . -1) (undo-tree-id2302 . -1) (undo-tree-id2303 . -1) (undo-tree-id2304 . -1) (undo-tree-id2305 . -1) (undo-tree-id2306 . -1) (undo-tree-id2307 . -1) (undo-tree-id2308 . -1) (undo-tree-id2309 . -1) (#("h" 0 1 (fontified t)) . -2183) (undo-tree-id2310 . -1) (undo-tree-id2311 . -1) (undo-tree-id2312 . -1) (undo-tree-id2313 . -1) (undo-tree-id2314 . -1) 2184) nil (26014 28697 180588 0) 0 nil])
([nil nil ((2179 . 2189)) nil (26014 28697 180544 0) 0 nil])
([nil nil ((2185 . 2189) (#("from" 0 4 (fontified nil)) . 2185) (2185 . 2189) (#("from (as From)" 0 14 (fontified nil)) . -2185) (2185 . 2199) (#("from" 0 4 (fontified t)) . -2185) (undo-tree-id2258 . -4) (undo-tree-id2259 . -1) (undo-tree-id2260 . -1) (undo-tree-id2261 . -1) (undo-tree-id2262 . -2) (undo-tree-id2263 . -2) (undo-tree-id2264 . -2) (undo-tree-id2265 . -3) (undo-tree-id2266 . -3) (undo-tree-id2267 . -4) (undo-tree-id2268 . -4) (undo-tree-id2269 . -4) (undo-tree-id2270 . -4) 2189) nil (26014 28697 180542 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2189) (undo-tree-id2211 . -1) (undo-tree-id2212 . -1) (undo-tree-id2213 . -1) (undo-tree-id2214 . -1) (undo-tree-id2215 . -1) (undo-tree-id2216 . -1) (undo-tree-id2217 . -1) (undo-tree-id2218 . -1) (undo-tree-id2219 . -1) (undo-tree-id2220 . -1) (undo-tree-id2221 . -1) (undo-tree-id2222 . -1) (undo-tree-id2223 . -1) (undo-tree-id2224 . -1) (undo-tree-id2225 . -1) (undo-tree-id2226 . -1) (undo-tree-id2227 . -1) (undo-tree-id2228 . -1) (undo-tree-id2229 . -1) (undo-tree-id2230 . -1) (undo-tree-id2231 . -1) (undo-tree-id2232 . -1) (undo-tree-id2233 . -1) (undo-tree-id2234 . -1) (undo-tree-id2235 . -1) (undo-tree-id2236 . -1) (undo-tree-id2237 . -1) (undo-tree-id2238 . -1) (undo-tree-id2239 . -1) (undo-tree-id2240 . -1) (undo-tree-id2241 . -1) (undo-tree-id2242 . -1) (undo-tree-id2243 . -1) (undo-tree-id2244 . -1) (undo-tree-id2245 . -1) (undo-tree-id2246 . -1) (undo-tree-id2247 . -1) (undo-tree-id2248 . -1) (undo-tree-id2249 . -1) (undo-tree-id2250 . -1) (undo-tree-id2251 . -1) (undo-tree-id2252 . -1) (undo-tree-id2253 . -1) (undo-tree-id2254 . -1) (undo-tree-id2255 . -1) (undo-tree-id2256 . -1) (undo-tree-id2257 . -1) 2190) nil (26014 28697 180523 0) 0 nil])
([nil nil ((2189 . 2190)) nil (26014 28697 180476 0) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -2189) (undo-tree-id2204 . -1) (undo-tree-id2205 . -1) (undo-tree-id2206 . -1) (undo-tree-id2207 . -1) (undo-tree-id2208 . -1) (undo-tree-id2209 . -1) (undo-tree-id2210 . -1) 2190) nil (26014 28697 180473 0) 0 nil])
([nil nil ((2189 . 2190)) nil (26014 28697 180457 0) 0 nil])
([nil nil ((2207 . 2208)) nil (26014 28697 180451 0) 0 nil])
([nil nil ((2190 . 2191) (t 26014 28697 201247 416000)) nil (26014 28703 242034 0) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -2185) (undo-tree-id2990 . -1) (undo-tree-id2991 . -1) (undo-tree-id2992 . -1) (undo-tree-id2993 . -1) (undo-tree-id2994 . -1) (undo-tree-id2995 . -1) (undo-tree-id2996 . -1) (undo-tree-id2997 . -1) (undo-tree-id2998 . -1) (undo-tree-id2999 . -1) (undo-tree-id3000 . -1) (undo-tree-id3001 . -1) (undo-tree-id3002 . -1) (undo-tree-id3003 . -1) (undo-tree-id3004 . -1) (undo-tree-id3005 . -1) (undo-tree-id3006 . -1) (undo-tree-id3007 . -1) (undo-tree-id3008 . -1) (undo-tree-id3009 . -1) (undo-tree-id3010 . -1) (undo-tree-id3011 . -1) (undo-tree-id3012 . -1) (undo-tree-id3013 . -1) (undo-tree-id3014 . -1) (undo-tree-id3015 . -1) (undo-tree-id3016 . -1) (undo-tree-id3017 . -1) (undo-tree-id3018 . -1) (undo-tree-id3019 . -1) (undo-tree-id3020 . -1) (undo-tree-id3021 . -1) (undo-tree-id3022 . -1) (undo-tree-id3023 . -1) (undo-tree-id3024 . -1) (undo-tree-id3025 . -1) (undo-tree-id3026 . -1) (#("r" 0 1 (fontified t)) . -2186) (undo-tree-id3027 . -1) (undo-tree-id3028 . -1) (undo-tree-id3029 . -1) (undo-tree-id3030 . -1) (undo-tree-id3031 . -1) (undo-tree-id3032 . -1) (undo-tree-id3033 . -1) (undo-tree-id3034 . -1) (undo-tree-id3035 . -1) (undo-tree-id3036 . -1) (undo-tree-id3037 . -1) (undo-tree-id3038 . -1) (undo-tree-id3039 . -1) (undo-tree-id3040 . -1) (undo-tree-id3041 . -1) (undo-tree-id3042 . -1) (undo-tree-id3043 . -1) (undo-tree-id3044 . -1) (undo-tree-id3045 . -1) (undo-tree-id3046 . -1) (undo-tree-id3047 . -1) (undo-tree-id3048 . -1) (undo-tree-id3049 . -1) (undo-tree-id3050 . -1) (undo-tree-id3051 . -1) (undo-tree-id3052 . -1) (undo-tree-id3053 . -1) (undo-tree-id3054 . -1) (undo-tree-id3055 . -1) (undo-tree-id3056 . -1) (undo-tree-id3057 . -1) (undo-tree-id3058 . -1) (undo-tree-id3059 . -1) (undo-tree-id3060 . -1) (#("o" 0 1 (fontified t)) . -2187) (undo-tree-id3061 . -1) (undo-tree-id3062 . -1) (undo-tree-id3063 . -1) (undo-tree-id3064 . -1) (undo-tree-id3065 . -1) (undo-tree-id3066 . -1) (undo-tree-id3067 . -1) (undo-tree-id3068 . -1) (undo-tree-id3069 . -1) (undo-tree-id3070 . -1) (undo-tree-id3071 . -1) (undo-tree-id3072 . -1) (undo-tree-id3073 . -1) (undo-tree-id3074 . -1) (undo-tree-id3075 . -1) (undo-tree-id3076 . -1) (undo-tree-id3077 . -1) (undo-tree-id3078 . -1) (undo-tree-id3079 . -1) (undo-tree-id3080 . -1) (undo-tree-id3081 . -1) (undo-tree-id3082 . -1) (undo-tree-id3083 . -1) (undo-tree-id3084 . -1) (undo-tree-id3085 . -1) (undo-tree-id3086 . -1) (undo-tree-id3087 . -1) (undo-tree-id3088 . -1) (undo-tree-id3089 . -1) (undo-tree-id3090 . -1) (undo-tree-id3091 . -1) (undo-tree-id3092 . -1) (#("m" 0 1 (fontified t)) . -2188) (undo-tree-id3093 . -1) (undo-tree-id3094 . -1) (undo-tree-id3095 . -1) (undo-tree-id3096 . -1) (undo-tree-id3097 . -1) (undo-tree-id3098 . -1) (undo-tree-id3099 . -1) (undo-tree-id3100 . -1) (undo-tree-id3101 . -1) (undo-tree-id3102 . -1) (undo-tree-id3103 . -1) (undo-tree-id3104 . -1) (undo-tree-id3105 . -1) (undo-tree-id3106 . -1) (undo-tree-id3107 . -1) (undo-tree-id3108 . -1) (undo-tree-id3109 . -1) (undo-tree-id3110 . -1) (undo-tree-id3111 . -1) (undo-tree-id3112 . -1) (undo-tree-id3113 . -1) (undo-tree-id3114 . -1) (undo-tree-id3115 . -1) (undo-tree-id3116 . -1) (undo-tree-id3117 . -1) (undo-tree-id3118 . -1) (undo-tree-id3119 . -1) (undo-tree-id3120 . -1) (undo-tree-id3121 . -1) (undo-tree-id3122 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-6-face) fontified t)) . -2189) (undo-tree-id3123 . -1) (undo-tree-id3124 . -1) (undo-tree-id3125 . -1) (undo-tree-id3126 . -1) (undo-tree-id3127 . -1) (undo-tree-id3128 . -1) (undo-tree-id3129 . -1) (undo-tree-id3130 . -1) (undo-tree-id3131 . -1) (undo-tree-id3132 . -1) (undo-tree-id3133 . -1) (undo-tree-id3134 . -1) (undo-tree-id3135 . -1) (undo-tree-id3136 . -1) (undo-tree-id3137 . -1) (undo-tree-id3138 . -1) (undo-tree-id3139 . -1) (undo-tree-id3140 . -1) (undo-tree-id3141 . -1) (undo-tree-id3142 . -1) (undo-tree-id3143 . -1) (undo-tree-id3144 . -1) (undo-tree-id3145 . -1) (undo-tree-id3146 . -1) (undo-tree-id3147 . -1) (undo-tree-id3148 . -1) (undo-tree-id3149 . -1) (undo-tree-id3150 . -1) (#("&" 0 1 (face rust-ampersand-face fontified t)) . -2190) (undo-tree-id3151 . -1) (undo-tree-id3152 . -1) (undo-tree-id3153 . -1) (undo-tree-id3154 . -1) (undo-tree-id3155 . -1) (undo-tree-id3156 . -1) (undo-tree-id3157 . -1) (undo-tree-id3158 . -1) (undo-tree-id3159 . -1) (undo-tree-id3160 . -1) (undo-tree-id3161 . -1) (undo-tree-id3162 . -1) (undo-tree-id3163 . -1) (undo-tree-id3164 . -1) 2191 (t 26014 28703 262055 446000)) nil (26014 28714 374938 0) 0 nil])
([nil nil ((2185 . 2186)) nil (26014 28714 374760 0) 0 nil])
([nil nil ((2186 . 2188)) nil (26014 28714 374759 0) 0 nil])
([nil nil ((2188 . 2189)) nil (26014 28714 374754 0) 0 nil])
([nil nil ((2179 . 2180) (t 26014 28714 395305 922000)) nil (26014 28723 25547 0) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . -2179) (undo-tree-id3165 . -1) (undo-tree-id3166 . -1) (undo-tree-id3167 . -1) (undo-tree-id3168 . -1) (undo-tree-id3169 . -1) (undo-tree-id3170 . -1) (undo-tree-id3171 . -1) (undo-tree-id3172 . -1) (undo-tree-id3173 . -1) (undo-tree-id3174 . -1) (undo-tree-id3175 . -1) (undo-tree-id3176 . -1) (undo-tree-id3177 . -1) (undo-tree-id3178 . -1) 2180 (t 26014 28723 45937 891000)) nil (26014 28731 465251 0) 0 nil])
([nil nil ((2189 . 2190)) nil (26014 28731 465222 0) 0 nil])
([nil nil ((2207 . 2209) (t 26014 28731 486251 459000)) nil (26014 28771 871553 0) 0 nil])
([nil nil ((apply yas--snippet-revive 2208 2216 #s(yas--snippet nil nil #s(yas--exit 2216 nil) 128 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2216 nil) 128 nil nil nil nil)) (2208 . 2216) (#("unwrap()$0" 0 10 (fontified nil)) . 2208) (2208 . 2218) (#("u" 0 1 (fontified nil)) . 2208) (2208 . 2209) (#("unwrap()" 0 8 (fontified nil)) . -2208) (2208 . 2216) (#("u" 0 1 (fontified t)) . -2208) (undo-tree-id3179 . -1) (undo-tree-id3180 . -1) (undo-tree-id3181 . -1) (undo-tree-id3182 . -1) (undo-tree-id3183 . -1) (undo-tree-id3184 . -1) 2209) nil (26014 28771 871548 0) 0 nil])
([nil nil ((2229 . 2230) (t 26014 28771 891853 404000)) nil (26014 28822 622451 0) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -2229) (undo-tree-id3195 . -1) (undo-tree-id3196 . -1) (undo-tree-id3197 . -1) (undo-tree-id3198 . -1) (undo-tree-id3199 . -1) 2230) nil (26014 28822 622450 0) 0 nil])
([nil nil ((2216 . 2217)) nil (26014 28822 965365 0) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2216) (undo-tree-id3208 . -1) (undo-tree-id3209 . -1) (undo-tree-id3210 . -1) (undo-tree-id3211 . -1) (undo-tree-id3212 . -1) (undo-tree-id3213 . -1) (undo-tree-id3214 . -1) (undo-tree-id3215 . -1) (undo-tree-id3216 . -1) (undo-tree-id3217 . -1) (undo-tree-id3218 . -1) (undo-tree-id3219 . -1) (undo-tree-id3220 . -1) (undo-tree-id3221 . -1) (undo-tree-id3222 . -1) (undo-tree-id3223 . -1) (undo-tree-id3224 . -1) (undo-tree-id3225 . -1) 2217) nil (26014 28829 830108 0) 0 nil] [nil nil ((nil rear-nonsticky nil 2225 . 2226) (nil fontified nil 2217 . 2226) (2217 . 2226)) ((#(".exists()" 0 7 (fontified nil) 7 8 (face (rainbow-delimiters-depth-7-face) fontified nil) 8 9 (face (rainbow-delimiters-depth-7-face) rear-nonsticky nil fontified nil)) . 2217) (undo-tree-id3200 . -9) (nil rear-nonsticky t 2225 . 2226)) (26014 28822 622725 0) 0 nil])
([nil nil ((2218 . 2221)) nil (26014 28829 830089 0) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2216) (undo-tree-id3185 . -1) (undo-tree-id3186 . -1) (undo-tree-id3187 . -1) (undo-tree-id3188 . -1) (undo-tree-id3189 . -1) (undo-tree-id3190 . -1) (undo-tree-id3191 . -1) (undo-tree-id3192 . -1) (undo-tree-id3193 . -1) (undo-tree-id3194 . -1) 2217) ((2216 . 2217)) (26014 28822 622438 0) 0 nil])
([nil nil ((apply yas--snippet-revive 2219 2227 #s(yas--snippet nil nil #s(yas--exit 2227 nil) 129 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2227 nil) 129 nil nil nil nil)) (2219 . 2227) (#("exists()$0" 0 10 (fontified nil)) . 2219) (2219 . 2229) (#("ex" 0 2 (fontified nil)) . 2219) (2219 . 2221) (#("exists()" 0 8 (fontified nil)) . -2219) (2219 . 2227) (#("ex" 0 2 (fontified t)) . -2219) (undo-tree-id3201 . -2) (undo-tree-id3202 . -1) (undo-tree-id3203 . -1) (undo-tree-id3204 . -2) (undo-tree-id3205 . -2) (undo-tree-id3206 . -2) (undo-tree-id3207 . -2) 2221) nil (26014 28829 830085 0) 0 nil])
nil
([nil nil ((#("        println!(\"{:?}\", path.parent().unwrap().join(Path::new(&m.diffuse_texture.unwrap())).exists());" 0 8 (fontified t) 8 16 (face rust-builtin-formatting-macro fontified t) 16 17 (face (rainbow-delimiters-depth-4-face) fontified t) 17 18 (face font-lock-string-face fontified t) 18 22 (face rust-string-interpolation fontified t) 22 23 (face font-lock-string-face fontified t) 23 25 (fontified t) 25 30 (fontified t) 30 36 (fontified t) 36 37 (face (rainbow-delimiters-depth-5-face) fontified t) 37 38 (face (rainbow-delimiters-depth-5-face) fontified t) 38 39 (fontified t) 39 45 (fontified t) 45 46 (face (rainbow-delimiters-depth-5-face) fontified t) 46 47 (face (rainbow-delimiters-depth-5-face) fontified t) 47 48 (fontified t) 48 52 (fontified t) 52 53 (face (rainbow-delimiters-depth-5-face) fontified t) 53 57 (face font-lock-type-face fontified t) 57 62 (fontified t) 62 63 (face (rainbow-delimiters-depth-6-face) fontified t) 63 64 (face rust-ampersand-face fontified t) 64 66 (fontified t) 66 82 (fontified t) 82 88 (fontified t) 88 89 (face (rainbow-delimiters-depth-7-face) fontified t) 89 90 (face (rainbow-delimiters-depth-7-face) fontified t) 90 91 (face (rainbow-delimiters-depth-6-face) fontified t) 91 92 (face (rainbow-delimiters-depth-5-face) fontified t) 92 93 (fontified t) 93 99 (fontified t) 99 100 (face (rainbow-delimiters-depth-5-face) fontified t) 100 101 (face (rainbow-delimiters-depth-5-face) fontified t) 101 102 (face (rainbow-delimiters-depth-4-face) fontified t) 102 103 (fontified t)) . 2126) (undo-tree-id3307 . -90) (t 26014 28829 850773 132000)) nil (26014 28983 581274 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t rear-nonsticky t)) . 2126)) nil (26014 28983 581272 0) 0 nil])
([nil nil ((#("        
" 0 8 (fontified t) 8 9 (fontified t)) . 2126)) nil (26014 28983 581271 0) 0 nil])
([nil nil ((2126 . 2134)) nil (26014 28983 581270 0) 0 nil])
([nil nil ((2134 . 2146)) nil (26014 28983 581269 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2145) (undo-tree-id3306 . -1) 2146) nil (26014 28983 581268 0) 0 nil])
([nil nil ((2145 . 2156)) nil (26014 28983 581265 0) 0 nil])
([nil nil ((2156 . 2160)) nil (26014 28983 581264 0) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -2156) (undo-tree-id3302 . -1) (#("o" 0 1 (fontified t)) . -2157) (undo-tree-id3303 . -1) (#("a" 0 1 (fontified t)) . -2158) (undo-tree-id3304 . -1) (#("d" 0 1 (fontified t)) . -2159) (undo-tree-id3305 . -1) 2160) nil (26014 28983 581262 0) 0 nil])
([nil nil ((2156 . 2159)) nil (26014 28983 581257 0) 0 nil])
([nil nil ((2156 . 2163) (#("tex" 0 3 (fontified nil)) . 2156) (2156 . 2159) (#("texture" 0 7 (fontified nil)) . -2156) (2156 . 2163) (#("tex" 0 3 (fontified t)) . -2156) (undo-tree-id3301 . -3) 2159) nil (26014 28983 581255 0) 0 nil])
([nil nil ((2163 . 2165)) nil (26014 28983 581252 0) 0 nil])
([nil nil ((2165 . 2172) (#("Texture" 0 7 (fontified nil)) . -2165) (2165 . 2172)) nil (26014 28983 581250 0) 0 nil])
([nil nil ((2172 . 2175)) nil (26014 28983 581249 0) 0 nil])
([nil nil ((#("k" 0 1 (fontified t)) . -2174) (undo-tree-id3300 . -1) 2175) nil (26014 28983 581248 0) 0 nil])
([nil nil ((2174 . 2178)) nil (26014 28983 581246 0) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -2172) (undo-tree-id3294 . -1) (#(":" 0 1 (fontified t)) . -2173) (undo-tree-id3295 . -1) (#("l" 0 1 (fontified t)) . -2174) (undo-tree-id3296 . -1) (#("o" 0 1 (fontified t)) . -2175) (undo-tree-id3297 . -1) (#("a" 0 1 (fontified t)) . -2176) (undo-tree-id3298 . -1) (#("d" 0 1 (fontified t)) . -2177) (undo-tree-id3299 . -1) 2178) nil (26014 28983 581243 0) 0 nil])
([nil nil ((2172 . 2173)) nil (26014 28983 581234 0) 0 nil])
([nil nil ((2173 . 2175)) nil (26014 28983 581233 0) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -2174) (undo-tree-id3293 . -1) 2175) nil (26014 28983 581232 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2184 2184 nil nil nil t #s(yas--field 2 2186 2192 nil nil nil nil #s(yas--field 3 2194 2199 nil nil nil nil #s(yas--field 4 2201 2206 nil nil nil nil #s(yas--exit 2207 nil))))) #s(yas--field 2 2186 2192 nil nil nil nil #s(yas--field 3 2194 2199 nil nil nil nil #s(yas--field 4 2201 2206 nil nil nil nil #s(yas--exit 2207 nil)))) #s(yas--field 3 2194 2199 nil nil nil nil #s(yas--field 4 2201 2206 nil nil nil nil #s(yas--exit 2207 nil))) #s(yas--field 4 2201 2206 nil nil nil nil #s(yas--exit 2207 nil))) #s(yas--exit 2207 nil) 130 nil #s(yas--field 1 2184 2184 nil nil nil t #s(yas--field 2 2186 2192 nil nil nil nil #s(yas--field 3 2194 2199 nil nil nil nil #s(yas--field 4 2201 2206 nil nil nil nil #s(yas--exit 2207 nil))))) nil nil)) (2174 . 2211) (#("from_path(${1:path}, ${2:device}, ${3:queue}, ${4:label})$0" 0 59 (fontified nil)) . 2174) (2174 . 2233) (#("from_path(…)" 0 12 (fontified nil)) . -2174) (2174 . 2186)) nil (26014 28983 581229 0) 0 nil])
([nil nil ((#("path" 0 4 (fontified t)) . 2184)) nil (26014 28983 581226 0) 0 nil])
([nil nil ((apply yas--snippet-revive 2174 2207 #s(yas--snippet nil (#s(yas--field 1 2184 2184 nil nil nil t #s(yas--field 2 2186 2192 nil nil nil nil #s(yas--field 3 2194 2199 nil nil nil nil #s(yas--field 4 2201 2206 nil nil nil nil #s(yas--exit 2207 nil))))) #s(yas--field 2 2186 2192 nil nil nil nil #s(yas--field 3 2194 2199 nil nil nil nil #s(yas--field 4 2201 2206 nil nil nil nil #s(yas--exit 2207 nil)))) #s(yas--field 3 2194 2199 nil nil nil nil #s(yas--field 4 2201 2206 nil nil nil nil #s(yas--exit 2207 nil))) #s(yas--field 4 2201 2206 nil nil nil nil #s(yas--exit 2207 nil))) #s(yas--exit 2207 nil) 130 nil #s(yas--field 1 2184 2184 nil nil nil t #s(yas--field 2 2186 2192 nil nil nil nil #s(yas--field 3 2194 2199 nil nil nil nil #s(yas--field 4 2201 2206 nil nil nil nil #s(yas--exit 2207 nil))))) nil nil))) nil (26014 28983 581225 0) 0 nil])
([nil nil ((2125 . 2134)) nil (26014 28983 581225 0) 0 nil])
([nil nil ((2134 . 2150)) nil (26014 28983 581224 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2148) (undo-tree-id3291 . -1) (#("=" 0 1 (fontified t)) . -2149) (undo-tree-id3292 . -1) 2150) nil (26014 28983 581222 0) 0 nil])
([nil nil ((2148 . 2151)) nil (26014 28983 581219 0) 0 nil])
([nil nil ((2150 . 2154) (#("p" 0 1 (fontified nil)) . 2150) (2150 . 2151) (#("path" 0 4 (fontified nil)) . -2150) (2150 . 2154) (#("p" 0 1 (fontified t)) . -2150) (undo-tree-id3290 . -1) 2151) nil (26014 28983 581217 0) 0 nil])
([nil nil ((2154 . 2155)) nil (26014 28983 581213 0) 0 nil])
([nil nil ((2155 . 2156)) nil (26014 28983 581212 0) 0 nil])
([nil nil ((apply yas--snippet-revive 2155 2163 #s(yas--snippet nil nil #s(yas--exit 2163 nil) 131 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2163 nil) 131 nil nil nil nil)) (2155 . 2163) (#("parent()$0" 0 10 (fontified nil)) . 2155) (2155 . 2165) (#("p" 0 1 (fontified nil)) . 2155) (2155 . 2156) (#("parent() (alias dirname)" 0 24 (fontified nil)) . -2155) (2155 . 2179) (#("p" 0 1 (fontified t)) . -2155) (undo-tree-id3289 . -1) 2156) nil (26014 28983 581210 0) 0 nil])
([nil nil ((2163 . 2165)) nil (26014 28983 581206 0) 0 nil])
([nil nil ((apply yas--snippet-revive 2164 2172 #s(yas--snippet nil nil #s(yas--exit 2172 nil) 132 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2172 nil) 132 nil nil nil nil)) (2164 . 2172) (#("unwrap()$0" 0 10 (fontified nil)) . 2164) (2164 . 2174) (#("u" 0 1 (fontified nil)) . 2164) (2164 . 2165) (#("unwrap()" 0 8 (fontified nil)) . -2164) (2164 . 2172) (#("u" 0 1 (fontified t)) . -2164) (undo-tree-id3288 . -1) 2165) nil (26014 28983 581204 0) 0 nil])
([nil nil ((2172 . 2174)) nil (26014 28983 581199 0) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -2173) (undo-tree-id3287 . -1) 2174) nil (26014 28983 581198 0) 0 nil])
([nil nil ((2173 . 2174)) nil (26014 28983 581196 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2178 2205 nil nil nil t #s(yas--exit 2206 nil))) #s(yas--exit 2206 nil) 133 nil #s(yas--field 1 2178 2205 nil nil nil t #s(yas--exit 2206 nil)) nil nil)) (2173 . 2183) (#("join(${1:path})$0" 0 17 (fontified nil)) . 2173) (2173 . 2190) (#("j" 0 1 (fontified nil)) . 2173) (2173 . 2174) (#("join(…)" 0 7 (fontified nil)) . -2173) (2173 . 2180) (#("j" 0 1 (fontified t)) . -2173) (undo-tree-id3286 . -1) 2174) nil (26014 28983 581194 0) 0 nil])
([nil nil ((#("path" 0 4 (fontified nil)) . 2179) (undo-tree-id3285 . -4) (2178 . 2179)) nil (26014 28983 581190 0) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -2178) (undo-tree-id3282 . -1) (undo-tree-id3283 . -1) (undo-tree-id3284 . -1) 2179) nil (26014 28983 581187 0) 0 nil])
([nil nil ((2178 . 2181)) nil (26014 28983 581183 0) 0 nil])
([nil nil ((2181 . 2196) (#("diffuse_texture" 0 15 (fontified nil)) . -2181) (undo-tree-id3281 . -15) (2181 . 2196)) nil (26014 28983 581182 0) 0 nil])
([nil nil ((2196 . 2198)) nil (26014 28983 581179 0) 0 nil])
([nil nil ((apply yas--snippet-revive 2197 2207 #s(yas--snippet nil nil #s(yas--exit 2207 nil) 134 nil nil #s(yas--field 1 2178 2205 nil nil nil t #s(yas--exit 2206 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2207 nil) 134 nil nil #s(yas--field 1 2178 2205 nil nil nil t #s(yas--exit 2206 nil)) nil)) (2197 . 2207) (#("try_into()$0" 0 12 (fontified nil)) . 2197) (undo-tree-id3275 . -12) (2197 . 2209) (#("y" 0 1 (fontified nil)) . 2197) (undo-tree-id3276 . -1) (2197 . 2198) (#("try_into() (as TryInto)" 0 23 (fontified nil)) . -2197) (undo-tree-id3277 . -23) (2197 . 2220) (#("y" 0 1 (fontified t)) . -2197) (undo-tree-id3278 . -1) (undo-tree-id3279 . -1) (undo-tree-id3280 . -1) 2198) nil (26014 28983 581177 0) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2196) (undo-tree-id3240 . -1) (undo-tree-id3241 . -1) (undo-tree-id3242 . -1) (undo-tree-id3243 . -1) (undo-tree-id3244 . -1) (#("t" 0 1 (fontified t)) . -2197) (undo-tree-id3245 . -1) (undo-tree-id3246 . -1) (undo-tree-id3247 . -1) (#("r" 0 1 (fontified t)) . -2198) (undo-tree-id3248 . -1) (undo-tree-id3249 . -1) (undo-tree-id3250 . -1) (#("y" 0 1 (face font-lock-keyword-face fontified t)) . -2199) (undo-tree-id3251 . -1) (undo-tree-id3252 . -1) (undo-tree-id3253 . -1) (#("_" 0 1 (fontified t)) . -2200) (undo-tree-id3254 . -1) (undo-tree-id3255 . -1) (undo-tree-id3256 . -1) (#("i" 0 1 (fontified t)) . -2201) (undo-tree-id3257 . -1) (undo-tree-id3258 . -1) (undo-tree-id3259 . -1) (#("n" 0 1 (fontified t)) . -2202) (undo-tree-id3260 . -1) (undo-tree-id3261 . -1) (undo-tree-id3262 . -1) (#("t" 0 1 (fontified t)) . -2203) (undo-tree-id3263 . -1) (undo-tree-id3264 . -1) (undo-tree-id3265 . -1) (#("o" 0 1 (fontified t)) . -2204) (undo-tree-id3266 . -1) (undo-tree-id3267 . -1) (undo-tree-id3268 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -2205) (undo-tree-id3269 . -1) (undo-tree-id3270 . -1) (undo-tree-id3271 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -2206) (undo-tree-id3272 . -1) (undo-tree-id3273 . -1) (undo-tree-id3274 . -1) 2207) nil (26014 28983 581165 0) 0 nil])
([nil nil ((2196 . 2199)) nil (26014 28983 581126 0) 0 nil])
([nil nil ((apply yas--snippet-revive 2197 2205 #s(yas--snippet nil nil #s(yas--exit 2205 nil) 135 nil nil #s(yas--field 1 2178 2205 nil nil nil t #s(yas--exit 2206 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2205 nil) 135 nil nil #s(yas--field 1 2178 2205 nil nil nil t #s(yas--exit 2206 nil)) nil)) (2197 . 2205) (#("unwrap()$0" 0 10 (fontified nil)) . 2197) (undo-tree-id3226 . -10) (2197 . 2207) (#("un" 0 2 (fontified nil)) . 2197) (undo-tree-id3227 . -2) (2197 . 2199) (#("unwrap()" 0 8 (fontified nil)) . -2197) (undo-tree-id3228 . -8) (2197 . 2205) (#("un" 0 2 (fontified t)) . -2197) (undo-tree-id3229 . -2) (undo-tree-id3230 . -2) (undo-tree-id3231 . -2) (undo-tree-id3232 . -1) (undo-tree-id3233 . -1) (undo-tree-id3234 . -1) (undo-tree-id3235 . -2) (undo-tree-id3236 . -2) (undo-tree-id3237 . -2) (undo-tree-id3238 . -2) (undo-tree-id3239 . -2) 2199) nil (26014 28983 581123 0) 0 nil])
([nil nil ((apply yas--snippet-revive 2173 2206 #s(yas--snippet nil (#s(yas--field 1 2178 2205 nil nil nil t #s(yas--exit 2206 nil))) #s(yas--exit 2206 nil) 133 nil #s(yas--field 1 2178 2205 nil nil nil t #s(yas--exit 2206 nil)) nil nil))) nil (26014 28983 581100 0) 0 nil])
([nil nil ((2206 . 2207)) nil (26014 28983 581096 0) 0 nil])
([nil nil ((2266 . 2268) (t 26014 28983 602958 439000)) nil (26014 29037 348398 0) 0 nil])
([nil nil ((2266 . 2267) (2266 . 2275) (#("fu" 0 2 (fontified nil)) . 2266) (2266 . 2268) (#("&full_path" 0 10 (fontified nil)) . -2266) (2266 . 2276) (#("fu" 0 2 (fontified t)) . -2266) (undo-tree-id3350 . -2) (undo-tree-id3351 . -1) (undo-tree-id3352 . -2) (undo-tree-id3353 . -2) (undo-tree-id3354 . -2) (undo-tree-id3355 . -2) (undo-tree-id3356 . -2) (undo-tree-id3357 . -2) (undo-tree-id3358 . -2) 2268) nil (26014 29037 348396 0) 0 nil])
([nil nil ((2278 . 2279)) nil (26014 29037 348383 0) 0 nil])
([nil nil ((1752 . 1757)) nil (26014 29037 348382 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1843 . 1844) (nil fontified nil 1757 . 1844) (1757 . 1844)) nil (26014 29037 348381 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1757) 1720) nil (26014 29037 348379 0) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . -2366) (undo-tree-id3344 . -1) (undo-tree-id3345 . -1) (undo-tree-id3346 . -1) (undo-tree-id3347 . -1) (undo-tree-id3348 . -1) (undo-tree-id3349 . -1) 2367) nil (26014 29037 348378 0) 0 nil])
([nil nil ((#("label" 0 5 (fontified t)) . -2381) (undo-tree-id3334 . -5) (undo-tree-id3335 . -5) (undo-tree-id3336 . -5) (undo-tree-id3337 . -5) (undo-tree-id3338 . -5) (undo-tree-id3339 . -5) (undo-tree-id3340 . -5) (undo-tree-id3341 . -5) (undo-tree-id3342 . -5) (undo-tree-id3343 . -5) 2386) nil (26014 29037 348370 0) 0 nil])
([nil nil ((2381 . 2382)) nil (26014 29037 348359 0) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -2381) (undo-tree-id3322 . -1) (undo-tree-id3323 . -1) (undo-tree-id3324 . -1) (undo-tree-id3325 . -1) (undo-tree-id3326 . -1) (undo-tree-id3327 . -1) (undo-tree-id3328 . -1) (undo-tree-id3329 . -1) (undo-tree-id3330 . -1) (undo-tree-id3331 . -1) (undo-tree-id3332 . -1) (undo-tree-id3333 . -1) 2382) nil (26014 29037 348357 0) 0 nil])
([nil nil ((2381 . 2383)) nil (26014 29037 348344 0) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -2382) (undo-tree-id3317 . -1) (undo-tree-id3318 . -1) (undo-tree-id3319 . -1) (undo-tree-id3320 . -1) (undo-tree-id3321 . -1) 2383) nil (26014 29037 348343 0) 0 nil])
([nil nil ((2382 . 2384)) nil (26014 29037 348336 0) 0 nil])
([nil nil ((2383 . 2387) (#("n" 0 1 (fontified nil)) . 2383) (2383 . 2384) (#("name" 0 4 (fontified nil)) . -2383) (2383 . 2387) (#("n" 0 1 (fontified t)) . -2383) (undo-tree-id3308 . -1) (undo-tree-id3309 . -1) (undo-tree-id3310 . -1) (undo-tree-id3311 . -1) (undo-tree-id3312 . -1) (undo-tree-id3313 . -1) (undo-tree-id3314 . -1) (undo-tree-id3315 . -1) (undo-tree-id3316 . -1) 2384) nil (26014 29037 348334 0) 0 nil])
([nil nil ((2388 . 2389)) nil (26014 29037 348313 0) 0 nil])
([nil nil ((2381 . 2382) (t 26014 29037 369649 137000)) nil (26014 29048 826862 0) 0 nil])
([nil nil ((2381 . 2386) (t 26014 29048 848441 336000)) nil (26014 29062 807765 0) 0 nil])
([nil nil ((2393 . 2394)) nil (26014 29062 807761 0) 0 nil])
([nil nil ((2398 . 2406) (#("        " 0 8 (fontified nil)) . 2397) (undo-tree-id3450 . -8) (undo-tree-id3451 . -8) (undo-tree-id3452 . -8) (undo-tree-id3453 . -8) (undo-tree-id3454 . -8) (2396 . 2406) (t 26014 29062 829119 399000)) nil (26014 29094 391385 0) 0 nil])
([nil nil ((2397 . 2405)) nil (26014 29094 391378 0) 0 nil])
([nil nil ((2295 . 2304)) nil (26014 29094 391377 0) 0 nil])
([nil nil ((2304 . 2307)) nil (26014 29094 391376 0) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -2305) (undo-tree-id3435 . -1) (undo-tree-id3436 . -1) (undo-tree-id3437 . -1) (undo-tree-id3438 . -1) (undo-tree-id3439 . -1) (undo-tree-id3440 . -1) (undo-tree-id3441 . -1) (undo-tree-id3442 . -1) (undo-tree-id3443 . -1) (#("n" 0 1 (fontified t)) . -2306) (undo-tree-id3444 . -1) (undo-tree-id3445 . -1) (undo-tree-id3446 . -1) (undo-tree-id3447 . -1) (undo-tree-id3448 . -1) (undo-tree-id3449 . -1) 2307) nil (26014 29094 391374 0) 0 nil])
([nil nil ((2305 . 2307)) nil (26014 29094 391358 0) 0 nil])
([nil nil ((31 . 51) (apply yas--snippet-revive 2304 2311 #s(yas--snippet nil nil #s(yas--exit 2310 nil) 136 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2310 nil) 136 nil nil nil nil)) (2304 . 2311) (#("info!($0)" 0 9 (fontified nil)) . 2304) (2304 . 2313) (#("inf" 0 3 (fontified nil)) . 2304) (2304 . 2307) (#("info!(…) (use tracing::info)" 0 28 (fontified nil)) . -2304) (2304 . 2332) (#("inf" 0 3 (fontified t)) . -2304) (undo-tree-id3413 . -3) (undo-tree-id3414 . -1) (undo-tree-id3415 . -1) (undo-tree-id3416 . -1) (undo-tree-id3417 . -1) (undo-tree-id3418 . -1) (undo-tree-id3419 . -1) (undo-tree-id3420 . -1) (undo-tree-id3421 . -1) (undo-tree-id3422 . -1) (undo-tree-id3423 . -1) (undo-tree-id3424 . -1) (undo-tree-id3425 . -1) (undo-tree-id3426 . -1) (undo-tree-id3427 . -2) (undo-tree-id3428 . -2) (undo-tree-id3429 . -2) (undo-tree-id3430 . -2) (undo-tree-id3431 . -3) (undo-tree-id3432 . -3) (undo-tree-id3433 . -3) (undo-tree-id3434 . -3) 2307) nil (26014 29094 391356 0) 0 nil])
([nil nil ((2330 . 2332)) nil (26014 29094 391326 0) 0 nil])
([nil nil ((2331 . 2342)) nil (26014 29094 391325 0) 0 nil])
([nil nil ((2342 . 2349)) nil (26014 29094 391324 0) 0 nil])
([nil nil ((#("m" 0 1 (face font-lock-string-face fontified t)) . -2348) (undo-tree-id3408 . -1) (undo-tree-id3409 . -1) (undo-tree-id3410 . -1) (undo-tree-id3411 . -1) (undo-tree-id3412 . -1) 2349) nil (26014 29094 391323 0) 0 nil])
([nil nil ((2348 . 2349)) nil (26014 29094 391317 0) 0 nil])
([nil nil ((#("o" 0 1 (face font-lock-string-face fontified t)) . -2346) (undo-tree-id3365 . -1) (undo-tree-id3366 . -1) (undo-tree-id3367 . -1) (undo-tree-id3368 . -1) (undo-tree-id3369 . -1) (undo-tree-id3370 . -1) (undo-tree-id3371 . -1) (undo-tree-id3372 . -1) (undo-tree-id3373 . -1) (undo-tree-id3374 . -1) (undo-tree-id3375 . -1) (undo-tree-id3376 . -1) (undo-tree-id3377 . -1) (undo-tree-id3378 . -1) (undo-tree-id3379 . -1) (undo-tree-id3380 . -1) (undo-tree-id3381 . -1) (undo-tree-id3382 . -1) (undo-tree-id3383 . -1) (undo-tree-id3384 . -1) (undo-tree-id3385 . -1) (undo-tree-id3386 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -2347) (undo-tree-id3387 . -1) (undo-tree-id3388 . -1) (undo-tree-id3389 . -1) (undo-tree-id3390 . -1) (undo-tree-id3391 . -1) (undo-tree-id3392 . -1) (undo-tree-id3393 . -1) (undo-tree-id3394 . -1) (undo-tree-id3395 . -1) (undo-tree-id3396 . -1) (undo-tree-id3397 . -1) (undo-tree-id3398 . -1) (undo-tree-id3399 . -1) (undo-tree-id3400 . -1) (undo-tree-id3401 . -1) (undo-tree-id3402 . -1) (undo-tree-id3403 . -1) (undo-tree-id3404 . -1) (undo-tree-id3405 . -1) (#("m" 0 1 (face font-lock-string-face fontified t)) . -2348) (undo-tree-id3406 . -1) (undo-tree-id3407 . -1) 2349) nil (26014 29094 391314 0) 0 nil])
([nil nil ((2346 . 2352)) nil (26014 29094 391267 0) 0 nil])
([nil nil ((2351 . 2353)) nil (26014 29094 391266 0) 0 nil])
([nil nil ((2354 . 2355)) nil (26014 29094 391265 0) 0 nil])
([nil nil ((#("," 0 1 (face font-lock-string-face fontified t)) . -2354) (undo-tree-id3359 . -1) (undo-tree-id3360 . -1) (undo-tree-id3361 . -1) (undo-tree-id3362 . -1) (undo-tree-id3363 . -1) (undo-tree-id3364 . -1) 2355) nil (26014 29094 391262 0) 0 nil])
([nil nil ((2355 . 2359)) nil (26014 29094 391247 0) 0 nil])
([nil nil ((2359 . 2366)) nil (26014 29094 391246 0) 0 nil])
([nil nil ((2367 . 2368)) nil (26014 29094 391242 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 3008 . 3009) (nil fontified nil 2478 . 3009) (2478 . 3009) (t 26014 29094 413260 54000)) nil (26014 29155 686453 0) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -2478) 2321) nil (26014 29155 686450 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 3140 . 3141) (nil fontified nil 3010 . 3141) (3010 . 3141)) nil (26014 29155 686448 0) 0 nil])
([nil nil ((3141 . 3142)) nil (26014 29155 686443 0) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -3141) (undo-tree-id3455 . -1) (undo-tree-id3456 . -1) (undo-tree-id3457 . -1) (undo-tree-id3458 . -1) (undo-tree-id3459 . -1) (undo-tree-id3460 . -1) (undo-tree-id3461 . -1) (undo-tree-id3462 . -1) (undo-tree-id3463 . -1) (undo-tree-id3464 . -1) (undo-tree-id3465 . -1) (undo-tree-id3466 . -1) (undo-tree-id3467 . -1) (undo-tree-id3468 . -1) (undo-tree-id3469 . -1) (undo-tree-id3470 . -1) 3142 (t 26014 29155 709008 57000)) nil (26014 29157 819347 0) 0 nil])
([nil nil ((#("model::" 0 5 (face font-lock-constant-face fontified t) 5 7 (fontified t)) . -3034) (undo-tree-id3471 . -7) (undo-tree-id3472 . -7) (undo-tree-id3473 . -6) (undo-tree-id3474 . -6) (undo-tree-id3475 . -6) (undo-tree-id3476 . -6) (undo-tree-id3477 . -6) (undo-tree-id3478 . -6) (undo-tree-id3479 . -6) (undo-tree-id3480 . -6) (undo-tree-id3481 . -6) (undo-tree-id3482 . -6) (undo-tree-id3483 . -6) (undo-tree-id3484 . -6) (undo-tree-id3485 . -6) (undo-tree-id3486 . -7) (undo-tree-id3487 . -7) (undo-tree-id3488 . -7) (undo-tree-id3489 . -7) (undo-tree-id3490 . -7) (undo-tree-id3491 . -7) (undo-tree-id3492 . -7) (undo-tree-id3493 . -7) (undo-tree-id3494 . -7) (undo-tree-id3495 . -7) (undo-tree-id3496 . -7) (undo-tree-id3497 . -7) 3041 (t 26014 29157 841716 707000)) nil (26014 29164 908326 0) 0 nil])
([nil nil ((2468 . 2470) (t 26014 29164 930491 822000)) nil (26014 29200 294298 0) 0 nil])
([nil nil ((apply yas--snippet-revive 2469 2477 #s(yas--snippet nil nil #s(yas--exit 2477 nil) 137 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2477 nil) 137 nil nil nil nil)) (2469 . 2477) (#("unwrap()$0" 0 10 (fontified nil)) . 2469) (2469 . 2479) (#("u" 0 1 (fontified nil)) . 2469) (2469 . 2470) (#("unwrap()" 0 8 (fontified nil)) . -2469) (2469 . 2477) (#("u" 0 1 (fontified t)) . -2469) (undo-tree-id3498 . -1) (undo-tree-id3499 . -1) (undo-tree-id3500 . -1) (undo-tree-id3501 . -1) (undo-tree-id3502 . -1) (undo-tree-id3503 . -1) (undo-tree-id3504 . -1) 2470) nil (26014 29200 294291 0) 0 nil])
([nil nil ((3143 . 3144) (t 26014 29200 316626 628000)) nil (26014 29210 141015 0) 0 nil])
([nil nil ((3154 . 3158) (#("    " 0 4 (fontified nil)) . 3153) (undo-tree-id3505 . -4) (undo-tree-id3506 . -4) (undo-tree-id3507 . -4) (undo-tree-id3508 . -4) (3152 . 3158) (t 26014 29210 163507 687000)) nil (26014 29242 46334 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 4772 . 4773) (nil fontified nil 3158 . 4773) (3158 . 4773)) nil (26014 29242 46318 0) 0 nil])
([nil nil ((3171 . 3174) (t 26014 29242 69435 439000)) nil (26014 29252 72116 0) 0 nil])
([nil nil ((3171 . 3181) (#("objmodels" 0 3 (fontified nil) 3 9 (fontified nil)) . 3171) (undo-tree-id3509 . 6) (3171 . 3174) (#("obj_models" 0 10 (fontified nil)) . -3171) (3171 . 3181) (#("obj" 0 3 (fontified t)) . -3171) (undo-tree-id3510 . -3) (undo-tree-id3511 . -1) (undo-tree-id3512 . -1) (undo-tree-id3513 . -2) (undo-tree-id3514 . -2) (undo-tree-id3515 . -3) (undo-tree-id3516 . -3) (undo-tree-id3517 . -3) (undo-tree-id3518 . -3) (undo-tree-id3519 . -3) 3174) nil (26014 29252 72111 0) 0 nil])
([nil nil ((#("model::" 0 5 (face font-lock-constant-face fontified t) 5 7 (fontified t)) . -3306) (undo-tree-id3520 . -7) (undo-tree-id3521 . -4) (undo-tree-id3522 . -4) (undo-tree-id3523 . -4) (undo-tree-id3524 . -4) (undo-tree-id3525 . -4) (undo-tree-id3526 . -4) (undo-tree-id3527 . -4) (undo-tree-id3528 . -4) (undo-tree-id3529 . -4) (undo-tree-id3530 . -4) (undo-tree-id3531 . -4) (undo-tree-id3532 . -4) (undo-tree-id3533 . -4) (undo-tree-id3534 . -4) (undo-tree-id3535 . -4) (undo-tree-id3536 . -1) (undo-tree-id3537 . -1) (undo-tree-id3538 . -1) (undo-tree-id3539 . -1) (undo-tree-id3540 . -1) (undo-tree-id3541 . -1) (undo-tree-id3542 . -1) (undo-tree-id3543 . -1) (undo-tree-id3544 . -1) (undo-tree-id3545 . -1) (undo-tree-id3546 . -1) (undo-tree-id3547 . -1) (undo-tree-id3548 . -1) (undo-tree-id3549 . -1) (undo-tree-id3550 . -1) (undo-tree-id3551 . -1) (undo-tree-id3552 . -1) (undo-tree-id3553 . -1) (undo-tree-id3554 . -1) (undo-tree-id3555 . -7) 3313 (t 26014 29252 94319 213000)) nil (26014 29269 716612 0) 0 nil])
([nil nil ((30 . 33) (t 26014 29269 739518 726000)) nil (26014 29289 189189 0) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -30) (undo-tree-id3570 . -1) (undo-tree-id3571 . -1) (undo-tree-id3572 . -1) (undo-tree-id3573 . -1) (undo-tree-id3574 . -1) (undo-tree-id3575 . -1) (undo-tree-id3576 . -1) (undo-tree-id3577 . -1) (undo-tree-id3578 . -1) (undo-tree-id3579 . -1) (undo-tree-id3580 . -1) (undo-tree-id3581 . -1) (undo-tree-id3582 . -1) (#("s" 0 1 (fontified t)) . -31) (undo-tree-id3583 . -1) (undo-tree-id3584 . -1) (undo-tree-id3585 . -1) (undo-tree-id3586 . -1) (undo-tree-id3587 . -1) (undo-tree-id3588 . -1) (undo-tree-id3589 . -1) (undo-tree-id3590 . -1) (undo-tree-id3591 . -1) (undo-tree-id3592 . -1) (#("e" 0 1 (fontified t)) . -32) (undo-tree-id3593 . -1) (undo-tree-id3594 . -1) (undo-tree-id3595 . -1) (undo-tree-id3596 . -1) (undo-tree-id3597 . -1) 33) nil (26014 29289 189186 0) 0 nil])
([nil nil ((30 . 35)) nil (26014 29289 189157 0) 0 nil])
([nil nil ((#("g" 0 1 (face font-lock-constant-face fontified t)) . -34) (undo-tree-id3568 . -1) (undo-tree-id3569 . -1) 35) nil (26014 29289 189156 0) 0 nil])
([nil nil ((34 . 36)) nil (26014 29289 189152 0) 0 nil])
([nil nil ((34 . 38) (#("wg" 0 2 (fontified nil)) . 34) (34 . 36) (#("wgpu" 0 4 (fontified nil)) . -34) (34 . 38) (#("wg" 0 2 (face font-lock-constant-face fontified t)) . -34) (undo-tree-id3565 . -2) (undo-tree-id3566 . -1) (undo-tree-id3567 . -1) 36) nil (26014 29289 189151 0) 0 nil])
([nil nil ((38 . 41)) nil (26014 29289 189145 0) 0 nil])
([nil nil ((40 . 44) (#("u" 0 1 (fontified nil)) . 40) (40 . 41) (#("util" 0 4 (fontified nil)) . -40) (40 . 44) (#("u" 0 1 (fontified t)) . -40) (undo-tree-id3560 . -1) (undo-tree-id3561 . -1) (undo-tree-id3562 . -1) (undo-tree-id3563 . -1) (undo-tree-id3564 . -1) 41) nil (26014 29289 189143 0) 0 nil])
([nil nil ((44 . 47)) nil (26014 29289 189135 0) 0 nil])
([nil nil ((46 . 55) (#("D" 0 1 (fontified nil)) . 46) (46 . 47) (#("DeviceExt" 0 9 (fontified nil)) . -46) (46 . 55) (#("D" 0 1 (face font-lock-type-face fontified t)) . -46) (undo-tree-id3556 . -1) (undo-tree-id3557 . -1) (undo-tree-id3558 . -1) (undo-tree-id3559 . -1) 47) nil (26014 29289 189133 0) 0 nil])
([nil nil ((55 . 56)) nil (26014 29289 189116 0) 0 nil])
([nil nil ((#("model::" 0 5 (face font-lock-constant-face fontified t) 5 7 (fontified t)) . -4504) (undo-tree-id3598 . -6) (undo-tree-id3599 . -7) (undo-tree-id3600 . -6) (undo-tree-id3601 . -6) (undo-tree-id3602 . -6) (undo-tree-id3603 . -6) (undo-tree-id3604 . -6) (undo-tree-id3605 . -6) (undo-tree-id3606 . -6) (undo-tree-id3607 . -6) (undo-tree-id3608 . -7) 4511 (t 26014 29289 211458 497000)) nil (26014 29296 949505 0) 0 nil])
([nil nil ((4792 . 4796) (#("    " 0 4 (fontified nil)) . 4791) (undo-tree-id3627 . -4) (undo-tree-id3628 . -4) (undo-tree-id3629 . -4) (4791 . 4796) (#("    " 0 4 (fontified nil)) . 4790) (undo-tree-id3630 . -4) (undo-tree-id3631 . -4) (undo-tree-id3632 . -4) (4789 . 4795) (t 26014 29296 971922 643000)) nil (26014 29335 934990 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 4838 . 4839) (nil fontified nil 4796 . 4839) (4796 . 4839)) nil (26014 29335 934981 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -4796) 4815) nil (26014 29335 934980 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1915 . 1916) (nil fontified nil 1888 . 1916) (1888 . 1916)) nil (26014 29335 934978 0) 0 nil])
([nil nil ((1888 . 1892)) nil (26014 29335 934977 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1890) (undo-tree-id3609 . -1) (undo-tree-id3610 . -1) (undo-tree-id3611 . -1) (undo-tree-id3612 . -1) (undo-tree-id3613 . -1) (undo-tree-id3614 . -1) (undo-tree-id3615 . -1) (undo-tree-id3616 . -1) (undo-tree-id3617 . -1) (undo-tree-id3618 . -1) (undo-tree-id3619 . -1) (#(">" 0 1 (syntax-table (1) fontified t)) . -1891) (undo-tree-id3620 . -1) (undo-tree-id3621 . -1) (undo-tree-id3622 . -1) (undo-tree-id3623 . -1) (undo-tree-id3624 . -1) (undo-tree-id3625 . -1) (undo-tree-id3626 . -1) 1892) nil (26014 29335 934974 0) 0 nil])
([nil nil ((1890 . 1892)) nil (26014 29335 934946 0) 0 nil])
([nil nil ((#("model::" 0 5 (face font-lock-constant-face fontified t) 5 7 (fontified t)) . -1907) (undo-tree-id3633 . -7) (undo-tree-id3634 . -7) (undo-tree-id3635 . -7) (undo-tree-id3636 . -7) (undo-tree-id3637 . -7) (undo-tree-id3638 . -7) (undo-tree-id3639 . -7) (undo-tree-id3640 . -7) (undo-tree-id3641 . -7) (undo-tree-id3642 . -7) 1914 (t 26014 29335 957588 626000)) nil (26014 29340 41366 0) 0 nil])
([nil nil ((#("model::" 0 5 (face font-lock-constant-face fontified t) 5 7 (fontified t)) . -4824) (undo-tree-id3643 . -7) (undo-tree-id3644 . -7) (undo-tree-id3645 . -7) (undo-tree-id3646 . -7) (undo-tree-id3647 . -7) (undo-tree-id3648 . -7) (undo-tree-id3649 . -7) (undo-tree-id3650 . -7) (undo-tree-id3651 . -7) (undo-tree-id3652 . -7) 4831 (t 26014 29340 64560 255000)) nil (26014 29394 601869 0) 0 nil])
([nil nil ((4856 . 4857) (t 26014 29395 255406 582000)) nil (26014 29879 553589 0) 0 nil] [nil nil ((#("unwrap()" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-4-face) fontified t) 7 8 (face (rainbow-delimiters-depth-4-face) fontified t)) . -2323) (undo-tree-id3716 . -8) (undo-tree-id3717 . -8) (undo-tree-id3718 . -8) (undo-tree-id3719 . -8) (undo-tree-id3720 . -8) (undo-tree-id3721 . -8) (undo-tree-id3722 . -8) (undo-tree-id3723 . -8) (undo-tree-id3724 . -8) (undo-tree-id3725 . -8) (undo-tree-id3726 . -8) (undo-tree-id3727 . -8) 2331 (t 26014 29345 961648 75000)) ((2323 . 2331)) (26014 29394 252932 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 5976 . 5977) (nil fontified nil 4857 . 5977) (4857 . 5977)) nil (26014 29879 553585 0) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2322) (undo-tree-id3703 . -1) (undo-tree-id3704 . -1) (undo-tree-id3705 . -1) (undo-tree-id3706 . -1) (undo-tree-id3707 . -1) (undo-tree-id3708 . -1) (undo-tree-id3709 . -1) (undo-tree-id3710 . -1) (undo-tree-id3711 . -1) (undo-tree-id3712 . -1) (undo-tree-id3713 . -1) (undo-tree-id3714 . -1) (undo-tree-id3715 . -1) 2323) ((2322 . 2323)) (26014 29393 924133 0) 0 nil])
([nil nil ((5114 . 5115) (t 26014 29879 576093 179000)) nil (26014 29901 142771 0) 0 nil])
([nil nil ((2322 . 2323)) ((#("?" 0 1 (face rust-question-mark fontified t)) . 2322)) (26014 29393 336027 0) 0 nil])
([nil nil ((5114 . 5119)) nil (26014 29901 142770 0) 0 nil])
([nil nil ((#("unwrap()" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-5-face) fontified t) 7 8 (face (rainbow-delimiters-depth-5-face) fontified t)) . -2348) (undo-tree-id3692 . -7) (undo-tree-id3693 . -8) (undo-tree-id3694 . -7) (undo-tree-id3695 . -7) (undo-tree-id3696 . -7) (undo-tree-id3697 . -7) (undo-tree-id3698 . -7) (undo-tree-id3699 . -7) (undo-tree-id3700 . -7) (undo-tree-id3701 . -7) (undo-tree-id3702 . -8) 2356) ((2348 . 2356)) (26014 29393 74692 0) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-type-face fontified t)) . -5117) (undo-tree-id3811 . -1) (undo-tree-id3812 . -1) (undo-tree-id3813 . -1) (undo-tree-id3814 . -1) (undo-tree-id3815 . -1) (undo-tree-id3816 . -1) (undo-tree-id3817 . -1) (undo-tree-id3818 . -1) (undo-tree-id3819 . -1) (undo-tree-id3820 . -1) (undo-tree-id3821 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -5118) (undo-tree-id3822 . -1) (undo-tree-id3823 . -1) (undo-tree-id3824 . -1) (undo-tree-id3825 . -1) (undo-tree-id3826 . -1) 5119) nil (26014 29901 142768 0) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2347) (undo-tree-id3672 . -1) (undo-tree-id3673 . -1) (undo-tree-id3674 . -1) (undo-tree-id3675 . -1) (undo-tree-id3676 . -1) (undo-tree-id3677 . -1) (undo-tree-id3678 . -1) (undo-tree-id3679 . -1) (undo-tree-id3680 . -1) (undo-tree-id3681 . -1) (undo-tree-id3682 . -1) (undo-tree-id3683 . -1) (undo-tree-id3684 . -1) (undo-tree-id3685 . -1) (undo-tree-id3686 . -1) (undo-tree-id3687 . -1) (undo-tree-id3688 . -1) (undo-tree-id3689 . -1) (undo-tree-id3690 . -1) (undo-tree-id3691 . -1) 2348) ((2347 . 2348)) (26014 29392 816000 0) 0 nil])
([nil nil ((5117 . 5119)) nil (26014 29901 142751 0) 0 nil])
([nil nil ((2347 . 2348)) ((#("?" 0 1 (face rust-question-mark fontified t)) . 2347) (t 26014 29390 179678 955000)) (26014 29389 351445 0) 0 nil])
([nil nil ((#("::path" 0 2 (fontified t) 2 6 (face font-lock-constant-face fontified t)) . -8) (undo-tree-id3779 . -6) 14 (17 . 24) (21 . 28) (23 . 29) (#("P" 0 1 (face font-lock-type-face fontified t)) . 23) (25 . 28) (#("th" 0 2 (face font-lock-type-face fontified t)) . -25) (undo-tree-id3780 . -2) 27 (apply yas--snippet-revive 5114 5121 #s(yas--snippet nil nil #s(yas--exit 5120 nil) 139 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 5120 nil) 139 nil nil nil nil)) (5114 . 5121) (#("Range<$0>" 0 9 (fontified nil)) . 5114) (5114 . 5123) (#("Range" 0 5 (fontified nil)) . 5114) (5114 . 5119) (#("Range<…> (alias ..) (use std::ops::Range)" 0 41 (fontified nil)) . -5114) (5114 . 5155) (#("Range" 0 5 (face font-lock-type-face fontified t)) . -5114) (undo-tree-id3781 . -5) (undo-tree-id3782 . -1) (undo-tree-id3783 . -1) (undo-tree-id3784 . -1) (undo-tree-id3785 . -2) (undo-tree-id3786 . -2) (undo-tree-id3787 . -2) (undo-tree-id3788 . -3) (undo-tree-id3789 . -3) (undo-tree-id3790 . -3) (undo-tree-id3791 . -3) (undo-tree-id3792 . -3) (undo-tree-id3793 . -3) (undo-tree-id3794 . -3) (undo-tree-id3795 . -3) (undo-tree-id3796 . -3) (undo-tree-id3797 . -3) (undo-tree-id3798 . -3) (undo-tree-id3799 . -3) (undo-tree-id3800 . -3) (undo-tree-id3801 . -3) (undo-tree-id3802 . -3) (undo-tree-id3803 . -3) (undo-tree-id3804 . -4) (undo-tree-id3805 . -4) (undo-tree-id3806 . -4) (undo-tree-id3807 . -5) (undo-tree-id3808 . -5) (undo-tree-id3809 . -5) (undo-tree-id3810 . -5) 5119) nil (26014 29901 142747 0) 0 nil])
([nil nil ((#("unwrap()" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-4-face) fontified t) 7 8 (face (rainbow-delimiters-depth-4-face) fontified t)) . -2504) (undo-tree-id3664 . -8) (undo-tree-id3665 . -8) (undo-tree-id3666 . -8) (undo-tree-id3667 . -8) (undo-tree-id3668 . -8) (undo-tree-id3669 . -8) (undo-tree-id3670 . -8) (undo-tree-id3671 . -8) 2512) ((2504 . 2512)) (26014 29388 863369 0) 0 nil])
([nil nil ((#("Range<> " 0 5 (face font-lock-type-face fontified t) 5 6 (face (rainbow-delimiters-depth-3-face) fontified t) 6 7 (face (rainbow-delimiters-depth-3-face) fontified t) 7 8 (fontified t)) . -5128) (undo-tree-id3764 . -8) (undo-tree-id3765 . -8) (undo-tree-id3766 . -8) (undo-tree-id3767 . -8) (undo-tree-id3768 . -8) (undo-tree-id3769 . -8) (undo-tree-id3770 . -6) (undo-tree-id3771 . -6) (undo-tree-id3772 . -6) (undo-tree-id3773 . -6) (undo-tree-id3774 . -6) (undo-tree-id3775 . -7) (undo-tree-id3776 . -7) (undo-tree-id3777 . -7) (undo-tree-id3778 . -8) 5136) nil (26014 29901 142706 0) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2503) (undo-tree-id3653 . -1) (undo-tree-id3654 . -1) (undo-tree-id3655 . -1) (undo-tree-id3656 . -1) (undo-tree-id3657 . -1) (undo-tree-id3658 . -1) (undo-tree-id3659 . -1) (undo-tree-id3660 . -1) (undo-tree-id3661 . -1) (undo-tree-id3662 . -1) (undo-tree-id3663 . -1) 2504) ((2503 . 2504)) (26014 29388 446473 0) 0 nil])
([nil nil ((5991 . 5993) (t 26014 29901 165926 641000)) nil (26014 29962 963101 0) 0 nil])
([nil nil ((2503 . 2504)) ((#("?" 0 1 (face rust-question-mark fontified t)) . 2503) (undo-tree-id3728 . -1) (undo-tree-id3729 . -1) (undo-tree-id3730 . -1) (undo-tree-id3731 . -1) (undo-tree-id3732 . -1) (undo-tree-id3733 . -1) (undo-tree-id3734 . -1) (undo-tree-id3735 . -1) (undo-tree-id3736 . -1) (undo-tree-id3737 . -1) (undo-tree-id3738 . -1) (undo-tree-id3739 . -1) (undo-tree-id3740 . -1) (undo-tree-id3741 . -1) (undo-tree-id3742 . -1) (undo-tree-id3743 . -1) (undo-tree-id3744 . -1) (undo-tree-id3745 . -1) (undo-tree-id3746 . -1) (undo-tree-id3747 . -1) (undo-tree-id3748 . -1) (undo-tree-id3749 . -1) (undo-tree-id3750 . -1) (undo-tree-id3751 . -1) (undo-tree-id3752 . -1) (undo-tree-id3753 . -1) (undo-tree-id3754 . -1) (undo-tree-id3755 . -1) (undo-tree-id3756 . -1) (undo-tree-id3757 . -1) (undo-tree-id3758 . -1) (undo-tree-id3759 . -1) (undo-tree-id3760 . -1) (undo-tree-id3761 . -1) (undo-tree-id3762 . -1) (undo-tree-id3763 . -1) (t 26014 29376 756753 230000)) (26014 29376 732350 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 5441 . 5442) (nil fontified nil 5195 . 5442) (5195 . 5442)) nil (26014 30001 559129 0) 0 nil] [nil nil ((nil rear-nonsticky nil 6893 . 6894) (nil fontified nil 5993 . 6894) (5993 . 6894)) ((#("pub trait DrawModel<'a> {
    // ...
    fn draw_model(&mut self, model: &'a Model, camera_bind_group: &'a wgpu::BindGroup);
    fn draw_model_instanced(
        &mut self,
        model: &'a Model,
        instances: Range<u32>,
        camera_bind_group: &'a wgpu::BindGroup,
    );
}

impl<'a, 'b> DrawModel<'b> for wgpu::RenderPass<'a>
where
    'b: 'a, {
    // ...
    fn draw_model(&mut self, model: &'b Model, camera_bind_group: &'b wgpu::BindGroup) {
        self.draw_model_instanced(model, 0..1, camera_bind_group);
    }

    fn draw_model_instanced(
        &mut self,
        model: &'b Model,
        instances: Range<u32>,
        camera_bind_group: &'b wgpu::BindGroup,
    ) {
        for mesh in &model.meshes {
            let material = &model.materials[mesh.material];
            self.draw_mesh_instanced(mesh, material, instances.clone(), camera_bind_group);
        }
    }
}
" 0 3 (face font-lock-keyword-face fontified nil) 3 4 (fontified nil) 4 9 (face font-lock-keyword-face fontified nil) 9 10 (fontified nil) 10 19 (face font-lock-type-face fontified nil) 19 20 (face (rainbow-delimiters-depth-1-face) fontified nil) 20 21 (fontified nil) 21 22 (face font-lock-variable-name-face fontified nil) 22 23 (face (rainbow-delimiters-depth-1-face) fontified nil) 23 24 (fontified nil) 24 25 (face (rainbow-delimiters-depth-1-face) fontified nil) 25 30 (fontified nil) 30 33 (face font-lock-comment-delimiter-face fontified nil) 33 37 (face font-lock-comment-face fontified nil) 37 41 (fontified nil) 41 43 (face font-lock-keyword-face fontified nil) 43 44 (fontified nil) 44 54 (face font-lock-function-name-face fontified nil) 54 55 (face (rainbow-delimiters-depth-2-face) fontified nil) 55 56 (face rust-ampersand-face fontified nil) 56 59 (face font-lock-keyword-face fontified nil) 59 60 (fontified nil) 60 64 (face font-lock-keyword-face fontified nil) 64 66 (fontified nil) 66 71 (face font-lock-variable-name-face fontified nil) 71 73 (fontified nil) 73 74 (face rust-ampersand-face fontified nil) 74 75 (fontified nil) 75 76 (face font-lock-variable-name-face fontified nil) 76 77 (fontified nil) 77 82 (face font-lock-type-face fontified nil) 82 84 (fontified nil) 84 101 (face font-lock-variable-name-face fontified nil) 101 103 (fontified nil) 103 104 (face rust-ampersand-face fontified nil) 104 105 (fontified nil) 105 106 (face font-lock-variable-name-face fontified nil) 106 107 (fontified nil) 107 111 (face font-lock-constant-face fontified nil) 111 113 (fontified nil) 113 122 (face font-lock-type-face fontified nil) 122 123 (face (rainbow-delimiters-depth-2-face) fontified nil) 123 129 (fontified nil) 129 131 (face font-lock-keyword-face fontified nil) 131 132 (fontified nil) 132 152 (face font-lock-function-name-face fontified nil) 152 153 (face (rainbow-delimiters-depth-2-face) fontified nil) 153 162 (fontified nil) 162 163 (face rust-ampersand-face fontified nil) 163 166 (face font-lock-keyword-face fontified nil) 166 167 (fontified nil) 167 171 (face font-lock-keyword-face fontified nil) 171 181 (fontified nil) 181 186 (face font-lock-variable-name-face fontified nil) 186 188 (fontified nil) 188 189 (face rust-ampersand-face fontified nil) 189 190 (fontified nil) 190 191 (face font-lock-variable-name-face fontified nil) 191 192 (fontified nil) 192 197 (face font-lock-type-face fontified nil) 197 207 (fontified nil) 207 216 (face font-lock-variable-name-face fontified nil) 216 218 (fontified nil) 218 223 (face font-lock-type-face fontified nil) 223 224 (face (rainbow-delimiters-depth-3-face) fontified nil) 224 227 (face font-lock-type-face fontified nil) 227 228 (face (rainbow-delimiters-depth-3-face) fontified nil) 228 238 (fontified nil) 238 255 (face font-lock-variable-name-face fontified nil) 255 257 (fontified nil) 257 258 (face rust-ampersand-face fontified nil) 258 259 (fontified nil) 259 260 (face font-lock-variable-name-face fontified nil) 260 261 (fontified nil) 261 265 (face font-lock-constant-face fontified nil) 265 267 (fontified nil) 267 276 (face font-lock-type-face fontified nil) 276 282 (fontified nil) 282 283 (face (rainbow-delimiters-depth-2-face) fontified nil) 283 285 (fontified nil) 285 286 (face (rainbow-delimiters-depth-1-face) fontified nil) 286 288 (fontified nil) 288 292 (face font-lock-keyword-face fontified nil) 292 293 (face (rainbow-delimiters-depth-1-face) fontified nil) 293 294 (fontified nil) 294 295 (face font-lock-variable-name-face fontified nil) 295 298 (fontified nil) 298 299 (face font-lock-variable-name-face fontified nil) 299 300 (face (rainbow-delimiters-depth-1-face) fontified nil) 300 301 (fontified nil) 301 310 (face font-lock-type-face fontified nil) 310 311 (face (rainbow-delimiters-depth-1-face) fontified nil) 311 312 (fontified nil) 312 313 (face font-lock-variable-name-face fontified nil) 313 314 (face (rainbow-delimiters-depth-1-face) fontified nil) 314 315 (fontified nil) 315 318 (face font-lock-keyword-face fontified nil) 318 319 (fontified nil) 319 323 (face font-lock-variable-name-face fontified nil) 323 325 (fontified nil) 325 335 (face font-lock-type-face fontified nil) 335 336 (face (rainbow-delimiters-depth-1-face) fontified nil) 336 337 (fontified nil) 337 338 (face font-lock-variable-name-face fontified nil) 338 339 (face (rainbow-delimiters-depth-1-face) fontified nil) 339 340 (fontified nil) 340 345 (face font-lock-keyword-face fontified nil) 345 351 (fontified nil) 351 352 (face font-lock-variable-name-face fontified nil) 352 355 (fontified nil) 355 356 (face font-lock-variable-name-face fontified nil) 356 358 (fontified nil) 358 359 (face (rainbow-delimiters-depth-1-face) fontified nil) 359 364 (fontified nil) 364 367 (face font-lock-comment-delimiter-face fontified nil) 367 371 (face font-lock-comment-face fontified nil) 371 375 (fontified nil) 375 377 (face font-lock-keyword-face fontified nil) 377 378 (fontified nil) 378 388 (face font-lock-function-name-face fontified nil) 388 389 (face (rainbow-delimiters-depth-2-face) fontified nil) 389 390 (face rust-ampersand-face fontified nil) 390 393 (face font-lock-keyword-face fontified nil) 393 394 (fontified nil) 394 398 (face font-lock-keyword-face fontified nil) 398 400 (fontified nil) 400 405 (face font-lock-variable-name-face fontified nil) 405 407 (fontified nil) 407 408 (face rust-ampersand-face fontified nil) 408 409 (fontified nil) 409 410 (face font-lock-variable-name-face fontified nil) 410 411 (fontified nil) 411 416 (face font-lock-type-face fontified nil) 416 418 (fontified nil) 418 435 (face font-lock-variable-name-face fontified nil) 435 437 (fontified nil) 437 438 (face rust-ampersand-face fontified nil) 438 439 (fontified nil) 439 440 (face font-lock-variable-name-face fontified nil) 440 441 (fontified nil) 441 445 (face font-lock-constant-face fontified nil) 445 447 (fontified nil) 447 456 (face font-lock-type-face fontified nil) 456 457 (face (rainbow-delimiters-depth-2-face) fontified nil) 457 458 (fontified nil) 458 459 (face (rainbow-delimiters-depth-2-face) fontified nil) 459 468 (fontified nil) 468 472 (face font-lock-keyword-face fontified nil) 472 493 (fontified nil) 493 494 (face (rainbow-delimiters-depth-3-face) fontified nil) 494 524 (fontified nil) 524 525 (face (rainbow-delimiters-depth-3-face) fontified nil) 525 531 (fontified nil) 531 532 (face (rainbow-delimiters-depth-2-face) fontified nil) 532 538 (fontified nil) 538 540 (face font-lock-keyword-face fontified nil) 540 541 (fontified nil) 541 561 (face font-lock-function-name-face fontified nil) 561 562 (face (rainbow-delimiters-depth-2-face) fontified nil) 562 571 (fontified nil) 571 572 (face rust-ampersand-face fontified nil) 572 575 (face font-lock-keyword-face fontified nil) 575 576 (fontified nil) 576 580 (face font-lock-keyword-face fontified nil) 580 590 (fontified nil) 590 595 (face font-lock-variable-name-face fontified nil) 595 597 (fontified nil) 597 598 (face rust-ampersand-face fontified nil) 598 599 (fontified nil) 599 600 (face font-lock-variable-name-face fontified nil) 600 601 (fontified nil) 601 606 (face font-lock-type-face fontified nil) 606 616 (fontified nil) 616 625 (face font-lock-variable-name-face fontified nil) 625 627 (fontified nil) 627 632 (face font-lock-type-face fontified nil) 632 633 (face (rainbow-delimiters-depth-3-face) fontified nil) 633 636 (face font-lock-type-face fontified nil) 636 637 (face (rainbow-delimiters-depth-3-face) fontified nil) 637 647 (fontified nil) 647 664 (face font-lock-variable-name-face fontified nil) 664 666 (fontified nil) 666 667 (face rust-ampersand-face fontified nil) 667 668 (fontified nil) 668 669 (face font-lock-variable-name-face fontified nil) 669 670 (fontified nil) 670 674 (face font-lock-constant-face fontified nil) 674 676 (fontified nil) 676 685 (face font-lock-type-face fontified nil) 685 691 (fontified nil) 691 692 (face (rainbow-delimiters-depth-2-face) fontified nil) 692 693 (fontified nil) 693 694 (face (rainbow-delimiters-depth-2-face) fontified nil) 694 703 (fontified nil) 703 706 (face font-lock-keyword-face fontified nil) 706 707 (fontified nil) 707 711 (face font-lock-variable-name-face fontified nil) 711 712 (fontified nil) 712 714 (face font-lock-keyword-face fontified nil) 714 715 (fontified nil) 715 716 (face rust-ampersand-face fontified nil) 716 729 (fontified nil) 729 730 (face (rainbow-delimiters-depth-3-face) fontified nil) 730 743 (fontified nil) 743 746 (face font-lock-keyword-face fontified nil) 746 747 (fontified nil) 747 755 (face font-lock-variable-name-face fontified nil) 755 758 (fontified nil) 758 759 (face rust-ampersand-face fontified nil) 759 774 (fontified nil) 774 775 (face (rainbow-delimiters-depth-4-face) fontified nil) 775 788 (fontified nil) 788 789 (face (rainbow-delimiters-depth-4-face) fontified nil) 789 803 (fontified nil) 803 807 (face font-lock-keyword-face fontified nil) 807 827 (fontified nil) 827 828 (face (rainbow-delimiters-depth-4-face) fontified nil) 828 859 (fontified nil) 859 860 (face (rainbow-delimiters-depth-5-face) fontified nil) 860 861 (face (rainbow-delimiters-depth-5-face) fontified nil) 861 880 (fontified nil) 880 881 (face (rainbow-delimiters-depth-4-face) fontified nil) 881 891 (fontified nil) 891 892 (face (rainbow-delimiters-depth-3-face) fontified nil) 892 897 (fontified nil) 897 898 (face (rainbow-delimiters-depth-2-face) fontified nil) 898 899 (fontified nil) 899 900 (face (rainbow-delimiters-depth-1-face) fontified nil) 900 901 (rear-nonsticky nil fontified nil)) . 5993) (undo-tree-id3827 . -731) (undo-tree-id3828 . -731) (undo-tree-id3829 . -731) (nil fontified t 6891 . 6892) (nil fontified t 6890 . 6891) (nil fontified t 6885 . 6890) (nil fontified t 6884 . 6885) (nil fontified t 6874 . 6884) (nil fontified t 6873 . 6874) (nil fontified t 6854 . 6873) (nil fontified t 6853 . 6854) (nil fontified t 6852 . 6853) (nil fontified t 6821 . 6852) (nil fontified t 6820 . 6821) (nil fontified t 6800 . 6820) (nil fontified t 6796 . 6800) (nil fontified t 6782 . 6796) (nil fontified t 6781 . 6782) (nil fontified t 6768 . 6781) (nil fontified t 6767 . 6768) (nil fontified t 6752 . 6767) (nil fontified t 6751 . 6752) (nil fontified t 6748 . 6751) (nil fontified t 6740 . 6748) (nil fontified t 6739 . 6740) (nil fontified t 6736 . 6739) (nil fontified t 6723 . 6736) (nil fontified t 6722 . 6723) (nil fontified t 6709 . 6722) (nil fontified t 6708 . 6709) (nil fontified t 6707 . 6708) (nil fontified t 6705 . 6707) (nil fontified t 6704 . 6705) (nil fontified t 6700 . 6704) (nil fontified t 6699 . 6700) (nil fontified t 6696 . 6699) (nil fontified t 6687 . 6696) (nil fontified t 6686 . 6687) (nil fontified t 6685 . 6686) (nil fontified t 6684 . 6685) (nil fontified t 6678 . 6684) (nil fontified t 6669 . 6678) (nil fontified t 6667 . 6669) (nil fontified t 6663 . 6667) (nil fontified t 6662 . 6663) (nil fontified t 6661 . 6662) (nil fontified t 6660 . 6661) (nil fontified t 6659 . 6660) (nil fontified t 6657 . 6659) (nil fontified t 6640 . 6657) (nil fontified t 6630 . 6640) (nil fontified t 6629 . 6630) (nil fontified t 6626 . 6629) (nil fontified t 6625 . 6626) (nil fontified t 6620 . 6625) (nil fontified t 6618 . 6620) (nil fontified t 6609 . 6618) (nil fontified t 6599 . 6609) (nil fontified t 6594 . 6599) (nil fontified t 6593 . 6594) (nil fontified t 6592 . 6593) (nil fontified t 6591 . 6592) (nil fontified t 6590 . 6591) (nil fontified t 6588 . 6590) (nil fontified t 6583 . 6588) (nil fontified t 6573 . 6583) (nil fontified t 6569 . 6573) (nil fontified t 6568 . 6569) (nil fontified t 6565 . 6568) (nil fontified t 6564 . 6565) (nil fontified t 6555 . 6564) (nil fontified t 6554 . 6555) (nil fontified t 6534 . 6554) (nil fontified t 6533 . 6534) (nil fontified t 6531 . 6533) (nil fontified t 6525 . 6531) (nil fontified t 6524 . 6525) (nil fontified t 6518 . 6524) (nil fontified t 6517 . 6518) (nil fontified t 6487 . 6517) (nil fontified t 6486 . 6487) (nil fontified t 6465 . 6486) (nil fontified t 6461 . 6465) (nil fontified t 6452 . 6461) (nil fontified t 6451 . 6452) (nil fontified t 6450 . 6451) (nil fontified t 6449 . 6450) (nil fontified t 6440 . 6449) (nil fontified t 6438 . 6440) (nil fontified t 6434 . 6438) (nil fontified t 6433 . 6434) (nil fontified t 6432 . 6433) (nil fontified t 6431 . 6432) (nil fontified t 6430 . 6431) (nil fontified t 6428 . 6430) (nil fontified t 6411 . 6428) (nil fontified t 6409 . 6411) (nil fontified t 6404 . 6409) (nil fontified t 6403 . 6404) (nil fontified t 6402 . 6403) (nil fontified t 6401 . 6402) (nil fontified t 6400 . 6401) (nil fontified t 6398 . 6400) (nil fontified t 6393 . 6398) (nil fontified t 6391 . 6393) (nil fontified t 6387 . 6391) (nil fontified t 6386 . 6387) (nil fontified t 6383 . 6386) (nil fontified t 6382 . 6383) (nil fontified t 6381 . 6382) (nil fontified t 6371 . 6381) (nil fontified t 6370 . 6371) (nil fontified t 6368 . 6370) (nil fontified t 6364 . 6368) (nil fontified t 6360 . 6364) (nil fontified t 6357 . 6360) (nil fontified t 6352 . 6357) (nil fontified t 6351 . 6352) (nil fontified t 6349 . 6351) (nil fontified t 6348 . 6349) (nil fontified t 6345 . 6348) (nil fontified t 6344 . 6345) (nil fontified t 6338 . 6344) (nil fontified t 6333 . 6338) (nil fontified t 6332 . 6333) (nil fontified t 6331 . 6332) (nil fontified t 6330 . 6331) (nil fontified t 6329 . 6330) (nil fontified t 6328 . 6329) (nil fontified t 6318 . 6328) (nil fontified t 6316 . 6318) (nil fontified t 6312 . 6316) (nil fontified t 6311 . 6312) (nil fontified t 6308 . 6311) (nil fontified t 6307 . 6308) (nil fontified t 6306 . 6307) (nil fontified t 6305 . 6306) (nil fontified t 6304 . 6305) (nil fontified t 6303 . 6304) (nil fontified t 6294 . 6303) (nil fontified t 6293 . 6294) (nil fontified t 6292 . 6293) (nil fontified t 6291 . 6292) (nil fontified t 6288 . 6291) (nil fontified t 6287 . 6288) (nil fontified t 6286 . 6287) (nil fontified t 6285 . 6286) (nil fontified t 6281 . 6285) (nil fontified t 6279 . 6281) (nil fontified t 6278 . 6279) (nil fontified t 6276 . 6278) (nil fontified t 6275 . 6276) (nil fontified t 6269 . 6275) (nil fontified t 6260 . 6269) (nil fontified t 6258 . 6260) (nil fontified t 6254 . 6258) (nil fontified t 6253 . 6254) (nil fontified t 6252 . 6253) (nil fontified t 6251 . 6252) (nil fontified t 6250 . 6251) (nil fontified t 6248 . 6250) (nil fontified t 6231 . 6248) (nil fontified t 6221 . 6231) (nil fontified t 6220 . 6221) (nil fontified t 6217 . 6220) (nil fontified t 6216 . 6217) (nil fontified t 6211 . 6216) (nil fontified t 6209 . 6211) (nil fontified t 6200 . 6209) (nil fontified t 6190 . 6200) (nil fontified t 6185 . 6190) (nil fontified t 6184 . 6185) (nil fontified t 6183 . 6184) (nil fontified t 6182 . 6183) (nil fontified t 6181 . 6182) (nil fontified t 6179 . 6181) (nil fontified t 6174 . 6179) (nil fontified t 6164 . 6174) (nil fontified t 6160 . 6164) (nil fontified t 6159 . 6160) (nil fontified t 6156 . 6159) (nil fontified t 6155 . 6156) (nil fontified t 6146 . 6155) (nil fontified t 6145 . 6146) (nil fontified t 6125 . 6145) (nil fontified t 6124 . 6125) (nil fontified t 6122 . 6124) (nil fontified t 6116 . 6122) (nil fontified t 6115 . 6116) (nil fontified t 6106 . 6115) (nil fontified t 6104 . 6106) (nil fontified t 6100 . 6104) (nil fontified t 6099 . 6100) (nil fontified t 6098 . 6099) (nil fontified t 6097 . 6098) (nil fontified t 6096 . 6097) (nil fontified t 6094 . 6096) (nil fontified t 6077 . 6094) (nil fontified t 6075 . 6077) (nil fontified t 6070 . 6075) (nil fontified t 6069 . 6070) (nil fontified t 6068 . 6069) (nil fontified t 6067 . 6068) (nil fontified t 6066 . 6067) (nil fontified t 6064 . 6066) (nil fontified t 6059 . 6064) (nil fontified t 6057 . 6059) (nil fontified t 6053 . 6057) (nil fontified t 6052 . 6053) (nil fontified t 6049 . 6052) (nil fontified t 6048 . 6049) (nil fontified t 6047 . 6048) (nil fontified t 6037 . 6047) (nil fontified t 6036 . 6037) (nil fontified t 6034 . 6036) (nil fontified t 6030 . 6034) (nil fontified t 6026 . 6030) (nil fontified t 6023 . 6026) (nil fontified t 6018 . 6023) (nil fontified t 6017 . 6018) (nil fontified t 6016 . 6017) (nil fontified t 6015 . 6016) (nil fontified t 6014 . 6015) (nil fontified t 6013 . 6014) (nil fontified t 6012 . 6013) (nil fontified t 6003 . 6012) (nil fontified t 6002 . 6003) (nil fontified t 5997 . 6002) (nil fontified t 5996 . 5997) (nil fontified t 5993 . 5996) (nil rear-nonsticky t 6893 . 6894)) (26014 29962 962164 0) 0 nil])
nil
([nil nil ((6235 . 6240)) nil (26014 30001 559128 0) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 6766 . 6767) (nil fontified nil 6240 . 6767) (6240 . 6767)) nil (26014 30001 559123 0) 0 nil])
([nil nil ((#("    use tobj;" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 12 (face font-lock-constant-face fontified t) 12 13 (fontified t)) . 1930) (undo-tree-id3831 . -13) (undo-tree-id3832 . -13) (undo-tree-id3833 . -13) (undo-tree-id3834 . -13) (undo-tree-id3835 . -13) (undo-tree-id3836 . -13) (undo-tree-id3837 . -13) (undo-tree-id3838 . -13) (undo-tree-id3839 . -13) (undo-tree-id3840 . -13) (undo-tree-id3841 . -13) (t 26014 30001 583264 340000)) nil (26014 31509 55130 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1930) (undo-tree-id3830 . -1)) nil (26014 31509 55114 0) 0 nil])
([nil nil ((1763 . 1765) (t 26014 31509 81439 184000)) nil (26014 31570 525299 0) 0 nil])
([nil nil ((#("—" 0 1 (face font-lock-variable-name-face fontified t)) . -1763) (undo-tree-id3849 . -1) (undo-tree-id3850 . -1) (undo-tree-id3851 . -1) (undo-tree-id3852 . -1) (undo-tree-id3853 . -1) (undo-tree-id3854 . -1) (undo-tree-id3855 . -1) (#("—" 0 1 (face font-lock-variable-name-face fontified t)) . -1764) (undo-tree-id3856 . -1) (undo-tree-id3857 . -1) (undo-tree-id3858 . -1) (undo-tree-id3859 . -1) (undo-tree-id3860 . -1) 1765) nil (26014 31570 525297 0) 0 nil])
([nil nil ((1763 . 1764)) nil (26014 31570 525283 0) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -1763) (undo-tree-id3842 . -1) (undo-tree-id3843 . -1) (undo-tree-id3844 . -1) (undo-tree-id3845 . -1) (undo-tree-id3846 . -1) (undo-tree-id3847 . -1) (undo-tree-id3848 . -1) 1764) nil (26014 31570 525281 0) 0 nil])
([nil nil ((1763 . 1767)) nil (26014 31570 525262 0) 0 nil])
([nil nil ((4729 . 4731) (t 26014 31570 549563 583000)) nil (26014 31580 786585 0) 0 nil])
([nil nil ((4721 . 4733) (#("material_i" 0 10 (fontified nil)) . 4721) (4721 . 4731) (#("material_idx" 0 12 (fontified nil)) . -4721) (4721 . 4733) (#("material_i" 0 2 (face font-lock-variable-name-face fontified t) 2 10 (face font-lock-variable-name-face fontified t)) . -4721) (undo-tree-id3861 . -8) (undo-tree-id3862 . -10) (undo-tree-id3863 . -8) (undo-tree-id3864 . -8) (undo-tree-id3865 . -8) (undo-tree-id3866 . -8) (undo-tree-id3867 . -8) (undo-tree-id3868 . -8) (undo-tree-id3869 . -8) (undo-tree-id3870 . -8) (undo-tree-id3871 . -8) (undo-tree-id3872 . -8) (undo-tree-id3873 . -8) (undo-tree-id3874 . -8) (undo-tree-id3875 . -8) (undo-tree-id3876 . -8) (undo-tree-id3877 . -9) (undo-tree-id3878 . -9) (undo-tree-id3879 . -10) (undo-tree-id3880 . -10) (undo-tree-id3881 . -10) 4731) nil (26014 31580 786579 0) 0 nil])
([nil nil ((6651 . 6652) (t 26014 31580 810263 312000)) nil (26014 31588 711556 0) 0 nil])
([nil nil ((6643 . 6655) (#("material_" 0 9 (fontified nil)) . 6643) (6643 . 6652) (#("material_idx" 0 12 (fontified nil)) . -6643) (6643 . 6655) (#("material_" 0 9 (fontified t)) . -6643) (undo-tree-id3882 . -8) (undo-tree-id3883 . -9) (undo-tree-id3884 . -8) (undo-tree-id3885 . -8) (undo-tree-id3886 . -8) (undo-tree-id3887 . -8) (undo-tree-id3888 . -8) (undo-tree-id3889 . -8) (undo-tree-id3890 . -8) (undo-tree-id3891 . -8) (undo-tree-id3892 . -8) (undo-tree-id3893 . -8) (undo-tree-id3894 . -8) (undo-tree-id3895 . -8) (undo-tree-id3896 . -8) (undo-tree-id3897 . -8) (undo-tree-id3898 . -8) (undo-tree-id3899 . -8) (undo-tree-id3900 . -9) (undo-tree-id3901 . -9) (undo-tree-id3902 . -9) (undo-tree-id3903 . -9) 6652) nil (26014 31588 711551 0) 0 nil])
([nil nil ((5181 . 5190) (t 26014 31588 735955 910000)) nil (26015 33525 76789 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 5236 . 5237) (nil fontified nil 5190 . 5237) (5190 . 5237)) nil (26015 33525 76788 0) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -5190) 5229) nil (26015 33525 76786 0) 0 nil])
([nil nil ((5477 . 5486)) nil (26015 33525 76785 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 5532 . 5533) (nil fontified nil 5486 . 5533) (5486 . 5533)) nil (26015 33525 76784 0) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -5486) 5532) nil (26015 33525 76782 0) 0 nil])
([nil nil ((4997 . 4998)) nil (26015 33525 76781 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 5044 . 5045) (nil fontified nil 4998 . 5045) (4998 . 5045)) nil (26015 33525 76780 0) 0 nil])
([nil nil ((5370 . 5371)) nil (26015 33525 76779 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 5417 . 5418) (nil fontified nil 5371 . 5418) (5371 . 5418)) nil (26015 33525 76777 0) 0 nil])
([nil nil ((4908 . 4917)) nil (26015 33525 76776 0) 0 nil])
([nil nil ((4928 . 4936) (#(" " 0 1 (fontified nil)) . 4927) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (4928 . 4929)) nil (26015 33525 76775 0) 0 nil])
([nil nil ((4952 . 4960) (#(" " 0 1 (fontified nil)) . 4952) (4951 . 4952)) nil (26015 33525 76771 0) 0 nil])
([nil nil ((4984 . 4992) (#(" " 0 1 (fontified nil)) . 4983) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (4984 . 4985)) nil (26015 33525 76769 0) 0 nil])
([nil nil ((5032 . 5040) (#("        " 0 8 (fontified nil)) . 5031) (undo-tree-id71 . -8) (undo-tree-id72 . -8) (undo-tree-id73 . -8) (undo-tree-id74 . -8) (undo-tree-id75 . -8) (undo-tree-id76 . -8) (undo-tree-id77 . -8) (5039 . 5040)) nil (26015 33525 76761 0) 0 nil])
([nil nil ((5456 . 5460) (5079 . 5083) 4823) nil (26015 33525 76753 0) 0 nil])
([nil nil ((5352 . 5370) (#(" " 0 1 (fontified nil)) . 5352) (5351 . 5352)) nil (26015 33525 76751 0) 0 nil])
([nil nil ((5388 . 5406) (#(" " 0 1 (fontified nil)) . 5387) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (5388 . 5389)) nil (26015 33525 76749 0) 0 nil])
([nil nil ((5446 . 5464) (#("       " 0 7 (fontified nil)) . 5446) (#(" " 0 1 (fontified nil)) . 5445) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (5446 . 5447)) nil (26015 33525 76738 0) 0 nil])
([nil nil ((5341 . 5350)) nil (26015 33525 76730 0) 0 nil])
([nil nil ((#("          " 0 10 (fontified t)) . -5443) (undo-tree-id40 . -10) (undo-tree-id41 . -10) (undo-tree-id42 . -10) (undo-tree-id43 . -10) (undo-tree-id44 . -10) (undo-tree-id45 . -10) (undo-tree-id46 . -10) (#("          " 0 10 (fontified t)) . -5395) (undo-tree-id47 . -10) (undo-tree-id48 . -10) (undo-tree-id49 . -10) (undo-tree-id50 . -10) (undo-tree-id51 . -10) (undo-tree-id52 . -10) (undo-tree-id53 . -10) (#("          " 0 10 (fontified t)) . -5369) (undo-tree-id54 . -10) (undo-tree-id55 . -10) (undo-tree-id56 . -10) 5354) nil (26015 33525 76728 0) 0 nil])
([nil nil ((5789 . 5798)) nil (26015 33525 76710 0) 0 nil])
([nil nil ((5809 . 5817) (#(" " 0 1 (fontified nil)) . 5808) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (5809 . 5810)) nil (26015 33525 76709 0) 0 nil])
([nil nil ((5833 . 5841) (#(" " 0 1 (fontified nil)) . 5832) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (5833 . 5834)) nil (26015 33525 76700 0) 0 nil])
([nil nil ((5865 . 5873) (#(" " 0 1 (fontified nil)) . 5864) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (5865 . 5866)) nil (26015 33525 76692 0) 0 nil])
([nil nil ((5911 . 5912)) nil (26015 33525 76684 0) 0 nil])
([nil nil ((5914 . 5918) (#("        " 0 8 (fontified nil)) . 5913) (5913 . 5921) (#("    " 0 4 (fontified nil)) . 5913) (undo-tree-id8 . -4) (undo-tree-id9 . -4) (undo-tree-id10 . -4) (undo-tree-id11 . -4) (undo-tree-id12 . -4) (undo-tree-id13 . -4) (undo-tree-id14 . -4) (undo-tree-id15 . -4) (undo-tree-id16 . -4) (undo-tree-id17 . -4) (undo-tree-id18 . -4) (5912 . 5918)) nil (26015 33525 76682 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 5959 . 5960) (nil fontified nil 5913 . 5960) (5913 . 5960)) nil (26015 33525 76669 0) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . -5959) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) 5960) nil (26015 33525 76667 0) 0 nil])
([nil nil ((6040 . 6042)) nil (26015 33525 77209 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -6041) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) 6042) nil (26015 33536 585863 0) 0 nil] [nil nil ((nil rear-nonsticky nil 6088 . 6089) (nil fontified nil 6042 . 6089) (6042 . 6089)) ((#("        light_bind_group: &'a wgpu::BindGroup,
" 0 8 (fontified nil) 8 24 (face font-lock-variable-name-face fontified nil) 24 26 (fontified nil) 26 27 (face rust-ampersand-face fontified nil) 27 28 (fontified nil) 28 29 (face font-lock-variable-name-face fontified nil) 29 30 (fontified nil) 30 34 (face font-lock-constant-face fontified nil) 34 36 (fontified nil) 36 45 (face font-lock-type-face fontified nil) 45 46 (fontified nil) 46 47 (rear-nonsticky nil fontified nil)) . 6042) (undo-tree-id87 . -47) (undo-tree-id88 . -47) (undo-tree-id89 . -47) (nil rear-nonsticky t 6088 . 6089)) (26015 33525 76629 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 6087 . 6088) (nil fontified nil 6041 . 6088) (6041 . 6088)) nil (26015 33536 585840 0) 0 nil])
nil
([nil nil ((#(" " 0 1 (fontified t)) . -6042) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (#(" " 0 1 (fontified t)) . -6043) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (#(" " 0 1 (fontified t)) . -6044) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (#(" " 0 1 (fontified t)) . -6045) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (#(" " 0 1 (fontified t)) . -6046) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (#(" " 0 1 (fontified t)) . -6047) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (#(" " 0 1 (fontified t)) . -6048) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) 6049) nil (26015 33536 585833 0) 0 nil])
([nil nil ((#("BindGroup," 0 9 (face font-lock-type-face fontified t) 9 10 (fontified t)) . -6070) (undo-tree-id177 . -10) (undo-tree-id178 . -10) (undo-tree-id179 . -10) (undo-tree-id180 . -10) (undo-tree-id181 . -10) (undo-tree-id182 . -10) (undo-tree-id183 . -10) (undo-tree-id184 . -10) (undo-tree-id185 . -10) (undo-tree-id186 . -10) 6080) nil (26015 33536 585723 0) 0 nil])
([nil nil ((#("wgpu::" 0 4 (face font-lock-constant-face fontified t) 4 6 (fontified t)) . -6064) (undo-tree-id166 . -6) (undo-tree-id167 . -6) (undo-tree-id168 . -6) (undo-tree-id169 . -6) (undo-tree-id170 . -6) (undo-tree-id171 . -6) (undo-tree-id172 . -6) (undo-tree-id173 . -6) (undo-tree-id174 . -6) (undo-tree-id175 . -6) (undo-tree-id176 . -6) 6070) nil (26015 33536 585711 0) 0 nil])
([nil nil ((#("a " 0 1 (face font-lock-variable-name-face fontified t) 1 2 (fontified t)) . -6062) (undo-tree-id154 . -2) (undo-tree-id155 . -2) (undo-tree-id156 . -2) (undo-tree-id157 . -2) (undo-tree-id158 . -2) (undo-tree-id159 . -2) (undo-tree-id160 . -2) (undo-tree-id161 . -2) (undo-tree-id162 . -2) (undo-tree-id163 . -2) (undo-tree-id164 . -2) (undo-tree-id165 . -2) 6064) nil (26015 33536 585693 0) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -6058) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (#(" " 0 1 (fontified t)) . -6059) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (#("&" 0 1 (fontified t)) . -6060) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (#("'" 0 1 (fontified t)) . -6061) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) 6062) nil (26015 33536 585678 0) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . -6058) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) 6059) nil (26015 33536 585619 0) 0 nil])
([nil nil ((6524 . 6533) (t 26015 33536 618011 762000)) nil (26015 33559 359605 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 6587 . 6588) (nil fontified nil 6533 . 6588) (6533 . 6588)) nil (26015 33559 359604 0) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -6533) 6578) nil (26015 33559 359602 0) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . -6579) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) 6580) nil (26015 33559 359598 0) 0 nil])
([nil nil ((6249 . 6258) (t 26015 33559 384931 150000)) nil (26015 33567 367815 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 6304 . 6305) (nil fontified nil 6304 . 6305) (nil fontified nil 6303 . 6304) (nil fontified nil 6294 . 6303) (nil fontified nil 6292 . 6294) (nil fontified nil 6288 . 6292) (nil fontified nil 6287 . 6288) (nil fontified nil 6286 . 6287) (nil fontified nil 6285 . 6286) (nil fontified nil 6284 . 6285) (nil fontified nil 6282 . 6284) (nil fontified nil 6266 . 6282) (nil fontified nil 6258 . 6266) (6258 . 6305)) nil (26015 33572 918610 0) 0 nil] [nil nil ((nil rear-nonsticky nil 6312 . 6313) (nil fontified nil 6258 . 6313) (6258 . 6313)) ((#("        self.set_bind_group(2, light_bind_group, &[]);
" 0 8 (fontified nil) 8 12 (face font-lock-keyword-face fontified nil) 12 27 (fontified nil) 27 28 (face (rainbow-delimiters-depth-3-face) fontified nil) 28 49 (fontified nil) 49 50 (face rust-ampersand-face fontified nil) 50 51 (face (rainbow-delimiters-depth-4-face) fontified nil) 51 52 (face (rainbow-delimiters-depth-4-face) fontified nil) 52 53 (face (rainbow-delimiters-depth-3-face) fontified nil) 53 54 (fontified nil) 54 55 (rear-nonsticky nil fontified nil)) . 6258) (undo-tree-id309 . -55) (undo-tree-id310 . -55) (undo-tree-id311 . -55) (nil rear-nonsticky t 6312 . 6313)) (26015 33567 367384 0) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -6258) 6271) nil (26015 33575 125574 0) 0 nil] [nil nil ((#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -6270) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) 6271) ((6270 . 6271)) (26015 33572 918332 0) 0 nil])
nil
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . -6296) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) 6297) nil (26015 33575 125570 0) 0 nil])
nil
([nil nil ((#("    " 0 4 (fontified t)) . -6700) 6647 (t 26015 33575 149925 306000)) nil (26015 33631 94233 0) 0 nil])
([nil nil ((6725 . 6743) (#(" " 0 1 (fontified nil)) . 6724) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (6725 . 6726)) nil (26015 33631 94231 0) 0 nil])
([nil nil ((6761 . 6779) (#(" " 0 1 (fontified nil)) . 6761) (6760 . 6761)) nil (26015 33631 94220 0) 0 nil])
([nil nil ((6817 . 6818)) nil (26015 33631 94219 0) 0 nil])
([nil nil ((6820 . 6824) (#("                  " 0 18 (fontified nil)) . 6819) (6819 . 6837) (#("    " 0 4 (fontified nil)) . 6819) (undo-tree-id467 . -4) (undo-tree-id468 . -4) (undo-tree-id469 . -4) (undo-tree-id470 . -4) (undo-tree-id471 . -4) (undo-tree-id472 . -4) (undo-tree-id473 . -4) (undo-tree-id474 . -4) (undo-tree-id475 . -4) (undo-tree-id476 . -4) (undo-tree-id477 . -4) (6818 . 6824)) nil (26015 33631 94217 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 6865 . 6866) (nil fontified nil 6865 . 6866) (nil fontified nil 6864 . 6865) (nil fontified nil 6855 . 6864) (nil fontified nil 6853 . 6855) (nil fontified nil 6849 . 6853) (nil fontified nil 6848 . 6849) (nil fontified nil 6847 . 6848) (nil fontified nil 6846 . 6847) (nil fontified nil 6845 . 6846) (nil fontified nil 6843 . 6845) (nil fontified nil 6827 . 6843) (nil fontified nil 6819 . 6827) (6819 . 6866)) nil (26015 33631 94204 0) 0 nil])
([nil nil ((6714 . 6723)) nil (26015 33631 94199 0) 0 nil])
([nil nil ((#("          " 0 10 (fontified t)) . -6768) (undo-tree-id452 . -10) (undo-tree-id453 . -10) (undo-tree-id454 . -10) (undo-tree-id455 . -10) (undo-tree-id456 . -10) (undo-tree-id457 . -10) (undo-tree-id458 . -10) (undo-tree-id459 . -10) (undo-tree-id460 . -10) (undo-tree-id461 . -9) (#("          " 0 10 (fontified t)) . -6742) (undo-tree-id462 . -10) (undo-tree-id463 . -10) (undo-tree-id464 . -10) (undo-tree-id465 . -10) (undo-tree-id466 . -10) 6589) nil (26015 33631 94197 0) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . -6854) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) 6855) nil (26015 33631 94181 0) 0 nil])
([nil nil ((6927 . 6928)) nil (26015 33631 94165 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 6974 . 6975) (nil fontified nil 6974 . 6975) (nil fontified nil 6973 . 6974) (nil fontified nil 6964 . 6973) (nil fontified nil 6962 . 6964) (nil fontified nil 6958 . 6962) (nil fontified nil 6957 . 6958) (nil fontified nil 6956 . 6957) (nil fontified nil 6955 . 6956) (nil fontified nil 6954 . 6955) (nil fontified nil 6952 . 6954) (nil fontified nil 6936 . 6952) (nil fontified nil 6928 . 6936) (6928 . 6975)) nil (26015 33631 94163 0) 0 nil])
([nil nil ((#(": &'a wgpu::BindGroup," 0 2 (fontified t) 2 3 (face rust-ampersand-face fontified t) 3 4 (fontified t) 4 5 (face font-lock-variable-name-face fontified t) 5 6 (fontified t) 6 10 (face font-lock-constant-face fontified t) 10 12 (fontified t) 12 21 (face font-lock-type-face fontified t) 21 22 (fontified t)) . -6952) (undo-tree-id420 . -22) (undo-tree-id421 . -22) (undo-tree-id422 . -1) (undo-tree-id423 . -5) (undo-tree-id424 . -10) (undo-tree-id425 . -12) (undo-tree-id426 . -14) (undo-tree-id427 . -15) (undo-tree-id428 . -17) (undo-tree-id429 . -18) (undo-tree-id430 . -19) (undo-tree-id431 . -22) (undo-tree-id432 . -22) (undo-tree-id433 . -22) (undo-tree-id434 . -22) (undo-tree-id435 . -22) 6974) nil (26015 33631 94158 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -6929) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (#(" " 0 1 (fontified t)) . -6930) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (#(" " 0 1 (fontified t)) . -6931) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (#(" " 0 1 (fontified t)) . -6932) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (#(" " 0 1 (fontified t)) . -6933) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (#(" " 0 1 (fontified t)) . -6934) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (#(" " 0 1 (fontified t)) . -6935) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) 6936) nil (26015 33631 94137 0) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . -6945) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) 6946) nil (26015 33631 94062 0) 0 nil])
([nil nil ((7107 . 7116) (t 26015 33631 119476 903000)) nil (26015 33652 941353 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 7162 . 7163) (nil fontified nil 7162 . 7163) (nil fontified nil 7161 . 7162) (nil fontified nil 7152 . 7161) (nil fontified nil 7150 . 7152) (nil fontified nil 7146 . 7150) (nil fontified nil 7145 . 7146) (nil fontified nil 7144 . 7145) (nil fontified nil 7143 . 7144) (nil fontified nil 7142 . 7143) (nil fontified nil 7140 . 7142) (nil fontified nil 7124 . 7140) (nil fontified nil 7116 . 7124) (7116 . 7163)) nil (26015 33652 941351 0) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -7116) 7156) nil (26015 33652 941347 0) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . -7154) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) 7155) nil (26015 33652 941345 0) 0 nil])
([nil nil ((7352 . 7353)) nil (26015 33652 941329 0) 0 nil])
([nil nil ((7353 . 7354)) nil (26015 33652 941329 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 7400 . 7401) (nil fontified nil 7400 . 7401) (nil fontified nil 7399 . 7400) (nil fontified nil 7390 . 7399) (nil fontified nil 7388 . 7390) (nil fontified nil 7384 . 7388) (nil fontified nil 7383 . 7384) (nil fontified nil 7382 . 7383) (nil fontified nil 7381 . 7382) (nil fontified nil 7380 . 7381) (nil fontified nil 7378 . 7380) (nil fontified nil 7362 . 7378) (nil fontified nil 7354 . 7362) (7354 . 7401)) nil (26015 33652 941327 0) 0 nil])
([nil nil ((#(": &'a wgpu::BindGroup," 0 2 (fontified t) 2 3 (face rust-ampersand-face fontified t) 3 4 (fontified t) 4 5 (face font-lock-variable-name-face fontified t) 5 6 (fontified t) 6 10 (face font-lock-constant-face fontified t) 10 12 (fontified t) 12 21 (face font-lock-type-face fontified t) 21 22 (fontified t)) . -7378) (undo-tree-id584 . -22) (undo-tree-id585 . -22) (undo-tree-id586 . -1) (undo-tree-id587 . -2) (undo-tree-id588 . -3) (undo-tree-id589 . -4) (undo-tree-id590 . -6) (undo-tree-id591 . -7) (undo-tree-id592 . -8) (undo-tree-id593 . -10) (undo-tree-id594 . -11) (undo-tree-id595 . -12) (undo-tree-id596 . -13) (undo-tree-id597 . -14) (undo-tree-id598 . -16) (undo-tree-id599 . -18) (undo-tree-id600 . -19) (undo-tree-id601 . -20) (undo-tree-id602 . -21) (undo-tree-id603 . -22) (undo-tree-id604 . -22) (undo-tree-id605 . -22) 7400) nil (26015 33652 941322 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -7354) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (#(" " 0 1 (fontified t)) . -7355) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (#(" " 0 1 (fontified t)) . -7356) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (#(" " 0 1 (fontified t)) . -7357) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (#(" " 0 1 (fontified t)) . -7358) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (#(" " 0 1 (fontified t)) . -7359) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (#(" " 0 1 (fontified t)) . -7360) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (#(" " 0 1 (fontified t)) . -7361) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) 7362) nil (26015 33652 941295 0) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . -7370) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) 7371) nil (26015 33652 941207 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t rear-nonsticky t)) . -5688) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) 5689 (t 26015 33652 967472 434000)) nil (26015 33659 828040 0) 0 nil])
([nil nil ((7392 . 7394) (t 26015 33659 853420 429000)) nil (26015 34077 115150 0) 0 nil])
([nil nil ((#("\\" 0 1 (fontified t)) . -7392) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (#("\\" 0 1 (fontified t)) . -7393) (undo-tree-id634 . -1) (undo-tree-id635 . -1) 7394) nil (26015 34077 115148 0) 0 nil])
([nil nil ((7392 . 7395)) nil (26015 34077 115134 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 9726 . 9727) (nil fontified nil 7395 . 9727) (7395 . 9727)) nil (26015 34077 115130 0) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2523) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (#("u" 0 1 (fontified t)) . -2524) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (#("n" 0 1 (fontified t)) . -2525) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (#("w" 0 1 (fontified t)) . -2526) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (#("r" 0 1 (fontified t)) . -2527) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (#("a" 0 1 (fontified t)) . -2528) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (#("p" 0 1 (fontified t)) . -2529) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -2530) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -2531) (undo-tree-id725 . -1) (undo-tree-id726 . -1) 2532 (t 26015 34077 141364 445000)) nil (26015 41920 980590 0) 0 nil])
([nil nil ((2432 . 2434)) nil (26015 41920 980569 0) 0 nil])
([nil nil ((2434 . 2435)) nil (26015 41920 980568 0) 0 nil])
([nil nil ((#("if " 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t)) . -2432) (undo-tree-id707 . -3) (undo-tree-id708 . -3) 2435) nil (26015 41920 980567 0) 0 nil])
([nil nil ((2454 . 2460)) nil (26015 41920 980564 0) 0 nil])
([nil nil ((2529 . 2532)) nil (26015 41920 980563 0) 0 nil])
([nil nil ((2533 . 2541) (#("            " 0 12 (fontified nil)) . 2532) (undo-tree-id706 . -8) (2540 . 2544) (2531 . 2541)) nil (26015 41920 980562 0) 0 nil])
([nil nil ((2532 . 2544)) nil (26015 41920 980559 0) 0 nil])
([nil nil ((2544 . 2545)) nil (26015 41920 980558 0) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -2544) (undo-tree-id705 . -1) 2545) nil (26015 41920 980557 0) 0 nil])
([nil nil ((2544 . 2546)) nil (26015 41920 980555 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2547 2548 nil nil nil t #s(yas--exit 2549 nil))) #s(yas--exit 2549 nil) 22 nil #s(yas--field 1 2547 2548 nil nil nil t #s(yas--exit 2549 nil)) nil nil)) (2544 . 2548) (#("Ok($1)$0" 0 8 (fontified nil)) . 2544) (2544 . 2552) (#("Ok" 0 2 (fontified nil)) . 2544) (2544 . 2546) (#("Ok(…)" 0 5 (fontified nil)) . -2544) (2544 . 2549) (#("Ok" 0 2 (face font-lock-type-face fontified t)) . -2544) (undo-tree-id704 . -2) 2546) nil (26015 41920 980553 0) 0 nil])
([nil nil ((2547 . 2548)) nil (26015 41920 980549 0) 0 nil])
([nil nil ((apply yas--snippet-revive 2544 2549 #s(yas--snippet nil (#s(yas--field 1 2547 2548 nil nil nil t #s(yas--exit 2549 nil))) #s(yas--exit 2549 nil) 22 nil #s(yas--field 1 2547 2548 nil nil nil t #s(yas--exit 2549 nil)) nil nil))) nil (26015 41920 980548 0) 0 nil])
([nil nil ((2549 . 2555)) nil (26015 41920 980547 0) 0 nil])
([nil nil ((2555 . 2568)) nil (26015 41920 980546 0) 0 nil])
([nil nil ((2568 . 2571)) nil (26015 41920 980545 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2572 2573 nil nil nil t #s(yas--exit 2574 nil))) #s(yas--exit 2574 nil) 23 nil #s(yas--field 1 2572 2573 nil nil nil t #s(yas--exit 2574 nil)) nil nil)) (2568 . 2573) (#("Err($1)$0" 0 9 (fontified nil)) . 2568) (2568 . 2577) (#("Err" 0 3 (fontified nil)) . 2568) (2568 . 2571) (#("Err(…)" 0 6 (fontified nil)) . -2568) (2568 . 2574) (#("Err" 0 3 (face font-lock-type-face fontified t)) . -2568) (undo-tree-id703 . -3) 2571) nil (26015 41920 980543 0) 0 nil])
([nil nil ((2572 . 2573)) nil (26015 41920 980539 0) 0 nil])
([nil nil ((apply yas--snippet-revive 2568 2574 #s(yas--snippet nil (#s(yas--field 1 2572 2573 nil nil nil t #s(yas--exit 2574 nil))) #s(yas--exit 2574 nil) 23 nil #s(yas--field 1 2572 2573 nil nil nil t #s(yas--exit 2574 nil)) nil nil))) nil (26015 41920 980538 0) 0 nil])
([nil nil ((2574 . 2576)) nil (26015 41920 980537 0) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -2575) (undo-tree-id702 . -1) 2576) nil (26015 41920 980536 0) 0 nil])
([nil nil ((2575 . 2577)) nil (26015 41920 980534 0) 0 nil])
([nil nil ((#("?" 0 1 (face rust-question-mark fontified t)) . -2576) (undo-tree-id701 . -1) 2577) nil (26015 41920 980533 0) 0 nil])
([nil nil ((2576 . 2578)) nil (26015 41920 980530 0) 0 nil])
([nil nil ((2578 . 2580)) nil (26015 41920 980529 0) 0 nil])
([nil nil ((2581 . 2593) (#("                " 0 16 (fontified nil)) . 2580) (2580 . 2596) (#("            " 0 12 (fontified nil)) . 2580) (undo-tree-id700 . -12) (2579 . 2593)) nil (26015 41920 980528 0) 0 nil])
([nil nil ((2580 . 2596)) nil (26015 41920 980525 0) 0 nil])
([nil nil ((2596 . 2600)) nil (26015 41920 980524 0) 0 nil])
([nil nil ((84 . 85) (88 . 95) (apply yas--snippet-revive 2596 2603 #s(yas--snippet nil nil #s(yas--exit 2602 nil) 24 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2602 nil) 24 nil nil nil nil)) (2596 . 2603) (#("warn!($0)" 0 9 (fontified nil)) . 2596) (2596 . 2605) (#("warn" 0 4 (fontified nil)) . 2596) (2596 . 2600) (#("warn!(…) (use tracing::warn)" 0 28 (fontified nil)) . -2596) (2596 . 2624) (#("warn" 0 4 (fontified t)) . -2596) (undo-tree-id699 . -4) 2600) nil (26015 41920 980522 0) 0 nil])
([nil nil ((2610 . 2612)) nil (26015 41920 980517 0) 0 nil])
([nil nil ((2611 . 2612)) nil (26015 41920 980516 0) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-string-face fontified t)) . -2611) (undo-tree-id698 . -1) 2612) nil (26015 41920 980515 0) 0 nil])
([nil nil ((2611 . 2632)) nil (26015 41920 980512 0) 0 nil])
([nil nil ((2632 . 2648)) nil (26015 41920 980511 0) 0 nil])
([nil nil ((2648 . 2650)) nil (26015 41920 980510 0) 0 nil])
([nil nil ((2649 . 2651)) nil (26015 41920 980510 0) 0 nil])
([nil nil ((2653 . 2654)) nil (26015 41920 980509 0) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2653) (undo-tree-id697 . -1) 2654) nil (26015 41920 980507 0) 0 nil])
([nil nil ((2653 . 2654)) nil (26015 41920 980505 0) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -2653) (undo-tree-id696 . -1) 2654) nil (26015 41920 980504 0) 0 nil])
([nil nil ((2653 . 2655)) nil (26015 41920 980502 0) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -2654) (undo-tree-id695 . -1) 2655) nil (26015 41920 980501 0) 0 nil])
([nil nil ((2654 . 2656)) nil (26015 41920 980498 0) 0 nil])
([nil nil ((2657 . 2658)) nil (26015 41920 980497 0) 0 nil])
([nil nil ((2652 . 2656)) nil (26015 41920 980497 0) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-string-face fontified t)) . -2655) (undo-tree-id694 . -1) 2656) nil (26015 41920 980495 0) 0 nil])
([nil nil ((#("U" 0 1 (face font-lock-string-face fontified t)) . -2654) (undo-tree-id693 . -1) 2655) nil (26015 41920 980493 0) 0 nil])
([nil nil ((2654 . 2675)) nil (26015 41920 980491 0) 0 nil])
([nil nil ((2675 . 2679)) nil (26015 41920 980490 0) 0 nil])
([nil nil ((#("a" 0 1 (face font-lock-string-face fontified t)) . -2678) (undo-tree-id692 . -1) 2679) nil (26015 41920 980489 0) 0 nil])
([nil nil ((2678 . 2681)) nil (26015 41920 980487 0) 0 nil])
([nil nil ((2687 . 2704)) nil (26015 41920 980486 0) 0 nil])
([nil nil ((2704 . 2706)) nil (26015 41920 980485 0) 0 nil])
([nil nil ((2704 . 2711) (#("te" 0 2 (fontified nil)) . 2704) (2704 . 2706) (#("texture" 0 7 (fontified nil)) . -2704) (2704 . 2711) (#("te" 0 2 (fontified t)) . -2704) (undo-tree-id688 . -2) (undo-tree-id689 . -1) (undo-tree-id690 . -2) (undo-tree-id691 . -2) 2706) nil (26015 41920 980483 0) 0 nil])
([nil nil ((2711 . 2715)) nil (26015 41920 980477 0) 0 nil])
([nil nil ((2713 . 2720) (#("te" 0 2 (fontified nil)) . 2713) (2713 . 2715) (#("Texture" 0 7 (fontified nil)) . -2713) (2713 . 2720) (#("te" 0 2 (fontified t)) . -2713) (undo-tree-id683 . -2) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -2) (undo-tree-id687 . -2) 2715) nil (26015 41920 980475 0) 0 nil])
([nil nil ((2720 . 2722)) nil (26015 41920 980468 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2733 2739 nil nil nil nil #s(yas--field 2 2741 2746 nil nil nil nil #s(yas--field 3 2748 2751 nil nil nil nil #s(yas--field 4 2753 2758 nil nil nil nil #s(yas--exit 2759 nil))))) #s(yas--field 2 2741 2746 nil nil nil nil #s(yas--field 3 2748 2751 nil nil nil nil #s(yas--field 4 2753 2758 nil nil nil nil #s(yas--exit 2759 nil)))) #s(yas--field 3 2748 2751 nil nil nil nil #s(yas--field 4 2753 2758 nil nil nil nil #s(yas--exit 2759 nil))) #s(yas--field 4 2753 2758 nil nil nil nil #s(yas--exit 2759 nil))) #s(yas--exit 2759 nil) 25 nil #s(yas--field 1 2733 2739 nil nil nil nil #s(yas--field 2 2741 2746 nil nil nil nil #s(yas--field 3 2748 2751 nil nil nil nil #s(yas--field 4 2753 2758 nil nil nil nil #s(yas--exit 2759 nil))))) nil nil)) (2722 . 2759) (#("from_image(${1:device}, ${2:queue}, ${3:img}, ${4:label})$0" 0 59 (fontified nil)) . 2722) (2722 . 2781) (#("from_image(…)" 0 13 (fontified nil)) . -2722) (2722 . 2735)) nil (26015 41920 980466 0) 0 nil])
([nil nil ((apply yas--snippet-revive 2722 2759 #s(yas--snippet nil (#s(yas--field 1 2733 2739 nil nil nil nil #s(yas--field 2 2741 2746 nil nil nil nil #s(yas--field 3 2748 2751 nil nil nil nil #s(yas--field 4 2753 2758 nil nil nil nil #s(yas--exit 2759 nil))))) #s(yas--field 2 2741 2746 nil nil nil nil #s(yas--field 3 2748 2751 nil nil nil nil #s(yas--field 4 2753 2758 nil nil nil nil #s(yas--exit 2759 nil)))) #s(yas--field 3 2748 2751 nil nil nil nil #s(yas--field 4 2753 2758 nil nil nil nil #s(yas--exit 2759 nil))) #s(yas--field 4 2753 2758 nil nil nil nil #s(yas--exit 2759 nil))) #s(yas--exit 2759 nil) 25 nil #s(yas--field 1 2733 2739 nil nil nil nil #s(yas--field 2 2741 2746 nil nil nil nil #s(yas--field 3 2748 2751 nil nil nil nil #s(yas--field 4 2753 2758 nil nil nil nil #s(yas--exit 2759 nil))))) nil nil))) nil (26015 41920 980464 0) 0 nil])
([nil nil ((2687 . 2704)) nil (26015 41920 980463 0) 0 nil])
([nil nil ((2704 . 2708)) nil (26015 41920 980462 0) 0 nil])
([nil nil ((2708 . 2719)) nil (26015 41920 980461 0) 0 nil])
([nil nil ((2714 . 2719) (#("image" 0 5 (fontified nil)) . 2714) (2714 . 2719) (#("image" 0 5 (fontified t)) . -2714) (undo-tree-id673 . -5) (undo-tree-id674 . -1) (undo-tree-id675 . -2) (undo-tree-id676 . -2) (undo-tree-id677 . -3) (undo-tree-id678 . -3) (undo-tree-id679 . -4) (undo-tree-id680 . -4) (undo-tree-id681 . -5) (undo-tree-id682 . -5) 2719) nil (26015 41920 980459 0) 0 nil])
([nil nil ((2719 . 2723)) nil (26015 41920 980447 0) 0 nil])
([nil nil ((2721 . 2733) (#("Dy" 0 2 (fontified nil)) . 2721) (2721 . 2723) (#("DynamicImage" 0 12 (fontified nil)) . -2721) (2721 . 2733) (#("Dy" 0 2 (face font-lock-type-face fontified t)) . -2721) (undo-tree-id668 . -2) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -2) (undo-tree-id672 . -2) 2723) nil (26015 41920 980446 0) 0 nil])
([nil nil ((2733 . 2736)) nil (26015 41920 980438 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2745 2746 nil nil nil t #s(yas--field 2 2748 2749 nil nil nil nil #s(yas--exit 2750 nil))) #s(yas--field 2 2748 2749 nil nil nil nil #s(yas--exit 2750 nil))) #s(yas--exit 2750 nil) 26 nil #s(yas--field 1 2745 2746 nil nil nil t #s(yas--field 2 2748 2749 nil nil nil nil #s(yas--exit 2750 nil))) nil nil)) (2735 . 2750) (#("new_rgba8(${1:w}, ${2:h})$0" 0 27 (fontified nil)) . 2735) (2735 . 2762) (#("n" 0 1 (fontified nil)) . 2735) (2735 . 2736) (#("new_rgba8(…)" 0 12 (fontified nil)) . -2735) (2735 . 2747) (#("n" 0 1 (fontified t)) . -2735) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) 2736) nil (26015 41920 980437 0) 0 nil])
([nil nil ((#("w" 0 1 (fontified nil)) . 2746) (undo-tree-id662 . -1) (2745 . 2746)) nil (26015 41920 980428 0) 0 nil])
([nil nil ((apply yas--snippet-revive 2735 2750 #s(yas--snippet nil (#s(yas--field 1 2745 2746 nil nil nil t #s(yas--field 2 2748 2749 nil nil nil nil #s(yas--exit 2750 nil))) #s(yas--field 2 2748 2749 nil nil nil nil #s(yas--exit 2750 nil))) #s(yas--exit 2750 nil) 26 nil #s(yas--field 1 2745 2746 nil nil nil t #s(yas--field 2 2748 2749 nil nil nil nil #s(yas--exit 2750 nil))) nil nil))) nil (26015 41920 980426 0) 0 nil])
([nil nil ((#("h" 0 1 (fontified t)) . -2748) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) 2749) nil (26015 41920 980425 0) 0 nil])
([nil nil ((2748 . 2749)) nil (26015 41920 980421 0) 0 nil])
([nil nil ((2750 . 2751)) nil (26015 41920 980420 0) 0 nil])
([nil nil ((2812 . 2813)) nil (26015 41920 980419 0) 0 nil])
([nil nil ((#("label" 0 5 (fontified t)) . -2818) (undo-tree-id647 . -5) (undo-tree-id648 . -5) (undo-tree-id649 . -5) (undo-tree-id650 . -5) (undo-tree-id651 . -5) (undo-tree-id652 . -5) (undo-tree-id653 . -5) (undo-tree-id654 . -5) (undo-tree-id655 . -5) (undo-tree-id656 . -5) (undo-tree-id657 . -5) (undo-tree-id658 . -5) 2823) nil (26015 41920 980417 0) 0 nil])
([nil nil ((2818 . 2822)) nil (26015 41920 980404 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2823 2830 nil nil nil t #s(yas--exit 2831 nil))) #s(yas--exit 2831 nil) 27 nil #s(yas--field 1 2823 2830 nil nil nil t #s(yas--exit 2831 nil)) nil nil)) (2818 . 2826) (#("Some(${1:()})$0" 0 15 (fontified nil)) . 2818) (2818 . 2833) (#("Some" 0 4 (fontified nil)) . 2818) (2818 . 2822) (#("Some(…)" 0 7 (fontified nil)) . -2818) (2818 . 2825) (#("Some" 0 4 (face font-lock-type-face fontified t)) . -2818) (undo-tree-id637 . -4) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -2) (undo-tree-id641 . -2) (undo-tree-id642 . -2) (undo-tree-id643 . -3) (undo-tree-id644 . -3) (undo-tree-id645 . -4) (undo-tree-id646 . -4) 2822) nil (26015 41920 980977 0) 0 nil])
([nil nil ((2823 . 2827)) nil (26015 41928 961489 0) 0 nil] [nil nil ((#("()" 0 1 (face (rainbow-delimiters-depth-8-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-8-face) fontified nil)) . 2824) (undo-tree-id636 . -2) (2823 . 2824)) ((#(")" 0 1 (face (rainbow-delimiters-depth-7-face) fontified nil)) . 2823) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (2824 . 2826)) (26015 41920 980385 0) 0 nil])
([nil nil ((2827 . 2830)) nil (26015 41928 961488 0) 0 nil])
nil
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-8-face) fontified t)) . -2830) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . 1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-8-face) fontified t)) . -2831) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) 2832) nil (26015 41928 961486 0) 0 nil])
([nil nil ((apply yas--snippet-revive 2818 2831 #s(yas--snippet nil (#s(yas--field 1 2823 2830 nil nil nil t #s(yas--exit 2831 nil))) #s(yas--exit 2831 nil) 27 nil #s(yas--field 1 2823 2830 nil nil nil t #s(yas--exit 2831 nil)) nil nil))) nil (26015 41928 961462 0) 0 nil])
([nil nil ((2832 . 2833)) nil (26015 41928 961458 0) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -2832) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) 2833 (t 26015 41928 989451 316000)) nil (26015 41931 917988 0) 0 nil])
([nil nil ((2832 . 2834) (t 26015 41931 944420 393000)) nil (26015 41958 700409 0) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -2833) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) 2834) nil (26015 41958 700407 0) 0 nil])
([nil nil ((2833 . 2834)) nil (26015 41958 700399 0) 0 nil])
([nil nil ((apply yas--snippet-revive 2833 2841 #s(yas--snippet nil nil #s(yas--exit 2841 nil) 28 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2841 nil) 28 nil nil nil nil)) (2833 . 2841) (#("unwrap()$0" 0 10 (fontified nil)) . 2833) (2833 . 2843) (#("u" 0 1 (fontified nil)) . 2833) (2833 . 2834) (#("unwrap()" 0 8 (fontified nil)) . -2833) (2833 . 2841) (#("u" 0 1 (fontified t)) . -2833) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) 2834) nil (26015 41958 700395 0) 0 nil])
([nil nil ((390 . 395) (t 26015 41958 726777 665000)) nil (26015 42890 41764 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 449 . 450) (nil fontified nil 395 . 450) (395 . 450)) nil (26015 42890 41762 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -395) 417) nil (26015 42890 41761 0) 0 nil])
([nil nil ((1415 . 1431) (#("                " 0 16 (fontified nil)) . 1414) (undo-tree-id771 . -16) (undo-tree-id772 . -16) (undo-tree-id773 . -16) (undo-tree-id774 . -16) (1413 . 1431)) nil (26015 42890 41759 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1945 . 1946) (nil fontified nil 1431 . 1946) (1431 . 1946)) nil (26015 42890 41753 0) 0 nil])
([nil nil ((#("                " 0 16 (fontified t)) . -1431) 1449) nil (26015 42890 41752 0) 0 nil])
([nil nil ((4780 . 4801)) nil (26015 42890 41750 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 4871 . 4872) (nil fontified nil 4801 . 4872) (4801 . 4872)) nil (26015 42890 41749 0) 0 nil])
([nil nil ((4836 . 4840) (#("                " 0 16 (fontified t)) . -4801) 4694) nil (26015 42890 41747 0) 0 nil])
([nil nil ((4919 . 4931) (#("            " 0 12 (fontified nil)) . 4918) (undo-tree-id768 . -12) (undo-tree-id769 . -12) (undo-tree-id770 . -12) (4917 . 4931)) nil (26015 42890 41743 0) 0 nil])
([nil nil ((4919 . 4931) (#("            " 0 12 (fontified nil)) . 4918) (4918 . 4930) (4918 . 4919) (t 26015 42890 70383 937000)) nil (26015 43165 305174 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 8277 . 8278) (nil fontified nil 4931 . 8278) (4931 . 8278)) nil (26015 43165 305172 0) 0 nil])
([nil nil ((7420 . 7436) (#("            " 0 12 (fontified t)) . 7420) (7341 . 7345) (7275 . 7291) (#("            " 0 12 (fontified t)) . 7275) (7196 . 7200) (7130 . 7146) (#("            " 0 12 (fontified t)) . 7130) (7051 . 7055) (6985 . 7001) (#("            " 0 12 (fontified t)) . 6985) (6897 . 6913) (#("            " 0 12 (fontified t)) . 6897) (6804 . 6820) (#("            " 0 12 (fontified t)) . 6804) (6744 . 6760) (#("            " 0 12 (fontified t)) . 6744) (6673 . 6689) (#("            " 0 12 (fontified t)) . 6673) (6584 . 6600) (#("            " 0 12 (fontified t)) . 6584) (6497 . 6513) (#("            " 0 12 (fontified t)) . 6497) (6464 . 6480) (#("            " 0 12 (fontified t)) . 6464) (6395 . 6411) (#("            " 0 12 (fontified t)) . 6395) (6325 . 6341) (#("            " 0 12 (fontified t)) . 6325) (6257 . 6273) (#("            " 0 12 (fontified t)) . 6257) (6203 . 6219) (#("            " 0 12 (fontified t)) . 6203) (6137 . 6153) (#("            " 0 12 (fontified t)) . 6137) (6093 . 6109) (#("            " 0 12 (fontified t)) . 6093) (6050 . 6066) (#("            " 0 12 (fontified t)) . 6050) (6009 . 6025) (#("            " 0 12 (fontified t)) . 6009) (5943 . 5959) (#("            " 0 12 (fontified t)) . 5943) (5896 . 5912) (#("            " 0 12 (fontified t)) . 5896) (5850 . 5866) (#("            " 0 12 (fontified t)) . 5850) (5795 . 5811) (#("            " 0 12 (fontified t)) . 5795) (5726 . 5742) (#("            " 0 12 (fontified t)) . 5726) (5658 . 5674) (#("            " 0 12 (fontified t)) . 5658) (5590 . 5606) (#("            " 0 12 (fontified t)) . 5590) (5522 . 5538) (#("            " 0 12 (fontified t)) . 5522) (5455 . 5471) (#("            " 0 12 (fontified t)) . 5455) (undo-tree-id775 . -9) (5388 . 5404) (#("            " 0 12 (fontified t)) . 5388) (5337 . 5353) (#("            " 0 12 (fontified t)) . 5337) (5287 . 5303) (#("            " 0 12 (fontified t)) . 5287) (5237 . 5253) (#("            " 0 12 (fontified t)) . 5237) (undo-tree-id776 . -7) (5204 . 5208) (5166 . 5170) (5101 . 5105) (5037 . 5041) (4970 . 4974) (#("       " 0 7 (fontified t)) . -4931) 7300) nil (26015 43165 305166 0) 0 nil])
([nil nil ((8324 . 8340) (#("            " 0 12 (fontified t)) . 8324) (8278 . 8294) (#("            " 0 12 (fontified t)) . 8278) (8234 . 8250) (#("            " 0 12 (fontified t)) . 8234) (8171 . 8175) (8124 . 8128) (8109 . 8113) (8045 . 8061) (#("            " 0 12 (fontified t)) . 8045) (7989 . 8005) (#("            " 0 12 (fontified t)) . 7989) (7933 . 7949) (#("            " 0 12 (fontified t)) . 7933) (7874 . 7890) (#("            " 0 12 (fontified t)) . 7874) (7790 . 7794) (7722 . 7738) (#("            " 0 12 (fontified t)) . 7722) (7639 . 7643) (7571 . 7587) (#("            " 0 12 (fontified t)) . 7571) (7488 . 7492) 6268) nil (26015 43165 305136 0) 0 nil])
([nil nil ((8494 . 8498) (8403 . 8419) (#("            " 0 12 (fontified t)) . 8403) 6214) nil (26015 43165 305125 0) 0 nil])
([nil nil ((4199 . 4201) (t 26015 43165 332649 989000)) nil (26015 43179 328661 0) 0 nil])
([nil nil ((#("木" 0 1 (face font-lock-variable-name-face fontified t)) . -4199) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (#("头" 0 1 (face font-lock-variable-name-face fontified t)) . -4200) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) 4201) nil (26015 43179 328658 0) 0 nil])
([nil nil ((4199 . 4203)) nil (26015 43179 328632 0) 0 nil])
([nil nil ((#("mut " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -4199) (undo-tree-id993 . -3) (undo-tree-id994 . -4) (undo-tree-id995 . -4) (undo-tree-id996 . -4) (undo-tree-id997 . -4) (undo-tree-id998 . -4) (undo-tree-id999 . -4) (undo-tree-id1000 . -4) (undo-tree-id1001 . -4) (undo-tree-id1002 . -4) (undo-tree-id1003 . -4) (undo-tree-id1004 . -4) (undo-tree-id1005 . -4) (undo-tree-id1006 . -4) (undo-tree-id1007 . -4) (undo-tree-id1008 . -4) (undo-tree-id1009 . -4) (undo-tree-id1010 . -4) (undo-tree-id1011 . -4) (undo-tree-id1012 . -4) (undo-tree-id1013 . -4) (undo-tree-id1014 . -4) (undo-tree-id1015 . -4) (undo-tree-id1016 . -4) (undo-tree-id1017 . -4) (undo-tree-id1018 . -4) (undo-tree-id1019 . -4) (undo-tree-id1020 . -3) (undo-tree-id1021 . -3) (undo-tree-id1022 . -3) (undo-tree-id1023 . -3) (undo-tree-id1024 . -3) (undo-tree-id1025 . -3) (undo-tree-id1026 . -3) (undo-tree-id1027 . -3) (undo-tree-id1028 . -3) (undo-tree-id1029 . -3) (undo-tree-id1030 . -4) 4203 (t 26015 43179 360904 914000)) nil (26015 44226 547660 0) 0 nil])
([nil nil ((#("           let indices = &m.mesh.indices;
            let mut triangles_included = vec![0; vertices.len()];

            // Calculate tangents and bitangets. We're going to
            // use the triangles, so we need to loop through the
            // indices in chunks of 3
            for c in indices.chunks(3) {
                let v0 = vertices[c[0] as usize];
                let v1 = vertices[c[1] as usize];
                let v2 = vertices[c[2] as usize];

                let pos0: cgmath::Vector3<_> = v0.position.into();
                let pos1: cgmath::Vector3<_> = v1.position.into();
                let pos2: cgmath::Vector3<_> = v2.position.into();

                let uv0: cgmath::Vector2<_> = v0.tex_coords.into();
                let uv1: cgmath::Vector2<_> = v1.tex_coords.into();
                let uv2: cgmath::Vector2<_> = v2.tex_coords.into();

                // Calculate the edges of the triangle
                let delta_pos1 = pos1 - pos0;
                let delta_pos2 = pos2 - pos0;

                // Th" 0 11 (fontified t) 11 14 (face font-lock-keyword-face fontified t) 14 15 (fontified t) 15 22 (face font-lock-variable-name-face fontified t) 22 25 (fontified t) 25 26 (face rust-ampersand-face fontified t) 26 42 (fontified t) 42 54 (fontified t) 54 57 (face font-lock-keyword-face fontified t) 57 58 (fontified t) 58 61 (face font-lock-keyword-face fontified t) 61 62 (fontified t) 62 80 (face font-lock-variable-name-face fontified t) 80 83 (fontified t) 83 87 (face font-lock-preprocessor-face fontified t) 87 88 (face (rainbow-delimiters-depth-4-face) fontified t) 88 103 (fontified t) 103 104 (face (rainbow-delimiters-depth-5-face) fontified t) 104 105 (face (rainbow-delimiters-depth-5-face) fontified t) 105 106 (face (rainbow-delimiters-depth-4-face) fontified t) 106 108 (fontified t) 108 109 (fontified t) 109 121 (fontified t) 121 124 (face font-lock-comment-delimiter-face fontified t) 124 173 (face font-lock-comment-face fontified t) 173 185 (fontified t) 185 188 (face font-lock-comment-delimiter-face fontified t) 188 238 (face font-lock-comment-face fontified t) 238 250 (fontified t) 250 253 (face font-lock-comment-delimiter-face fontified t) 253 276 (face font-lock-comment-face fontified t) 276 288 (fontified t) 288 291 (face font-lock-keyword-face fontified t) 291 292 (fontified t) 292 293 (face font-lock-variable-name-face fontified t) 293 294 (fontified t) 294 296 (face font-lock-keyword-face fontified t) 296 311 (fontified t) 311 312 (face (rainbow-delimiters-depth-4-face) fontified t) 312 313 (fontified t) 313 314 (face (rainbow-delimiters-depth-4-face) fontified t) 314 315 (fontified t) 315 316 (face (rainbow-delimiters-depth-4-face) fontified t) 316 317 (fontified t) 317 333 (fontified t) 333 336 (face font-lock-keyword-face fontified t) 336 337 (fontified t) 337 339 (face font-lock-variable-name-face fontified t) 339 350 (fontified t) 350 351 (face (rainbow-delimiters-depth-5-face) fontified t) 351 352 (fontified t) 352 353 (face (rainbow-delimiters-depth-6-face) fontified t) 353 354 (fontified t) 354 355 (face (rainbow-delimiters-depth-6-face) fontified t) 355 356 (fontified t) 356 358 (face font-lock-keyword-face fontified t) 358 359 (fontified t) 359 364 (face font-lock-type-face fontified t) 364 365 (face (rainbow-delimiters-depth-5-face) fontified t) 365 367 (fontified t) 367 383 (fontified t) 383 386 (face font-lock-keyword-face fontified t) 386 387 (fontified t) 387 389 (face font-lock-variable-name-face fontified t) 389 400 (fontified t) 400 401 (face (rainbow-delimiters-depth-5-face) fontified t) 401 402 (fontified t) 402 403 (face (rainbow-delimiters-depth-6-face) fontified t) 403 404 (fontified t) 404 405 (face (rainbow-delimiters-depth-6-face) fontified t) 405 406 (fontified t) 406 408 (face font-lock-keyword-face fontified t) 408 409 (fontified t) 409 414 (face font-lock-type-face fontified t) 414 415 (face (rainbow-delimiters-depth-5-face) fontified t) 415 417 (fontified t) 417 433 (fontified t) 433 436 (face font-lock-keyword-face fontified t) 436 437 (fontified t) 437 439 (face font-lock-variable-name-face fontified t) 439 450 (fontified t) 450 451 (face (rainbow-delimiters-depth-5-face) fontified t) 451 452 (fontified t) 452 453 (face (rainbow-delimiters-depth-6-face) fontified t) 453 454 (fontified t) 454 455 (face (rainbow-delimiters-depth-6-face) fontified t) 455 456 (fontified t) 456 458 (face font-lock-keyword-face fontified t) 458 459 (fontified t) 459 464 (face font-lock-type-face fontified t) 464 465 (face (rainbow-delimiters-depth-5-face) fontified t) 465 467 (fontified t) 467 468 (fontified t) 468 484 (fontified t) 484 487 (face font-lock-keyword-face fontified t) 487 488 (fontified t) 488 492 (face font-lock-variable-name-face fontified t) 492 494 (fontified t) 494 500 (face font-lock-constant-face fontified t) 500 502 (fontified t) 502 509 (face font-lock-type-face fontified t) 509 510 (face (rainbow-delimiters-depth-5-face) fontified t) 510 511 (fontified t) 511 512 (face (rainbow-delimiters-depth-5-face) fontified t) 512 531 (fontified t) 531 532 (face (rainbow-delimiters-depth-5-face) fontified t) 532 533 (face (rainbow-delimiters-depth-5-face) fontified t) 533 535 (fontified t) 535 551 (fontified t) 551 554 (face font-lock-keyword-face fontified t) 554 555 (fontified t) 555 559 (face font-lock-variable-name-face fontified t) 559 561 (fontified t) 561 567 (face font-lock-constant-face fontified t) 567 569 (fontified t) 569 576 (face font-lock-type-face fontified t) 576 577 (face (rainbow-delimiters-depth-5-face) fontified t) 577 578 (fontified t) 578 579 (face (rainbow-delimiters-depth-5-face) fontified t) 579 598 (fontified t) 598 599 (face (rainbow-delimiters-depth-5-face) fontified t) 599 600 (face (rainbow-delimiters-depth-5-face) fontified t) 600 618 (fontified t) 618 621 (face font-lock-keyword-face fontified t) 621 622 (fontified t) 622 626 (face font-lock-variable-name-face fontified t) 626 628 (fontified t) 628 634 (face font-lock-constant-face fontified t) 634 636 (fontified t) 636 643 (face font-lock-type-face fontified t) 643 644 (face (rainbow-delimiters-depth-5-face) fontified t) 644 645 (fontified t) 645 646 (face (rainbow-delimiters-depth-5-face) fontified t) 646 665 (fontified t) 665 666 (face (rainbow-delimiters-depth-5-face) fontified t) 666 667 (face (rainbow-delimiters-depth-5-face) fontified t) 667 669 (fontified t) 669 670 (fontified t) 670 686 (fontified t) 686 689 (face font-lock-keyword-face fontified t) 689 690 (fontified t) 690 693 (face font-lock-variable-name-face fontified t) 693 695 (fontified t) 695 701 (face font-lock-constant-face fontified t) 701 703 (fontified t) 703 710 (face font-lock-type-face fontified t) 710 711 (face (rainbow-delimiters-depth-5-face) fontified t) 711 712 (fontified t) 712 713 (face (rainbow-delimiters-depth-5-face) fontified t) 713 734 (fontified t) 734 735 (face (rainbow-delimiters-depth-5-face) fontified t) 735 736 (face (rainbow-delimiters-depth-5-face) fontified t) 736 754 (fontified t) 754 757 (face font-lock-keyword-face fontified t) 757 758 (fontified t) 758 761 (face font-lock-variable-name-face fontified t) 761 763 (fontified t) 763 769 (face font-lock-constant-face fontified t) 769 771 (fontified t) 771 778 (face font-lock-type-face fontified t) 778 779 (face (rainbow-delimiters-depth-5-face) fontified t) 779 780 (fontified t) 780 781 (face (rainbow-delimiters-depth-5-face) fontified t) 781 802 (fontified t) 802 803 (face (rainbow-delimiters-depth-5-face) fontified t) 803 804 (face (rainbow-delimiters-depth-5-face) fontified t) 804 806 (fontified t) 806 822 (fontified t) 822 825 (fontified t face font-lock-keyword-face) 825 826 (fontified t) 826 829 (fontified t face font-lock-variable-name-face) 829 831 (fontified t) 831 837 (fontified t face font-lock-constant-face) 837 839 (fontified t) 839 846 (fontified t face font-lock-type-face) 846 847 (fontified t face (rainbow-delimiters-depth-5-face)) 847 848 (fontified t) 848 849 (fontified t face (rainbow-delimiters-depth-5-face)) 849 870 (fontified t) 870 871 (fontified t face (rainbow-delimiters-depth-5-face)) 871 872 (fontified t face (rainbow-delimiters-depth-5-face)) 872 874 (fontified t) 874 875 (fontified t) 875 891 (fontified t) 891 894 (face font-lock-comment-delimiter-face fontified t) 894 930 (face font-lock-comment-face fontified t) 930 946 (fontified t) 946 949 (face font-lock-keyword-face fontified t) 949 950 (fontified t) 950 960 (face font-lock-variable-name-face fontified t) 960 976 (fontified t) 976 992 (fontified t) 992 995 (face font-lock-keyword-face fontified t) 995 996 (fontified t) 996 1006 (face font-lock-variable-name-face fontified t) 1006 1022 (fontified t) 1022 1023 (fontified t) 1023 1039 (fontified t) 1039 1042 (face font-lock-comment-delimiter-face fontified t) 1042 1044 (face font-lock-comment-face fontified t)) . -4920) (undo-tree-id896 . -238) (undo-tree-id897 . -238) (undo-tree-id898 . -11) (undo-tree-id899 . -4) (undo-tree-id900 . -238) (undo-tree-id901 . -1044) (undo-tree-id902 . -238) (undo-tree-id903 . -238) (undo-tree-id904 . -238) (undo-tree-id905 . -238) (undo-tree-id906 . -238) (undo-tree-id907 . -238) (undo-tree-id908 . -238) (undo-tree-id909 . -238) (undo-tree-id910 . -238) (undo-tree-id911 . -238) (undo-tree-id912 . -238) (undo-tree-id913 . -238) (undo-tree-id914 . -238) (undo-tree-id915 . -238) (undo-tree-id916 . -238) (undo-tree-id917 . -238) (undo-tree-id918 . -238) (undo-tree-id919 . -238) (undo-tree-id920 . -238) (undo-tree-id921 . -238) (undo-tree-id922 . -238) (undo-tree-id923 . -238) (undo-tree-id924 . -238) (undo-tree-id925 . -238) (undo-tree-id926 . -238) (undo-tree-id927 . -238) (undo-tree-id928 . -238) (undo-tree-id929 . -238) (undo-tree-id930 . -238) (undo-tree-id931 . -238) (undo-tree-id932 . -238) (undo-tree-id933 . -238) (undo-tree-id934 . -238) (undo-tree-id935 . -238) (undo-tree-id936 . -238) (undo-tree-id937 . -238) (undo-tree-id938 . -238) (undo-tree-id939 . -238) (undo-tree-id940 . -238) (undo-tree-id941 . -238) (undo-tree-id942 . -238) (undo-tree-id943 . -238) (undo-tree-id944 . -238) (undo-tree-id945 . -238) (undo-tree-id946 . -238) (undo-tree-id947 . -238) (undo-tree-id948 . -238) (undo-tree-id949 . -238) (undo-tree-id950 . -238) (undo-tree-id951 . -238) (undo-tree-id952 . -238) (undo-tree-id953 . -238) (undo-tree-id954 . -42) (undo-tree-id955 . -109) (undo-tree-id956 . -276) (undo-tree-id957 . -367) (undo-tree-id958 . -467) (undo-tree-id959 . -535) (undo-tree-id960 . -670) (undo-tree-id961 . -806) (undo-tree-id962 . -874) (undo-tree-id963 . -930) (undo-tree-id964 . -976) (undo-tree-id965 . -1022) (undo-tree-id966 . -1022) (undo-tree-id967 . -1022) (undo-tree-id968 . -1022) (undo-tree-id969 . -1022) (undo-tree-id970 . -1023) (undo-tree-id971 . -930) (undo-tree-id972 . -669) (undo-tree-id973 . -367) (undo-tree-id974 . -108) (undo-tree-id975 . -44) (undo-tree-id976 . -113) (undo-tree-id977 . -324) (undo-tree-id978 . -426) (undo-tree-id979 . -479) (undo-tree-id980 . -614) (undo-tree-id981 . -685) (undo-tree-id982 . -754) (undo-tree-id983 . -874) (undo-tree-id984 . -893) (undo-tree-id985 . -949) (undo-tree-id986 . -996) (undo-tree-id987 . -1022) (undo-tree-id988 . -1043) (undo-tree-id989 . -1044) (undo-tree-id990 . -1023) (undo-tree-id991 . -1044) (undo-tree-id992 . -1044) 5964) nil (26015 44226 547617 0) 0 nil])
([nil current ((#("is will give us a direction to calculate the
                // tangent and bitangent
                let delta_uv1 = uv1 - uv0;
                let delta_uv2 = uv2 - uv0;

                // Solving the following system of equations will
                // give us the tangent and bitangent.
                //     delta_pos1 = delta_uv1.x * T + delta_u.y * B
                //     delta_pos2 = delta_uv2.x * T + delta_uv2.y * B
                // Luckily, the place I found this equation provided
                // the solution!
                let r = 1.0 / (delta_uv1.x * delta_uv2.y - delta_uv1.y * delta_uv2.x);
                let tangent = (delta_pos1 * delta_uv2.y - delta_pos2 * delta_uv1.y) * r;
                // We flip the bitangent to enable right-handed normal
                // maps with wgpu texture coordinate system
                let bitangent = (delta_pos2 * delta_uv1.x - delta_pos1 * delta_uv2.x) * -r;

                // We'll use the same tangent/bitangent for each vertex in the triangle
                vertices[c[0] as usize].tangent =
                    (tangent + cgmath::Vector3::from(vertices[c[0] as usize].tangent)).into();
                vertices[c[1] as usize].tangent =
                    (tangent + cgmath::Vector3::from(vertices[c[1] as usize].tangent)).into();
                vertices[c[2] as usize].tangent =
                    (tangent + cgmath::Vector3::from(vertices[c[2] as usize].tangent)).into();
                vertices[c[0] as usize].bitangent =
                    (bitangent + cgmath::Vector3::from(vertices[c[0] as usize].bitangent)).into();
                vertices[c[1] as usize].bitangent =
                    (bitangent + cgmath::Vector3::from(vertices[c[1] as usize].bitangent)).into();
                vertices[c[2] as usize].bitangent =
                    (bitangent + cgmath::Vector3::from(vertices[c[2] as usize].bitangent)).into();

                // Used to average the tangents/bitangents
                triangles_included[c[0] as usize] += 1;
                triangles_included[c[1] as usize] += 1;
                triangles_included[c[2] as usize] += 1;
            }

            // Average the tangents/bitangents
            for (i, n) in triangles_included.into_iter().enumerate() {
                let denom = 1.0 / n as f32;
                let mut v = &mut vertices[i];
                v.tangent = (cgmath::Vector3::from(v.tangent) * denom).into();
                v.bitangent = (cgmath::Vector3::from(v.bitangent) * denom).into();
            }
            
" 0 45 (fontified t) 45 61 (fontified t) 61 64 (face font-lock-comment-delimiter-face fontified t) 64 86 (face font-lock-comment-face fontified t) 86 102 (fontified t) 102 105 (face font-lock-keyword-face fontified t) 105 106 (fontified t) 106 115 (face font-lock-variable-name-face fontified t) 115 145 (fontified t) 145 148 (face font-lock-keyword-face fontified t) 148 149 (fontified t) 149 158 (face font-lock-variable-name-face fontified t) 158 172 (fontified t) 172 173 (fontified t) 173 189 (fontified t) 189 192 (face font-lock-comment-delimiter-face fontified t) 192 239 (face font-lock-comment-face fontified t) 239 255 (fontified t) 255 258 (face font-lock-comment-delimiter-face fontified t) 258 293 (face font-lock-comment-face fontified t) 293 309 (fontified t) 309 316 (face font-lock-comment-delimiter-face fontified t) 316 361 (face font-lock-comment-face fontified t) 361 377 (fontified t) 377 384 (face font-lock-comment-delimiter-face fontified t) 384 431 (face font-lock-comment-face fontified t) 431 447 (fontified t) 447 450 (face font-lock-comment-delimiter-face fontified t) 450 455 (face font-lock-comment-face fontified t) 455 500 (face font-lock-comment-face fontified t) 500 516 (fontified t) 516 519 (face font-lock-comment-delimiter-face fontified t) 519 533 (face font-lock-comment-face fontified t) 533 549 (fontified t) 549 552 (face font-lock-keyword-face fontified t) 552 553 (fontified t) 553 554 (face font-lock-variable-name-face fontified t) 554 560 (fontified t) 560 563 (fontified t) 563 564 (face (rainbow-delimiters-depth-4-face) fontified t) 564 617 (fontified t) 617 618 (face (rainbow-delimiters-depth-4-face) fontified t) 618 636 (fontified t) 636 639 (face font-lock-keyword-face fontified t) 639 640 (fontified t) 640 647 (face font-lock-variable-name-face fontified t) 647 650 (fontified t) 650 651 (face (rainbow-delimiters-depth-4-face) fontified t) 651 702 (fontified t) 702 703 (face (rainbow-delimiters-depth-4-face) fontified t) 703 725 (fontified t) 725 728 (face font-lock-comment-delimiter-face fontified t) 728 780 (face font-lock-comment-face fontified t) 780 796 (fontified t) 796 799 (face font-lock-comment-delimiter-face fontified t) 799 840 (face font-lock-comment-face fontified t) 840 856 (fontified t) 856 859 (face font-lock-keyword-face fontified t) 859 860 (fontified t) 860 869 (face font-lock-variable-name-face fontified t) 869 872 (fontified t) 872 873 (face (rainbow-delimiters-depth-4-face) fontified t) 873 924 (fontified t) 924 925 (face (rainbow-delimiters-depth-4-face) fontified t) 925 932 (fontified t) 932 933 (fontified t) 933 949 (fontified t) 949 952 (face font-lock-comment-delimiter-face fontified t) 952 1021 (face font-lock-comment-face fontified t) 1021 1037 (fontified t) 1037 1045 (fontified t) 1045 1046 (face (rainbow-delimiters-depth-4-face) fontified t) 1046 1047 (fontified t) 1047 1048 (face (rainbow-delimiters-depth-5-face) fontified t) 1048 1049 (fontified t) 1049 1050 (face (rainbow-delimiters-depth-5-face) fontified t) 1050 1051 (fontified t) 1051 1053 (face font-lock-keyword-face fontified t) 1053 1054 (fontified t) 1054 1059 (face font-lock-type-face fontified t) 1059 1060 (face (rainbow-delimiters-depth-4-face) fontified t) 1060 1071 (fontified t) 1071 1091 (fontified t) 1091 1092 (face (rainbow-delimiters-depth-4-face) fontified t) 1092 1102 (fontified t) 1102 1108 (face font-lock-constant-face fontified t) 1108 1110 (fontified t) 1110 1117 (face font-lock-type-face fontified t) 1117 1123 (fontified t) 1123 1124 (face (rainbow-delimiters-depth-5-face) fontified t) 1124 1132 (fontified t) 1132 1133 (face (rainbow-delimiters-depth-6-face) fontified t) 1133 1134 (fontified t) 1134 1135 (face (rainbow-delimiters-depth-7-face) fontified t) 1135 1136 (fontified t) 1136 1137 (face (rainbow-delimiters-depth-7-face) fontified t) 1137 1138 (fontified t) 1138 1140 (face font-lock-keyword-face fontified t) 1140 1141 (fontified t) 1141 1146 (face font-lock-type-face fontified t) 1146 1147 (face (rainbow-delimiters-depth-6-face) fontified t) 1147 1155 (fontified t) 1155 1156 (face (rainbow-delimiters-depth-5-face) fontified t) 1156 1157 (face (rainbow-delimiters-depth-4-face) fontified t) 1157 1162 (fontified t) 1162 1163 (face (rainbow-delimiters-depth-4-face) fontified t) 1163 1164 (face (rainbow-delimiters-depth-4-face) fontified t) 1164 1182 (fontified t) 1182 1190 (fontified t) 1190 1191 (face (rainbow-delimiters-depth-4-face) fontified t) 1191 1192 (fontified t) 1192 1193 (face (rainbow-delimiters-depth-5-face) fontified t) 1193 1194 (fontified t) 1194 1195 (face (rainbow-delimiters-depth-5-face) fontified t) 1195 1196 (fontified t) 1196 1198 (face font-lock-keyword-face fontified t) 1198 1199 (fontified t) 1199 1204 (face font-lock-type-face fontified t) 1204 1205 (face (rainbow-delimiters-depth-4-face) fontified t) 1205 1216 (fontified t) 1216 1236 (fontified t) 1236 1237 (face (rainbow-delimiters-depth-4-face) fontified t) 1237 1247 (fontified t) 1247 1253 (face font-lock-constant-face fontified t) 1253 1255 (fontified t) 1255 1262 (face font-lock-type-face fontified t) 1262 1268 (fontified t) 1268 1269 (face (rainbow-delimiters-depth-5-face) fontified t) 1269 1277 (fontified t) 1277 1278 (face (rainbow-delimiters-depth-6-face) fontified t) 1278 1279 (fontified t) 1279 1280 (face (rainbow-delimiters-depth-7-face) fontified t) 1280 1281 (fontified t) 1281 1282 (face (rainbow-delimiters-depth-7-face) fontified t) 1282 1283 (fontified t) 1283 1285 (face font-lock-keyword-face fontified t) 1285 1286 (fontified t) 1286 1291 (face font-lock-type-face fontified t) 1291 1292 (face (rainbow-delimiters-depth-6-face) fontified t) 1292 1300 (fontified t) 1300 1301 (face (rainbow-delimiters-depth-5-face) fontified t) 1301 1302 (face (rainbow-delimiters-depth-4-face) fontified t) 1302 1307 (fontified t) 1307 1308 (face (rainbow-delimiters-depth-4-face) fontified t) 1308 1309 (face (rainbow-delimiters-depth-4-face) fontified t) 1309 1327 (fontified t) 1327 1330 (fontified t) 1330 1335 (fontified t) 1335 1336 (face (rainbow-delimiters-depth-4-face) fontified t) 1336 1337 (fontified t) 1337 1338 (face (rainbow-delimiters-depth-5-face) fontified t) 1338 1339 (fontified t) 1339 1340 (face (rainbow-delimiters-depth-5-face) fontified t) 1340 1341 (fontified t) 1341 1343 (face font-lock-keyword-face fontified t) 1343 1344 (fontified t) 1344 1349 (face font-lock-type-face fontified t) 1349 1350 (face (rainbow-delimiters-depth-4-face) fontified t) 1350 1361 (fontified t) 1361 1381 (fontified t) 1381 1382 (face (rainbow-delimiters-depth-4-face) fontified t) 1382 1392 (fontified t) 1392 1398 (face font-lock-constant-face fontified t) 1398 1400 (fontified t) 1400 1407 (face font-lock-type-face fontified t) 1407 1413 (fontified t) 1413 1414 (face (rainbow-delimiters-depth-5-face) fontified t) 1414 1422 (fontified t) 1422 1423 (face (rainbow-delimiters-depth-6-face) fontified t) 1423 1424 (fontified t) 1424 1425 (face (rainbow-delimiters-depth-7-face) fontified t) 1425 1426 (fontified t) 1426 1427 (face (rainbow-delimiters-depth-7-face) fontified t) 1427 1428 (fontified t) 1428 1430 (face font-lock-keyword-face fontified t) 1430 1431 (fontified t) 1431 1432 (face font-lock-type-face fontified t) 1432 1436 (face font-lock-type-face fontified t) 1436 1437 (face (rainbow-delimiters-depth-6-face) fontified t) 1437 1445 (fontified t) 1445 1446 (face (rainbow-delimiters-depth-5-face) fontified t) 1446 1447 (face (rainbow-delimiters-depth-4-face) fontified t) 1447 1452 (fontified t) 1452 1453 (face (rainbow-delimiters-depth-4-face) fontified t) 1453 1454 (face (rainbow-delimiters-depth-4-face) fontified t) 1454 1456 (fontified t) 1456 1472 (fontified t) 1472 1480 (fontified t) 1480 1481 (face (rainbow-delimiters-depth-4-face) fontified t) 1481 1482 (fontified t) 1482 1483 (face (rainbow-delimiters-depth-5-face) fontified t) 1483 1484 (fontified t) 1484 1485 (face (rainbow-delimiters-depth-5-face) fontified t) 1485 1486 (fontified t) 1486 1488 (face font-lock-keyword-face fontified t) 1488 1489 (fontified t) 1489 1494 (face font-lock-type-face fontified t) 1494 1495 (face (rainbow-delimiters-depth-4-face) fontified t) 1495 1499 (fontified t) 1499 1508 (fontified t) 1508 1528 (fontified t) 1528 1529 (face (rainbow-delimiters-depth-4-face) fontified t) 1529 1541 (fontified t) 1541 1545 (face font-lock-constant-face fontified t) 1545 1547 (fontified t face font-lock-constant-face) 1547 1549 (fontified t) 1549 1556 (fontified t face font-lock-type-face) 1556 1562 (fontified t) 1562 1563 (fontified t face (rainbow-delimiters-depth-5-face)) 1563 1571 (fontified t) 1571 1572 (fontified t face (rainbow-delimiters-depth-6-face)) 1572 1573 (fontified t) 1573 1574 (fontified t face (rainbow-delimiters-depth-7-face)) 1574 1575 (fontified t) 1575 1576 (fontified t face (rainbow-delimiters-depth-7-face)) 1576 1577 (fontified t) 1577 1579 (fontified t face font-lock-keyword-face) 1579 1580 (fontified t) 1580 1585 (fontified t face font-lock-type-face) 1585 1586 (fontified t face (rainbow-delimiters-depth-6-face)) 1586 1596 (fontified t) 1596 1597 (fontified t face (rainbow-delimiters-depth-5-face)) 1597 1598 (fontified t face (rainbow-delimiters-depth-4-face)) 1598 1603 (fontified t) 1603 1604 (fontified t face (rainbow-delimiters-depth-4-face)) 1604 1605 (fontified t face (rainbow-delimiters-depth-4-face)) 1605 1607 (fontified t) 1607 1623 (fontified t) 1623 1631 (fontified t) 1631 1632 (face (rainbow-delimiters-depth-4-face) fontified t) 1632 1633 (fontified t) 1633 1634 (face (rainbow-delimiters-depth-5-face) fontified t) 1634 1635 (fontified t) 1635 1636 (face (rainbow-delimiters-depth-5-face) fontified t) 1636 1637 (fontified t) 1637 1639 (face font-lock-keyword-face fontified t) 1639 1640 (fontified t) 1640 1645 (face font-lock-type-face fontified t) 1645 1646 (face (rainbow-delimiters-depth-4-face) fontified t) 1646 1659 (fontified t) 1659 1679 (fontified t) 1679 1680 (face (rainbow-delimiters-depth-4-face) fontified t) 1680 1692 (fontified t) 1692 1698 (face font-lock-constant-face fontified t) 1698 1700 (fontified t) 1700 1707 (face font-lock-type-face fontified t) 1707 1713 (fontified t) 1713 1714 (face (rainbow-delimiters-depth-5-face) fontified t) 1714 1722 (fontified t) 1722 1723 (face (rainbow-delimiters-depth-6-face) fontified t) 1723 1724 (fontified t) 1724 1725 (face (rainbow-delimiters-depth-7-face) fontified t) 1725 1726 (fontified t) 1726 1727 (face (rainbow-delimiters-depth-7-face) fontified t) 1727 1728 (fontified t) 1728 1730 (face font-lock-keyword-face fontified t) 1730 1731 (fontified t) 1731 1736 (face font-lock-type-face fontified t) 1736 1737 (face (rainbow-delimiters-depth-6-face) fontified t) 1737 1747 (fontified t) 1747 1748 (face (rainbow-delimiters-depth-5-face) fontified t) 1748 1749 (face (rainbow-delimiters-depth-4-face) fontified t) 1749 1754 (fontified t) 1754 1755 (face (rainbow-delimiters-depth-4-face) fontified t) 1755 1756 (face (rainbow-delimiters-depth-4-face) fontified t) 1756 1774 (fontified t) 1774 1782 (fontified t) 1782 1783 (face (rainbow-delimiters-depth-4-face) fontified t) 1783 1784 (fontified t) 1784 1785 (face (rainbow-delimiters-depth-5-face) fontified t) 1785 1786 (fontified t) 1786 1787 (face (rainbow-delimiters-depth-5-face) fontified t) 1787 1788 (fontified t) 1788 1790 (face font-lock-keyword-face fontified t) 1790 1791 (fontified t) 1791 1796 (face font-lock-type-face fontified t) 1796 1797 (face (rainbow-delimiters-depth-4-face) fontified t) 1797 1810 (fontified t) 1810 1830 (fontified t) 1830 1831 (face (rainbow-delimiters-depth-4-face) fontified t) 1831 1843 (fontified t) 1843 1849 (face font-lock-constant-face fontified t) 1849 1851 (fontified t) 1851 1858 (face font-lock-type-face fontified t) 1858 1864 (fontified t) 1864 1865 (face (rainbow-delimiters-depth-5-face) fontified t) 1865 1873 (fontified t) 1873 1874 (face (rainbow-delimiters-depth-6-face) fontified t) 1874 1875 (fontified t) 1875 1876 (face (rainbow-delimiters-depth-7-face) fontified t) 1876 1877 (fontified t) 1877 1878 (face (rainbow-delimiters-depth-7-face) fontified t) 1878 1879 (fontified t) 1879 1881 (face font-lock-keyword-face fontified t) 1881 1882 (fontified t) 1882 1887 (face font-lock-type-face fontified t) 1887 1888 (face (rainbow-delimiters-depth-6-face) fontified t) 1888 1898 (fontified t) 1898 1899 (face (rainbow-delimiters-depth-5-face) fontified t) 1899 1900 (face (rainbow-delimiters-depth-4-face) fontified t) 1900 1905 (fontified t) 1905 1906 (face (rainbow-delimiters-depth-4-face) fontified t) 1906 1907 (face (rainbow-delimiters-depth-4-face) fontified t) 1907 1909 (fontified t) 1909 1910 (fontified t) 1910 1926 (fontified t) 1926 1929 (face font-lock-comment-delimiter-face fontified t) 1929 1969 (face font-lock-comment-face fontified t) 1969 1985 (fontified t) 1985 2003 (fontified t) 2003 2004 (face (rainbow-delimiters-depth-4-face) fontified t) 2004 2005 (fontified t) 2005 2006 (face (rainbow-delimiters-depth-5-face) fontified t) 2006 2007 (fontified t) 2007 2008 (face (rainbow-delimiters-depth-5-face) fontified t) 2008 2009 (fontified t) 2009 2011 (face font-lock-keyword-face fontified t) 2011 2012 (fontified t) 2012 2017 (face font-lock-type-face fontified t) 2017 2018 (face (rainbow-delimiters-depth-4-face) fontified t) 2018 2041 (fontified t) 2041 2059 (fontified t) 2059 2060 (face (rainbow-delimiters-depth-4-face) fontified t) 2060 2061 (fontified t) 2061 2062 (face (rainbow-delimiters-depth-5-face) fontified t) 2062 2063 (fontified t) 2063 2064 (face (rainbow-delimiters-depth-5-face) fontified t) 2064 2065 (fontified t) 2065 2067 (face font-lock-keyword-face fontified t) 2067 2068 (fontified t) 2068 2073 (face font-lock-type-face fontified t) 2073 2074 (face (rainbow-delimiters-depth-4-face) fontified t) 2074 2097 (fontified t) 2097 2115 (fontified t) 2115 2116 (face (rainbow-delimiters-depth-4-face) fontified t) 2116 2117 (fontified t) 2117 2118 (face (rainbow-delimiters-depth-5-face) fontified t) 2118 2119 (fontified t) 2119 2120 (face (rainbow-delimiters-depth-5-face) fontified t) 2120 2121 (fontified t) 2121 2123 (face font-lock-keyword-face fontified t) 2123 2124 (fontified t) 2124 2129 (face font-lock-type-face fontified t) 2129 2130 (face (rainbow-delimiters-depth-4-face) fontified t) 2130 2137 (fontified t) 2137 2149 (fontified t) 2149 2150 (face (rainbow-delimiters-depth-3-face) fontified t) 2150 2151 (fontified t) 2151 2152 (fontified t) 2152 2164 (fontified t) 2164 2167 (face font-lock-comment-delimiter-face fontified t) 2167 2199 (face font-lock-comment-face fontified t) 2199 2211 (fontified t) 2211 2214 (face font-lock-keyword-face fontified t) 2214 2215 (fontified t) 2215 2216 (face (rainbow-delimiters-depth-3-face) fontified t) 2216 2220 (fontified t) 2220 2221 (face (rainbow-delimiters-depth-3-face) fontified t) 2221 2222 (fontified t) 2222 2224 (face font-lock-keyword-face fontified t) 2224 2253 (fontified t) 2253 2254 (face (rainbow-delimiters-depth-3-face) fontified t) 2254 2255 (face (rainbow-delimiters-depth-3-face) fontified t) 2255 2265 (fontified t) 2265 2266 (face (rainbow-delimiters-depth-3-face) fontified t) 2266 2267 (face (rainbow-delimiters-depth-3-face) fontified t) 2267 2268 (fontified t) 2268 2269 (face (rainbow-delimiters-depth-3-face) fontified t) 2269 2286 (fontified t) 2286 2289 (face font-lock-keyword-face fontified t) 2289 2290 (fontified t) 2290 2295 (face font-lock-variable-name-face fontified t) 2295 2306 (fontified t) 2306 2308 (face font-lock-keyword-face fontified t) 2308 2309 (fontified t) 2309 2312 (face font-lock-type-face fontified t) 2312 2330 (fontified t) 2330 2333 (face font-lock-keyword-face fontified t) 2333 2334 (fontified t) 2334 2337 (face font-lock-keyword-face fontified t) 2337 2338 (fontified t) 2338 2339 (face font-lock-variable-name-face fontified t) 2339 2342 (fontified t) 2342 2343 (face rust-ampersand-face fontified t) 2343 2346 (face font-lock-keyword-face fontified t) 2346 2355 (fontified t) 2355 2356 (face (rainbow-delimiters-depth-4-face) fontified t) 2356 2357 (fontified t) 2357 2358 (face (rainbow-delimiters-depth-4-face) fontified t) 2358 2376 (fontified t) 2376 2388 (fontified t) 2388 2389 (face (rainbow-delimiters-depth-4-face) fontified t) 2389 2395 (face font-lock-constant-face fontified t) 2395 2397 (fontified t) 2397 2404 (face font-lock-type-face fontified t) 2404 2410 (fontified t) 2410 2411 (face (rainbow-delimiters-depth-5-face) fontified t) 2411 2420 (fontified t) 2420 2421 (face (rainbow-delimiters-depth-5-face) fontified t) 2421 2429 (fontified t) 2429 2430 (face (rainbow-delimiters-depth-4-face) fontified t) 2430 2435 (fontified t) 2435 2436 (face (rainbow-delimiters-depth-4-face) fontified t) 2436 2437 (face (rainbow-delimiters-depth-4-face) fontified t) 2437 2439 (fontified t) 2439 2455 (fontified t) 2455 2469 (fontified t) 2469 2470 (face (rainbow-delimiters-depth-4-face) fontified t) 2470 2476 (face font-lock-constant-face fontified t) 2476 2478 (fontified t) 2478 2485 (face font-lock-type-face fontified t) 2485 2491 (fontified t) 2491 2492 (face (rainbow-delimiters-depth-5-face) fontified t) 2492 2503 (fontified t) 2503 2504 (face (rainbow-delimiters-depth-5-face) fontified t) 2504 2512 (fontified t) 2512 2513 (face (rainbow-delimiters-depth-4-face) fontified t) 2513 2518 (fontified t) 2518 2519 (face (rainbow-delimiters-depth-4-face) fontified t) 2519 2520 (face (rainbow-delimiters-depth-4-face) fontified t) 2520 2522 (fontified t) 2522 2528 (fontified t) 2528 2534 (fontified t) 2534 2535 (face (rainbow-delimiters-depth-3-face) fontified t rear-nonsticky t) 2535 2536 (fontified t) 2536 2549 (fontified t)) . 4920) (undo-tree-id794 . -2383) (undo-tree-id795 . -2523) (undo-tree-id796 . -2549) (undo-tree-id797 . -45) (undo-tree-id798 . -45) (undo-tree-id799 . -86) (undo-tree-id800 . -129) (undo-tree-id801 . -172) (undo-tree-id802 . -173) (undo-tree-id803 . -173) (undo-tree-id804 . -173) (undo-tree-id805 . -173) (undo-tree-id806 . -173) (undo-tree-id807 . -239) (undo-tree-id808 . -293) (undo-tree-id809 . -500) (undo-tree-id810 . -620) (undo-tree-id811 . -709) (undo-tree-id812 . -840) (undo-tree-id813 . -932) (undo-tree-id814 . -933) (undo-tree-id815 . -933) (undo-tree-id816 . -933) (undo-tree-id817 . -933) (undo-tree-id818 . -933) (undo-tree-id819 . -933) (undo-tree-id820 . -933) (undo-tree-id821 . -933) (undo-tree-id822 . -933) (undo-tree-id823 . -933) (undo-tree-id824 . -933) (undo-tree-id825 . -933) (undo-tree-id826 . -933) (undo-tree-id827 . -933) (undo-tree-id828 . -933) (undo-tree-id829 . -933) (undo-tree-id830 . -933) (undo-tree-id831 . -2535) (undo-tree-id832 . -2535) (undo-tree-id833 . -2535) (undo-tree-id834 . -2462) (undo-tree-id835 . -2290) (undo-tree-id836 . -2170) (undo-tree-id837 . -2040) (undo-tree-id838 . -1923) (undo-tree-id839 . -1671) (undo-tree-id840 . -1467) (undo-tree-id841 . -1321) (undo-tree-id842 . -1320) (undo-tree-id843 . -1319) (undo-tree-id844 . -1318) (undo-tree-id845 . -1222) (undo-tree-id846 . -1221) (undo-tree-id847 . -1219) (undo-tree-id848 . -1218) (undo-tree-id849 . -1219) (undo-tree-id850 . -1218) (undo-tree-id851 . -1217) (undo-tree-id852 . -935) (undo-tree-id853 . -932) (undo-tree-id854 . -840) (undo-tree-id855 . -780) (undo-tree-id856 . -709) (undo-tree-id857 . -620) (undo-tree-id858 . -533) (undo-tree-id859 . -500) (undo-tree-id860 . -431) (undo-tree-id861 . -361) (undo-tree-id862 . -293) (undo-tree-id863 . -239) (undo-tree-id864 . -173) (undo-tree-id865 . -172) (undo-tree-id866 . -129) (undo-tree-id867 . -132) (undo-tree-id868 . -172) (undo-tree-id869 . -176) (undo-tree-id870 . -365) (undo-tree-id871 . -625) (undo-tree-id872 . -932) (undo-tree-id873 . -937) (undo-tree-id874 . -1074) (undo-tree-id875 . -45) (undo-tree-id876 . -2535) (undo-tree-id877 . -2535) (undo-tree-id878 . -172) (undo-tree-id879 . -174) (undo-tree-id880 . -932) (undo-tree-id881 . -934) (undo-tree-id882 . -1759) (undo-tree-id883 . -1909) (undo-tree-id884 . -1911) (undo-tree-id885 . -2151) (undo-tree-id886 . -2153) (undo-tree-id887 . -2523) (undo-tree-id888 . -2523) (undo-tree-id889 . -2523) (undo-tree-id890 . -2523) (undo-tree-id891 . -2523) (undo-tree-id892 . -2523) (undo-tree-id893 . -2549) (undo-tree-id894 . -2549) (undo-tree-id895 . -2549) 7469) nil (26015 44226 547502 0) 0 nil])
nil
