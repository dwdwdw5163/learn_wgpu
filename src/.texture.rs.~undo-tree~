(undo-tree-save-format-version . 1)
"8a1848497166f51fdd183920e01f67cdbf77a72b"
[nil nil nil nil (26011 38129 360846 0) 0 nil]
([nil nil ((nil rear-nonsticky nil 2440 . 2441) (nil fontified nil 1 . 2441) (1 . 2441) (t 26011 37996 656086 640000)) nil (26011 38129 360841 0) 0 nil])
([nil nil ((2441 . 2442) (t 26011 38129 363452 745000)) nil (26011 51903 296605 0) 0 nil])
([nil nil ((2441 . 2445) (#("    " 0 4 (fontified nil)) . 2440) (undo-tree-id101 . -4) (2440 . 2445) (#("    " 0 4 (fontified nil)) . 2439) (undo-tree-id102 . -4) (2438 . 2444)) nil (26011 51903 296603 0) 0 nil])
([nil nil ((2445 . 2466)) nil (26011 51903 296599 0) 0 nil])
([nil nil ((2466 . 2468)) nil (26011 51903 296598 0) 0 nil])
([nil nil ((#("p" 0 1 (face font-lock-function-name-face fontified t)) . -2466) (undo-tree-id99 . -1) (#("i" 0 1 (face font-lock-function-name-face fontified t)) . -2467) (undo-tree-id100 . -1) 2468) nil (26011 51903 296597 0) 0 nil])
([nil nil ((2466 . 2471)) nil (26011 51903 296594 0) 0 nil])
([nil nil ((2470 . 2471)) nil (26011 51903 296593 0) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -2470) (undo-tree-id98 . -1) 2471) nil (26011 51903 296591 0) 0 nil])
([nil nil ((2470 . 2475)) nil (26011 51903 296589 0) 0 nil])
([nil nil ((2476 . 2479)) nil (26011 51903 296588 0) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -2477) (undo-tree-id96 . -1) (#("}" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -2478) (undo-tree-id97 . -1) 2479) nil (26011 51903 296587 0) 0 nil])
([nil nil ((2477 . 2479)) nil (26011 51903 296579 0) 0 nil])
([nil nil ((2480 . 2484) (#("        " 0 8 (fontified nil)) . 2479) (2479 . 2487) (#("    " 0 4 (fontified nil)) . 2479) (undo-tree-id95 . -4) (2478 . 2484)) nil (26011 51903 296577 0) 0 nil])
([nil nil ((2477 . 2481)) nil (26011 51903 296574 0) 0 nil])
([nil nil ((#("W" 0 1 (face font-lock-type-face fontified t)) . -2480) (undo-tree-id93 . -1) (undo-tree-id94 . -1) 2481) nil (26011 51903 296573 0) 0 nil])
([nil nil ((2480 . 2482)) nil (26011 51903 296570 0) 0 nil])
([nil nil ((2480 . 2484) (#("wg" 0 2 (fontified nil)) . 2480) (2480 . 2482) (#("wgpu" 0 4 (fontified nil)) . -2480) (2480 . 2484) (#("wg" 0 2 (fontified t)) . -2480) (undo-tree-id87 . -2) (undo-tree-id88 . -1) (undo-tree-id89 . -2) (undo-tree-id90 . -2) (undo-tree-id91 . -2) (undo-tree-id92 . -2) 2482) nil (26011 51903 296568 0) 0 nil])
([nil nil ((2484 . 2490)) nil (26011 51903 296560 0) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -2486) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (#("i" 0 1 (fontified t)) . -2487) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (#("n" 0 1 (fontified t)) . -2488) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (#("d" 0 1 (fontified t)) . -2489) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) 2490) nil (26011 51903 296557 0) 0 nil])
([nil nil ((2486 . 2490)) nil (26011 51903 296523 0) 0 nil])
([nil nil ((2486 . 2495) (#("Bind" 0 4 (fontified nil)) . 2486) (2486 . 2490) (#("BindGroup" 0 9 (fontified nil)) . -2486) (2486 . 2495) (#("Bind" 0 4 (face font-lock-type-face fontified t)) . -2486) (undo-tree-id51 . -4) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -2) (undo-tree-id55 . -2) 2490) nil (26011 51903 296521 0) 0 nil])
([nil nil ((2495 . 2496)) nil (26011 51903 296514 0) 0 nil])
([nil nil ((nil fontified nil 3184 . 3185) (nil fontified nil 3183 . 3184) (nil fontified nil 3182 . 3183) (nil fontified nil 3173 . 3182) (nil fontified nil 3172 . 3173) (nil fontified nil 3158 . 3172) (nil fontified nil 3157 . 3158) (nil fontified nil 3137 . 3157) (nil fontified nil 3136 . 3137) (nil fontified nil 3132 . 3136) (nil fontified nil 3130 . 3132) (nil fontified nil 3125 . 3130) (nil fontified nil 3107 . 3125) (nil fontified nil 3106 . 3107) (nil fontified nil 3089 . 3106) (nil fontified nil 3088 . 3089) (nil fontified nil 3068 . 3088) (nil fontified nil 3059 . 3068) (nil fontified nil 3056 . 3059) (nil fontified nil 3054 . 3056) (nil fontified nil 3053 . 3054) (nil fontified nil 3030 . 3053) (nil fontified nil 3029 . 3030) (nil fontified nil 3028 . 3029) (nil fontified nil 3021 . 3028) (nil fontified nil 3019 . 3021) (nil fontified nil 3004 . 3019) (nil fontified nil 3002 . 3004) (nil fontified nil 2998 . 3002) (nil fontified nil 2996 . 2998) (nil fontified nil 2988 . 2996) (nil fontified nil 2964 . 2988) (nil fontified nil 2959 . 2964) (nil fontified nil 2952 . 2959) (nil fontified nil 2932 . 2952) (nil fontified nil 2928 . 2932) (nil fontified nil 2927 . 2928) (nil fontified nil 2926 . 2927) (nil fontified nil 2925 . 2926) (nil fontified nil 2923 . 2925) (nil fontified nil 2922 . 2923) (nil fontified nil 2911 . 2922) (nil fontified nil 2909 . 2911) (nil fontified nil 2905 . 2909) (nil fontified nil 2883 . 2905) (nil fontified nil 2882 . 2883) (nil fontified nil 2862 . 2882) (nil fontified nil 2853 . 2862) (nil fontified nil 2850 . 2853) (nil fontified nil 2848 . 2850) (nil fontified nil 2847 . 2848) (nil fontified nil 2827 . 2847) (nil fontified nil 2826 . 2827) (nil fontified nil 2825 . 2826) (nil fontified nil 2814 . 2825) (nil fontified nil 2812 . 2814) (nil fontified nil 2804 . 2812) (nil fontified nil 2797 . 2804) (nil fontified nil 2795 . 2797) (nil fontified nil 2794 . 2795) (nil fontified nil 2791 . 2794) (nil fontified nil 2789 . 2791) (nil fontified nil 2781 . 2789) (nil fontified nil 2752 . 2781) (nil fontified nil 2745 . 2752) (nil fontified nil 2721 . 2745) (nil fontified nil 2720 . 2721) (nil fontified nil 2719 . 2720) (nil fontified nil 2718 . 2719) (nil fontified nil 2704 . 2718) (nil fontified nil 2702 . 2704) (nil fontified nil 2698 . 2702) (nil fontified nil 2686 . 2698) (nil fontified nil 2679 . 2686) (nil fontified nil 2678 . 2679) (nil fontified nil 2677 . 2678) (nil fontified nil 2676 . 2677) (nil fontified nil 2675 . 2676) (nil fontified nil 2673 . 2675) (nil fontified nil 2666 . 2673) (nil fontified nil 2650 . 2666) (nil fontified nil 2641 . 2650) (nil fontified nil 2629 . 2641) (nil fontified nil 2623 . 2629) (nil fontified nil 2622 . 2623) (nil fontified nil 2620 . 2622) (nil fontified nil 2614 . 2620) (nil fontified nil 2604 . 2614) (nil fontified nil 2598 . 2604) (nil fontified nil 2597 . 2598) (nil fontified nil 2596 . 2597) (nil fontified nil 2595 . 2596) (nil fontified nil 2585 . 2595) (nil fontified nil 2576 . 2585) (nil fontified nil 2574 . 2576) (nil fontified nil 2570 . 2574) (nil fontified nil 2569 . 2570) (nil fontified nil 2567 . 2569) (nil fontified nil 2557 . 2567) (nil fontified nil 2556 . 2557) (nil fontified nil 2555 . 2556) (nil fontified nil 2554 . 2555) (nil fontified nil 2528 . 2554) (nil fontified nil 2510 . 2528) (nil fontified nil 2509 . 2510) (nil fontified nil 2506 . 2509) (nil fontified nil 2498 . 2506) (2498 . 3185)) nil (26011 51903 296508 0) 0 nil])
([nil nil ((3185 . 3193)) nil (26011 51903 296479 0) 0 nil])
([nil nil ((#("texture" 0 7 (fontified t)) . -2835) (undo-tree-id43 . -7) (undo-tree-id44 . -7) (undo-tree-id45 . -7) (undo-tree-id46 . -7) (undo-tree-id47 . -7) (undo-tree-id48 . -7) (undo-tree-id49 . -7) (undo-tree-id50 . -7) 2842) nil (26011 51903 296478 0) 0 nil])
([nil nil ((#("diffuse_" 0 8 (fontified t)) . -2827) (undo-tree-id34 . -8) (undo-tree-id35 . -8) (undo-tree-id36 . -8) (undo-tree-id37 . -8) (undo-tree-id38 . -8) (undo-tree-id39 . -8) (undo-tree-id40 . -8) (undo-tree-id41 . -8) (undo-tree-id42 . -8) 2835) nil (26011 51903 296468 0) 0 nil])
([nil nil ((2827 . 2830)) nil (26011 51903 296459 0) 0 nil])
([nil nil ((2827 . 2831) (#("sel" 0 3 (fontified nil)) . 2827) (2827 . 2830) (#("self" 0 4 (fontified nil)) . -2827) (2827 . 2831) (#("sel" 0 3 (fontified t)) . -2827) (undo-tree-id24 . -3) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -2) (undo-tree-id29 . -2) (undo-tree-id30 . -3) (undo-tree-id31 . -3) (undo-tree-id32 . -3) (undo-tree-id33 . -3) 2830) nil (26011 51903 296457 0) 0 nil])
([nil nil ((#("texture" 0 7 (fontified t)) . -3027) (undo-tree-id17 . -7) (undo-tree-id18 . -7) (undo-tree-id19 . -7) (undo-tree-id20 . -7) (undo-tree-id21 . -7) (undo-tree-id22 . -7) (undo-tree-id23 . -7) 3034) nil (26011 51903 296444 0) 0 nil])
([nil nil ((#("diffuse_" 0 8 (fontified t)) . -3019) (undo-tree-id8 . -8) (undo-tree-id9 . -8) (undo-tree-id10 . -8) (undo-tree-id11 . -8) (undo-tree-id12 . -8) (undo-tree-id13 . -8) (undo-tree-id14 . -8) (undo-tree-id15 . -8) (undo-tree-id16 . -8) 3027) nil (26011 51903 296436 0) 0 nil])
([nil nil ((3019 . 3023)) nil (26011 51903 296426 0) 0 nil])
([nil nil ((3019 . 3023) (#("self" 0 4 (fontified nil)) . 3019) (3019 . 3023) (#("self" 0 4 (face font-lock-keyword-face fontified t)) . -3019) (undo-tree-id0 . -4) (undo-tree-id1 . -1) (undo-tree-id2 . -2) (undo-tree-id3 . -2) (undo-tree-id4 . -3) (undo-tree-id5 . -3) (undo-tree-id6 . -4) (undo-tree-id7 . -4) 3023) nil (26011 51903 296422 0) 0 nil])
([nil nil ((2475 . 2477) (t 26011 51903 300194 142000)) nil (26011 51922 847748 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 2501 . 2502) (nil fontified nil 2495 . 2502) (nil fontified nil 2483 . 2495) (nil fontified nil 2477 . 2483) (2477 . 2502)) nil (26011 51922 847746 0) 0 nil])
([nil nil ((2502 . 2506)) nil (26011 51922 847744 0) 0 nil])
([nil nil ((2504 . 2525) (#("wg" 0 2 (fontified nil)) . 2504) (2504 . 2506) (#("wgpu::BindGroupLayout" 0 21 (fontified nil)) . -2504) (2504 . 2525) (#("wg" 0 2 (fontified t)) . -2504) (undo-tree-id111 . -2) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -2) (undo-tree-id115 . -2) (undo-tree-id116 . -2) (undo-tree-id117 . -2) (undo-tree-id118 . -2) 2506) nil (26011 51922 847742 0) 0 nil])
([nil nil ((2525 . 2526)) nil (26011 51922 847732 0) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -2525) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) 2526) nil (26011 51922 847728 0) 0 nil])
([nil nil ((2476 . 2482) (t 26011 51922 851490 730000)) nil (26011 51930 875639 0) 0 nil])
([nil nil ((2476 . 2498) (#("device" 0 6 (fontified nil)) . 2476) (2476 . 2482) (#("device: &wgpu::Device," 0 22 (fontified nil)) . -2476) (2476 . 2498) (#("device" 0 6 (fontified t)) . -2476) (undo-tree-id119 . -6) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -2) (undo-tree-id123 . -2) (undo-tree-id124 . -3) (undo-tree-id125 . -3) (undo-tree-id126 . -4) (undo-tree-id127 . -4) (undo-tree-id128 . -5) (undo-tree-id129 . -5) (undo-tree-id130 . -6) (undo-tree-id131 . -6) (undo-tree-id132 . -6) (undo-tree-id133 . -6) 2482) nil (26011 51930 875635 0) 0 nil])
([nil nil ((3243 . 3244) (t 26011 51930 878997 563000)) nil (26011 51939 154266 0) 0 nil])
([nil nil ((3243 . 3261) (#("d" 0 1 (fontified nil)) . 3243) (3243 . 3244) (#("diffuse_bind_group" 0 18 (fontified nil)) . -3243) (3243 . 3261) (#("d" 0 1 (fontified t)) . -3243) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) 3244) nil (26011 51939 154262 0) 0 nil])
([nil nil ((2470 . 2479) (t 26011 51939 157994 50000)) nil (26011 51965 63175 0) 0 nil])
([nil nil ((2508 . 2516) (#(" " 0 1 (fontified nil)) . 2507) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (2508 . 2509)) nil (26011 51965 63173 0) 0 nil])
([nil nil ((2564 . 2569)) nil (26011 51965 63157 0) 0 nil])
([nil nil ((2485 . 2494)) nil (26011 51965 63153 0) 0 nil])
([nil nil ((2552 . 2553) (t 26011 51965 66529 268000)) nil (26011 52018 535469 0) 0 nil])
([nil nil ((183 . 187) (#("    " 0 4 (fontified nil)) . 182) (undo-tree-id192 . -4) (181 . 187) (t 26011 52018 538870 595000)) nil (26011 52176 655260 0) 0 nil])
([nil nil ((182 . 186)) nil (26011 52176 655258 0) 0 nil])
([nil nil ((186 . 202)) nil (26011 52176 655257 0) 0 nil])
([nil nil ((202 . 204)) nil (26011 52176 655256 0) 0 nil])
([nil nil ((204 . 206)) nil (26011 52176 655255 0) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -205) (undo-tree-id191 . -1) 206) nil (26011 52176 655254 0) 0 nil])
([nil nil ((205 . 206)) nil (26011 52176 655251 0) 0 nil])
([nil nil ((206 . 209)) nil (26011 52176 655250 0) 0 nil])
([nil nil ((apply yas--snippet-revive 208 216 #s(yas--snippet nil nil #s(yas--exit 215 nil) 33 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 215 nil) 33 nil nil nil nil)) (208 . 216) (#("Result<$0>" 0 10 (fontified nil)) . 208) (208 . 218) (#("R" 0 1 (fontified nil)) . 208) (208 . 209) (#("Result<…>" 0 9 (fontified nil)) . -208) (208 . 217) (#("R" 0 1 (face font-lock-type-face fontified t)) . -208) (undo-tree-id190 . -1) 209) nil (26011 52176 655249 0) 0 nil])
([nil nil ((215 . 217)) nil (26011 52176 655244 0) 0 nil])
([nil nil ((215 . 219) (#("Se" 0 2 (fontified nil)) . 215) (215 . 217) (#("Self" 0 4 (fontified nil)) . -215) (215 . 219) (#("Se" 0 2 (face font-lock-type-face fontified t)) . -215) (undo-tree-id188 . -2) (undo-tree-id189 . -2) 217) nil (26011 52176 655243 0) 0 nil])
([nil nil ((220 . 223)) nil (26011 52176 655238 0) 0 nil])
([nil nil ((224 . 228) (#("        " 0 8 (fontified nil)) . 223) (223 . 231) (#("    " 0 4 (fontified nil)) . 223) (undo-tree-id187 . -4) (222 . 228)) nil (26011 52176 655237 0) 0 nil])
([nil nil ((205 . 209) (#("        " 0 8 (fontified nil)) . 204) (204 . 212) (#("    " 0 4 (fontified nil)) . 204) (undo-tree-id185 . -4) (undo-tree-id186 . -4) (203 . 209)) nil (26011 52176 655234 0) 0 nil])
([nil nil ((204 . 212)) nil (26011 52176 655230 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 270 . 271) (nil fontified nil 270 . 271) (nil fontified nil 265 . 270) (nil fontified nil 263 . 265) (nil fontified nil 259 . 263) (nil fontified nil 258 . 259) (nil fontified nil 256 . 258) (nil fontified nil 251 . 256) (nil fontified nil 241 . 251) (nil fontified nil 235 . 241) (nil fontified nil 233 . 235) (nil fontified nil 229 . 233) (nil fontified nil 228 . 229) (nil fontified nil 226 . 228) (nil fontified nil 220 . 226) (nil fontified nil 212 . 220) (212 . 271)) nil (26011 52176 655228 0) 0 nil])
([nil nil ((271 . 280)) nil (26011 52176 655223 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 306 . 307) (nil fontified nil 306 . 307) (nil fontified nil 303 . 306) (nil fontified nil 302 . 303) (nil fontified nil 301 . 302) (nil fontified nil 295 . 301) (nil fontified nil 293 . 295) (nil fontified nil 288 . 293) (nil fontified nil 280 . 288) (280 . 307)) nil (26011 52176 655221 0) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -212) 233) nil (26011 52176 655218 0) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -272) 287) nil (26011 52176 655217 0) 0 nil])
([nil nil ((203 . 212)) nil (26011 52176 655215 0) 0 nil])
([nil nil ((212 . 213)) nil (26011 52176 655214 0) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -212) (undo-tree-id184 . -1) 213) nil (26011 52176 655213 0) 0 nil])
([nil nil ((212 . 218)) nil (26011 52176 655211 0) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -216) (undo-tree-id182 . -1) (#("a" 0 1 (fontified t)) . -217) (undo-tree-id183 . -1) 218) nil (26011 52176 655210 0) 0 nil])
([nil nil ((216 . 218)) nil (26011 52176 655206 0) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -212) (undo-tree-id176 . -1) (#("m" 0 1 (fontified t)) . -213) (undo-tree-id177 . -1) (#("g" 0 1 (fontified t)) . -214) (undo-tree-id178 . -1) (#("_" 0 1 (fontified t)) . -215) (undo-tree-id179 . -1) (#("p" 0 1 (fontified t)) . -216) (undo-tree-id180 . -1) (#("a" 0 1 (fontified t)) . -217) (undo-tree-id181 . -1) 218) nil (26011 52176 655204 0) 0 nil])
([nil nil ((212 . 219)) nil (26011 52176 655196 0) 0 nil])
([nil nil ((#("P" 0 1 (face font-lock-type-face fontified t)) . -218) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) 219) nil (26011 52176 655195 0) 0 nil])
([nil nil ((218 . 227)) nil (26011 52176 655189 0) 0 nil])
([nil nil ((223 . 227) (#("Path" 0 4 (fontified nil)) . 223) (223 . 227) (#("path" 0 4 (fontified nil)) . -223) (223 . 227) (#("Path" 0 4 (face font-lock-type-face fontified t)) . -223) (undo-tree-id150 . -4) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -2) (undo-tree-id157 . -2) (undo-tree-id158 . -2) (undo-tree-id159 . -2) (undo-tree-id160 . -2) (undo-tree-id161 . -3) (undo-tree-id162 . -3) (undo-tree-id163 . -3) (undo-tree-id164 . -3) (undo-tree-id165 . -4) (undo-tree-id166 . -4) (undo-tree-id167 . -4) (undo-tree-id168 . -4) (undo-tree-id169 . -4) (undo-tree-id170 . -4) 227) nil (26011 52176 655186 0) 0 nil])
([nil nil ((227 . 230)) nil (26011 52176 655163 0) 0 nil])
([nil nil ((229 . 233) (#("P" 0 1 (fontified nil)) . 229) (229 . 230) (#("Path" 0 4 (fontified nil)) . -229) (229 . 233) (#("P" 0 1 (face font-lock-type-face fontified t)) . -229) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) 230) nil (26011 52176 655161 0) 0 nil])
([nil nil ((233 . 234)) nil (26011 52176 655147 0) 0 nil])
([nil nil ((347 . 355) (t 26011 52176 661430 784000)) nil (26011 52203 400938 0) 0 nil])
([nil nil ((nil fontified nil 525 . 526) (nil fontified nil 524 . 525) (nil fontified nil 523 . 524) (nil fontified nil 517 . 523) (nil fontified nil 516 . 517) (nil fontified nil 515 . 516) (nil fontified nil 508 . 515) (nil fontified nil 505 . 508) (nil fontified nil 504 . 505) (nil fontified nil 503 . 504) (nil fontified nil 490 . 503) (nil fontified nil 482 . 490) (nil fontified nil 462 . 482) (nil fontified nil 459 . 462) (nil fontified nil 451 . 459) (nil fontified nil 450 . 451) (nil fontified nil 449 . 450) (nil fontified nil 448 . 449) (nil fontified nil 447 . 448) (nil fontified nil 446 . 447) (nil fontified nil 442 . 446) (nil fontified nil 439 . 442) (nil fontified nil 436 . 439) (nil fontified nil 430 . 436) (nil fontified nil 429 . 430) (nil fontified nil 426 . 429) (nil fontified nil 425 . 426) (nil fontified nil 422 . 425) (nil fontified nil 414 . 422) (nil fontified nil 412 . 414) (nil fontified nil 411 . 412) (nil fontified nil 410 . 411) (nil fontified nil 404 . 410) (nil fontified nil 403 . 404) (nil fontified nil 402 . 403) (nil fontified nil 401 . 402) (nil fontified nil 400 . 401) (nil fontified nil 387 . 400) (nil fontified nil 386 . 387) (nil fontified nil 385 . 386) (nil fontified nil 379 . 385) (nil fontified nil 375 . 379) (nil fontified nil 372 . 375) (nil fontified nil 371 . 372) (nil fontified nil 370 . 371) (nil fontified nil 367 . 370) (nil fontified nil 366 . 367) (nil fontified nil 363 . 366) (nil fontified nil 355 . 363) (355 . 526)) nil (26011 52203 400935 0) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -355) 392) nil (26011 52203 400921 0) 0 nil])
([nil nil ((#("png\"" 0 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t rear-nonsticky t) 3 4 (face font-lock-string-face fontified t)) . -390) (undo-tree-id249 . -4) (undo-tree-id250 . -4) (undo-tree-id251 . -4) (undo-tree-id252 . -4) (undo-tree-id253 . -4) (undo-tree-id254 . -4) (undo-tree-id255 . -4) (undo-tree-id256 . -4) (undo-tree-id257 . -4) (undo-tree-id258 . -4) 394) nil (26011 52203 400919 0) 0 nil])
([nil nil ((#("tree." 0 5 (face font-lock-string-face fontified t)) . -385) (undo-tree-id238 . -5) (undo-tree-id239 . -5) (undo-tree-id240 . -5) (undo-tree-id241 . -5) (undo-tree-id242 . -5) (undo-tree-id243 . -5) (undo-tree-id244 . -5) (undo-tree-id245 . -5) (undo-tree-id246 . -5) (undo-tree-id247 . -5) (undo-tree-id248 . -5) 390) nil (26011 52203 400908 0) 0 nil])
([nil nil ((#("happy-" 0 6 (face font-lock-string-face fontified t)) . -379) (undo-tree-id216 . -6) (undo-tree-id217 . -5) (undo-tree-id218 . -5) (undo-tree-id219 . -5) (undo-tree-id220 . -5) (undo-tree-id221 . -5) (undo-tree-id222 . -5) (undo-tree-id223 . -5) (undo-tree-id224 . -5) (undo-tree-id225 . -5) (undo-tree-id226 . -5) (undo-tree-id227 . -6) (undo-tree-id228 . -6) (undo-tree-id229 . -6) (undo-tree-id230 . -6) (undo-tree-id231 . -6) (undo-tree-id232 . -6) (undo-tree-id233 . -6) (undo-tree-id234 . -6) (undo-tree-id235 . -6) (undo-tree-id236 . -6) (undo-tree-id237 . -6) 385) nil (26011 52203 401215 0) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -378) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) 379) nil (26011 52206 405794 0) 0 nil] [nil nil ((#("open(\"" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-3-face) fontified t) 5 6 (face font-lock-string-face fontified t)) . -373) (undo-tree-id193 . -6) (undo-tree-id194 . -6) (undo-tree-id195 . -6) (undo-tree-id196 . -6) (undo-tree-id197 . -6) (undo-tree-id198 . -6) (undo-tree-id199 . -6) (undo-tree-id200 . -6) (undo-tree-id201 . -6) (undo-tree-id202 . -6) (undo-tree-id203 . -6) (undo-tree-id204 . -6) (undo-tree-id205 . -6) (undo-tree-id206 . -6) (undo-tree-id207 . -6) (undo-tree-id208 . -6) (undo-tree-id209 . -6) (undo-tree-id210 . -6) (undo-tree-id211 . -6) (undo-tree-id212 . -6) (undo-tree-id213 . -6) (undo-tree-id214 . -6) (undo-tree-id215 . -6) 379) ((373 . 379)) (26011 52203 400866 0) 0 nil])
([nil nil ((378 . 379)) nil (26011 52206 405751 0) 0 nil])
nil
([nil nil ((378 . 382) (#("p" 0 1 (fontified nil)) . 378) (378 . 379) (#("path" 0 4 (fontified nil)) . -378) (378 . 382) (#("p" 0 1 (fontified t)) . -378) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) 379) nil (26011 52206 405747 0) 0 nil])
([nil nil ((367 . 376) (t 26011 52206 412481 344000)) nil (26011 52217 684548 0) 0 nil])
([nil nil ((#("fs::" 0 2 (face font-lock-constant-face fontified t) 2 4 (fontified t)) . -372) (undo-tree-id306 . -4) (undo-tree-id307 . -4) (undo-tree-id308 . -4) (undo-tree-id309 . -4) (undo-tree-id310 . -4) (undo-tree-id311 . -4) (undo-tree-id312 . -4) 376 (t 26011 52217 691155 543000)) nil (26011 52237 795952 0) 0 nil])
([nil nil ((#("std::" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t)) . -367) (undo-tree-id295 . -5) (undo-tree-id296 . -5) (undo-tree-id297 . -5) (undo-tree-id298 . -5) (undo-tree-id299 . -5) (undo-tree-id300 . -5) (undo-tree-id301 . -5) (undo-tree-id302 . -5) (undo-tree-id303 . -5) (undo-tree-id304 . -5) (undo-tree-id305 . -5) 372) nil (26011 52237 795942 0) 0 nil])
([nil nil ((1 . 2)) nil (26011 52237 795925 0) 0 nil])
([nil nil ((1 . 2)) nil (26011 52237 795924 0) 0 nil])
([nil nil ((nil fontified nil 56 . 57) (nil fontified nil 52 . 56) (nil fontified nil 50 . 52) (nil fontified nil 48 . 50) (nil fontified nil 46 . 48) (nil fontified nil 43 . 46) (nil fontified nil 42 . 43) (nil fontified nil 39 . 42) (nil fontified nil 34 . 39) (nil fontified nil 27 . 34) (nil fontified nil 25 . 27) (nil fontified nil 23 . 25) (nil fontified nil 21 . 23) (nil fontified nil 18 . 21) (nil fontified nil 17 . 18) (nil fontified nil 14 . 17) (nil fontified nil 8 . 14) (nil fontified nil 5 . 8) (nil fontified nil 4 . 5) (nil fontified nil 1 . 4) (1 . 57)) nil (26011 52237 795919 0) 0 nil])
([nil nil ((564 . 573) (t 26011 52237 805816 726000)) nil (26011 52260 78404 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 681 . 682) (nil fontified nil 681 . 682) (nil fontified nil 680 . 681) (nil fontified nil 675 . 680) (nil fontified nil 674 . 675) (nil fontified nil 670 . 674) (nil fontified nil 665 . 670) (nil fontified nil 664 . 665) (nil fontified nil 649 . 664) (nil fontified nil 648 . 649) (nil fontified nil 636 . 648) (nil fontified nil 632 . 636) (nil fontified nil 622 . 632) (nil fontified nil 621 . 622) (nil fontified nil 620 . 621) (nil fontified nil 615 . 620) (nil fontified nil 614 . 615) (nil fontified nil 596 . 614) (nil fontified nil 591 . 596) (nil fontified nil 588 . 591) (nil fontified nil 585 . 588) (nil fontified nil 584 . 585) (nil fontified nil 581 . 584) (nil fontified nil 573 . 581) (573 . 682)) nil (26011 52260 78402 0) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -573) 606) nil (26011 52260 78395 0) 0 nil])
([nil nil ((#("bytes" 0 5 (fontified t)) . -607) (undo-tree-id320 . -5) (undo-tree-id321 . -5) (undo-tree-id322 . -5) (undo-tree-id323 . -5) (undo-tree-id324 . -5) (undo-tree-id325 . -5) (undo-tree-id326 . -5) (undo-tree-id327 . -5) (undo-tree-id328 . -5) (undo-tree-id329 . -5) 612) nil (26011 52260 78393 0) 0 nil])
([nil nil ((607 . 608)) nil (26011 52260 78382 0) 0 nil])
([nil nil ((607 . 608) (607 . 613) (#("b" 0 1 (fontified nil)) . 607) (607 . 608) (#("&buffer" 0 7 (fontified nil)) . -607) (607 . 614) (#("b" 0 1 (fontified t)) . -607) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) 608) nil (26011 52260 78378 0) 0 nil])
([nil nil ((#("Some(" 0 4 (face font-lock-type-face fontified t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t)) . -664) (undo-tree-id332 . -5) (undo-tree-id333 . -5) (undo-tree-id334 . -5) (undo-tree-id335 . -5) (undo-tree-id336 . -5) (undo-tree-id337 . -5) (undo-tree-id338 . -5) (undo-tree-id339 . -5) (undo-tree-id340 . -5) (undo-tree-id341 . -5) (undo-tree-id342 . -5) (undo-tree-id343 . -5) 669 (t 26011 52260 84963 624000)) nil (26011 52268 314383 0) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -669) (undo-tree-id330 . -1) (undo-tree-id331 . -1) 670) nil (26011 52268 314368 0) 0 nil])
([nil nil ((276 . 277) (t 26011 52268 321549 122000)) nil (26011 52290 100680 0) 0 nil])
([nil nil ((950 . 954) (#("    " 0 4 (fontified nil)) . 949) (undo-tree-id399 . -4) (948 . 954) (t 26011 52290 107914 711000)) nil (26011 54896 531823 0) 0 nil])
([nil nil ((954 . 961)) nil (26011 54896 531820 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -960) (undo-tree-id398 . -1) 961) nil (26011 54896 531819 0) 0 nil])
([nil nil ((#("    pub fn" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 10 (face font-lock-keyword-face fontified t)) . 950)) nil (26011 54896 531816 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 950)) nil (26011 54896 531815 0) 0 nil])
([nil nil ((2942 . 2946) (#("    " 0 4 (fontified nil)) . 2941) (undo-tree-id397 . -4) (2940 . 2946)) nil (26011 54896 531814 0) 0 nil])
([nil nil ((2946 . 2953)) nil (26011 54896 531812 0) 0 nil])
([nil nil ((2953 . 2956)) nil (26011 54896 531811 0) 0 nil])
([nil nil ((#("o" 0 1 (face font-lock-function-name-face fontified t)) . -2955) (undo-tree-id396 . -1) 2956) nil (26011 54896 531810 0) 0 nil])
([nil nil ((2955 . 2961)) nil (26011 54896 531807 0) 0 nil])
([nil nil ((#("p" 0 1 (face font-lock-function-name-face fontified t)) . -2960) (undo-tree-id395 . -1) 2961) nil (26011 54896 531806 0) 0 nil])
([nil nil ((2960 . 2967)) nil (26011 54896 531804 0) 0 nil])
([nil nil ((2967 . 2972)) nil (26011 54896 531803 0) 0 nil])
([nil nil ((2973 . 2977) (#("        " 0 8 (fontified nil)) . 2972) (2972 . 2980) (#("    " 0 4 (fontified nil)) . 2972) (undo-tree-id394 . -4) (2971 . 2977)) nil (26011 54896 531802 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 3445 . 3446) (nil fontified nil 3445 . 3446) (nil fontified nil 3444 . 3445) (nil fontified nil 3416 . 3444) (nil fontified nil 3415 . 3416) (nil fontified nil 3401 . 3415) (nil fontified nil 3400 . 3401) (nil fontified nil 3388 . 3400) (nil fontified nil 3387 . 3388) (nil fontified nil 3383 . 3387) (nil fontified nil 3381 . 3383) (nil fontified nil 3367 . 3381) (nil fontified nil 3351 . 3367) (nil fontified nil 3349 . 3351) (nil fontified nil 3348 . 3349) (nil fontified nil 3332 . 3348) (nil fontified nil 3331 . 3332) (nil fontified nil 3327 . 3331) (nil fontified nil 3325 . 3327) (nil fontified nil 3316 . 3325) (nil fontified nil 3312 . 3316) (nil fontified nil 3300 . 3312) (nil fontified nil 3296 . 3300) (nil fontified nil 3291 . 3296) (nil fontified nil 3285 . 3291) (nil fontified nil 3271 . 3285) (nil fontified nil 3269 . 3271) (nil fontified nil 3268 . 3269) (nil fontified nil 3267 . 3268) (nil fontified nil 3266 . 3267) (nil fontified nil 3251 . 3266) (nil fontified nil 3249 . 3251) (nil fontified nil 3245 . 3249) (nil fontified nil 3243 . 3245) (nil fontified nil 3227 . 3243) (nil fontified nil 3226 . 3227) (nil fontified nil 3214 . 3226) (nil fontified nil 3212 . 3214) (nil fontified nil 3211 . 3212) (nil fontified nil 3199 . 3211) (nil fontified nil 3197 . 3199) (nil fontified nil 3193 . 3197) (nil fontified nil 3191 . 3193) (nil fontified nil 3183 . 3191) (nil fontified nil 3181 . 3183) (nil fontified nil 3177 . 3181) (nil fontified nil 3175 . 3177) (nil fontified nil 3169 . 3175) (nil fontified nil 3155 . 3169) (nil fontified nil 3148 . 3155) (nil fontified nil 3139 . 3148) (nil fontified nil 3114 . 3139) (nil fontified nil 3113 . 3114) (nil fontified nil 3111 . 3113) (nil fontified nil 3104 . 3111) (nil fontified nil 3086 . 3104) (nil fontified nil 3083 . 3086) (nil fontified nil 3081 . 3083) (nil fontified nil 3068 . 3081) (nil fontified nil 3066 . 3068) (nil fontified nil 3062 . 3066) (nil fontified nil 3060 . 3062) (nil fontified nil 3054 . 3060) (nil fontified nil 3037 . 3054) (nil fontified nil 3036 . 3037) (nil fontified nil 3035 . 3036) (nil fontified nil 3019 . 3035) (nil fontified nil 3017 . 3019) (nil fontified nil 3013 . 3017) (nil fontified nil 3000 . 3013) (nil fontified nil 2999 . 3000) (nil fontified nil 2972 . 2999) (2972 . 3446)) nil (26011 54896 531795 0) 0 nil])
([nil nil ((2968 . 2971)) nil (26011 54896 531776 0) 0 nil])
([nil nil ((2968 . 2987) (#("que" 0 3 (fontified nil)) . 2968) (2968 . 2971) (#("queue: &wgpu::Queue" 0 19 (fontified nil)) . -2968) (2968 . 2987) (#("que" 0 3 (fontified t)) . -2968) (undo-tree-id392 . -3) (undo-tree-id393 . -3) 2971) nil (26011 54896 531774 0) 0 nil])
([nil nil ((2968 . 2969)) nil (26011 54896 531770 0) 0 nil])
([nil nil ((2968 . 2969)) nil (26011 54896 531769 0) 0 nil])
([nil nil ((2968 . 2973) (#("s" 0 1 (fontified nil)) . 2968) (2968 . 2969) (#("self," 0 5 (fontified nil)) . -2968) (2968 . 2973) (#("s" 0 1 (fontified t)) . -2968) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) 2969) nil (26011 54896 531767 0) 0 nil])
([nil nil ((2968 . 2969)) nil (26011 54896 531757 0) 0 nil])
([nil nil ((3140 . 3141)) nil (26011 54896 531756 0) 0 nil])
([nil nil ((3140 . 3141)) nil (26011 54897 777319 0) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . -3139) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (#("s" 0 1 (fontified t)) . -3140) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (#(" " 0 1 (fontified t)) . -3141) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) 3142) nil (26011 54904 326624 0) 0 nil] [nil nil ((#("s" 0 1 (fontified t)) . -3140) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (#(" " 0 1 (fontified t)) . -3141) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . 1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) 3142) ((3140 . 3142)) (26011 54897 441883 0) 0 nil])
([nil nil ((3139 . 3145)) nil (26011 54904 326545 0) 0 nil])
([nil nil ((3140 . 3142)) ((#("se" 0 2 (fontified t)) . 3140) (undo-tree-id442 . -2) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -2) (undo-tree-id446 . -2) (undo-tree-id447 . -2) (undo-tree-id448 . -2) (undo-tree-id449 . -2) (undo-tree-id450 . -2) (undo-tree-id451 . -2) (undo-tree-id452 . -2)) (26011 54897 238761 0) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -3144) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) 3145) nil (26011 54904 326542 0) 0 nil])
([nil nil ((3140 . 3144) (#("setexture" 0 2 (fontified nil) 2 9 (fontified nil)) . 3140) (undo-tree-id361 . 7) (3140 . 3142) (#("self" 0 4 (fontified nil)) . -3140) (3140 . 3144) (#("se" 0 2 (fontified t)) . -3140) (undo-tree-id362 . -2) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -2) (undo-tree-id366 . -2) (undo-tree-id367 . -2) (undo-tree-id368 . -2) (undo-tree-id369 . -2) (undo-tree-id370 . -2) (undo-tree-id371 . -2) 3142) ((3140 . 3142) (#("self" 0 4 (fontified nil)) . 3140) (3140 . 3144) (#("se" 0 2 (fontified nil)) . 3140) (3140 . 3149) (#("self" 0 4 (face font-lock-keyword-face fontified t)) . 3140) (undo-tree-id422 . -4) (undo-tree-id423 . -4) (undo-tree-id424 . -4) (undo-tree-id425 . -4) (undo-tree-id426 . -4) (undo-tree-id427 . -4) (undo-tree-id428 . -4) (undo-tree-id429 . -4) (undo-tree-id430 . -4) (undo-tree-id431 . -4) (undo-tree-id432 . -4) (undo-tree-id433 . -4) (undo-tree-id434 . -4) (undo-tree-id435 . -4) (undo-tree-id436 . -4) (undo-tree-id437 . -4) (undo-tree-id438 . -4) (undo-tree-id439 . -4) (undo-tree-id440 . -4) (undo-tree-id441 . -4)) (26011 54897 31750 0) 0 nil])
([nil nil ((3144 . 3145)) nil (26011 54904 326526 0) 0 nil])
([nil nil ((3144 . 3145)) ((#("," 0 1 (fontified t)) . 3144) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1)) (26011 54896 783424 0) 0 nil])
([nil nil ((#("   pub fn write_to_queue(&self, queue: &wgpu::Queue) {
        queue.write_texture(
            wgpu::ImageCopyTexture {
                aspect: wgpu::TextureAspect::All,
                texture: &self.texture,
                mip_level: 0,
                origin: wgpu::Origin3d::ZERO,
            },
            &rgba,
            wgpu::ImageDataLayout {
                offset: 0,
                bytes_per_row: Some(4 * dimensions.0),
                rows_per_image: Some(dimensions.1),
            },
            size,
        );
    }" 0 3 (fontified t) 3 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 9 (face font-lock-keyword-face fontified t) 9 10 (fontified t) 10 24 (face font-lock-function-name-face fontified t) 24 25 (face (rainbow-delimiters-depth-2-face) fontified t) 25 26 (face rust-ampersand-face fontified t) 26 30 (face font-lock-keyword-face fontified t) 30 31 (fontified t) 31 32 (fontified t) 32 37 (face font-lock-variable-name-face fontified t) 37 39 (fontified t) 39 40 (face rust-ampersand-face fontified t) 40 44 (face font-lock-constant-face fontified t) 44 46 (fontified t) 46 51 (face font-lock-type-face fontified t) 51 52 (face (rainbow-delimiters-depth-2-face) fontified t) 52 53 (fontified t) 53 54 (face (rainbow-delimiters-depth-2-face) fontified t) 54 55 (fontified t) 55 82 (fontified t) 82 83 (face (rainbow-delimiters-depth-3-face) fontified t) 83 96 (fontified t) 96 100 (face font-lock-constant-face fontified t) 100 102 (fontified t) 102 118 (face font-lock-type-face fontified t) 118 119 (fontified t) 119 120 (face (rainbow-delimiters-depth-4-face) fontified t) 120 137 (fontified t) 137 143 (face font-lock-variable-name-face fontified t) 143 145 (fontified t) 145 149 (face font-lock-constant-face fontified t) 149 151 (fontified t) 151 164 (face font-lock-type-face fontified t) 164 166 (fontified t) 166 169 (face font-lock-type-face fontified t) 169 171 (fontified t) 171 187 (fontified t) 187 194 (face font-lock-variable-name-face fontified t) 194 196 (fontified t) 196 197 (face rust-ampersand-face fontified t) 197 201 (face font-lock-keyword-face fontified t) 201 202 (fontified t) 202 209 (fontified t) 209 211 (fontified t) 211 227 (fontified t) 227 236 (face font-lock-variable-name-face fontified t) 236 243 (fontified t) 243 257 (fontified t) 257 263 (face font-lock-variable-name-face fontified t) 263 265 (fontified t) 265 269 (face font-lock-constant-face fontified t) 269 271 (fontified t) 271 279 (face font-lock-type-face fontified t) 279 281 (fontified t) 281 285 (face font-lock-type-face fontified t) 285 287 (fontified t) 287 299 (fontified t) 299 300 (face (rainbow-delimiters-depth-4-face) fontified t) 300 302 (fontified t) 302 314 (fontified t) 314 315 (face rust-ampersand-face fontified t) 315 331 (fontified t) 331 333 (fontified t) 333 337 (face font-lock-constant-face fontified t) 337 339 (fontified t) 339 354 (face font-lock-type-face fontified t) 354 355 (fontified t) 355 356 (face (rainbow-delimiters-depth-4-face) fontified t) 356 357 (fontified t) 357 359 (fontified t) 359 373 (fontified t) 373 379 (face font-lock-variable-name-face fontified t) 379 384 (fontified t) 384 388 (fontified t) 388 400 (fontified t) 400 404 (face font-lock-variable-name-face fontified t) 404 413 (face font-lock-variable-name-face fontified t) 413 415 (fontified t) 415 419 (face font-lock-type-face fontified t) 419 420 (face (rainbow-delimiters-depth-5-face) fontified t) 420 436 (fontified t) 436 437 (face (rainbow-delimiters-depth-5-face) fontified t) 437 439 (fontified t) 439 455 (fontified t) 455 469 (face font-lock-variable-name-face fontified t) 469 471 (fontified t) 471 475 (face font-lock-type-face fontified t) 475 476 (face (rainbow-delimiters-depth-5-face) fontified t) 476 488 (fontified t) 488 489 (face (rainbow-delimiters-depth-5-face) fontified t) 489 503 (fontified t) 503 504 (face (rainbow-delimiters-depth-4-face) fontified t) 504 532 (fontified t) 532 533 (face (rainbow-delimiters-depth-3-face) fontified t) 533 534 (fontified t rear-nonsticky t) 534 535 (fontified t) 535 539 (fontified t) 539 540 (face (rainbow-delimiters-depth-2-face) fontified t)) . 2943) (undo-tree-id888 . -540) (undo-tree-id889 . -196) (undo-tree-id890 . -196) (undo-tree-id891 . -196) (undo-tree-id892 . -196) (undo-tree-id893 . -196) (undo-tree-id894 . -196) (undo-tree-id895 . -196) (undo-tree-id896 . -196) (undo-tree-id897 . -196) (undo-tree-id898 . -196) (undo-tree-id899 . -196) (undo-tree-id900 . -196) (undo-tree-id901 . -196) (undo-tree-id902 . -196) (undo-tree-id903 . -196) (undo-tree-id904 . -196) (undo-tree-id905 . -196) (undo-tree-id906 . -196) (undo-tree-id907 . -196) (undo-tree-id908 . -196) (undo-tree-id909 . -196) (undo-tree-id910 . -196) (undo-tree-id911 . -196) (undo-tree-id912 . -196) (undo-tree-id913 . -196) (undo-tree-id914 . -196) (undo-tree-id915 . -196) (undo-tree-id916 . -196) (undo-tree-id917 . -196) (undo-tree-id918 . -196) (undo-tree-id919 . -196) (undo-tree-id920 . -196) (undo-tree-id921 . -196) (undo-tree-id922 . -196) (undo-tree-id923 . -196) (undo-tree-id924 . -196) (undo-tree-id925 . -196) (undo-tree-id926 . -196) (undo-tree-id927 . -196) (undo-tree-id928 . -196) (undo-tree-id929 . -196) (undo-tree-id930 . -196) (undo-tree-id931 . -201) (undo-tree-id932 . -201) (undo-tree-id933 . -201) (undo-tree-id934 . -201) (undo-tree-id935 . -201) (undo-tree-id936 . -201) (undo-tree-id937 . 338) (undo-tree-id938 . -206) (undo-tree-id939 . -206) (undo-tree-id940 . -206) (undo-tree-id941 . -206) (undo-tree-id942 . -206) (undo-tree-id943 . -206) (undo-tree-id944 . -206) (undo-tree-id945 . -206) (undo-tree-id946 . -206) (undo-tree-id947 . -206) (undo-tree-id948 . -206) (undo-tree-id949 . -206) (undo-tree-id950 . -206) (undo-tree-id951 . -206) (undo-tree-id952 . -206) (undo-tree-id953 . -206) (undo-tree-id954 . -206) (undo-tree-id955 . -206) (undo-tree-id956 . -206) (undo-tree-id957 . -206) (undo-tree-id958 . -206) (undo-tree-id959 . -206) (undo-tree-id960 . -206) (undo-tree-id961 . -206) (undo-tree-id962 . -206) (undo-tree-id963 . -206) (undo-tree-id964 . -206) (undo-tree-id965 . -206) (undo-tree-id966 . -206) (undo-tree-id967 . -206) (undo-tree-id968 . -206) (undo-tree-id969 . -206) (undo-tree-id970 . -206) (undo-tree-id971 . -206) (undo-tree-id972 . -206) (undo-tree-id973 . -206) (undo-tree-id974 . -206) (undo-tree-id975 . -206) (undo-tree-id976 . -206) (undo-tree-id977 . -206) (undo-tree-id978 . -206) (undo-tree-id979 . -206) (undo-tree-id980 . -206) (undo-tree-id981 . -121) (undo-tree-id982 . -84) (undo-tree-id983 . -55) (undo-tree-id984 . -55) (undo-tree-id985 . -540) (undo-tree-id986 . -514) (undo-tree-id987 . -390) (undo-tree-id988 . -325) (undo-tree-id989 . -304) (undo-tree-id990 . -288) (undo-tree-id991 . -211) (undo-tree-id992 . -55) (undo-tree-id993 . -55) (undo-tree-id994 . -55) (undo-tree-id995 . -55) (undo-tree-id996 . -55) (undo-tree-id997 . -55) (undo-tree-id998 . -55) (undo-tree-id999 . -55) (undo-tree-id1000 . -533) (undo-tree-id1001 . -533) (undo-tree-id1002 . -533) (undo-tree-id1003 . -533) (undo-tree-id1004 . -533) (undo-tree-id1005 . -533) (undo-tree-id1006 . -533) (undo-tree-id1007 . -533) (undo-tree-id1008 . -533) (undo-tree-id1009 . -540) (undo-tree-id1010 . -540) (undo-tree-id1011 . -540) (undo-tree-id1012 . -532) (undo-tree-id1013 . -513) (undo-tree-id1014 . -497) (undo-tree-id1015 . -496) (undo-tree-id1016 . -388) (undo-tree-id1017 . -324) (undo-tree-id1018 . -173) (undo-tree-id1019 . -56) (undo-tree-id1020 . -55) (undo-tree-id1021 . -55) (undo-tree-id1022 . -55) (undo-tree-id1023 . -540) (t 26011 54904 334592 682000)) nil (26011 55041 946435 0) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -3144) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) 3145) ((3144 . 3145)) (26011 54896 547854 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2942) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (#("
" 0 1 (fontified t)) . -2943) (undo-tree-id875 . -1) (undo-tree-id876 . 1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (#("
" 0 1 (fontified t)) . -2944) (undo-tree-id886 . -1) (undo-tree-id887 . -1) 2945) nil (26011 55041 947097 0) 0 nil])
([nil nil ((3144 . 3146)) ((#(".t" 0 1 (fontified t) 1 2 (fontified t)) . 3144) (undo-tree-id402 . -2) (undo-tree-id403 . -2) (undo-tree-id404 . -2) (undo-tree-id405 . -1) (undo-tree-id406 . -2)) (26011 54896 532629 0) 0 nil])
([nil nil ((1821 . 1829) (#("        " 0 8 (fontified nil)) . 1820) (undo-tree-id1033 . -8) (undo-tree-id1034 . -8) (undo-tree-id1035 . -8) (1820 . 1829) (#("        " 0 8 (fontified nil)) . 1819) (1819 . 1827) (1819 . 1820) (t 26011 55042 478300 888000)) nil (26011 55229 1699 0) 0 nil] [nil nil ((#("Ok(Self { texture, view, sampler })
    }

" 0 2 (face font-lock-type-face fontified t) 2 3 (face (rainbow-delimiters-depth-3-face) fontified t) 3 7 (face font-lock-type-face fontified t) 7 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-4-face) fontified t) 9 33 (fontified t) 33 34 (face (rainbow-delimiters-depth-4-face) fontified t) 34 35 (face (rainbow-delimiters-depth-3-face) fontified t) 35 36 (fontified t) 36 40 (fontified t) 40 41 (face (rainbow-delimiters-depth-2-face) fontified t) 41 42 (fontified t) 42 43 (fontified t)) . -2899) (undo-tree-id526 . -43) (undo-tree-id527 . -43) (undo-tree-id528 . -43) (undo-tree-id529 . -43) (undo-tree-id530 . -43) (undo-tree-id531 . -43) (undo-tree-id532 . -43) (undo-tree-id533 . -43) (undo-tree-id534 . -43) (undo-tree-id535 . -43) (undo-tree-id536 . -43) (undo-tree-id537 . -43) (undo-tree-id538 . -43) (undo-tree-id539 . -43) (undo-tree-id540 . -43) (undo-tree-id541 . -43) (undo-tree-id542 . -43) (undo-tree-id543 . -43) (undo-tree-id544 . -43) (undo-tree-id545 . -43) (undo-tree-id546 . -43) (undo-tree-id547 . -43) (undo-tree-id548 . -43) (undo-tree-id549 . -43) (undo-tree-id550 . -43) (undo-tree-id551 . -43) (undo-tree-id552 . -43) (undo-tree-id553 . -43) (undo-tree-id554 . -43) (undo-tree-id555 . -43) (undo-tree-id556 . -43) (undo-tree-id557 . -43) (undo-tree-id558 . -43) (undo-tree-id559 . -43) (undo-tree-id560 . -43) (undo-tree-id561 . -43) (undo-tree-id562 . -43) (undo-tree-id563 . -43) (undo-tree-id564 . -43) (undo-tree-id565 . -43) (undo-tree-id566 . -43) (undo-tree-id567 . -43) (undo-tree-id568 . -43) (undo-tree-id569 . -43) (undo-tree-id570 . -43) (undo-tree-id571 . -43) (undo-tree-id572 . -43) (undo-tree-id573 . -43) (undo-tree-id574 . -43) (undo-tree-id575 . -43) (undo-tree-id576 . -43) (undo-tree-id577 . -43) (undo-tree-id578 . -43) (undo-tree-id579 . -43) (undo-tree-id580 . -43) (undo-tree-id581 . -43) (undo-tree-id582 . -43) (undo-tree-id583 . -43) (undo-tree-id584 . -43) (undo-tree-id585 . -43) (undo-tree-id586 . -43) (undo-tree-id587 . -43) (undo-tree-id588 . -43) (undo-tree-id589 . -43) (undo-tree-id590 . -43) (undo-tree-id591 . -43) (undo-tree-id592 . -43) (undo-tree-id593 . -43) (undo-tree-id594 . -43) (undo-tree-id595 . -43) (undo-tree-id596 . -43) (undo-tree-id597 . -43) (undo-tree-id598 . -43) (undo-tree-id599 . -43) (undo-tree-id600 . -43) (undo-tree-id601 . -43) (undo-tree-id602 . -43) (undo-tree-id603 . -43) (undo-tree-id604 . -43) (undo-tree-id605 . -43) (undo-tree-id606 . -43) (undo-tree-id607 . -43) (undo-tree-id608 . -43) (undo-tree-id609 . -43) (undo-tree-id610 . -43) (undo-tree-id611 . -43) (undo-tree-id612 . -43) (undo-tree-id613 . -43) (undo-tree-id614 . -43) (undo-tree-id615 . -43) (undo-tree-id616 . -43) (undo-tree-id617 . -43) (undo-tree-id618 . -43) (undo-tree-id619 . -43) (undo-tree-id620 . -43) (undo-tree-id621 . -43) (undo-tree-id622 . -42) (undo-tree-id623 . -36) (undo-tree-id624 . -43) (undo-tree-id625 . -36) (undo-tree-id626 . -42) (undo-tree-id627 . -42) (undo-tree-id628 . -42) (undo-tree-id629 . -42) (undo-tree-id630 . -42) (undo-tree-id631 . -42) (undo-tree-id632 . -42) (undo-tree-id633 . -42) (undo-tree-id634 . -42) (undo-tree-id635 . -42) (undo-tree-id636 . -42) (undo-tree-id637 . -42) (undo-tree-id638 . -42) (undo-tree-id639 . -42) (undo-tree-id640 . -42) (undo-tree-id641 . -42) (undo-tree-id642 . -42) (undo-tree-id643 . -42) (undo-tree-id644 . -42) (undo-tree-id645 . -42) (undo-tree-id646 . -42) (undo-tree-id647 . -42) (undo-tree-id648 . -42) (undo-tree-id649 . -42) (undo-tree-id650 . -42) (undo-tree-id651 . -42) (undo-tree-id652 . -42) (undo-tree-id653 . -42) (undo-tree-id654 . -42) (undo-tree-id655 . -42) (undo-tree-id656 . -43) (undo-tree-id657 . -43) (undo-tree-id658 . -43) (undo-tree-id659 . -43) (undo-tree-id660 . -43) (undo-tree-id661 . -43) (undo-tree-id662 . -43) (undo-tree-id663 . -43) (undo-tree-id664 . -43) (undo-tree-id665 . -43) (undo-tree-id666 . -43) (undo-tree-id667 . -43) (undo-tree-id668 . -43) (undo-tree-id669 . -43) (undo-tree-id670 . -43) (undo-tree-id671 . -43) (undo-tree-id672 . -43) (undo-tree-id673 . -43) (undo-tree-id674 . -43) (undo-tree-id675 . -43) (undo-tree-id676 . -43) (undo-tree-id677 . -43) (undo-tree-id678 . -43) (undo-tree-id679 . -43) (undo-tree-id680 . -43) (undo-tree-id681 . -43) (undo-tree-id682 . -43) (undo-tree-id683 . -43) (undo-tree-id684 . -43) (undo-tree-id685 . -43) (undo-tree-id686 . -43) (undo-tree-id687 . -43) (undo-tree-id688 . -43) (undo-tree-id689 . -43) (undo-tree-id690 . -43) (undo-tree-id691 . -43) (undo-tree-id692 . -43) (undo-tree-id693 . -43) (undo-tree-id694 . -43) (undo-tree-id695 . -43) (undo-tree-id696 . -43) (undo-tree-id697 . -43) (undo-tree-id698 . -43) (undo-tree-id699 . -43) (undo-tree-id700 . -43) (undo-tree-id701 . -43) (undo-tree-id702 . -43) (undo-tree-id703 . -43) (undo-tree-id704 . -43) (undo-tree-id705 . -43) (undo-tree-id706 . -43) (undo-tree-id707 . -43) (undo-tree-id708 . -43) (undo-tree-id709 . -43) (undo-tree-id710 . -43) (undo-tree-id711 . -43) (undo-tree-id712 . -43) (undo-tree-id713 . -43) (undo-tree-id714 . -43) (undo-tree-id715 . -43) (undo-tree-id716 . -43) (undo-tree-id717 . -43) (undo-tree-id718 . -43) (undo-tree-id719 . -43) 2942) ((2899 . 2942)) (26011 55041 946083 0) 0 nil])
([nil nil ((3145 . 3152) (#("t" 0 1 (fontified nil)) . 3145) (3145 . 3146) (#("texture" 0 7 (fontified nil)) . -3145) (3145 . 3152) (#("t" 0 1 (fontified t)) . -3145) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) 3146) ((3145 . 3146) (#("texture" 0 7 (fontified nil)) . 3145) (3145 . 3152) (#("t" 0 1 (fontified nil)) . 3145) (3145 . 3146) (#("texture" 0 7 (fontified t)) . 3145) (undo-tree-id400 . -7) (undo-tree-id401 . -7)) (26011 54896 531703 0) 0 nil])
([nil nil ((1829 . 1833)) nil (26011 55229 1694 0) 0 nil])
nil
nil
([nil nil ((#("s" 0 1 (face font-lock-doc-face fontified t)) . -1832) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) 1833) nil (26011 55229 1692 0) 0 nil])
([nil nil ((1832 . 1836)) nil (26011 55229 1689 0) 0 nil])
([nil nil ((1836 . 1857)) nil (26011 55229 1688 0) 0 nil])
([nil nil ((1857 . 1858)) nil (26011 55229 1687 0) 0 nil])
([nil nil ((1858 . 1879)) nil (26011 55229 1686 0) 0 nil])
([nil nil ((1879 . 1883)) nil (26011 55229 1685 0) 0 nil])
([nil nil ((1883 . 1890)) nil (26011 55229 1684 0) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-doc-face fontified t)) . -1889) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) 1890) nil (26011 55229 1683 0) 0 nil])
([nil nil ((1889 . 1895)) nil (26011 55229 1679 0) 0 nil])
([nil nil ((#("p" 0 1 (face font-lock-doc-face fontified t)) . -1894) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) 1895) nil (26011 55229 1677 0) 0 nil])
([nil nil ((1894 . 1898)) nil (26011 55229 1660 0) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-doc-face fontified t)) . -1831) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) 1832 (t 26011 55229 10104 49000)) nil (26011 55234 91800 0) 0 nil])
([nil nil ((1897 . 1898) (t 26011 55234 100616 771000)) nil (26011 55244 56101 0) 0 nil])
([nil nil ((1886 . 1887) (t 26011 55244 64921 41000)) nil (26011 55254 167859 0) 0 nil])
([nil nil ((1882 . 1885)) nil (26011 55254 167858 0) 0 nil])
([nil nil ((1885 . 1886)) nil (26011 55254 167857 0) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-comment-face fontified t)) . -1891) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) 1892) nil (26011 55254 167853 0) 0 nil])
([nil nil ((3887 . 3891) (#("    " 0 4 (fontified nil)) . 3886) (undo-tree-id1051 . -4) (undo-tree-id1052 . -4) (undo-tree-id1053 . -4) (3886 . 3891) (#("    " 0 4 (fontified nil)) . 3885) (undo-tree-id1054 . -4) (undo-tree-id1055 . -4) (undo-tree-id1056 . -4) (3884 . 3890) (t 26011 55254 176632 744000)) nil (26014 16183 347496 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 5504 . 5505) (nil fontified nil 3891 . 5505) (3891 . 5505)) nil (26014 16183 347473 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3891) 3900 (t 26014 16183 356796 135000)) nil (26014 16186 619776 0) 0 nil])
([nil nil ((5503 . 5507) (#("    " 0 4 (fontified nil)) . 5502) (undo-tree-id1057 . -4) (undo-tree-id1058 . -4) (undo-tree-id1059 . -4) (5501 . 5507) (t 26014 16186 628708 39000)) nil (26014 19205 420251 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 7023 . 7024) (nil fontified nil 5507 . 7024) (5507 . 7024)) nil (26014 19205 420232 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -5507) 5519 (t 26014 19205 429452 368000)) nil (26014 19208 936679 0) 0 nil])
([nil nil ((452 . 461) (t 26014 19208 945818 979000)) nil (26014 30886 939078 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 496 . 497) (nil fontified nil 461 . 497) (461 . 497)) nil (26014 30886 939076 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -461) 491) nil (26014 30886 939075 0) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . -492) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) 493) nil (26014 30886 939073 0) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -569) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) 570) nil (26014 30886 939060 0) 0 nil])
([nil nil ((569 . 572)) nil (26014 30886 939052 0) 0 nil])
([nil nil ((569 . 575) (#("rea" 0 3 (fontified nil)) . 569) (569 . 572) (#("reader" 0 6 (fontified nil)) . -569) (569 . 575) (#("rea" 0 3 (fontified t)) . -569) (undo-tree-id1060 . -3) (undo-tree-id1061 . -3) (undo-tree-id1062 . -1) (undo-tree-id1063 . -2) (undo-tree-id1064 . -2) (undo-tree-id1065 . -2) (undo-tree-id1066 . -3) (undo-tree-id1067 . -3) (undo-tree-id1068 . -3) (undo-tree-id1069 . -3) (undo-tree-id1070 . -3) (undo-tree-id1071 . -3) 572) nil (26014 30886 939047 0) 0 nil])
([nil nil ((474 . 478) (t 26014 30886 950036 490000)) nil (26014 30894 520627 0) 0 nil])
([nil nil ((477 . 483)) nil (26014 30894 520625 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -483) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . 1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) 484) nil (26015 39839 163191 0) 0 nil])
([nil nil ((465 . 469)) ((#("mut " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . 465)) (26015 39839 532792 0) 0 nil])
([nil nil ((#("mut" 0 3 (face font-lock-keyword-face fontified t)) . 418)) ((418 . 421)) (26015 39839 713112 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 417) (undo-tree-id2973 . -1) (undo-tree-id2974 . -1)) ((417 . 418)) (26015 39841 248938 0) 0 nil])
([nil nil ((405 . 414) (t 26015 39843 621573 321000)) nil (26015 39859 391312 0) 0 nil] [nil nil ((#("unwrap()" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-3-face) fontified t) 7 8 (face (rainbow-delimiters-depth-3-face) fontified t)) . 439)) ((439 . 447)) (26015 39840 604655 0) 0 nil])
([nil nil ((414 . 415)) nil (26015 39859 391311 0) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -438) (undo-tree-id65 . -1) (undo-tree-id66 . -1) 439) ((438 . 439)) (26015 39836 253978 0) 0 nil])
([nil nil ((415 . 417)) nil (26015 39859 391309 0) 0 nil])
([nil nil ((439 . 448)) ((#("
        " 0 1 (fontified t) 1 9 (fontified t)) . 439) (undo-tree-id2972 . -1)) (26015 39836 61419 0) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -414) (undo-tree-id2975 . -1) (undo-tree-id2976 . -1) (undo-tree-id2977 . -1) (undo-tree-id2978 . -1) (undo-tree-id2979 . -1) (undo-tree-id2980 . -1) (undo-tree-id2981 . -1) (undo-tree-id2982 . -1) (undo-tree-id2983 . -1) (undo-tree-id2984 . -1) (undo-tree-id2985 . -1) (undo-tree-id2986 . -1) (undo-tree-id2987 . -1) (undo-tree-id2988 . -1) (undo-tree-id2989 . -1) (#("r" 0 1 (fontified t)) . -415) (undo-tree-id2990 . -1) (undo-tree-id2991 . -1) (undo-tree-id2992 . -1) (undo-tree-id2993 . -1) (undo-tree-id2994 . -1) (undo-tree-id2995 . -1) (undo-tree-id2996 . -1) (undo-tree-id2997 . -1) (undo-tree-id2998 . -1) (undo-tree-id2999 . -1) (undo-tree-id3000 . -1) (#("y" 0 1 (face font-lock-keyword-face fontified t)) . -416) (undo-tree-id3001 . -1) (undo-tree-id3002 . -1) (undo-tree-id3003 . -1) (undo-tree-id3004 . -1) (undo-tree-id3005 . -1) (undo-tree-id3006 . -1) 417) nil (26015 39859 391304 0) 0 nil])
([nil nil ((#("f =" 0 1 (face font-lock-variable-name-face fontified t) 1 3 (fontified t)) . -418) (undo-tree-id61 . -3) (undo-tree-id62 . -3) (undo-tree-id64 . -3) 421) ((418 . 421)) (26015 39835 865779 0) 0 nil])
([nil nil ((406 . 408) (t 26015 39859 406467 254000)) nil (26015 39961 162860 0) 0 nil])
([nil nil ((#("let " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -414) (undo-tree-id56 . -4) (undo-tree-id57 . -4) (undo-tree-id59 . -4) 418) ((414 . 418)) (26015 39835 652678 0) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -406) (undo-tree-id3030 . -1) (undo-tree-id3031 . -1) (undo-tree-id3032 . -1) (undo-tree-id3033 . -1) (undo-tree-id3034 . -1) (undo-tree-id3035 . -1) (undo-tree-id3036 . -1) (undo-tree-id3037 . -1) (undo-tree-id3038 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -407) (undo-tree-id3039 . -1) (undo-tree-id3040 . -1) (undo-tree-id3041 . -1) (undo-tree-id3042 . -1) (undo-tree-id3043 . -1) 408) nil (26015 39961 162857 0) 0 nil])
([nil nil ((414 . 420)) ((#("mathch" 0 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . 414) (undo-tree-id2970 . -6) (undo-tree-id2971 . -6)) (26015 39835 459817 0) 0 nil])
([nil nil ((414 . 422)) nil (26015 39961 162842 0) 0 nil])
([nil nil ((#("h" 0 1 (fontified t)) . -417) (undo-tree-id25 . -1) (undo-tree-id27 . -1) (undo-tree-id29 . -1) (undo-tree-id31 . -1) (undo-tree-id33 . -1) (undo-tree-id35 . -1) (undo-tree-id37 . -1) (#("c" 0 1 (fontified t)) . -418) (undo-tree-id39 . -1) (undo-tree-id41 . -1) (undo-tree-id43 . -1) (undo-tree-id45 . -1) (undo-tree-id47 . -1) (undo-tree-id49 . -1) (#("h" 0 1 (fontified t)) . -419) (undo-tree-id51 . -1) (undo-tree-id53 . -1) (undo-tree-id55 . -1) 420) ((417 . 420)) (26015 39835 269495 0) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -421) (undo-tree-id3026 . -1) (undo-tree-id3027 . -1) (undo-tree-id3028 . -1) (undo-tree-id3029 . -1) 422) nil (26015 39961 162841 0) 0 nil])
([nil nil ((417 . 419)) ((#("ch" 0 2 (face font-lock-keyword-face fontified t)) . 417)) (26015 39835 41691 0) 0 nil])
([nil nil ((421 . 424)) nil (26015 39961 162836 0) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -436) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id77 . -1) (undo-tree-id79 . -1) (undo-tree-id81 . -1) 437) ((436 . 437)) (26015 39834 606502 0) 0 nil] [nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 420 420 nil nil nil nil #s(yas--exit 435 nil))) #s(yas--exit 435 nil) 4 nil #s(yas--field 1 420 420 nil nil nil nil #s(yas--exit 435 nil)) nil nil)) (414 . 445) (#("match $1 {
            $0
        }" 0 35 (fontified nil)) . 414) (440 . 448) (425 . 437) (#("    " 0 4 (fontified nil)) . 425) (414 . 433) (#("match" 0 5 (fontified nil)) . 414) (414 . 419) (#("match" 0 5 (face font-lock-keyword-face fontified t)) . -414) (undo-tree-id0 . -5) (undo-tree-id1 . -5) (undo-tree-id2 . -3) (undo-tree-id3 . -3) (undo-tree-id4 . -3) (undo-tree-id5 . -3) (undo-tree-id6 . -3) (undo-tree-id7 . -3) (undo-tree-id8 . -3) (undo-tree-id9 . -3) (undo-tree-id10 . -3) (undo-tree-id11 . -3) (undo-tree-id12 . -3) (undo-tree-id13 . -3) (undo-tree-id14 . -3) (undo-tree-id15 . -3) (undo-tree-id16 . -3) (undo-tree-id17 . -4) (undo-tree-id18 . -5) (undo-tree-id19 . -5) (undo-tree-id20 . -5) (undo-tree-id21 . -5) (undo-tree-id22 . -5) (undo-tree-id23 . -5) (undo-tree-id24 . -5) 419) ((414 . 419) (#("match" 0 5 (fontified nil)) . 414) (414 . 419) (#("match $1 {
    $0
}" 0 11 (fontified nil) 11 15 (fontified nil) 15 19 (fontified nil)) . 414) (425 . 429) (#("            " 0 12 (fontified nil)) . 425) (#("        " 0 8 (fontified nil)) . 440) (414 . 449) (#("match  {
            
        }" 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (face (rainbow-delimiters-depth-3-face) fontified t) 8 30 (fontified t) 30 31 (face (rainbow-delimiters-depth-3-face) fontified t)) . 414) (undo-tree-id69 . -6) (apply yas--snippet-revive 414 445 #s(yas--snippet nil (#s(yas--field 1 420 420 nil nil nil nil #s(yas--exit 435 nil))) #s(yas--exit 435 nil) 4 nil #s(yas--field 1 420 420 nil nil nil nil #s(yas--exit 435 nil)) nil nil))) (26015 39305 704093 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 425 426 nil nil nil t #s(yas--exit 427 nil))) #s(yas--exit 427 nil) 12 nil #s(yas--field 1 425 426 nil nil nil t #s(yas--exit 427 nil)) nil nil)) (421 . 426) (#("Err($1)$0" 0 9 (fontified nil)) . 421) (421 . 430) (#("Err" 0 3 (fontified nil)) . 421) (421 . 424) (#("Err(…)" 0 6 (fontified nil)) . -421) (421 . 427) (#("Err" 0 3 (face font-lock-type-face fontified t)) . -421) (undo-tree-id3015 . -3) (undo-tree-id3016 . -1) (undo-tree-id3017 . -1) (undo-tree-id3018 . -2) (undo-tree-id3019 . -2) (undo-tree-id3020 . -2) (undo-tree-id3021 . -3) (undo-tree-id3022 . -3) (undo-tree-id3023 . -3) (undo-tree-id3024 . -3) (undo-tree-id3025 . -3) 424) nil (26015 39961 162833 0) 0 nil])
([nil nil ((436 . 439)) ((#(" {}" 0 1 (fontified t) 1 2 (face (rainbow-delimiters-depth-3-face) fontified t) 2 3 (face (rainbow-delimiters-depth-3-face) fontified t)) . 436) (undo-tree-id2855 . -2) (undo-tree-id2856 . -2) (undo-tree-id2857 . -2) (undo-tree-id2858 . -2) (undo-tree-id2859 . -2) (undo-tree-id2860 . -2) (undo-tree-id2861 . -2) (undo-tree-id2862 . -2) (undo-tree-id2863 . -2) (undo-tree-id2864 . -2) (undo-tree-id2865 . -2) (undo-tree-id2866 . -2) (undo-tree-id2867 . -2) (undo-tree-id2868 . -2) (undo-tree-id2869 . -2) (undo-tree-id2870 . -2) (undo-tree-id2871 . -2) (undo-tree-id2872 . -2) (undo-tree-id2873 . -2) (undo-tree-id2874 . -2) (undo-tree-id2875 . -2) (undo-tree-id2876 . -2) (undo-tree-id2877 . -2) (undo-tree-id2878 . -2) (undo-tree-id2879 . -2) (undo-tree-id2880 . -2) (undo-tree-id2881 . -2) (undo-tree-id2882 . -2) (undo-tree-id2883 . -2) (undo-tree-id2884 . -2) (undo-tree-id2885 . -2) (undo-tree-id2886 . -2) (undo-tree-id2887 . -2) (undo-tree-id2888 . -2) (undo-tree-id2889 . -2) (undo-tree-id2890 . -2) (undo-tree-id2891 . -2) (undo-tree-id2892 . -2) (undo-tree-id2893 . -2) (undo-tree-id2894 . -2) (undo-tree-id2895 . -2) (undo-tree-id2896 . -2) (undo-tree-id2897 . -2) (undo-tree-id2898 . -2) (undo-tree-id2899 . -2) (undo-tree-id2900 . -2) (undo-tree-id2901 . -2) (undo-tree-id2902 . -2) (undo-tree-id2903 . -2) (undo-tree-id2904 . -2) (undo-tree-id2905 . -2) (undo-tree-id2906 . -2) (undo-tree-id2907 . -2) (undo-tree-id2908 . -2) (undo-tree-id2909 . -2) (undo-tree-id2910 . -2) (undo-tree-id2911 . -2) (undo-tree-id2912 . -2) (undo-tree-id2913 . -2) (undo-tree-id2914 . -2) (undo-tree-id2915 . -2) (undo-tree-id2916 . -2) (undo-tree-id2917 . -2) (undo-tree-id2918 . -2) (undo-tree-id2919 . -2) (undo-tree-id2920 . -2) (undo-tree-id2921 . -2) (undo-tree-id2922 . -2) (undo-tree-id2923 . -2) (undo-tree-id2924 . -2) (undo-tree-id2925 . -2) (undo-tree-id2926 . -2) (undo-tree-id2927 . -2) (undo-tree-id2928 . -2) (undo-tree-id2929 . -2) (undo-tree-id2930 . -2) (undo-tree-id2931 . -2) (undo-tree-id2932 . -2) (undo-tree-id2933 . -2) (undo-tree-id2934 . -2) (undo-tree-id2935 . -2) (undo-tree-id2936 . -2) (undo-tree-id2937 . -2) (undo-tree-id2938 . -2) (undo-tree-id2939 . -2) (undo-tree-id2940 . -2) (undo-tree-id2941 . -2) (undo-tree-id2942 . -2) (undo-tree-id2943 . -2) (undo-tree-id2944 . -2) (undo-tree-id2945 . -2) (undo-tree-id2946 . -2) (undo-tree-id2947 . -2) (undo-tree-id2948 . -2) (undo-tree-id2949 . -2) (undo-tree-id2950 . -2) (undo-tree-id2951 . -2) (undo-tree-id2952 . -2) (undo-tree-id2953 . -2) (undo-tree-id2954 . -2) (undo-tree-id2955 . -2) (undo-tree-id2956 . -2) (undo-tree-id2957 . -2) (undo-tree-id2958 . -2) (undo-tree-id2959 . -2) (undo-tree-id2960 . -2) (undo-tree-id2961 . -2) (undo-tree-id2962 . -2) (undo-tree-id2963 . -2) (undo-tree-id2964 . -2) (undo-tree-id2965 . -2) (undo-tree-id2966 . -2) (undo-tree-id2967 . -2) (undo-tree-id2968 . -2) (undo-tree-id2969 . -2)) (26015 39834 523974 0) 0 nil])
nil
([nil nil ((425 . 426)) nil (26015 39961 162819 0) 0 nil])
([nil nil ((440 . 448) (#("            " 0 12 (fontified nil)) . 439) (undo-tree-id70 . -8) (undo-tree-id72 . -8) (447 . 451) (438 . 448)) ((#("
        
" 0 1 (fontified t) 1 9 (fontified nil) 9 10 (fontified nil)) . 438) (undo-tree-id2745 . -1) (undo-tree-id2746 . -1) (undo-tree-id2747 . -1) (undo-tree-id2748 . -1) (undo-tree-id2749 . -1) (undo-tree-id2750 . -1) (undo-tree-id2751 . -9) (undo-tree-id2752 . -1) (undo-tree-id2753 . -1) (undo-tree-id2754 . -1) (undo-tree-id2755 . -1) (undo-tree-id2756 . -1) (undo-tree-id2757 . -1) (undo-tree-id2758 . -1) (undo-tree-id2759 . -1) (undo-tree-id2760 . -1) (undo-tree-id2761 . -1) (undo-tree-id2762 . -1) (undo-tree-id2763 . -1) (undo-tree-id2764 . -1) (undo-tree-id2765 . -1) (undo-tree-id2766 . -1) (undo-tree-id2767 . -1) (undo-tree-id2768 . -1) (undo-tree-id2769 . -1) (undo-tree-id2770 . -1) (undo-tree-id2771 . -1) (undo-tree-id2772 . -1) (undo-tree-id2773 . -1) (undo-tree-id2774 . -1) (undo-tree-id2775 . -1) (undo-tree-id2776 . -1) (undo-tree-id2777 . -1) (undo-tree-id2778 . -1) (undo-tree-id2779 . -1) (undo-tree-id2780 . -1) (undo-tree-id2781 . -1) (undo-tree-id2782 . -1) (undo-tree-id2783 . -1) (undo-tree-id2784 . -1) (undo-tree-id2785 . -1) (undo-tree-id2786 . -1) (undo-tree-id2787 . -1) (undo-tree-id2788 . -1) (undo-tree-id2789 . -1) (undo-tree-id2790 . -1) (undo-tree-id2791 . -1) (undo-tree-id2792 . -1) (undo-tree-id2793 . -1) (undo-tree-id2794 . -1) (undo-tree-id2795 . -1) (undo-tree-id2796 . -1) (undo-tree-id2797 . -1) (undo-tree-id2798 . -1) (undo-tree-id2799 . -1) (undo-tree-id2800 . -1) (undo-tree-id2801 . -1) (undo-tree-id2802 . -1) (undo-tree-id2803 . -1) (undo-tree-id2804 . -1) (undo-tree-id2805 . -1) (undo-tree-id2806 . -1) (undo-tree-id2807 . -1) (undo-tree-id2808 . -1) (undo-tree-id2809 . -1) (undo-tree-id2810 . -1) (undo-tree-id2811 . -1) (undo-tree-id2812 . -1) (undo-tree-id2813 . -1) (undo-tree-id2814 . -1) (undo-tree-id2815 . -1) (undo-tree-id2816 . -1) (undo-tree-id2817 . -1) (undo-tree-id2818 . -1) (undo-tree-id2819 . -1) (undo-tree-id2820 . -1) (undo-tree-id2821 . -1) (undo-tree-id2822 . -1) (undo-tree-id2823 . -1) (undo-tree-id2824 . -1) (undo-tree-id2825 . -1) (undo-tree-id2826 . -1) (undo-tree-id2827 . -1) (undo-tree-id2828 . -1) (undo-tree-id2829 . -1) (undo-tree-id2830 . -1) (undo-tree-id2831 . -1) (undo-tree-id2832 . -1) (undo-tree-id2833 . -1) (undo-tree-id2834 . -1) (undo-tree-id2835 . -1) (undo-tree-id2836 . -1) (undo-tree-id2837 . -1) (undo-tree-id2838 . -1) (undo-tree-id2839 . -1) (undo-tree-id2840 . -1) (undo-tree-id2841 . -1) (undo-tree-id2842 . -1) (undo-tree-id2843 . -1) (undo-tree-id2844 . -1) (undo-tree-id2845 . -1) (undo-tree-id2846 . -1) (undo-tree-id2847 . -1) (undo-tree-id2848 . -1) (undo-tree-id2849 . -1) (undo-tree-id2850 . -1) (undo-tree-id2851 . -1) (undo-tree-id2852 . -1) (undo-tree-id2853 . -1) (undo-tree-id2854 . -1) (#("    " 0 4 (fontified nil)) . 447) (439 . 451) (#("        " 0 8 (fontified t)) . 440)) (26015 39834 485646 0) 0 nil])
([nil nil ((apply yas--snippet-revive 421 427 #s(yas--snippet nil (#s(yas--field 1 425 426 nil nil nil t #s(yas--exit 427 nil))) #s(yas--exit 427 nil) 12 nil #s(yas--field 1 425 426 nil nil nil t #s(yas--exit 427 nil)) nil nil))) nil (26015 39961 162818 0) 0 nil])
([nil nil ((439 . 451)) (("            " . 439) (undo-tree-id2636 . -12) (undo-tree-id2637 . -12) (undo-tree-id2638 . -12) (undo-tree-id2639 . -12) (undo-tree-id2640 . -12) (undo-tree-id2641 . -12) (undo-tree-id2642 . -12) (undo-tree-id2643 . -12) (undo-tree-id2644 . -12) (undo-tree-id2645 . -12) (undo-tree-id2646 . -12) (undo-tree-id2647 . -12) (undo-tree-id2648 . -12) (undo-tree-id2649 . -12) (undo-tree-id2650 . -12) (undo-tree-id2651 . -12) (undo-tree-id2652 . -12) (undo-tree-id2653 . -12) (undo-tree-id2654 . -12) (undo-tree-id2655 . -12) (undo-tree-id2656 . -12) (undo-tree-id2657 . -12) (undo-tree-id2658 . -12) (undo-tree-id2659 . -12) (undo-tree-id2660 . -12) (undo-tree-id2661 . -12) (undo-tree-id2662 . -12) (undo-tree-id2663 . -12) (undo-tree-id2664 . -12) (undo-tree-id2665 . -12) (undo-tree-id2666 . -12) (undo-tree-id2667 . -12) (undo-tree-id2668 . -12) (undo-tree-id2669 . -12) (undo-tree-id2670 . -12) (undo-tree-id2671 . -12) (undo-tree-id2672 . -12) (undo-tree-id2673 . -12) (undo-tree-id2674 . -12) (undo-tree-id2675 . -12) (undo-tree-id2676 . -12) (undo-tree-id2677 . -12) (undo-tree-id2678 . -12) (undo-tree-id2679 . -12) (undo-tree-id2680 . -12) (undo-tree-id2681 . -12) (undo-tree-id2682 . -12) (undo-tree-id2683 . -12) (undo-tree-id2684 . -12) (undo-tree-id2685 . -12) (undo-tree-id2686 . -12) (undo-tree-id2687 . -12) (undo-tree-id2688 . -12) (undo-tree-id2689 . -12) (undo-tree-id2690 . -12) (undo-tree-id2691 . -12) (undo-tree-id2692 . -12) (undo-tree-id2693 . -12) (undo-tree-id2694 . -12) (undo-tree-id2695 . -12) (undo-tree-id2696 . -12) (undo-tree-id2697 . -12) (undo-tree-id2698 . -12) (undo-tree-id2699 . -12) (undo-tree-id2700 . -12) (undo-tree-id2701 . -12) (undo-tree-id2702 . -12) (undo-tree-id2703 . -12) (undo-tree-id2704 . -12) (undo-tree-id2705 . -12) (undo-tree-id2706 . -12) (undo-tree-id2707 . -12) (undo-tree-id2708 . -12) (undo-tree-id2709 . -12) (undo-tree-id2710 . -12) (undo-tree-id2711 . -12) (undo-tree-id2712 . -12) (undo-tree-id2713 . -12) (undo-tree-id2714 . -12) (undo-tree-id2715 . -12) (undo-tree-id2716 . -12) (undo-tree-id2717 . -12) (undo-tree-id2718 . -12) (undo-tree-id2719 . -12) (undo-tree-id2720 . -12) (undo-tree-id2721 . -12) (undo-tree-id2722 . -12) (undo-tree-id2723 . -12) (undo-tree-id2724 . -12) (undo-tree-id2725 . -12) (undo-tree-id2726 . -12) (undo-tree-id2727 . -12) (undo-tree-id2728 . -12) (undo-tree-id2729 . -12) (undo-tree-id2730 . -12) (undo-tree-id2731 . -12) (undo-tree-id2732 . -12) (undo-tree-id2733 . -12) (undo-tree-id2734 . -12) (undo-tree-id2735 . -12) (undo-tree-id2736 . -12) (undo-tree-id2737 . -12) (undo-tree-id2738 . -12) (undo-tree-id2739 . -12) (undo-tree-id2740 . -12) (undo-tree-id2741 . -12) (undo-tree-id2742 . -12) (undo-tree-id2743 . -12) (undo-tree-id2744 . -12)) (26015 39833 940086 0) 0 nil])
([nil nil ((427 . 436)) nil (26015 39961 162817 0) 0 nil])
([nil nil ((451 . 453) (t 26015 39312 887851 258000)) ((#("Ok" 0 2 (face font-lock-type-face fontified t)) . 451) (undo-tree-id2634 . -2) (undo-tree-id2635 . -2)) (26015 39833 763216 0) 0 nil])
([nil nil ((436 . 438)) nil (26015 39961 162817 0) 0 nil])
([nil nil ((451 . 453) (#("Ok" 0 2 (fontified nil)) . 451) (451 . 453) (#("Ok" 0 2 (face font-lock-type-face fontified t)) . -451) (undo-tree-id172 . -2) (undo-tree-id174 . -1) (undo-tree-id176 . -1) (undo-tree-id178 . -2) (undo-tree-id180 . -2) 453) ((451 . 453) (#("Ok" 0 2 (fontified nil)) . 451) (451 . 453) (#("Ok" 0 2 (face font-lock-type-face fontified t)) . 451) (undo-tree-id2526 . -2) (undo-tree-id2527 . -2) (undo-tree-id2528 . -2) (undo-tree-id2529 . -2) (undo-tree-id2530 . -2) (undo-tree-id2531 . -2) (undo-tree-id2532 . -2) (undo-tree-id2533 . -2) (undo-tree-id2534 . -2) (undo-tree-id2535 . -2) (undo-tree-id2536 . -2) (undo-tree-id2537 . -2) (undo-tree-id2538 . -2) (undo-tree-id2539 . -2) (undo-tree-id2540 . -2) (undo-tree-id2541 . -2) (undo-tree-id2542 . -2) (undo-tree-id2543 . -2) (undo-tree-id2544 . -2) (undo-tree-id2545 . -2) (undo-tree-id2546 . -2) (undo-tree-id2547 . -2) (undo-tree-id2548 . -2) (undo-tree-id2549 . -2) (undo-tree-id2550 . -2) (undo-tree-id2551 . -2) (undo-tree-id2552 . -2) (undo-tree-id2553 . -2) (undo-tree-id2554 . -2) (undo-tree-id2555 . -2) (undo-tree-id2556 . -2) (undo-tree-id2557 . -2) (undo-tree-id2558 . -2) (undo-tree-id2559 . -2) (undo-tree-id2560 . -2) (undo-tree-id2561 . -2) (undo-tree-id2562 . -2) (undo-tree-id2563 . -2) (undo-tree-id2564 . -2) (undo-tree-id2565 . -2) (undo-tree-id2566 . -2) (undo-tree-id2567 . -2) (undo-tree-id2568 . -2) (undo-tree-id2569 . -2) (undo-tree-id2570 . -2) (undo-tree-id2571 . -2) (undo-tree-id2572 . -2) (undo-tree-id2573 . -2) (undo-tree-id2574 . -2) (undo-tree-id2575 . -2) (undo-tree-id2576 . -2) (undo-tree-id2577 . -2) (undo-tree-id2578 . -2) (undo-tree-id2579 . -2) (undo-tree-id2580 . -2) (undo-tree-id2581 . -2) (undo-tree-id2582 . -2) (undo-tree-id2583 . -2) (undo-tree-id2584 . -2) (undo-tree-id2585 . -2) (undo-tree-id2586 . -2) (undo-tree-id2587 . -2) (undo-tree-id2588 . -2) (undo-tree-id2589 . -2) (undo-tree-id2590 . -2) (undo-tree-id2591 . -2) (undo-tree-id2592 . -2) (undo-tree-id2593 . -2) (undo-tree-id2594 . -2) (undo-tree-id2595 . -2) (undo-tree-id2596 . -2) (undo-tree-id2597 . -2) (undo-tree-id2598 . -2) (undo-tree-id2599 . -2) (undo-tree-id2600 . -2) (undo-tree-id2601 . -2) (undo-tree-id2602 . -2) (undo-tree-id2603 . -2) (undo-tree-id2604 . -2) (undo-tree-id2605 . -2) (undo-tree-id2606 . -2) (undo-tree-id2607 . -2) (undo-tree-id2608 . -2) (undo-tree-id2609 . -2) (undo-tree-id2610 . -2) (undo-tree-id2611 . -2) (undo-tree-id2612 . -2) (undo-tree-id2613 . -2) (undo-tree-id2614 . -2) (undo-tree-id2615 . -2) (undo-tree-id2616 . -2) (undo-tree-id2617 . -2) (undo-tree-id2618 . -2) (undo-tree-id2619 . -2) (undo-tree-id2620 . -2) (undo-tree-id2621 . -2) (undo-tree-id2622 . -2) (undo-tree-id2623 . -2) (undo-tree-id2624 . -2) (undo-tree-id2625 . -2) (undo-tree-id2626 . -2) (undo-tree-id2627 . -2) (undo-tree-id2628 . -2) (undo-tree-id2629 . -2) (undo-tree-id2630 . -2) (undo-tree-id2631 . -2) (undo-tree-id2632 . -2) (undo-tree-id2633 . -2)) (26015 39833 606539 0) 0 nil])
([nil nil ((apply yas--snippet-revive 436 444 #s(yas--snippet nil nil #s(yas--exit 443 nil) 13 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 443 nil) 13 nil nil nil nil)) (436 . 444) (#("Result<$0>" 0 10 (fontified nil)) . 436) (436 . 446) (#("Re" 0 2 (fontified nil)) . 436) (436 . 438) (#("Result<…>" 0 9 (fontified nil)) . -436) (436 . 445) (#("Re" 0 2 (face font-lock-type-face fontified t)) . -436) (undo-tree-id3007 . -2) (undo-tree-id3008 . -1) (undo-tree-id3009 . -1) (undo-tree-id3010 . -2) (undo-tree-id3011 . -2) (undo-tree-id3012 . -2) (undo-tree-id3013 . -2) (undo-tree-id3014 . -2) 438) nil (26015 39961 162814 0) 0 nil])
([nil nil ((453 . 455)) ((#("()" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t) 1 2 (face (rainbow-delimiters-depth-4-face) fontified t)) . 453) (undo-tree-id2418 . -2) (undo-tree-id2419 . -2) (undo-tree-id2420 . -2) (undo-tree-id2421 . -2) (undo-tree-id2422 . -1) (undo-tree-id2423 . -1) (undo-tree-id2424 . -1) (undo-tree-id2425 . -2) (undo-tree-id2426 . -2) (undo-tree-id2427 . -2) (undo-tree-id2428 . -2) (undo-tree-id2429 . -2) (undo-tree-id2430 . -2) (undo-tree-id2431 . -2) (undo-tree-id2432 . -2) (undo-tree-id2433 . -2) (undo-tree-id2434 . -2) (undo-tree-id2435 . -2) (undo-tree-id2436 . -2) (undo-tree-id2437 . -2) (undo-tree-id2438 . -2) (undo-tree-id2439 . -2) (undo-tree-id2440 . -2) (undo-tree-id2441 . -2) (undo-tree-id2442 . -2) (undo-tree-id2443 . -2) (undo-tree-id2444 . -2) (undo-tree-id2445 . -2) (undo-tree-id2446 . -2) (undo-tree-id2447 . -2) (undo-tree-id2448 . -2) (undo-tree-id2449 . -2) (undo-tree-id2450 . -2) (undo-tree-id2451 . -2) (undo-tree-id2452 . -2) (undo-tree-id2453 . -2) (undo-tree-id2454 . -2) (undo-tree-id2455 . -2) (undo-tree-id2456 . -2) (undo-tree-id2457 . -2) (undo-tree-id2458 . -2) (undo-tree-id2459 . -2) (undo-tree-id2460 . -2) (undo-tree-id2461 . -2) (undo-tree-id2462 . -2) (undo-tree-id2463 . -2) (undo-tree-id2464 . -2) (undo-tree-id2465 . -2) (undo-tree-id2466 . -2) (undo-tree-id2467 . -2) (undo-tree-id2468 . -2) (undo-tree-id2469 . -2) (undo-tree-id2470 . -2) (undo-tree-id2471 . -2) (undo-tree-id2472 . -2) (undo-tree-id2473 . -2) (undo-tree-id2474 . -2) (undo-tree-id2475 . -2) (undo-tree-id2476 . -2) (undo-tree-id2477 . -2) (undo-tree-id2478 . -2) (undo-tree-id2479 . -2) (undo-tree-id2480 . -2) (undo-tree-id2481 . -2) (undo-tree-id2482 . -2) (undo-tree-id2483 . -2) (undo-tree-id2484 . -2) (undo-tree-id2485 . -2) (undo-tree-id2486 . -2) (undo-tree-id2487 . -2) (undo-tree-id2488 . -2) (undo-tree-id2489 . -2) (undo-tree-id2490 . -2) (undo-tree-id2491 . -2) (undo-tree-id2492 . -2) (undo-tree-id2493 . -2) (undo-tree-id2494 . -2) (undo-tree-id2495 . -2) (undo-tree-id2496 . -2) (undo-tree-id2497 . -2) (undo-tree-id2498 . -2) (undo-tree-id2499 . -2) (undo-tree-id2500 . -2) (undo-tree-id2501 . -2) (undo-tree-id2502 . -2) (undo-tree-id2503 . -2) (undo-tree-id2504 . -2) (undo-tree-id2505 . -2) (undo-tree-id2506 . -2) (undo-tree-id2507 . -2) (undo-tree-id2508 . -2) (undo-tree-id2509 . -2) (undo-tree-id2510 . -2) (undo-tree-id2511 . -2) (undo-tree-id2512 . -2) (undo-tree-id2513 . -2) (undo-tree-id2514 . -2) (undo-tree-id2515 . -2) (undo-tree-id2516 . -2) (undo-tree-id2517 . -2) (undo-tree-id2518 . -2) (undo-tree-id2519 . -2) (undo-tree-id2520 . -2) (undo-tree-id2521 . -2) (undo-tree-id2522 . -2) (undo-tree-id2523 . -1) (undo-tree-id2524 . -2) (undo-tree-id2525 . -2)) (26015 39833 424475 0) 0 nil])
([nil nil ((443 . 445)) nil (26015 39961 162793 0) 0 nil])
([nil nil ((454 . 455)) ((#("f" 0 1 (fontified t)) . 454)) (26015 39833 224978 0) 0 nil])
([nil nil ((446 . 448)) nil (26015 39961 162793 0) 0 nil])
([nil nil ((456 . 463)) ((#(" => {}." 0 2 (fontified t) 2 3 (syntax-table (1) fontified t) 3 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t) 5 6 (face (rainbow-delimiters-depth-4-face) fontified t) 6 7 (fontified t)) . 456) (undo-tree-id2312 . -5) (undo-tree-id2313 . -5) (undo-tree-id2314 . -6) (undo-tree-id2315 . -6) (undo-tree-id2316 . -7) (undo-tree-id2317 . -7) (undo-tree-id2318 . -5) (undo-tree-id2319 . -5) (undo-tree-id2320 . -5) (undo-tree-id2321 . -5) (undo-tree-id2322 . -5) (undo-tree-id2323 . -5) (undo-tree-id2324 . -5) (undo-tree-id2325 . -5) (undo-tree-id2326 . -5) (undo-tree-id2327 . -5) (undo-tree-id2328 . -5) (undo-tree-id2329 . -5) (undo-tree-id2330 . -5) (undo-tree-id2331 . -5) (undo-tree-id2332 . -5) (undo-tree-id2333 . -5) (undo-tree-id2334 . -5) (undo-tree-id2335 . -5) (undo-tree-id2336 . -5) (undo-tree-id2337 . -5) (undo-tree-id2338 . -5) (undo-tree-id2339 . -5) (undo-tree-id2340 . -5) (undo-tree-id2341 . -5) (undo-tree-id2342 . -5) (undo-tree-id2343 . -5) (undo-tree-id2344 . -5) (undo-tree-id2345 . -5) (undo-tree-id2346 . -5) (undo-tree-id2347 . -5) (undo-tree-id2348 . -5) (undo-tree-id2349 . -5) (undo-tree-id2350 . -5) (undo-tree-id2351 . -5) (undo-tree-id2352 . -5) (undo-tree-id2353 . -5) (undo-tree-id2354 . -5) (undo-tree-id2355 . -5) (undo-tree-id2356 . -5) (undo-tree-id2357 . -5) (undo-tree-id2358 . -5) (undo-tree-id2359 . -5) (undo-tree-id2360 . -5) (undo-tree-id2361 . -5) (undo-tree-id2362 . -5) (undo-tree-id2363 . -5) (undo-tree-id2364 . -5) (undo-tree-id2365 . -5) (undo-tree-id2366 . -5) (undo-tree-id2367 . -5) (undo-tree-id2368 . -5) (undo-tree-id2369 . -5) (undo-tree-id2370 . -5) (undo-tree-id2371 . -5) (undo-tree-id2372 . -5) (undo-tree-id2373 . -5) (undo-tree-id2374 . -5) (undo-tree-id2375 . -5) (undo-tree-id2376 . -5) (undo-tree-id2377 . -5) (undo-tree-id2378 . -5) (undo-tree-id2379 . -5) (undo-tree-id2380 . -5) (undo-tree-id2381 . -5) (undo-tree-id2382 . -5) (undo-tree-id2383 . -5) (undo-tree-id2384 . -5) (undo-tree-id2385 . -5) (undo-tree-id2386 . -5) (undo-tree-id2387 . -5) (undo-tree-id2388 . -5) (undo-tree-id2389 . -5) (undo-tree-id2390 . -5) (undo-tree-id2391 . -5) (undo-tree-id2392 . -5) (undo-tree-id2393 . -5) (undo-tree-id2394 . -5) (undo-tree-id2395 . -5) (undo-tree-id2396 . -5) (undo-tree-id2397 . -5) (undo-tree-id2398 . -5) (undo-tree-id2399 . -5) (undo-tree-id2400 . -5) (undo-tree-id2401 . -5) (undo-tree-id2402 . -5) (undo-tree-id2403 . -5) (undo-tree-id2404 . -5) (undo-tree-id2405 . -5) (undo-tree-id2406 . -5) (undo-tree-id2407 . -5) (undo-tree-id2408 . -5) (undo-tree-id2409 . -5) (undo-tree-id2410 . -5) (undo-tree-id2411 . -5) (undo-tree-id2412 . -5) (undo-tree-id2413 . -5) (undo-tree-id2414 . -5) (undo-tree-id2415 . -5) (undo-tree-id2416 . -6) (undo-tree-id2417 . -6)) (26015 39833 19569 0) 0 nil])
([nil nil ((724 . 728) (768 . 769)) nil (26015 39961 162792 0) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -462) (undo-tree-id169 . -1) (undo-tree-id171 . -1) 463) ((462 . 463)) (26015 39832 814166 0) 0 nil])
([nil nil ((772 . 781)) nil (26015 39961 162790 0) 0 nil])
([nil nil ((462 . 463)) ((#("," 0 1 (fontified t)) . 462) (undo-tree-id2306 . -1) (undo-tree-id2307 . -1) (undo-tree-id2308 . -1) (undo-tree-id2309 . -1) (undo-tree-id2310 . -1) (undo-tree-id2311 . -1)) (26015 39832 634112 0) 0 nil])
([nil nil ((691 . 695) (637 . 641) (602 . 606) (561 . 565) (504 . 508) (457 . 461) 399) nil (26015 39961 162785 0) 0 nil])
([nil nil ((463 . 476)) ((#("
            " 0 1 (fontified t) 1 12 (fontified t) 12 13 (fontified t)) . 463) (undo-tree-id2304 . -12) (undo-tree-id2305 . -12)) (26015 39832 470552 0) 0 nil])
([nil nil ((806 . 807) (t 26015 39961 178140 160000)) nil (26015 39974 702666 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 475) (undo-tree-id2215 . -1) (undo-tree-id2216 . -1)) ((475 . 476)) (26015 39832 275515 0) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -806) (undo-tree-id3051 . -1) (undo-tree-id3052 . -1) (undo-tree-id3053 . -1) (undo-tree-id3054 . -1) (undo-tree-id3055 . -1) (undo-tree-id3056 . -1) (undo-tree-id3057 . -1) (undo-tree-id3058 . -1) (undo-tree-id3059 . -1) (undo-tree-id3060 . -1) (undo-tree-id3061 . -1) (undo-tree-id3062 . -1) (undo-tree-id3063 . -1) (undo-tree-id3064 . -1) (undo-tree-id3065 . -1) (undo-tree-id3066 . -1) (undo-tree-id3067 . -1) (undo-tree-id3068 . -1) (undo-tree-id3069 . -1) (undo-tree-id3070 . -1) (undo-tree-id3071 . -1) (undo-tree-id3072 . -1) (undo-tree-id3073 . -1) (undo-tree-id3074 . -1) (undo-tree-id3075 . -1) (undo-tree-id3076 . -1) (undo-tree-id3077 . -1) (undo-tree-id3078 . -1) (undo-tree-id3079 . -1) (undo-tree-id3080 . -1) (undo-tree-id3081 . -1) (undo-tree-id3082 . -1) (undo-tree-id3083 . -1) (undo-tree-id3084 . -1) (undo-tree-id3085 . -1) (undo-tree-id3086 . -1) (undo-tree-id3087 . -1) (undo-tree-id3088 . -1) (undo-tree-id3089 . -1) (undo-tree-id3090 . -1) (undo-tree-id3091 . -1) (undo-tree-id3092 . -1) (undo-tree-id3093 . -1) (undo-tree-id3094 . -1) (undo-tree-id3095 . -1) 807 (t 26015 39974 718159 184000)) nil (26015 40003 39041 0) 0 nil])
([nil nil ((463 . 475) (#("                " 0 16 (fontified nil)) . 462) (462 . 478) (#("            " 0 12 (fontified nil)) . 462) (461 . 475)) ((#("
            
" 0 1 (fontified t) 1 13 (fontified nil) 13 14 (fontified nil)) . 461) (undo-tree-id2217 . -1) (undo-tree-id2218 . -1) (undo-tree-id2219 . -14) (undo-tree-id2220 . -14) (undo-tree-id2221 . -1) (undo-tree-id2222 . -1) (undo-tree-id2223 . -1) (undo-tree-id2224 . -1) (undo-tree-id2225 . -1) (undo-tree-id2226 . -1) (undo-tree-id2227 . -1) (undo-tree-id2228 . -1) (undo-tree-id2229 . -1) (undo-tree-id2230 . -1) (undo-tree-id2231 . -1) (undo-tree-id2232 . -1) (undo-tree-id2233 . -1) (undo-tree-id2234 . -1) (undo-tree-id2235 . -1) (undo-tree-id2236 . -1) (undo-tree-id2237 . -1) (undo-tree-id2238 . -1) (undo-tree-id2239 . -1) (undo-tree-id2240 . -1) (undo-tree-id2241 . -1) (undo-tree-id2242 . -1) (undo-tree-id2243 . -1) (undo-tree-id2244 . -1) (undo-tree-id2245 . -1) (undo-tree-id2246 . -1) (undo-tree-id2247 . -1) (undo-tree-id2248 . -1) (undo-tree-id2249 . -1) (undo-tree-id2250 . -1) (undo-tree-id2251 . -1) (undo-tree-id2252 . -1) (undo-tree-id2253 . -1) (undo-tree-id2254 . -1) (undo-tree-id2255 . -1) (undo-tree-id2256 . -1) (undo-tree-id2257 . -1) (undo-tree-id2258 . -1) (undo-tree-id2259 . -1) (undo-tree-id2260 . -1) (undo-tree-id2261 . -1) (undo-tree-id2262 . -1) (undo-tree-id2263 . -1) (undo-tree-id2264 . -1) (undo-tree-id2265 . -1) (undo-tree-id2266 . -1) (undo-tree-id2267 . -1) (undo-tree-id2268 . -1) (undo-tree-id2269 . -1) (undo-tree-id2270 . -1) (undo-tree-id2271 . -1) (undo-tree-id2272 . -1) (undo-tree-id2273 . -1) (undo-tree-id2274 . -1) (undo-tree-id2275 . -1) (undo-tree-id2276 . -1) (undo-tree-id2277 . -1) (undo-tree-id2278 . -1) (undo-tree-id2279 . -1) (undo-tree-id2280 . -1) (undo-tree-id2281 . -1) (undo-tree-id2282 . -1) (undo-tree-id2283 . -1) (undo-tree-id2284 . -1) (undo-tree-id2285 . -1) (undo-tree-id2286 . -1) (undo-tree-id2287 . -1) (undo-tree-id2288 . -1) (undo-tree-id2289 . -1) (undo-tree-id2290 . -1) (undo-tree-id2291 . -1) (undo-tree-id2292 . -1) (undo-tree-id2293 . -1) (undo-tree-id2294 . -1) (undo-tree-id2295 . -1) (undo-tree-id2296 . -1) (undo-tree-id2297 . -1) (undo-tree-id2298 . -1) (undo-tree-id2299 . -1) (undo-tree-id2300 . -1) (undo-tree-id2301 . -1) (undo-tree-id2302 . -1) (undo-tree-id2303 . -1) (462 . 474) (#("                " 0 16 (fontified nil)) . 462) (462 . 478) (#("            " 0 12 (fontified t)) . 463)) (26015 39831 902326 0) 0 nil])
([nil nil ((806 . 809)) nil (26015 40003 38995 0) 0 nil])
([nil nil ((#("        
        let mut reader = std::io::BufReader::new(f);
        let mut buffer = Vec::new();
        // read the whole file
        reader.read_to_end(&mut buffer).unwrap();
        let img = image::load_from_memory(&buffer)?;
        Self::from_image(device, queue, &img, label)" 0 9 (fontified t) 9 17 (fontified t) 17 20 (face font-lock-keyword-face fontified t) 20 21 (fontified t) 21 24 (face font-lock-keyword-face fontified t) 24 25 (fontified t) 25 31 (face font-lock-variable-name-face fontified t) 31 34 (fontified t) 34 37 (face font-lock-constant-face fontified t) 37 39 (fontified t) 39 41 (face font-lock-constant-face fontified t) 41 43 (fontified t) 43 52 (face font-lock-type-face fontified t) 52 57 (fontified t) 57 58 (face (rainbow-delimiters-depth-3-face) fontified t) 58 59 (fontified t) 59 60 (face (rainbow-delimiters-depth-3-face) fontified t) 60 70 (fontified t) 70 73 (face font-lock-keyword-face fontified t) 73 74 (fontified t) 74 77 (face font-lock-keyword-face fontified t) 77 78 (fontified t) 78 84 (face font-lock-variable-name-face fontified t) 84 87 (fontified t) 87 90 (face font-lock-type-face fontified t) 90 95 (fontified t) 95 96 (face (rainbow-delimiters-depth-3-face) fontified t) 96 97 (face (rainbow-delimiters-depth-3-face) fontified t) 97 107 (fontified t) 107 110 (face font-lock-comment-delimiter-face fontified t) 110 130 (face font-lock-comment-face fontified t) 130 156 (fontified t) 156 157 (face (rainbow-delimiters-depth-3-face) fontified t) 157 158 (face rust-ampersand-face fontified t) 158 161 (face font-lock-keyword-face fontified t) 161 168 (fontified t) 168 169 (face (rainbow-delimiters-depth-3-face) fontified t) 169 176 (fontified t) 176 177 (face (rainbow-delimiters-depth-3-face) fontified t) 177 178 (face (rainbow-delimiters-depth-3-face) fontified t) 178 188 (fontified t) 188 191 (face font-lock-keyword-face fontified t) 191 192 (fontified t) 192 195 (face font-lock-variable-name-face fontified t) 195 198 (fontified t) 198 203 (face font-lock-constant-face fontified t) 203 221 (fontified t) 221 222 (face (rainbow-delimiters-depth-3-face) fontified t) 222 223 (face rust-ampersand-face fontified t) 223 229 (fontified t) 229 230 (face (rainbow-delimiters-depth-3-face) fontified t) 230 231 (face rust-question-mark fontified t) 231 241 (fontified t) 241 245 (face font-lock-type-face fontified t) 245 257 (fontified t) 257 258 (face (rainbow-delimiters-depth-3-face) fontified t) 258 273 (fontified t) 273 274 (face rust-ampersand-face fontified t) 274 284 (fontified t) 284 285 (face (rainbow-delimiters-depth-3-face) fontified t)) . 500) (undo-tree-id135 . -285) (undo-tree-id137 . -285) (undo-tree-id139 . -283) (undo-tree-id141 . -171) (undo-tree-id143 . -87) (undo-tree-id145 . -24) (undo-tree-id147 . -8) (undo-tree-id149 . -6) (undo-tree-id151 . -4) (undo-tree-id153 . -2) (undo-tree-id155 . -285)) ((500 . 785)) (26015 39830 953739 0) 0 nil])
([nil nil ((810 . 818) (#("            " 0 12 (fontified nil)) . 809) (undo-tree-id3047 . -8) (undo-tree-id3048 . -8) (undo-tree-id3049 . -8) (undo-tree-id3050 . -8) (817 . 821) (808 . 818)) nil (26015 40003 38994 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 746 . 747) (nil fontified nil 746 . 747) (nil fontified nil 736 . 746) (nil fontified nil 735 . 736) (nil fontified nil 720 . 735) (nil fontified nil 719 . 720) (nil fontified nil 707 . 719) (nil fontified nil 703 . 707) (nil fontified nil 693 . 703) (nil fontified nil 692 . 693) (nil fontified nil 691 . 692) (nil fontified nil 685 . 691) (nil fontified nil 684 . 685) (nil fontified nil 683 . 684) (nil fontified nil 665 . 683) (nil fontified nil 660 . 665) (nil fontified nil 657 . 660) (nil fontified nil 654 . 657) (nil fontified nil 653 . 654) (nil fontified nil 650 . 653) (nil fontified nil 640 . 650) (nil fontified nil 639 . 640) (nil fontified nil 638 . 639) (nil fontified nil 631 . 638) (nil fontified nil 630 . 631) (nil fontified nil 623 . 630) (nil fontified nil 620 . 623) (nil fontified nil 619 . 620) (nil fontified nil 618 . 619) (nil fontified nil 592 . 618) (nil fontified nil 572 . 592) (nil fontified nil 569 . 572) (nil fontified nil 559 . 569) (nil fontified nil 558 . 559) (nil fontified nil 557 . 558) (nil fontified nil 552 . 557) (nil fontified nil 549 . 552) (nil fontified nil 546 . 549) (nil fontified nil 540 . 546) (nil fontified nil 539 . 540) (nil fontified nil 536 . 539) (nil fontified nil 535 . 536) (nil fontified nil 532 . 535) (nil fontified nil 522 . 532) (nil fontified nil 521 . 522) (nil fontified nil 520 . 521) (nil fontified nil 519 . 520) (nil fontified nil 514 . 519) (nil fontified nil 505 . 514) (nil fontified nil 503 . 505) (nil fontified nil 501 . 503) (nil fontified nil 499 . 501) (nil fontified nil 496 . 499) (nil fontified nil 493 . 496) (nil fontified nil 487 . 493) (nil fontified nil 486 . 487) (nil fontified nil 483 . 486) (nil fontified nil 482 . 483) (nil fontified nil 479 . 482) (nil fontified nil 471 . 479) (nil fontified nil 462 . 471) (462 . 747)) ((#("        
        let mut reader = std::io::BufReader::new(f);
        let mut buffer = Vec::new();
        // read the whole file
        reader.read_to_end(&mut buffer).unwrap();
        let img = image::load_from_memory(&buffer)?;
        Self::from_image(device, queue, &img, label)" 0 8 (fontified nil) 8 9 (fontified nil) 9 17 (fontified nil) 17 20 (face font-lock-keyword-face fontified nil) 20 21 (fontified nil) 21 24 (face font-lock-keyword-face fontified nil) 24 25 (fontified nil) 25 31 (face font-lock-variable-name-face fontified nil) 31 34 (fontified nil) 34 37 (face font-lock-constant-face fontified nil) 37 39 (fontified nil) 39 41 (face font-lock-constant-face fontified nil) 41 43 (fontified nil) 43 52 (face font-lock-type-face fontified nil) 52 57 (fontified nil) 57 58 (face (rainbow-delimiters-depth-5-face) fontified nil) 58 59 (fontified nil) 59 60 (face (rainbow-delimiters-depth-5-face) fontified nil) 60 62 (fontified nil) 62 70 (fontified nil) 70 73 (face font-lock-keyword-face fontified nil) 73 74 (fontified nil) 74 77 (face font-lock-keyword-face fontified nil) 77 78 (fontified nil) 78 84 (face font-lock-variable-name-face fontified nil) 84 87 (fontified nil) 87 90 (face font-lock-type-face fontified nil) 90 95 (fontified nil) 95 96 (face (rainbow-delimiters-depth-5-face) fontified nil) 96 97 (face (rainbow-delimiters-depth-5-face) fontified nil) 97 99 (fontified nil) 99 107 (fontified nil) 107 110 (face font-lock-comment-delimiter-face fontified nil) 110 130 (face font-lock-comment-face fontified nil) 130 138 (fontified nil) 138 156 (fontified nil) 156 157 (face (rainbow-delimiters-depth-5-face) fontified nil) 157 158 (face rust-ampersand-face fontified nil) 158 161 (face font-lock-keyword-face fontified nil) 161 168 (fontified nil) 168 169 (face (rainbow-delimiters-depth-5-face) fontified nil) 169 176 (fontified nil) 176 177 (face (rainbow-delimiters-depth-5-face) fontified nil) 177 178 (face (rainbow-delimiters-depth-5-face) fontified nil) 178 180 (fontified nil) 180 188 (fontified nil) 188 191 (face font-lock-keyword-face fontified nil) 191 192 (fontified nil) 192 195 (face font-lock-variable-name-face fontified nil) 195 198 (fontified nil) 198 203 (face font-lock-constant-face fontified nil) 203 221 (fontified nil) 221 222 (face (rainbow-delimiters-depth-5-face) fontified nil) 222 223 (face rust-ampersand-face fontified nil) 223 229 (fontified nil) 229 230 (face (rainbow-delimiters-depth-5-face) fontified nil) 230 231 (face rust-question-mark fontified nil) 231 233 (fontified nil) 233 241 (fontified nil) 241 245 (face font-lock-type-face fontified nil) 245 257 (fontified nil) 257 258 (face (rainbow-delimiters-depth-5-face) fontified nil) 258 273 (fontified nil) 273 274 (face rust-ampersand-face fontified nil) 274 284 (fontified nil) 284 285 (face (rainbow-delimiters-depth-5-face) fontified nil rear-nonsticky nil)) . 462) (undo-tree-id2046 . -233) (undo-tree-id2047 . -124) (undo-tree-id2048 . -124) (undo-tree-id2049 . -124) (undo-tree-id2050 . -124) (undo-tree-id2051 . -124) (undo-tree-id2052 . -206) (undo-tree-id2053 . -206) (undo-tree-id2054 . -206) (undo-tree-id2055 . -206) (undo-tree-id2056 . -206) (undo-tree-id2057 . -206) (undo-tree-id2058 . -206) (undo-tree-id2059 . -206) (undo-tree-id2060 . -206) (undo-tree-id2061 . -206) (undo-tree-id2062 . -206) (undo-tree-id2063 . -206) (undo-tree-id2064 . -206) (undo-tree-id2065 . -206) (undo-tree-id2066 . -206) (undo-tree-id2067 . -152) (undo-tree-id2068 . -152) (undo-tree-id2069 . -152) (undo-tree-id2070 . -152) (undo-tree-id2071 . -152) (undo-tree-id2072 . -152) (undo-tree-id2073 . -152) (undo-tree-id2074 . -152) (undo-tree-id2075 . -152) (undo-tree-id2076 . -152) (undo-tree-id2077 . -152) (undo-tree-id2078 . -152) (undo-tree-id2079 . -152) (undo-tree-id2080 . -152) (undo-tree-id2081 . -152) (undo-tree-id2082 . -152) (undo-tree-id2083 . -152) (undo-tree-id2084 . -152) (undo-tree-id2085 . -152) (undo-tree-id2086 . -152) (undo-tree-id2087 . -152) (undo-tree-id2088 . -152) (undo-tree-id2089 . -152) (undo-tree-id2090 . -152) (undo-tree-id2091 . -152) (undo-tree-id2092 . -152) (undo-tree-id2093 . -152) (undo-tree-id2094 . -152) (undo-tree-id2095 . -152) (undo-tree-id2096 . -152) (undo-tree-id2097 . -152) (undo-tree-id2098 . -152) (undo-tree-id2099 . -152) (undo-tree-id2100 . -152) (undo-tree-id2101 . -152) (undo-tree-id2102 . -152) (undo-tree-id2103 . -152) (undo-tree-id2104 . -152) (undo-tree-id2105 . -152) (undo-tree-id2106 . -152) (undo-tree-id2107 . -152) (undo-tree-id2108 . -152) (undo-tree-id2109 . -152) (undo-tree-id2110 . -152) (undo-tree-id2111 . -152) (undo-tree-id2112 . -152) (undo-tree-id2113 . -152) (undo-tree-id2114 . -152) (undo-tree-id2115 . -152) (undo-tree-id2116 . -152) (undo-tree-id2117 . -152) (undo-tree-id2118 . -152) (undo-tree-id2119 . -152) (undo-tree-id2120 . -152) (undo-tree-id2121 . -152) (undo-tree-id2122 . -152) (undo-tree-id2123 . -152) (undo-tree-id2124 . -152) (undo-tree-id2125 . -152) (undo-tree-id2126 . -152) (undo-tree-id2127 . -152) (undo-tree-id2128 . -152) (undo-tree-id2129 . -152) (nil fontified t 470 . 471) (nil fontified t 462 . 470) (nil fontified t 522 . 524) (nil fontified t 559 . 561) (nil fontified t 572 . 592) (nil fontified t 640 . 642) (nil fontified t 693 . 695) (nil rear-nonsticky t 746 . 747)) (26015 39830 871839 0) 0 nil])
([nil nil ((819 . 820)) nil (26015 40003 38988 0) 0 nil])
([nil nil ((830 . 831) (743 . 759) (#("        " 0 8 (fontified t)) . 743) (682 . 698) (#("        " 0 8 (fontified t)) . 682) (624 . 640) (#("        " 0 8 (fontified t)) . 624) (585 . 601) (#("        " 0 8 (fontified t)) . 585) (540 . 556) (#("        " 0 8 (fontified t)) . 540) (479 . 495) (#("        " 0 8 (fontified t)) . 479) (462 . 478) (#("        " 0 8 (fontified t)) . 462) 388) ((462 . 470) (#("                " 0 12 (fontified t) 12 13 (fontified t) 13 16 (fontified t)) . 462) (undo-tree-id2043 . -13) (undo-tree-id2044 . -13) (479 . 487) (#("                " 0 16 (fontified t)) . 479) (540 . 548) (#("                " 0 16 (fontified t)) . 540) (585 . 593) (#("                " 0 16 (fontified t)) . 585) (624 . 632) (#("                " 0 16 (fontified t)) . 624) (682 . 690) (#("                " 0 16 (fontified t)) . 682) (743 . 751) (#("                " 0 16 (fontified t)) . 743) (undo-tree-id2045 . -16) (#(" " 0 1 (fontified t)) . 830)) (26015 39830 786302 0) 0 nil])
([nil nil ((#("'" 0 1 (fontified t)) . -819) (undo-tree-id3044 . -1) (undo-tree-id3045 . -1) (undo-tree-id3046 . -1) 820) nil (26015 40003 38986 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -474) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id126 . -1) (undo-tree-id128 . -1) (undo-tree-id130 . -1) (undo-tree-id132 . -1) 475) ((474 . 475)) (26015 39830 703009 0) 0 nil])
([nil nil ((819 . 820)) nil (26015 40003 38972 0) 0 nil])
([nil nil ((#("               
" 0 15 (fontified t) 15 16 (fontified t)) . 462) (undo-tree-id111 . -12) (undo-tree-id113 . -12) (undo-tree-id115 . -12) (undo-tree-id117 . -12) (undo-tree-id119 . -12) (undo-tree-id121 . -12)) ((462 . 478)) (26015 39830 619789 0) 0 nil])
([nil nil ((#("        if let Err(e) = || -> Result<()> {" 0 8 (fontified t) 8 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 14 (face font-lock-keyword-face fontified t) 14 15 (fontified t) 15 18 (face font-lock-type-face fontified t) 18 19 (face (rainbow-delimiters-depth-3-face) fontified t) 19 20 (fontified t) 20 21 (face (rainbow-delimiters-depth-3-face) fontified t) 21 28 (fontified t) 28 29 (syntax-table (1) fontified t) 29 30 (fontified t) 30 36 (face font-lock-type-face fontified t) 36 37 (face (rainbow-delimiters-depth-3-face) fontified t) 37 38 (face (rainbow-delimiters-depth-4-face) fontified t) 38 39 (face (rainbow-delimiters-depth-4-face) fontified t) 39 40 (face (rainbow-delimiters-depth-3-face) fontified t) 40 41 (fontified t) 41 42 (face (rainbow-delimiters-depth-3-face) fontified t)) . 406) (undo-tree-id3293 . -42) (undo-tree-id3294 . -37) (undo-tree-id3295 . -42) (undo-tree-id3296 . -42) (undo-tree-id3297 . -42) (undo-tree-id3298 . -42) (undo-tree-id3299 . -42) (undo-tree-id3300 . -42) (undo-tree-id3301 . -42) (undo-tree-id3302 . -40) (undo-tree-id3303 . -40) (undo-tree-id3304 . -40) (undo-tree-id3305 . -40) (undo-tree-id3306 . -40) (undo-tree-id3307 . -40) (undo-tree-id3308 . -40) (undo-tree-id3309 . -41) (undo-tree-id3310 . -41) (undo-tree-id3311 . -41) (undo-tree-id3312 . -41) (undo-tree-id3313 . -41) (undo-tree-id3314 . -41) (undo-tree-id3315 . -41) (undo-tree-id3316 . -41) (undo-tree-id3317 . -41) (undo-tree-id3318 . -41) (undo-tree-id3319 . -41) (undo-tree-id3320 . -41) (undo-tree-id3321 . -41) (undo-tree-id3322 . -41) (undo-tree-id3323 . -41) (undo-tree-id3324 . -41) (undo-tree-id3325 . -41) (undo-tree-id3326 . -41) (undo-tree-id3327 . -41) (undo-tree-id3328 . -41) (undo-tree-id3329 . -41) (undo-tree-id3330 . -41) (undo-tree-id3331 . -41) (undo-tree-id3332 . -41) (undo-tree-id3333 . -41) (undo-tree-id3334 . -41) (undo-tree-id3335 . -41) (undo-tree-id3336 . -41) (undo-tree-id3337 . -41) (undo-tree-id3338 . -41) (undo-tree-id3339 . -41) (undo-tree-id3340 . -41) (undo-tree-id3341 . -41) (undo-tree-id3342 . -41) (undo-tree-id3343 . -41) (undo-tree-id3344 . -41) (undo-tree-id3345 . -41) (undo-tree-id3346 . -41) (undo-tree-id3347 . -41) (undo-tree-id3348 . -41) (undo-tree-id3349 . -41) (undo-tree-id3350 . -41) (undo-tree-id3351 . -41) (undo-tree-id3352 . -41) (undo-tree-id3353 . -41) (undo-tree-id3354 . -41) (undo-tree-id3355 . -41) (undo-tree-id3356 . -41) (undo-tree-id3357 . -41) (undo-tree-id3358 . -42) (undo-tree-id3359 . -42) (undo-tree-id3360 . -42) (undo-tree-id3361 . -42) (undo-tree-id3362 . -42) (undo-tree-id3363 . -42) (undo-tree-id3364 . -42) (undo-tree-id3365 . -42) (undo-tree-id3366 . -42) (undo-tree-id3367 . -42) (undo-tree-id3368 . -42) (undo-tree-id3369 . -42) (undo-tree-id3370 . -42) (t 26015 40003 54136 736000)) nil (26015 40033 36357 0) 0 nil])
([nil nil ((801 . 814)) ((#("
            " 0 1 (fontified t) 1 13 (fontified t)) . 801) (undo-tree-id2037 . -13) (undo-tree-id2038 . -13) (undo-tree-id2039 . -13) (undo-tree-id2040 . -13) (undo-tree-id2041 . -13) (undo-tree-id2042 . -13)) (26015 39830 536274 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 406) (undo-tree-id3292 . -1)) nil (26015 40033 36283 0) 0 nil])
([nil nil ((814 . 816)) ((#("Er" 0 2 (face font-lock-type-face fontified t)) . 814) (undo-tree-id2035 . -2) (undo-tree-id2036 . -2)) (26015 39830 454495 0) 0 nil])
([nil nil ((#("   } {

        };" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-2-face) fontified t) 4 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-2-face) fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 16 (fontified t) 16 17 (face (rainbow-delimiters-depth-2-face) fontified t) 17 18 (fontified t)) . 759) (undo-tree-id3203 . -18) (undo-tree-id3204 . -4) (undo-tree-id3205 . -4) (undo-tree-id3206 . -4) (undo-tree-id3207 . -4) (undo-tree-id3208 . -4) (undo-tree-id3209 . -4) (undo-tree-id3210 . -4) (undo-tree-id3211 . -4) (undo-tree-id3212 . -4) (undo-tree-id3213 . -4) (undo-tree-id3214 . -4) (undo-tree-id3215 . -4) (undo-tree-id3216 . -4) (undo-tree-id3217 . -4) (undo-tree-id3218 . -4) (undo-tree-id3219 . -4) (undo-tree-id3220 . -4) (undo-tree-id3221 . -4) (undo-tree-id3222 . -4) (undo-tree-id3223 . -4) (undo-tree-id3224 . -4) (undo-tree-id3225 . -4) (undo-tree-id3226 . -4) (undo-tree-id3227 . -4) (undo-tree-id3228 . -4) (undo-tree-id3229 . -4) (undo-tree-id3230 . -4) (undo-tree-id3231 . -4) (undo-tree-id3232 . -4) (undo-tree-id3233 . -4) (undo-tree-id3234 . -4) (undo-tree-id3235 . -4) (undo-tree-id3236 . -4) (undo-tree-id3237 . -4) (undo-tree-id3238 . -4) (undo-tree-id3239 . -4) (undo-tree-id3240 . -4) (undo-tree-id3241 . -4) (undo-tree-id3242 . -4) (undo-tree-id3243 . -4) (undo-tree-id3244 . -4) (undo-tree-id3245 . -4) (undo-tree-id3246 . -4) (undo-tree-id3247 . -7) (undo-tree-id3248 . -7) (undo-tree-id3249 . -7) (undo-tree-id3250 . -17) (undo-tree-id3251 . -17) (undo-tree-id3252 . -18) (undo-tree-id3253 . -18) (undo-tree-id3254 . -18) (undo-tree-id3255 . -18) (undo-tree-id3256 . -18) (undo-tree-id3257 . -18) (undo-tree-id3258 . -18) (undo-tree-id3259 . -18) (undo-tree-id3260 . -18) (undo-tree-id3261 . -18) (undo-tree-id3262 . -18) (undo-tree-id3263 . -18) (undo-tree-id3264 . -18) (undo-tree-id3265 . -18) (undo-tree-id3266 . -18) (undo-tree-id3267 . -18) (undo-tree-id3268 . -7) (undo-tree-id3269 . -7) (undo-tree-id3270 . -7) (undo-tree-id3271 . -7) (undo-tree-id3272 . -7) (undo-tree-id3273 . -7) (undo-tree-id3274 . -7) (undo-tree-id3275 . -7) (undo-tree-id3276 . -7) (undo-tree-id3277 . -7) (undo-tree-id3278 . -7) (undo-tree-id3279 . -7) (undo-tree-id3280 . -7) (undo-tree-id3281 . -7) (undo-tree-id3282 . -7) (undo-tree-id3283 . -7) (undo-tree-id3284 . -7) (undo-tree-id3285 . -18) (undo-tree-id3286 . -18) (undo-tree-id3287 . -18) (undo-tree-id3288 . -7) (undo-tree-id3289 . -1) (undo-tree-id3290 . -4) (undo-tree-id3291 . -18)) nil (26015 40033 36277 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 818 818 nil nil nil t #s(yas--exit 819 nil))) #s(yas--exit 819 nil) 5 nil #s(yas--field 1 818 818 nil nil nil t #s(yas--exit 819 nil)) nil nil)) (814 . 819) (#("Err($1)$0" 0 9 (fontified nil)) . 814) (814 . 823) (#("Er" 0 2 (fontified nil)) . 814) (814 . 816) (#("Err(…)" 0 6 (fontified nil)) . -814) (814 . 820) (#("Er" 0 2 (face font-lock-type-face fontified t)) . -814) (undo-tree-id106 . -2) (undo-tree-id108 . -2) (undo-tree-id110 . -2) 816) ((814 . 816) (#("Err(…)" 0 6 (fontified nil)) . 814) (814 . 820) (#("Er" 0 2 (fontified nil)) . 814) (814 . 816) (#("Err($1)$0" 0 9 (fontified nil)) . 814) (814 . 823) (#("Err()" 0 3 (face font-lock-type-face fontified t) 3 4 (face (rainbow-delimiters-depth-4-face) fontified t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t)) . 814) (undo-tree-id2029 . -5) (undo-tree-id2030 . -5) (undo-tree-id2031 . -4) (undo-tree-id2032 . -4) (undo-tree-id2033 . -5) (undo-tree-id2034 . -5) (apply yas--snippet-revive 814 819 #s(yas--snippet nil (#s(yas--field 1 818 818 nil nil nil t #s(yas--exit 819 nil))) #s(yas--exit 819 nil) 5 nil #s(yas--field 1 818 818 nil nil nil t #s(yas--exit 819 nil)) nil nil))) (26015 39830 370055 0) 0 nil])
([nil nil ((726 . 738) (#("     " 0 5 (fontified t)) . 726) (undo-tree-id3096 . -5) (undo-tree-id3097 . -5) (undo-tree-id3098 . -5) (undo-tree-id3099 . -5) (undo-tree-id3100 . -5) (undo-tree-id3101 . -5) (undo-tree-id3102 . -5) (undo-tree-id3103 . -5) (undo-tree-id3104 . -5) (undo-tree-id3105 . -5) (undo-tree-id3106 . -5) (undo-tree-id3107 . -5) (undo-tree-id3108 . -5) (undo-tree-id3109 . -5) (undo-tree-id3110 . -5) (undo-tree-id3111 . -5) (undo-tree-id3112 . -5) (undo-tree-id3113 . -5) (undo-tree-id3114 . -5) (undo-tree-id3115 . -5) (undo-tree-id3116 . -5) (undo-tree-id3117 . -5) (undo-tree-id3118 . -5) (undo-tree-id3119 . -5) (undo-tree-id3120 . -5) (undo-tree-id3121 . -5) (undo-tree-id3122 . -5) (undo-tree-id3123 . -5) (undo-tree-id3124 . -5) (undo-tree-id3125 . -5) (undo-tree-id3126 . -5) (undo-tree-id3127 . -5) (undo-tree-id3128 . -5) (undo-tree-id3129 . -5) (undo-tree-id3130 . -5) (undo-tree-id3131 . -5) (undo-tree-id3132 . -5) (undo-tree-id3133 . -5) (undo-tree-id3134 . -5) (undo-tree-id3135 . -5) (undo-tree-id3136 . -5) (undo-tree-id3137 . -5) (undo-tree-id3138 . -5) (undo-tree-id3139 . -5) (undo-tree-id3140 . -5) (undo-tree-id3141 . -5) (undo-tree-id3142 . -5) (undo-tree-id3143 . -5) (undo-tree-id3144 . -5) (undo-tree-id3145 . -5) (undo-tree-id3146 . -5) (undo-tree-id3147 . -5) (undo-tree-id3148 . -5) (undo-tree-id3149 . -5) (undo-tree-id3150 . -5) (undo-tree-id3151 . -5) (undo-tree-id3152 . -5) (undo-tree-id3153 . -5) (undo-tree-id3154 . -5) (undo-tree-id3155 . -5) (undo-tree-id3156 . -5) (undo-tree-id3157 . -5) (undo-tree-id3158 . -5) (undo-tree-id3159 . -5) (undo-tree-id3160 . -5) (undo-tree-id3161 . -5) (undo-tree-id3162 . -5) (undo-tree-id3163 . -5) (undo-tree-id3164 . -5) (undo-tree-id3165 . -5) (undo-tree-id3166 . -5) (undo-tree-id3167 . -5) (undo-tree-id3168 . -5) (undo-tree-id3169 . -5) (undo-tree-id3170 . -5) (undo-tree-id3171 . -5) (undo-tree-id3172 . -5) (undo-tree-id3173 . -5) (undo-tree-id3174 . -5) (undo-tree-id3175 . -5) (undo-tree-id3176 . -5) (undo-tree-id3177 . -5) (undo-tree-id3178 . -5) (undo-tree-id3179 . -5) (undo-tree-id3180 . -5) (undo-tree-id3181 . -5) (undo-tree-id3182 . -5) (undo-tree-id3183 . -5) (undo-tree-id3184 . -5) (undo-tree-id3185 . -5) (undo-tree-id3186 . -5) (undo-tree-id3187 . -5) (undo-tree-id3188 . -5) (undo-tree-id3189 . -5) (undo-tree-id3190 . -5) (undo-tree-id3191 . -5) (undo-tree-id3192 . -5) (undo-tree-id3193 . -5) (undo-tree-id3194 . -5) (undo-tree-id3195 . -5) (undo-tree-id3196 . -5) (undo-tree-id3197 . -5) (undo-tree-id3198 . -5) (undo-tree-id3199 . -5) (undo-tree-id3200 . -5) (undo-tree-id3201 . -5) (#("    " 0 4 (fontified t)) . -681) (#("    " 0 4 (fontified t)) . -628) (#("    " 0 4 (fontified t)) . -578) (undo-tree-id3202 . -1) (#("    " 0 4 (fontified t)) . -547) (#("    " 0 4 (fontified t)) . -510) (#("    " 0 4 (fontified t)) . -457) (#("    " 0 4 (fontified t)) . -414) 363) nil (26015 40033 36182 0) 0 nil])
([nil nil ((818 . 819)) ((#("r" 0 1 (fontified t)) . 818) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1)) (26015 39830 286304 0) 0 nil])
([nil nil ((#("unwrap()" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-3-face) fontified t) 7 8 (face (rainbow-delimiters-depth-3-face) fontified t)) . -439) (undo-tree-id3403 . -8) (undo-tree-id3404 . -8) (undo-tree-id3405 . -8) (undo-tree-id3406 . -8) (undo-tree-id3407 . -8) (undo-tree-id3408 . -8) (undo-tree-id3409 . -8) (undo-tree-id3410 . -8) (undo-tree-id3411 . -8) (undo-tree-id3412 . -8) (undo-tree-id3413 . -8) (undo-tree-id3414 . -8) 447 (t 26015 40033 54696 69000)) nil (26015 40163 963467 0) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -818) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id102 . -1) (undo-tree-id104 . -1) 819) ((818 . 819)) (26015 39830 203108 0) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -438) (undo-tree-id3389 . -1) (undo-tree-id3390 . -1) (undo-tree-id3391 . -1) (undo-tree-id3392 . -1) (undo-tree-id3393 . -1) (undo-tree-id3394 . -1) (undo-tree-id3395 . -1) (undo-tree-id3396 . -1) (undo-tree-id3397 . -1) (undo-tree-id3398 . -1) (undo-tree-id3399 . -1) (undo-tree-id3400 . -1) (undo-tree-id3401 . -1) (undo-tree-id3402 . -1) 439) nil (26015 40163 963454 0) 0 nil])
([nil nil ((818 . 819)) ((#("e" 0 1 (fontified t)) . 818) (undo-tree-id2026 . -1)) (26015 39830 119638 0) 0 nil])
([nil nil ((438 . 439)) nil (26015 40163 963439 0) 0 nil])
([nil nil ((apply yas--snippet-revive 814 820 #s(yas--snippet nil (#s(yas--field 1 818 818 nil nil nil t #s(yas--exit 819 nil))) #s(yas--exit 819 nil) 5 nil #s(yas--field 1 818 818 nil nil nil t #s(yas--exit 819 nil)) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 818 818 nil nil nil t #s(yas--exit 819 nil))) #s(yas--exit 819 nil) 5 nil #s(yas--field 1 818 818 nil nil nil t #s(yas--exit 819 nil)) nil nil))) (26015 39830 36064 0) 0 nil])
([nil nil ((#("unwrap()" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-3-face) fontified t) 7 8 (face (rainbow-delimiters-depth-3-face) fontified t)) . -602) (undo-tree-id3381 . -8) (undo-tree-id3382 . -8) (undo-tree-id3383 . -8) (undo-tree-id3384 . -8) (undo-tree-id3385 . -8) (undo-tree-id3386 . -8) (undo-tree-id3387 . -8) (undo-tree-id3388 . -8) 610) nil (26015 40163 963438 0) 0 nil])
([nil nil ((820 . 822)) ((#(" -" 0 1 (fontified t) 1 2 (fontified t)) . 820) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (undo-tree-id2022 . -2) (undo-tree-id2023 . -2) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1)) (26015 39829 953188 0) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -601) (undo-tree-id3371 . -1) (undo-tree-id3372 . -1) (undo-tree-id3373 . -1) (undo-tree-id3374 . -1) (undo-tree-id3375 . -1) (undo-tree-id3376 . -1) (undo-tree-id3377 . -1) (undo-tree-id3378 . -1) (undo-tree-id3379 . -1) (undo-tree-id3380 . -1) 602) nil (26015 40163 963427 0) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -821) (undo-tree-id92 . -1) (undo-tree-id94 . -1) (undo-tree-id96 . -1) (undo-tree-id98 . -1) 822) ((821 . 822)) (26015 39829 869725 0) 0 nil])
([nil nil ((601 . 602)) nil (26015 40163 963408 0) 0 nil])
([nil nil ((821 . 822)) ((#("+" 0 1 (fontified t)) . 821) (undo-tree-id2018 . -1) (undo-tree-id2019 . -1)) (26015 39829 786400 0) 0 nil])
([nil nil ((405 . 414) (t 26015 40163 978116 213000)) nil (26015 40242 181600 0) 0 nil])
([nil nil ((#("+" 0 1 (fontified t)) . -821) (undo-tree-id86 . -1) (undo-tree-id88 . -1) (undo-tree-id90 . -1) 822) ((821 . 822)) (26015 39829 703089 0) 0 nil])
([nil nil ((414 . 422)) nil (26015 40242 181599 0) 0 nil])
([nil nil ((821 . 826)) ((#("=> {}" 0 1 (fontified t) 1 2 (syntax-table (1) fontified t) 2 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-4-face) fontified t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t)) . 821) (undo-tree-id2012 . -4) (undo-tree-id2013 . -4) (undo-tree-id2014 . -4) (undo-tree-id2015 . -4) (undo-tree-id2016 . -4) (undo-tree-id2017 . -4)) (26015 39829 620522 0) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-variable-name-face fontified t)) . -418) (undo-tree-id3575 . -1) (undo-tree-id3576 . -1) (undo-tree-id3577 . -1) (undo-tree-id3578 . -1) (undo-tree-id3579 . -1) (undo-tree-id3580 . -1) (undo-tree-id3581 . -1) (undo-tree-id3582 . -1) (undo-tree-id3583 . -1) (undo-tree-id3584 . -1) (undo-tree-id3585 . -1) (undo-tree-id3586 . -1) (undo-tree-id3587 . -1) (undo-tree-id3588 . -1) (#("o" 0 1 (face font-lock-variable-name-face fontified t)) . -419) (undo-tree-id3589 . -1) (undo-tree-id3590 . -1) (undo-tree-id3591 . -1) (undo-tree-id3592 . -1) (undo-tree-id3593 . -1) (undo-tree-id3594 . -1) (undo-tree-id3595 . -1) (undo-tree-id3596 . -1) (undo-tree-id3597 . -1) (undo-tree-id3598 . -1) (undo-tree-id3599 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -420) (undo-tree-id3600 . -1) (undo-tree-id3601 . -1) (undo-tree-id3602 . -1) (undo-tree-id3603 . -1) (undo-tree-id3604 . -1) (undo-tree-id3605 . -1) (undo-tree-id3606 . -1) (#("n" 0 1 (face font-lock-variable-name-face fontified t)) . -421) (undo-tree-id3607 . -1) (undo-tree-id3608 . -1) (undo-tree-id3609 . -1) 422) nil (26015 40242 181596 0) 0 nil])
([nil nil ((827 . 839) (#("                " 0 16 (fontified nil)) . 826) (826 . 842) (#("            " 0 12 (fontified nil)) . 826) (undo-tree-id82 . -12) (undo-tree-id84 . -12) (825 . 839)) ((#("
            
" 0 1 (fontified t) 1 13 (fontified nil) 13 14 (fontified nil)) . 825) (undo-tree-id2006 . -1) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (undo-tree-id2009 . -13) (undo-tree-id2010 . -1) (undo-tree-id2011 . -1) (826 . 838) (#("                " 0 16 (fontified nil)) . 826) (826 . 842) (#("            " 0 12 (fontified t)) . 827)) (26015 39829 535772 0) 0 nil])
([nil nil ((418 . 422)) nil (26015 40242 181562 0) 0 nil])
([nil nil ((826 . 842)) ((#("                " 0 16 (fontified t)) . 826) (undo-tree-id2003 . -16) (undo-tree-id2004 . -16) (undo-tree-id2005 . -16)) (26015 39829 453025 0) 0 nil])
([nil nil ((#("o" 0 1 (face font-lock-variable-name-face fontified t)) . -418) (undo-tree-id3525 . -1) (undo-tree-id3526 . -1) (undo-tree-id3527 . -1) (undo-tree-id3528 . -1) (undo-tree-id3529 . -1) (undo-tree-id3530 . -1) (undo-tree-id3531 . -1) (undo-tree-id3532 . -1) (undo-tree-id3533 . -1) (undo-tree-id3534 . -1) (undo-tree-id3535 . -1) (undo-tree-id3536 . -1) (undo-tree-id3537 . -1) (undo-tree-id3538 . -1) (undo-tree-id3539 . -1) (undo-tree-id3540 . -1) (undo-tree-id3541 . -1) (undo-tree-id3542 . -1) (undo-tree-id3543 . -1) (#("p" 0 1 (face font-lock-variable-name-face fontified t)) . -419) (undo-tree-id3544 . -1) (undo-tree-id3545 . -1) (undo-tree-id3546 . -1) (undo-tree-id3547 . -1) (undo-tree-id3548 . -1) (undo-tree-id3549 . -1) (undo-tree-id3550 . -1) (undo-tree-id3551 . -1) (undo-tree-id3552 . -1) (undo-tree-id3553 . -1) (undo-tree-id3554 . -1) (undo-tree-id3555 . -1) (undo-tree-id3556 . -1) (undo-tree-id3557 . -1) (undo-tree-id3558 . -1) (undo-tree-id3559 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -420) (undo-tree-id3560 . -1) (undo-tree-id3561 . -1) (undo-tree-id3562 . -1) (undo-tree-id3563 . -1) (undo-tree-id3564 . -1) (undo-tree-id3565 . -1) (undo-tree-id3566 . -1) (undo-tree-id3567 . -1) (undo-tree-id3568 . -1) (undo-tree-id3569 . -1) (#("n" 0 1 (face font-lock-variable-name-face fontified t)) . -421) (undo-tree-id3570 . -1) (undo-tree-id3571 . -1) (undo-tree-id3572 . -1) (undo-tree-id3573 . -1) (undo-tree-id3574 . -1) 422) nil (26015 40242 181558 0) 0 nil])
([nil nil ((842 . 843) (t 26015 39372 657946 487000)) ((#("N" 0 1 (face font-lock-type-face fontified t)) . 842) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1)) (26015 39829 369915 0) 0 nil])
([nil nil ((418 . 433)) nil (26015 40242 181509 0) 0 nil])
([nil nil ((#("N" 0 1 (face font-lock-type-face fontified t)) . -842) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id216 . -1) (undo-tree-id218 . -1) 843) ((842 . 843)) (26015 39829 286233 0) 0 nil])
([nil nil ((433 . 436)) nil (26015 40242 181508 0) 0 nil])
([nil nil ((842 . 844)) ((#("Er" 0 2 (face font-lock-type-face fontified t)) . 842) (undo-tree-id1999 . -2) (undo-tree-id2000 . -2)) (26015 39829 203065 0) 0 nil])
([nil nil ((437 . 445) (#("            " 0 12 (fontified nil)) . 436) (undo-tree-id3516 . -8) (undo-tree-id3517 . -8) (undo-tree-id3518 . -8) (undo-tree-id3519 . -8) (undo-tree-id3520 . -8) (444 . 448) (436 . 445) (#("            " 0 12 (fontified nil)) . 435) (undo-tree-id3521 . -8) (undo-tree-id3522 . -8) (undo-tree-id3523 . -8) (undo-tree-id3524 . -8) (443 . 447) (434 . 444)) nil (26015 40242 181507 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 846 846 nil nil nil t #s(yas--exit 849 nil))) #s(yas--exit 849 nil) 6 nil #s(yas--field 1 846 846 nil nil nil t #s(yas--exit 849 nil)) nil nil)) (842 . 849) (#("Err(${1:()})$0" 0 14 (fontified nil)) . 842) (842 . 856) (#("Er" 0 2 (fontified nil)) . 842) (842 . 844) (#("Err(…)" 0 6 (fontified nil)) . -842) (842 . 848) (#("Er" 0 2 (face font-lock-type-face fontified t)) . -842) (undo-tree-id205 . -2) (undo-tree-id207 . -1) (undo-tree-id209 . -1) (undo-tree-id211 . -2) 844) ((842 . 844) (#("Err(…)" 0 6 (fontified nil)) . 842) (842 . 848) (#("Er" 0 2 (fontified nil)) . 842) (842 . 844) (#("Err(${1:()})$0" 0 14 (fontified nil)) . 842) (842 . 856) (#("Err(())" 0 3 (face font-lock-type-face fontified t) 3 4 (face (rainbow-delimiters-depth-5-face) fontified t) 4 5 (face (rainbow-delimiters-depth-6-face) fontified t) 5 6 (face (rainbow-delimiters-depth-6-face) fontified t) 6 7 (face (rainbow-delimiters-depth-5-face) fontified t)) . 842) (undo-tree-id1996 . -6) (undo-tree-id1997 . -6) (undo-tree-id1998 . -7) (apply yas--snippet-revive 842 849 #s(yas--snippet nil (#s(yas--field 1 846 846 nil nil nil t #s(yas--exit 849 nil))) #s(yas--exit 849 nil) 6 nil #s(yas--field 1 846 846 nil nil nil t #s(yas--exit 849 nil)) nil nil))) (26015 39829 119943 0) 0 nil])
([nil nil ((#("        let f = File::open(path)?;
        let mut reader = std::io::BufReader::new(f);
        let mut buffer = Vec::new();
        // read the whole file
        reader.read_to_end(&mut buffer)?;
        let img = image::load_from_memory(&buffer)?;
        Self::from_image(device, queue, &img, label)" 0 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 13 (face font-lock-variable-name-face fontified t) 13 15 (fontified t) 15 16 (fontified t) 16 20 (face font-lock-type-face fontified t) 20 26 (fontified t) 26 27 (face (rainbow-delimiters-depth-3-face) fontified t) 27 31 (fontified t) 31 32 (face (rainbow-delimiters-depth-3-face) fontified t) 32 33 (face rust-question-mark fontified t) 33 34 (fontified t) 34 35 (fontified t) 35 43 (fontified t) 43 46 (face font-lock-keyword-face fontified t) 46 47 (fontified t) 47 50 (face font-lock-keyword-face fontified t) 50 51 (fontified t) 51 57 (face font-lock-variable-name-face fontified t) 57 60 (fontified t) 60 63 (face font-lock-constant-face fontified t) 63 65 (fontified t) 65 67 (face font-lock-constant-face fontified t) 67 69 (fontified t) 69 78 (face font-lock-type-face fontified t) 78 83 (fontified t) 83 84 (face (rainbow-delimiters-depth-3-face) fontified t) 84 85 (fontified t) 85 86 (face (rainbow-delimiters-depth-3-face) fontified t) 86 88 (fontified t) 88 96 (fontified t) 96 99 (face font-lock-keyword-face fontified t) 99 100 (fontified t) 100 103 (face font-lock-keyword-face fontified t) 103 104 (fontified t) 104 110 (face font-lock-variable-name-face fontified t) 110 113 (fontified t) 113 116 (face font-lock-type-face fontified t) 116 121 (fontified t) 121 122 (face (rainbow-delimiters-depth-3-face) fontified t) 122 123 (face (rainbow-delimiters-depth-3-face) fontified t) 123 125 (fontified t) 125 133 (fontified t) 133 136 (face font-lock-comment-delimiter-face fontified t) 136 156 (face font-lock-comment-face fontified t) 156 182 (fontified t) 182 183 (face (rainbow-delimiters-depth-3-face) fontified t) 183 184 (face rust-ampersand-face fontified t) 184 187 (face font-lock-keyword-face fontified t) 187 194 (fontified t) 194 195 (face (rainbow-delimiters-depth-3-face) fontified t) 195 196 (face rust-question-mark fontified t) 196 198 (fontified t) 198 206 (fontified t) 206 209 (face font-lock-keyword-face fontified t) 209 210 (fontified t) 210 213 (face font-lock-variable-name-face fontified t) 213 216 (fontified t) 216 221 (face font-lock-constant-face fontified t) 221 239 (fontified t) 239 240 (face (rainbow-delimiters-depth-3-face) fontified t) 240 241 (face rust-ampersand-face fontified t) 241 247 (fontified t) 247 248 (face (rainbow-delimiters-depth-3-face) fontified t) 248 249 (face rust-question-mark fontified t) 249 251 (fontified t) 251 259 (fontified t) 259 263 (face font-lock-type-face fontified t) 263 275 (fontified t) 275 276 (face (rainbow-delimiters-depth-3-face) fontified t) 276 291 (fontified t) 291 292 (face rust-ampersand-face fontified t) 292 302 (fontified t) 302 303 (face (rainbow-delimiters-depth-3-face) fontified t)) . 448) (undo-tree-id3440 . -24) (undo-tree-id3441 . -303) (undo-tree-id3442 . -34) (undo-tree-id3443 . -32) (undo-tree-id3444 . -23) (undo-tree-id3445 . -32) (undo-tree-id3446 . -32) (undo-tree-id3447 . -32) (undo-tree-id3448 . -32) (undo-tree-id3449 . -25) (undo-tree-id3450 . -303) (undo-tree-id3451 . -24) (undo-tree-id3452 . -32) (undo-tree-id3453 . -32) (undo-tree-id3454 . -32) (undo-tree-id3455 . -32) (undo-tree-id3456 . -32) (undo-tree-id3457 . -32) (undo-tree-id3458 . -32) (undo-tree-id3459 . -32) (undo-tree-id3460 . -32) (undo-tree-id3461 . -32) (undo-tree-id3462 . -32) (undo-tree-id3463 . -32) (undo-tree-id3464 . -32) (undo-tree-id3465 . -32) (undo-tree-id3466 . -195) (undo-tree-id3467 . -195) (undo-tree-id3468 . -195) (undo-tree-id3469 . -195) (undo-tree-id3470 . -195) (undo-tree-id3471 . -195) (undo-tree-id3472 . -195) (undo-tree-id3473 . -196) (undo-tree-id3474 . -196) (undo-tree-id3475 . -196) (undo-tree-id3476 . -196) (undo-tree-id3477 . -196) (undo-tree-id3478 . -196) (undo-tree-id3479 . -196) (undo-tree-id3480 . -196) (undo-tree-id3481 . -196) (undo-tree-id3482 . -196) (undo-tree-id3483 . -196) (undo-tree-id3484 . -196) (undo-tree-id3485 . -196) (undo-tree-id3486 . -196) (undo-tree-id3487 . -196) (undo-tree-id3488 . -196) (undo-tree-id3489 . -196) (undo-tree-id3490 . -196) (undo-tree-id3491 . -196) (undo-tree-id3492 . -303) (undo-tree-id3493 . -303) (undo-tree-id3494 . -303) (undo-tree-id3495 . -302) (undo-tree-id3496 . -243) (undo-tree-id3497 . -195) (undo-tree-id3498 . -155) (undo-tree-id3499 . -115) (undo-tree-id3500 . -111) (undo-tree-id3501 . -54) (undo-tree-id3502 . -51) (undo-tree-id3503 . -50) (undo-tree-id3504 . -48) (undo-tree-id3505 . -46) (undo-tree-id3506 . -8) (undo-tree-id3507 . -7) (undo-tree-id3508 . -5) (undo-tree-id3509 . -4) (undo-tree-id3510 . -3) (undo-tree-id3511 . -37) (undo-tree-id3512 . -36) (undo-tree-id3513 . -35) (undo-tree-id3514 . -282) (undo-tree-id3515 . -303)) nil (26015 40242 181491 0) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-6-face) fontified t)) . -846) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id185 . -1) (undo-tree-id187 . -1) (undo-tree-id189 . -1) (undo-tree-id191 . -1) (undo-tree-id193 . -1) (undo-tree-id195 . -1) (undo-tree-id197 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-6-face) fontified t)) . -847) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id202 . -1) (undo-tree-id204 . -1) 848) ((846 . 848)) (26015 39829 36466 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 738 . 739) (nil fontified nil 738 . 739) (nil fontified nil 728 . 738) (nil fontified nil 727 . 728) (nil fontified nil 712 . 727) (nil fontified nil 711 . 712) (nil fontified nil 699 . 711) (nil fontified nil 695 . 699) (nil fontified nil 687 . 695) (nil fontified nil 685 . 687) (nil fontified nil 684 . 685) (nil fontified nil 683 . 684) (nil fontified nil 677 . 683) (nil fontified nil 676 . 677) (nil fontified nil 675 . 676) (nil fontified nil 657 . 675) (nil fontified nil 652 . 657) (nil fontified nil 649 . 652) (nil fontified nil 646 . 649) (nil fontified nil 645 . 646) (nil fontified nil 642 . 645) (nil fontified nil 634 . 642) (nil fontified nil 632 . 634) (nil fontified nil 631 . 632) (nil fontified nil 630 . 631) (nil fontified nil 623 . 630) (nil fontified nil 620 . 623) (nil fontified nil 619 . 620) (nil fontified nil 618 . 619) (nil fontified nil 592 . 618) (nil fontified nil 572 . 592) (nil fontified nil 569 . 572) (nil fontified nil 561 . 569) (nil fontified nil 559 . 561) (nil fontified nil 558 . 559) (nil fontified nil 557 . 558) (nil fontified nil 552 . 557) (nil fontified nil 549 . 552) (nil fontified nil 546 . 549) (nil fontified nil 540 . 546) (nil fontified nil 539 . 540) (nil fontified nil 536 . 539) (nil fontified nil 535 . 536) (nil fontified nil 532 . 535) (nil fontified nil 524 . 532) (nil fontified nil 522 . 524) (nil fontified nil 521 . 522) (nil fontified nil 520 . 521) (nil fontified nil 519 . 520) (nil fontified nil 514 . 519) (nil fontified nil 505 . 514) (nil fontified nil 503 . 505) (nil fontified nil 501 . 503) (nil fontified nil 499 . 501) (nil fontified nil 496 . 499) (nil fontified nil 493 . 496) (nil fontified nil 487 . 493) (nil fontified nil 486 . 487) (nil fontified nil 483 . 486) (nil fontified nil 482 . 483) (nil fontified nil 479 . 482) (nil fontified nil 471 . 479) (nil fontified nil 470 . 471) (nil fontified nil 469 . 470) (nil fontified nil 468 . 469) (nil fontified nil 467 . 468) (nil fontified nil 463 . 467) (nil fontified nil 462 . 463) (nil fontified nil 456 . 462) (nil fontified nil 452 . 456) (nil fontified nil 451 . 452) (nil fontified nil 449 . 451) (nil fontified nil 448 . 449) (nil fontified nil 447 . 448) (nil fontified nil 444 . 447) (nil fontified nil 436 . 444) (436 . 739)) nil (26015 40242 181413 0) 0 nil])
([nil nil ((846 . 847)) ((#("e" 0 1 (fontified t)) . 846) (undo-tree-id1995 . -1)) (26015 39828 952799 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -788) (undo-tree-id3433 . -2) (undo-tree-id3434 . -2) (undo-tree-id3435 . -2) (undo-tree-id3436 . -2) (undo-tree-id3437 . -2) (undo-tree-id3438 . -2) (undo-tree-id3439 . -2) (719 . 723) (662 . 666) (616 . 620) (581 . 585) (540 . 544) (483 . 487) (444 . 448) 388) nil (26015 40242 181392 0) 0 nil])
([nil nil ((apply yas--snippet-revive 842 848 #s(yas--snippet nil (#s(yas--field 1 846 846 nil nil nil t #s(yas--exit 849 nil))) #s(yas--exit 849 nil) 6 nil #s(yas--field 1 846 846 nil nil nil t #s(yas--exit 849 nil)) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 846 846 nil nil nil t #s(yas--exit 849 nil))) #s(yas--exit 849 nil) 6 nil #s(yas--field 1 846 846 nil nil nil t #s(yas--exit 849 nil)) nil nil))) (26015 39828 869814 0) 0 nil])
([nil nil ((432 . 437)) nil (26015 40242 181381 0) 0 nil])
([nil nil ((848 . 849) (t 26015 39381 241471 583000)) ((#("," 0 1 (fontified t)) . 848) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1)) (26015 39828 786780 0) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -436) (undo-tree-id3430 . -1) (undo-tree-id3431 . -1) (undo-tree-id3432 . -1) 437) nil (26015 40242 181380 0) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -848) (undo-tree-id238 . -1) (undo-tree-id240 . -1) (undo-tree-id242 . -1) (undo-tree-id244 . -1) (undo-tree-id246 . -1) 849) ((848 . 849)) (26015 39828 702790 0) 0 nil])
([nil nil ((436 . 439)) nil (26015 40242 181376 0) 0 nil])
([nil nil ((848 . 849)) ((#("/" 0 1 (fontified t)) . 848) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1)) (26015 39828 619826 0) 0 nil])
([nil nil ((apply yas--snippet-revive 436 444 #s(yas--snippet nil nil #s(yas--exit 443 nil) 14 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 443 nil) 14 nil nil nil nil)) (436 . 444) (#("Result<$0>" 0 10 (fontified nil)) . 436) (436 . 446) (#("Res" 0 3 (fontified nil)) . 436) (436 . 439) (#("Result<…>" 0 9 (fontified nil)) . -436) (436 . 445) (#("Res" 0 3 (face font-lock-type-face fontified t)) . -436) (undo-tree-id3421 . -3) (undo-tree-id3422 . -1) (undo-tree-id3423 . -1) (undo-tree-id3424 . -2) (undo-tree-id3425 . -2) (undo-tree-id3426 . -3) (undo-tree-id3427 . -3) (undo-tree-id3428 . -3) (undo-tree-id3429 . -3) 439) nil (26015 40242 181374 0) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -848) (undo-tree-id235 . -1) (undo-tree-id237 . -1) 849) ((848 . 849)) (26015 39828 536379 0) 0 nil])
([nil nil ((443 . 444)) nil (26015 40242 181361 0) 0 nil])
([nil nil ((848 . 853)) ((#(".into" 0 1 (fontified t) 1 5 (fontified t)) . 848) (undo-tree-id1988 . -5) (undo-tree-id1989 . -5) (undo-tree-id1990 . -1)) (26015 39828 453928 0) 0 nil])
([nil nil ((443 . 447) (#("S" 0 1 (fontified nil)) . 443) (443 . 444) (#("Self" 0 4 (fontified nil)) . -443) (443 . 447) (#("S" 0 1 (face font-lock-type-face fontified t)) . -443) (undo-tree-id3415 . -1) (undo-tree-id3416 . -1) (undo-tree-id3417 . -1) (undo-tree-id3418 . -1) (undo-tree-id3419 . -1) (undo-tree-id3420 . -1) 444) nil (26015 40242 181356 0) 0 nil])
([nil nil ((apply yas--snippet-revive 849 855 #s(yas--snippet nil nil #s(yas--exit #<marker at 652 in texture.rs> nil) 7 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 652 in texture.rs> nil) 7 nil nil nil nil)) (849 . 855) (#("into()$0" 0 8 (fontified nil)) . 849) (849 . 857) (#("into" 0 4 (fontified nil)) . 849) (849 . 853) (#("into() (as Into)" 0 16 (fontified nil)) . -849) (849 . 865) (#("into" 0 4 (fontified t)) . -849) (undo-tree-id219 . -4) (undo-tree-id221 . -1) (undo-tree-id223 . -1) (undo-tree-id225 . -2) (undo-tree-id227 . -2) (undo-tree-id229 . -3) (undo-tree-id231 . -4) (undo-tree-id233 . -4) 853) ((849 . 853) (#("into() (as Into)" 0 16 (fontified nil)) . 849) (849 . 865) (#("into" 0 4 (fontified nil)) . 849) (849 . 853) (#("into()$0" 0 8 (fontified nil)) . 849) (849 . 857) (#("into()" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-5-face) fontified t) 5 6 (face (rainbow-delimiters-depth-5-face) fontified t)) . 849) (undo-tree-id1987 . -6)) (26015 39828 369410 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -450) (undo-tree-id3634 . -1) (undo-tree-id3635 . -1) (undo-tree-id3636 . -1) (undo-tree-id3637 . -1) (undo-tree-id3638 . -1) (undo-tree-id3639 . -1) (undo-tree-id3640 . -1) (undo-tree-id3641 . -1) (undo-tree-id3642 . -1) (undo-tree-id3643 . -1) (undo-tree-id3644 . -1) (undo-tree-id3645 . -1) (undo-tree-id3646 . -1) (undo-tree-id3647 . -1) (undo-tree-id3648 . -1) (undo-tree-id3649 . -1) 451 (t 26015 40242 197813 312000)) nil (26015 40252 507210 0) 0 nil])
([nil nil ((#("                Err(e).into()" 0 16 (fontified t) 16 19 (face font-lock-type-face fontified t) 19 20 (face (rainbow-delimiters-depth-5-face) fontified t) 20 21 (fontified t) 21 22 (face (rainbow-delimiters-depth-5-face) fontified t) 22 23 (fontified t) 23 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-5-face) fontified t) 28 29 (face (rainbow-delimiters-depth-5-face) fontified t)) . 826) (undo-tree-id294 . -29) (undo-tree-id296 . -22) (undo-tree-id298 . -22) (undo-tree-id300 . -22) (undo-tree-id302 . -22) (undo-tree-id304 . -22) (undo-tree-id306 . -22) (undo-tree-id308 . -23) (undo-tree-id310 . -23) (undo-tree-id312 . -23) (undo-tree-id314 . -23) (undo-tree-id316 . -23) (undo-tree-id318 . -23) (undo-tree-id320 . -23) (undo-tree-id322 . -23) (undo-tree-id324 . -29) (undo-tree-id326 . -29) (undo-tree-id328 . -29) (undo-tree-id330 . -29) (undo-tree-id332 . -29) (undo-tree-id334 . -29) (undo-tree-id336 . -29) (undo-tree-id338 . -29) (undo-tree-id340 . -29) (undo-tree-id342 . -29) (undo-tree-id344 . -29) (undo-tree-id346 . -29) (undo-tree-id348 . -29) (undo-tree-id350 . -29) (undo-tree-id352 . -29) (undo-tree-id354 . -29) (undo-tree-id356 . -29) (undo-tree-id358 . -29) (t 26015 39400 766336 463000)) ((826 . 855)) (26015 39828 286186 0) 0 nil])
([nil nil ((794 . 802)) nil (26015 40252 507193 0) 0 nil])
([nil nil ((826 . 842)) ((#("                " 0 16 (fontified t)) . 826) (undo-tree-id1982 . -16) (undo-tree-id1983 . -16) (undo-tree-id1984 . -16) (undo-tree-id1985 . -16) (undo-tree-id1986 . -16)) (26015 39828 203018 0) 0 nil])
([nil nil ((802 . 806)) nil (26015 40252 507192 0) 0 nil])
([nil nil ((842 . 845)) ((#("war" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 842) (undo-tree-id1980 . -3) (undo-tree-id1981 . -3)) (26015 39828 119789 0) 0 nil])
([nil nil ((802 . 811) (#("read" 0 4 (fontified nil)) . 802) (802 . 806) (#("read_file" 0 9 (fontified nil)) . -802) (802 . 811) (#("read" 0 4 (fontified t)) . -802) (undo-tree-id3623 . -4) (undo-tree-id3624 . -1) (undo-tree-id3625 . -1) (undo-tree-id3626 . -2) (undo-tree-id3627 . -2) (undo-tree-id3628 . -3) (undo-tree-id3629 . -3) (undo-tree-id3630 . -4) (undo-tree-id3631 . -4) (undo-tree-id3632 . -4) (undo-tree-id3633 . -4) 806) nil (26015 40252 507190 0) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -843) (undo-tree-id278 . -1) (undo-tree-id280 . -1) (undo-tree-id282 . -1) (undo-tree-id284 . -1) (undo-tree-id286 . -1) (undo-tree-id288 . -1) (#("r" 0 1 (fontified t)) . -844) (undo-tree-id289 . -1) (undo-tree-id291 . -1) (undo-tree-id293 . -1) 845) ((843 . 845)) (26015 39828 36908 0) 0 nil])
([nil nil ((811 . 812)) nil (26015 40252 507176 0) 0 nil])
([nil nil ((843 . 846)) ((#("arn" 0 3 (fontified t)) . 843) (undo-tree-id1978 . -3) (undo-tree-id1979 . -3)) (26015 39827 954083 0) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -811) (undo-tree-id3616 . -1) (undo-tree-id3617 . -1) (undo-tree-id3618 . -1) (undo-tree-id3619 . -1) (undo-tree-id3620 . -1) (undo-tree-id3621 . -1) (undo-tree-id3622 . -1) 812) nil (26015 40252 507174 0) 0 nil])
([nil nil ((102 . 121) (apply yas--snippet-revive 842 849 #s(yas--snippet nil nil #s(yas--exit #<marker at 652 in texture.rs> nil) 8 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 652 in texture.rs> nil) 8 nil nil nil nil)) (842 . 849) (#("warn!($0)" 0 9 (fontified nil)) . 842) (842 . 851) (#("warn" 0 4 (fontified nil)) . 842) (842 . 846) (#("warn!(…) (use tracing::warn)" 0 28 (fontified nil)) . -842) (842 . 870) (#("warn" 0 4 (fontified t)) . -842) (undo-tree-id252 . -4) (undo-tree-id254 . -1) (undo-tree-id256 . -1) (undo-tree-id258 . -1) (undo-tree-id260 . -1) (undo-tree-id262 . -1) (undo-tree-id264 . -1) (undo-tree-id266 . -1) (undo-tree-id268 . -1) (undo-tree-id270 . -2) (undo-tree-id272 . -3) (undo-tree-id274 . -4) (undo-tree-id276 . -4) 846) ((842 . 846) (#("warn!(…) (use tracing::warn)" 0 28 (fontified nil)) . 842) (842 . 870) (#("warn" 0 4 (fontified nil)) . 842) (842 . 846) (#("warn!($0)" 0 9 (fontified nil)) . 842) (842 . 851) (#("warn!()" 0 5 (face font-lock-preprocessor-face fontified t) 5 6 (face (rainbow-delimiters-depth-5-face) fontified t) 6 7 (face (rainbow-delimiters-depth-5-face) fontified t)) . 842) (undo-tree-id1973 . -7) (undo-tree-id1974 . -7) (undo-tree-id1975 . -6) (undo-tree-id1976 . -6) (undo-tree-id1977 . -6) (#("
use tracing::warn;" 0 1 (fontified t) 1 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 12 (face font-lock-constant-face fontified t) 12 19 (fontified t)) . 102)) (26015 39827 867707 0) 0 nil])
([nil nil ((811 . 814)) nil (26015 40252 507166 0) 0 nil])
([nil nil ((867 . 869)) ((#("\"\"" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t)) . 867) (undo-tree-id1971 . -1) (undo-tree-id1972 . -1)) (26015 39827 783998 0) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -813) (undo-tree-id3610 . -1) (undo-tree-id3611 . -1) (undo-tree-id3612 . -1) (undo-tree-id3613 . -1) (undo-tree-id3614 . -1) (undo-tree-id3615 . -1) 814) nil (26015 40252 507162 0) 0 nil])
([nil nil ((868 . 875)) ((#("Cannot " 0 7 (face font-lock-string-face fontified t)) . 868) (undo-tree-id1969 . -7) (undo-tree-id1970 . -7)) (26015 39827 700852 0) 0 nil])
([nil nil ((802 . 809) (t 26015 40252 523744 366000)) nil (26015 40420 173861 0) 0 nil])
([nil nil ((875 . 896)) ((#("open texture file, us" 0 21 (face font-lock-string-face fontified t)) . 875) (undo-tree-id1967 . -21) (undo-tree-id1968 . -21)) (26015 39827 617000 0) 0 nil])
([nil nil ((820 . 821)) nil (26015 40420 173860 0) 0 nil])
([nil nil ((896 . 898)) ((#("e " 0 2 (face font-lock-string-face fontified t)) . 896) (undo-tree-id1965 . -2) (undo-tree-id1966 . -2)) (26015 39827 532742 0) 0 nil])
([nil nil ((809 . 813)) nil (26015 40420 173859 0) 0 nil])
([nil nil ((898 . 902)) ((#("defu" 0 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t)) . 898) (undo-tree-id1963 . -4) (undo-tree-id1964 . -4)) (26015 39827 449184 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -812) (undo-tree-id3921 . -1) 813) nil (26015 40420 173858 0) 0 nil])
([nil nil ((#("u" 0 1 (face font-lock-string-face fontified t)) . -901) (undo-tree-id250 . -1) 902) ((901 . 902)) (26015 39827 365120 0) 0 nil])
([nil nil ((812 . 814)) nil (26015 40420 173856 0) 0 nil])
([nil nil ((901 . 911)) ((#("ault insta" 0 9 (face font-lock-string-face fontified t) 9 10 (face font-lock-string-face fontified t)) . 901) (undo-tree-id1961 . -10) (undo-tree-id1962 . -10)) (26015 39827 282225 0) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -812) (undo-tree-id3919 . -1) (#("_" 0 1 (fontified t)) . -813) (undo-tree-id3920 . -1) 814) nil (26015 40420 173854 0) 0 nil])
([nil nil ((#("a" 0 1 (face font-lock-string-face fontified t)) . -910) (undo-tree-id248 . -1) 911) ((910 . 911)) (26015 39827 198803 0) 0 nil])
([nil nil ((812 . 814)) nil (26015 40420 173851 0) 0 nil])
([nil nil ((910 . 913)) ((#("ead" 0 3 (face font-lock-string-face fontified t)) . 910)) (26015 39827 114907 0) 0 nil])
([nil nil ((813 . 814)) nil (26015 40420 173850 0) 0 nil])
([nil nil ((915 . 916)) ((#(";" 0 1 (fontified t)) . 915) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1)) (26015 39827 31858 0) 0 nil])
([nil nil ((815 . 818)) nil (26015 40420 173849 0) 0 nil])
([nil nil ((916 . 933) (t 26015 39471 543503 804000)) ((#("
                " 0 1 (fontified t) 1 17 (fontified t)) . 916) (undo-tree-id1954 . -17) (undo-tree-id1955 . -17) (undo-tree-id1956 . -17)) (26015 39826 949288 0) 0 nil])
([nil nil ((830 . 832)) nil (26015 40420 173848 0) 0 nil])
([nil nil ((nil fontified nil 976 . 977) (nil fontified nil 966 . 976) (nil fontified nil 965 . 966) (nil fontified nil 950 . 965) (nil fontified nil 949 . 950) (nil fontified nil 937 . 949) (nil fontified nil 933 . 937) (933 . 977)) ((#("Self::from_image(device, queue, &img, label)" 0 4 (face font-lock-type-face fontified nil) 4 16 (fontified nil) 16 17 (face (rainbow-delimiters-depth-5-face) fontified nil) 17 32 (fontified nil) 32 33 (face rust-ampersand-face fontified nil) 33 43 (fontified nil) 43 44 (face (rainbow-delimiters-depth-5-face) fontified nil rear-nonsticky t)) . 933) (nil fontified t 976 . 977)) (26015 39826 865746 0) 0 nil])
([nil nil ((833 . 841) (#("            " 0 12 (fontified nil)) . 832) (undo-tree-id3918 . -8) (840 . 844) (831 . 841)) nil (26015 40420 173847 0) 0 nil])
([nil nil ((916 . 933)) ((#("
                " 0 1 (fontified t) 1 17 (fontified t)) . 916) (undo-tree-id1951 . -17) (undo-tree-id1952 . -17) (undo-tree-id1953 . -17)) (26015 39826 782713 0) 0 nil])
([nil nil ((#("     if let Err(e) = read_file() {

        }" 0 5 (fontified t) 5 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 15 (face font-lock-type-face fontified t) 15 16 (face (rainbow-delimiters-depth-3-face) fontified t) 16 17 (fontified t) 17 18 (face (rainbow-delimiters-depth-3-face) fontified t) 18 21 (fontified t) 21 30 (fontified t) 30 31 (face (rainbow-delimiters-depth-3-face) fontified t) 31 32 (face (rainbow-delimiters-depth-3-face) fontified t) 32 33 (fontified t) 33 34 (face (rainbow-delimiters-depth-3-face) fontified t) 34 35 (fontified t) 35 44 (fontified t) 44 45 (face (rainbow-delimiters-depth-3-face) fontified t)) . 797) (undo-tree-id3917 . -45)) nil (26015 40420 173844 0) 0 nil])
([nil nil ((933 . 940)) ((#("let img" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 7 (face font-lock-variable-name-face fontified t)) . 933) (undo-tree-id1948 . -7) (undo-tree-id1949 . -7) (undo-tree-id1950 . -7)) (26015 39826 698912 0) 0 nil])
([nil nil ((794 . 802) (#("   " 0 3 (fontified t)) . 794) (undo-tree-id3914 . -3) (undo-tree-id3915 . -3) (undo-tree-id3916 . -3) 797) nil (26015 40420 173842 0) 0 nil])
([nil nil ((940 . 943)) ((#(" = " 0 3 (fontified t)) . 940) (undo-tree-id1945 . -3) (undo-tree-id1946 . -3) (undo-tree-id1947 . -3)) (26015 39826 615788 0) 0 nil])
([nil nil ((802 . 804)) nil (26015 40420 173837 0) 0 nil])
([nil nil ((943 . 945)) ((#("im" 0 2 (fontified t)) . 943) (undo-tree-id1943 . -2) (undo-tree-id1944 . -2)) (26015 39826 532767 0) 0 nil])
([nil nil ((#("M" 0 1 (face font-lock-type-face fontified t)) . -802) (undo-tree-id3912 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -803) (undo-tree-id3913 . -1) 804) nil (26015 40420 173836 0) 0 nil])
([nil nil ((943 . 948) (#("im" 0 2 (fontified nil)) . 943) (943 . 945) (#("image" 0 5 (fontified nil)) . -943) (943 . 948) (#("im" 0 2 (fontified t)) . -943) (undo-tree-id392 . -2) (undo-tree-id393 . -2) (undo-tree-id395 . -2) (undo-tree-id397 . -2) 945) ((943 . 945) (#("image" 0 5 (fontified nil)) . 943) (943 . 948) (#("im" 0 2 (fontified nil)) . 943) (943 . 945) (#("image" 0 5 (fontified t)) . 943) (undo-tree-id1940 . -5) (undo-tree-id1941 . -5) (undo-tree-id1942 . -5)) (26015 39826 448692 0) 0 nil])
([nil nil ((802 . 812)) nil (26015 40420 173833 0) 0 nil])
([nil nil ((948 . 951)) ((#("::D" 0 2 (fontified t) 2 3 (face font-lock-type-face fontified t)) . 948) (undo-tree-id1937 . -2) (undo-tree-id1938 . -3) (undo-tree-id1939 . -3)) (26015 39826 365876 0) 0 nil])
([nil nil ((808 . 817) (#("read" 0 4 (fontified nil)) . 808) (808 . 812) (#("read_file" 0 9 (fontified nil)) . -808) (808 . 817) (#("read" 0 4 (fontified t)) . -808) (undo-tree-id3911 . -4) 812) nil (26015 40420 173831 0) 0 nil])
([nil nil ((950 . 962) (#("D" 0 1 (fontified nil)) . 950) (950 . 951) (#("DynamicImage" 0 12 (fontified nil)) . -950) (950 . 962) (#("D" 0 1 (face font-lock-type-face fontified t)) . -950) (undo-tree-id385 . -1) (undo-tree-id387 . -1) (undo-tree-id389 . -1) (undo-tree-id391 . -1) 951) ((950 . 951) (#("DynamicImage" 0 12 (fontified nil)) . 950) (950 . 962) (#("D" 0 1 (fontified nil)) . 950) (950 . 951) (#("DynamicImage" 0 12 (face font-lock-type-face fontified t)) . 950) (undo-tree-id1934 . -12) (undo-tree-id1935 . -12) (undo-tree-id1936 . -12)) (26015 39826 281989 0) 0 nil])
([nil nil ((817 . 819)) nil (26015 40420 173827 0) 0 nil])
([nil nil ((962 . 965)) ((#("::n" 0 2 (fontified t) 2 3 (fontified t)) . 962) (undo-tree-id1931 . -2) (undo-tree-id1932 . -3) (undo-tree-id1933 . -3)) (26015 39826 199863 0) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -817) (undo-tree-id3909 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -818) (undo-tree-id3910 . -1) 819) nil (26015 40420 173826 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 974 974 nil nil nil t #s(yas--field 2 977 978 nil nil nil nil #s(yas--exit 979 nil))) #s(yas--field 2 977 978 nil nil nil nil #s(yas--exit 979 nil))) #s(yas--exit 979 nil) 9 nil #s(yas--field 1 974 974 nil nil nil t #s(yas--field 2 977 978 nil nil nil nil #s(yas--exit 979 nil))) nil nil)) (964 . 979) (#("new_rgba8(${1:w}, ${2:h})$0" 0 27 (fontified nil)) . 964) (964 . 991) (#("n" 0 1 (fontified nil)) . 964) (964 . 965) (#("new_rgba8(…)" 0 12 (fontified nil)) . -964) (964 . 976) (#("n" 0 1 (fontified t)) . -964) (undo-tree-id375 . -1) (undo-tree-id377 . -1) (undo-tree-id379 . -1) (undo-tree-id381 . -1) (undo-tree-id383 . -1) 965) ((964 . 965) (#("new_rgba8(…)" 0 12 (fontified nil)) . 964) (964 . 976) (#("n" 0 1 (fontified nil)) . 964) (964 . 965) (#("new_rgba8(${1:w}, ${2:h})$0" 0 27 (fontified nil)) . 964) (964 . 991) (#("new_rgba8(w, h)" 0 9 (fontified t) 9 10 (face (rainbow-delimiters-depth-5-face) fontified t) 10 11 (fontified t) 11 13 (fontified t) 13 14 (fontified t) 14 15 (face (rainbow-delimiters-depth-5-face) fontified t)) . 964) (undo-tree-id1928 . -3) (undo-tree-id1929 . -11) (undo-tree-id1930 . -11) (apply yas--snippet-revive 964 979 #s(yas--snippet nil (#s(yas--field 1 974 974 nil nil nil t #s(yas--field 2 977 978 nil nil nil nil #s(yas--exit 979 nil))) #s(yas--field 2 977 978 nil nil nil nil #s(yas--exit 979 nil))) #s(yas--exit 979 nil) 9 nil #s(yas--field 1 974 974 nil nil nil t #s(yas--field 2 977 978 nil nil nil nil #s(yas--exit 979 nil))) nil nil))) (26015 39826 115682 0) 0 nil])
([nil nil ((817 . 822)) nil (26015 40420 173823 0) 0 nil])
([nil nil ((#("w" 0 1 (fontified t)) . -974) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id374 . -1) 975) ((974 . 975)) (26015 39826 33261 0) 0 nil])
([nil nil ((823 . 831) (#("            " 0 12 (fontified nil)) . 822) (undo-tree-id3908 . -8) (830 . 834) (821 . 831)) nil (26015 40420 173822 0) 0 nil])
([nil nil ((974 . 975)) ((#("1" 0 1 (fontified t)) . 974) (undo-tree-id1927 . -1)) (26015 39825 948734 0) 0 nil])
([nil nil ((822 . 834)) nil (26015 40420 173819 0) 0 nil])
([nil nil ((apply yas--snippet-revive 964 979 #s(yas--snippet nil (#s(yas--field 1 974 974 nil nil nil t #s(yas--field 2 977 978 nil nil nil nil #s(yas--exit 979 nil))) #s(yas--field 2 977 978 nil nil nil nil #s(yas--exit 979 nil))) #s(yas--exit 979 nil) 9 nil #s(yas--field 1 974 974 nil nil nil t #s(yas--field 2 977 978 nil nil nil nil #s(yas--exit 979 nil))) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 974 974 nil nil nil t #s(yas--field 2 977 978 nil nil nil nil #s(yas--exit 979 nil))) #s(yas--field 2 977 978 nil nil nil nil #s(yas--exit 979 nil))) #s(yas--exit 979 nil) 9 nil #s(yas--field 1 974 974 nil nil nil t #s(yas--field 2 977 978 nil nil nil nil #s(yas--exit 979 nil))) nil nil))) (26015 39825 865094 0) 0 nil])
([nil nil ((834 . 836)) nil (26015 40420 173818 0) 0 nil])
([nil nil ((#("h" 0 1 (fontified t)) . -977) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id369 . -1) 978) ((977 . 978)) (26015 39825 781505 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 837 838 nil nil nil t #s(yas--exit 839 nil))) #s(yas--exit 839 nil) 15 nil #s(yas--field 1 837 838 nil nil nil t #s(yas--exit 839 nil)) nil nil)) (834 . 838) (#("Ok($1)$0" 0 8 (fontified nil)) . 834) (834 . 842) (#("Ok" 0 2 (fontified nil)) . 834) (834 . 836) (#("Ok(…)" 0 5 (fontified nil)) . -834) (834 . 839) (#("Ok" 0 2 (face font-lock-type-face fontified t)) . -834) (undo-tree-id3907 . -2) 836) nil (26015 40420 173816 0) 0 nil])
([nil nil ((977 . 978)) ((#("1" 0 1 (fontified t)) . 977)) (26015 39825 711526 0) 0 nil])
([nil nil ((837 . 838)) nil (26015 40420 173812 0) 0 nil])
([nil nil ((979 . 980)) ((#("'" 0 1 (fontified t)) . 979) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1)) (26015 39825 654293 0) 0 nil])
([nil nil ((apply yas--snippet-revive 834 839 #s(yas--snippet nil (#s(yas--field 1 837 838 nil nil nil t #s(yas--exit 839 nil))) #s(yas--exit 839 nil) 15 nil #s(yas--field 1 837 838 nil nil nil t #s(yas--exit 839 nil)) nil nil))) nil (26015 40420 173811 0) 0 nil])
([nil nil ((#("'" 0 1 (fontified t)) . -979) (undo-tree-id360 . -1) (undo-tree-id362 . -1) (undo-tree-id364 . -1) 980) ((979 . 980)) (26015 39825 115142 0) 0 nil])
([nil nil ((839 . 841)) nil (26015 40420 173810 0) 0 nil])
([nil nil ((979 . 980)) ((#(";" 0 1 (fontified t)) . 979)) (26015 39824 919938 0) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -840) (undo-tree-id3906 . -1) 841) nil (26015 40420 173809 0) 0 nil])
([nil nil ((474 . 475) (t 26015 39551 185799 991000)) (("." . 474) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1)) (26015 39824 378215 0) 0 nil])
([nil nil ((840 . 845)) nil (26015 40420 173807 0) 0 nil])
([nil nil ((475 . 476)) ((#("0" 0 1 (fontified t)) . 475) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1)) (26015 39824 295061 0) 0 nil])
([nil nil ((846 . 858) (#("                " 0 16 (fontified nil)) . 845) (845 . 861) (#("            " 0 12 (fontified nil)) . 845) (undo-tree-id3905 . -12) (844 . 858)) nil (26015 40420 173805 0) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -474) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id402 . -1) (undo-tree-id404 . -1) (undo-tree-id406 . -1) (undo-tree-id408 . -1) (undo-tree-id410 . -1) (undo-tree-id412 . -1) (undo-tree-id414 . -1) (undo-tree-id416 . -1) (undo-tree-id418 . -1) (undo-tree-id420 . -1) (undo-tree-id422 . -1) (undo-tree-id424 . -1) (undo-tree-id426 . -1) (#("0" 0 1 (fontified t)) . -475) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id430 . -1) (undo-tree-id432 . -1) (undo-tree-id434 . -1) (undo-tree-id436 . -1) (undo-tree-id438 . -1) (undo-tree-id440 . -1) 476) ((474 . 476)) (26015 39824 211482 0) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -837) (undo-tree-id3903 . -1) (undo-tree-id3904 . -1) 838) nil (26015 40420 173802 0) 0 nil])
([nil nil ((473 . 474)) ((#("(" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . 473)) (26015 39824 128270 0) 0 nil])
([nil nil ((837 . 838)) nil (26015 40420 173799 0) 0 nil])
([nil nil ((475 . 476)) ((#(")" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . 475) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1)) (26015 39824 44983 0) 0 nil])
([nil nil ((845 . 861)) nil (26015 40420 173798 0) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -475) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id600 . -1) (undo-tree-id602 . -1) (undo-tree-id604 . -1) (undo-tree-id606 . -1) (undo-tree-id608 . -1) (undo-tree-id610 . -1) (undo-tree-id612 . -1) (undo-tree-id614 . -1) (undo-tree-id616 . -1) (undo-tree-id618 . -1) (undo-tree-id620 . -1) (undo-tree-id622 . -1) (undo-tree-id624 . -1) (undo-tree-id626 . -1) (undo-tree-id628 . -1) (undo-tree-id630 . -1) (undo-tree-id632 . -1) (undo-tree-id634 . -1) 476 (t 26015 39591 473671 678000)) ((475 . 476)) (26015 39823 961725 0) 0 nil])
([nil nil ((861 . 862)) nil (26015 40420 173797 0) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -474) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id532 . -1) (undo-tree-id534 . -1) (undo-tree-id536 . -1) (undo-tree-id538 . -1) (undo-tree-id540 . -1) (undo-tree-id542 . -1) (undo-tree-id544 . -1) (undo-tree-id546 . -1) (undo-tree-id548 . -1) (undo-tree-id550 . -1) (undo-tree-id552 . -1) (undo-tree-id554 . -1) (undo-tree-id556 . -1) (undo-tree-id558 . 1) (undo-tree-id560 . -1) (undo-tree-id562 . -1) (undo-tree-id564 . -1) (undo-tree-id566 . -1) (undo-tree-id568 . -1) (undo-tree-id570 . -1) (undo-tree-id572 . -1) (undo-tree-id574 . -1) (undo-tree-id576 . -1) (undo-tree-id578 . -1) (undo-tree-id580 . -1) (undo-tree-id582 . -1) (undo-tree-id584 . -1) (undo-tree-id586 . -1) (undo-tree-id588 . -1) (undo-tree-id590 . -1) (undo-tree-id592 . -1) (undo-tree-id594 . -1) (undo-tree-id596 . -1) 475) ((474 . 475)) (26015 39823 878257 0) 0 nil])
([nil nil ((876 . 878)) nil (26015 40420 173796 0) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -473) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id458 . -1) (undo-tree-id460 . -1) (undo-tree-id462 . -1) (undo-tree-id464 . -1) (undo-tree-id466 . -1) (undo-tree-id468 . -1) (undo-tree-id470 . -1) (undo-tree-id472 . -1) (undo-tree-id474 . -1) (undo-tree-id476 . -1) (undo-tree-id478 . -1) (undo-tree-id480 . -1) (undo-tree-id482 . -1) (undo-tree-id484 . -1) (undo-tree-id486 . -1) (undo-tree-id488 . -1) (undo-tree-id490 . -1) (undo-tree-id492 . -1) (undo-tree-id494 . -1) (undo-tree-id496 . -1) (undo-tree-id498 . -1) (undo-tree-id500 . -1) (undo-tree-id502 . -1) (undo-tree-id504 . -1) (undo-tree-id506 . -1) (undo-tree-id508 . -1) (undo-tree-id510 . -1) (undo-tree-id512 . -1) (undo-tree-id514 . -1) (undo-tree-id516 . -1) (undo-tree-id518 . -1) (undo-tree-id520 . -1) (undo-tree-id522 . -1) (undo-tree-id524 . -1) (undo-tree-id526 . -1) (undo-tree-id528 . -1) 474) ((473 . 474)) (26015 39823 794962 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -877) (undo-tree-id3902 . -1) 878) nil (26015 40420 173795 0) 0 nil])
([nil nil ((473 . 474)) ((#("f" 0 1 (fontified t)) . 473) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1)) (26015 39823 711726 0) 0 nil])
([nil nil ((877 . 890)) nil (26015 40420 173793 0) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -473) (undo-tree-id1070 . -1) (undo-tree-id1072 . -1) (undo-tree-id1074 . -1) (undo-tree-id1076 . -1) (undo-tree-id1078 . -1) (undo-tree-id1080 . -1) (undo-tree-id1082 . -1) (undo-tree-id1084 . -1) (undo-tree-id1086 . -1) (undo-tree-id1088 . -1) (undo-tree-id1090 . -1) (undo-tree-id1092 . -1) (undo-tree-id1094 . -1) (undo-tree-id1096 . -1) (undo-tree-id1098 . -1) (undo-tree-id1100 . -1) (undo-tree-id1102 . -1) (undo-tree-id1104 . -1) (undo-tree-id1106 . -1) (undo-tree-id1108 . -1) (undo-tree-id1110 . -1) (undo-tree-id1112 . -1) (undo-tree-id1114 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1119 . -1) (undo-tree-id1121 . -1) (undo-tree-id1123 . -1) (undo-tree-id1125 . -1) 474 (t 26015 39600 90396 158000)) ((473 . 474)) (26015 39823 627696 0) 0 nil] [nil nil ((apply yas--snippet-revive 473 480 #s(yas--snippet nil nil #s(yas--exit #<marker at 652 in texture.rs> nil) 10 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 652 in texture.rs> nil) 10 nil nil nil nil)) (473 . 480) (#("file!($0)" 0 9 (fontified nil)) . 473) (473 . 482) (#("f" 0 1 (fontified nil)) . 473) (473 . 474) (#("file!(…)" 0 8 (fontified nil)) . -473) (473 . 481) (#("f" 0 1 (fontified t)) . -473) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) 474) ((473 . 474) (#("file!(…)" 0 8 (fontified nil)) . 473) (473 . 481) (#("f" 0 1 (fontified nil)) . 473) (473 . 474) (#("file!($0)" 0 9 (fontified nil)) . 473) (473 . 482) (#("file!()" 0 5 (face font-lock-preprocessor-face fontified t) 5 6 (face (rainbow-delimiters-depth-5-face) fontified t) 6 7 (face (rainbow-delimiters-depth-5-face) fontified t)) . 473) (undo-tree-id635 . -6) (undo-tree-id636 . -6) (undo-tree-id637 . -6)) (26015 39599 97875 0) 0 nil])
([nil nil ((890 . 891)) nil (26015 40420 173792 0) 0 nil])
([nil nil ((473 . 475)) ((#("Fi" 0 2 (face font-lock-type-face fontified t)) . 473) (undo-tree-id1915 . -2) (undo-tree-id1916 . -2)) (26015 39823 545305 0) 0 nil])
nil
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 894 895 nil nil nil t #s(yas--exit 896 nil))) #s(yas--exit 896 nil) 16 nil #s(yas--field 1 894 895 nil nil nil t #s(yas--exit 896 nil)) nil nil)) (890 . 895) (#("Err($1)$0" 0 9 (fontified nil)) . 890) (890 . 899) (#("E" 0 1 (fontified nil)) . 890) (890 . 891) (#("Err(…)" 0 6 (fontified nil)) . -890) (890 . 896) (#("E" 0 1 (face font-lock-type-face fontified t)) . -890) (undo-tree-id3901 . -1) 891) nil (26015 40420 173790 0) 0 nil])
([nil nil ((473 . 477) (#("Fi" 0 2 (fontified nil)) . 473) (473 . 475) (#("File" 0 4 (fontified nil)) . -473) (473 . 477) (#("Fi" 0 2 (face font-lock-type-face fontified t)) . -473) (undo-tree-id1063 . -2) (undo-tree-id1065 . -1) (undo-tree-id1067 . -2) 475) ((473 . 475) (#("File" 0 4 (fontified nil)) . 473) (473 . 477) (#("Fi" 0 2 (fontified nil)) . 473) (473 . 475) (#("File" 0 4 (face font-lock-type-face fontified t)) . 473) (undo-tree-id1912 . -4) (undo-tree-id1913 . -4) (undo-tree-id1914 . -4)) (26015 39823 461093 0) 0 nil])
([nil nil ((894 . 895)) nil (26015 40420 173786 0) 0 nil])
([nil nil ((477 . 480)) ((#(" {}" 0 1 (fontified t) 1 2 (face (rainbow-delimiters-depth-5-face) fontified t) 2 3 (face (rainbow-delimiters-depth-5-face) fontified t)) . 477) (undo-tree-id1910 . -2) (undo-tree-id1911 . -2)) (26015 39823 377930 0) 0 nil])
([nil nil ((896 . 898) (apply yas--snippet-revive 890 896 #s(yas--snippet nil (#s(yas--field 1 894 895 nil nil nil t #s(yas--exit 896 nil))) #s(yas--exit 896 nil) 16 nil #s(yas--field 1 894 895 nil nil nil t #s(yas--exit 896 nil)) nil nil))) nil (26015 40420 173785 0) 0 nil])
([nil nil ((479 . 482)) ((#("inn" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 479)) (26015 39823 295927 0) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -897) (undo-tree-id3900 . -1) 898) nil (26015 40420 173784 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -477) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id916 . -1) (undo-tree-id918 . -1) (undo-tree-id920 . -1) (undo-tree-id922 . -1) (undo-tree-id924 . -1) (undo-tree-id926 . -1) (undo-tree-id928 . -1) (undo-tree-id930 . -1) (undo-tree-id932 . -1) (undo-tree-id934 . -1) (undo-tree-id936 . -1) (undo-tree-id938 . -1) (undo-tree-id940 . -1) (undo-tree-id942 . -1) (undo-tree-id944 . -1) (undo-tree-id946 . -1) (undo-tree-id948 . -1) (undo-tree-id950 . -1) (undo-tree-id952 . -1) (undo-tree-id954 . -1) (undo-tree-id956 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -478) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id960 . -1) (undo-tree-id962 . -1) (undo-tree-id964 . -1) (undo-tree-id966 . -1) (undo-tree-id968 . -1) (undo-tree-id970 . -1) (undo-tree-id972 . -1) (undo-tree-id974 . -1) (undo-tree-id976 . -1) (undo-tree-id978 . -1) (undo-tree-id980 . -1) (undo-tree-id982 . -1) (undo-tree-id984 . -1) (undo-tree-id986 . -1) (undo-tree-id988 . -1) (undo-tree-id990 . -1) (undo-tree-id992 . -1) (undo-tree-id994 . -1) (#("i" 0 1 (fontified t)) . -479) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id998 . -1) (undo-tree-id1000 . -1) (undo-tree-id1002 . -1) (undo-tree-id1004 . -1) (undo-tree-id1006 . -1) (undo-tree-id1008 . -1) (undo-tree-id1010 . -1) (undo-tree-id1012 . -1) (undo-tree-id1014 . -1) (undo-tree-id1016 . -1) (undo-tree-id1018 . -1) (undo-tree-id1020 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -480) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1024 . -1) (undo-tree-id1026 . -1) (undo-tree-id1028 . -1) (undo-tree-id1030 . -1) (undo-tree-id1032 . -1) (undo-tree-id1034 . -1) (undo-tree-id1036 . -1) (undo-tree-id1038 . -1) (undo-tree-id1040 . -1) (undo-tree-id1042 . -1) (#("n" 0 1 (fontified t)) . -481) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1046 . -1) (undo-tree-id1048 . -1) (undo-tree-id1050 . -1) (undo-tree-id1052 . -1) (undo-tree-id1054 . -1) (undo-tree-id1056 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -482) (undo-tree-id1058 . -1) (undo-tree-id1060 . -1) (undo-tree-id1062 . -1) 483) ((477 . 483)) (26015 39823 211523 0) 0 nil])
([nil nil ((897 . 902)) nil (26015 40420 173781 0) 0 nil])
([nil nil ((477 . 479)) ((#("{}" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t) 1 2 (face (rainbow-delimiters-depth-5-face) fontified t)) . 477) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1)) (26015 39823 127951 0) 0 nil])
([nil nil ((903 . 915) (#("                " 0 16 (fontified nil)) . 902) (902 . 918) (#("            " 0 12 (fontified nil)) . 902) (undo-tree-id3899 . -12) (901 . 915)) nil (26015 40420 173780 0) 0 nil])
([nil nil ((478 . 480)) ((#("fi" 0 1 (fontified t) 1 2 (fontified t)) . 478) (undo-tree-id1906 . -2) (undo-tree-id1907 . -2)) (26015 39823 44944 0) 0 nil])
([nil nil ((902 . 918)) nil (26015 40420 173777 0) 0 nil])
([nil nil ((#("{" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -477) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id856 . -1) (undo-tree-id858 . -1) (undo-tree-id860 . -1) (undo-tree-id862 . -1) (undo-tree-id864 . -1) (undo-tree-id866 . -1) (undo-tree-id868 . -1) (undo-tree-id870 . -1) (undo-tree-id872 . -1) (undo-tree-id874 . -1) (undo-tree-id876 . -1) (undo-tree-id878 . -1) (undo-tree-id880 . -1) (#("f" 0 1 (fontified t)) . -478) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id885 . -1) (undo-tree-id887 . -1) (undo-tree-id889 . -1) (undo-tree-id891 . -1) (undo-tree-id893 . -1) (undo-tree-id895 . -1) (undo-tree-id897 . -1) (undo-tree-id899 . -1) (#("i" 0 1 (fontified t)) . -479) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id903 . -1) (undo-tree-id905 . -1) (undo-tree-id907 . -1) (undo-tree-id909 . -1) (undo-tree-id911 . -1) 480) ((477 . 480)) (26015 39822 961344 0) 0 nil])
([nil nil ((918 . 920)) nil (26015 40420 173776 0) 0 nil])
([nil nil ((#("}" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -477) (undo-tree-id846 . -1) (undo-tree-id848 . -1) (undo-tree-id850 . -1) (undo-tree-id852 . -1) 478) ((477 . 478)) (26015 39822 878322 0) 0 nil])
([nil nil ((920 . 922)) nil (26015 40420 173775 0) 0 nil])
([nil nil ((477 . 479)) ((#("()" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t) 1 2 (face (rainbow-delimiters-depth-5-face) fontified t)) . 477) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1)) (26015 39822 794662 0) 0 nil])
([nil nil ((102 . 121) (apply yas--snippet-revive 918 925 #s(yas--snippet nil nil #s(yas--exit 924 nil) 17 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 924 nil) 17 nil nil nil nil)) (918 . 925) (#("warn!($0)" 0 9 (fontified nil)) . 918) (918 . 927) (#("warn" 0 4 (fontified nil)) . 918) (918 . 922) (#("warn!(…) (use tracing::warn)" 0 28 (fontified nil)) . -918) (918 . 946) (#("warn" 0 4 (fontified t)) . -918) (undo-tree-id3892 . -4) (undo-tree-id3893 . -3) (undo-tree-id3894 . -3) (undo-tree-id3895 . -4) (undo-tree-id3896 . -4) (undo-tree-id3897 . -4) (undo-tree-id3898 . -4) 922) nil (26015 40420 173773 0) 0 nil])
([nil nil ((478 . 479)) ((#("f" 0 1 (fontified t)) . 478) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1)) (26015 39822 711472 0) 0 nil])
([nil nil ((943 . 945)) nil (26015 40420 173763 0) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -478) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id839 . -1) (undo-tree-id841 . -1) (undo-tree-id843 . -1) (undo-tree-id845 . -1) 479) ((478 . 479)) (26015 39822 627998 0) 0 nil])
([nil nil ((944 . 948)) nil (26015 40420 173762 0) 0 nil])
([nil nil ((478 . 480)) ((#("in" 0 1 (face font-lock-keyword-face fontified t) 1 2 (face font-lock-keyword-face fontified t)) . 478) (undo-tree-id1900 . -2) (undo-tree-id1901 . -2)) (26015 39822 544675 0) 0 nil])
([nil nil ((#("a" 0 1 (face font-lock-string-face fontified t)) . -946) (undo-tree-id3882 . -1) (undo-tree-id3883 . -1) (undo-tree-id3884 . -1) (undo-tree-id3885 . -1) (undo-tree-id3886 . -1) (undo-tree-id3887 . -1) (undo-tree-id3888 . -1) (#("d" 0 1 (face font-lock-string-face fontified t)) . -947) (undo-tree-id3889 . -1) (undo-tree-id3890 . -1) (undo-tree-id3891 . -1) 948) nil (26015 40420 173760 0) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -478) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id818 . -1) (undo-tree-id820 . -1) (undo-tree-id822 . -1) (undo-tree-id824 . -1) (undo-tree-id826 . -1) (undo-tree-id828 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -479) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id832 . -1) (undo-tree-id834 . -1) 480) ((478 . 480)) (26015 39822 461370 0) 0 nil])
([nil nil ((946 . 948)) nil (26015 40420 173749 0) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -477) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id751 . -1) (undo-tree-id753 . -1) (undo-tree-id755 . -1) (undo-tree-id757 . -1) (undo-tree-id759 . -1) (undo-tree-id761 . -1) (undo-tree-id763 . -1) (undo-tree-id765 . -1) (undo-tree-id767 . -1) (undo-tree-id769 . -1) (undo-tree-id771 . -1) (undo-tree-id773 . -1) (undo-tree-id775 . -1) (undo-tree-id777 . -1) (undo-tree-id779 . -1) (undo-tree-id781 . -1) (undo-tree-id783 . -1) (undo-tree-id785 . -1) (undo-tree-id787 . -1) (undo-tree-id789 . -1) (undo-tree-id791 . -1) (undo-tree-id793 . -1) (undo-tree-id795 . -1) (undo-tree-id797 . -1) (undo-tree-id799 . -1) (undo-tree-id801 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -478) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id805 . -1) (undo-tree-id807 . -1) (undo-tree-id809 . 1) (undo-tree-id811 . -1) (undo-tree-id813 . -1) 479) ((477 . 479)) (26015 39822 378246 0) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-string-face fontified t)) . -944) (undo-tree-id3812 . -1) (undo-tree-id3813 . -1) (undo-tree-id3814 . -1) (undo-tree-id3815 . -1) (undo-tree-id3816 . -1) (undo-tree-id3817 . -1) (undo-tree-id3818 . -1) (undo-tree-id3819 . -1) (undo-tree-id3820 . -1) (undo-tree-id3821 . -1) (undo-tree-id3822 . -1) (undo-tree-id3823 . -1) (undo-tree-id3824 . -1) (undo-tree-id3825 . -1) (undo-tree-id3826 . -1) (undo-tree-id3827 . -1) (undo-tree-id3828 . -1) (undo-tree-id3829 . -1) (undo-tree-id3830 . -1) (undo-tree-id3831 . -1) (undo-tree-id3832 . -1) (undo-tree-id3833 . -1) (undo-tree-id3834 . -1) (undo-tree-id3835 . -1) (undo-tree-id3836 . -1) (undo-tree-id3837 . -1) (undo-tree-id3838 . -1) (undo-tree-id3839 . -1) (undo-tree-id3840 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -945) (undo-tree-id3841 . -1) (undo-tree-id3842 . -1) (undo-tree-id3843 . -1) (undo-tree-id3844 . -1) (undo-tree-id3845 . -1) (undo-tree-id3846 . -1) (undo-tree-id3847 . -1) (undo-tree-id3848 . -1) (undo-tree-id3849 . -1) (undo-tree-id3850 . -1) (undo-tree-id3851 . -1) (undo-tree-id3852 . -1) (undo-tree-id3853 . -1) (undo-tree-id3854 . -1) (undo-tree-id3855 . -1) (undo-tree-id3856 . -1) (undo-tree-id3857 . -1) (undo-tree-id3858 . -1) (undo-tree-id3859 . -1) (undo-tree-id3860 . -1) (undo-tree-id3861 . -1) (undo-tree-id3862 . -1) (undo-tree-id3863 . -1) (undo-tree-id3864 . -1) (undo-tree-id3865 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -946) (undo-tree-id3866 . -1) (undo-tree-id3867 . -1) (undo-tree-id3868 . -1) (undo-tree-id3869 . -1) (undo-tree-id3870 . -1) (undo-tree-id3871 . -1) (undo-tree-id3872 . -1) (undo-tree-id3873 . -1) (undo-tree-id3874 . -1) (undo-tree-id3875 . -1) (#("d" 0 1 (face font-lock-string-face fontified t)) . -947) (undo-tree-id3876 . -1) (undo-tree-id3877 . -1) (undo-tree-id3878 . -1) (undo-tree-id3879 . -1) (undo-tree-id3880 . -1) (undo-tree-id3881 . -1) 948) nil (26015 40420 173745 0) 0 nil])
([nil nil ((477 . 480)) ((#(" {}" 0 1 (fontified t) 1 2 (face (rainbow-delimiters-depth-5-face) fontified t) 2 3 (face (rainbow-delimiters-depth-5-face) fontified t)) . 477) (undo-tree-id1897 . -2) (undo-tree-id1898 . -2) (undo-tree-id1899 . -2)) (26015 39822 295047 0) 0 nil])
([nil nil ((944 . 945)) nil (26015 40420 173678 0) 0 nil])
([nil nil ((479 . 481)) ((#("in" 0 2 (face font-lock-keyword-face fontified t)) . 479) (undo-tree-id1894 . -2) (undo-tree-id1895 . -2) (undo-tree-id1896 . -2)) (26015 39822 211128 0) 0 nil])
([nil nil ((#("R" 0 1 (face font-lock-string-face fontified t)) . -944) (undo-tree-id3806 . -1) (undo-tree-id3807 . -1) (undo-tree-id3808 . -1) (undo-tree-id3809 . -1) (undo-tree-id3810 . -1) (undo-tree-id3811 . -1) 945) nil (26015 40420 173676 0) 0 nil])
([nil nil ((481 . 487)) ((#("ner: f" 0 3 (face font-lock-variable-name-face fontified t) 3 5 (fontified t) 5 6 (fontified t)) . 481) (undo-tree-id1891 . -6) (undo-tree-id1892 . -6) (undo-tree-id1893 . -5)) (26015 39822 129069 0) 0 nil])
([nil nil ((944 . 951)) nil (26015 40420 173669 0) 0 nil])
([nil nil ((apply yas--snippet-revive 486 493 #s(yas--snippet nil nil #s(yas--exit #<marker at 652 in texture.rs> nil) 11 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 652 in texture.rs> nil) 11 nil nil nil nil)) (486 . 493) (#("file!($0)" 0 9 (fontified nil)) . 486) (486 . 495) (#("f" 0 1 (fontified nil)) . 486) (486 . 487) (#("file!(…)" 0 8 (fontified nil)) . -486) (486 . 494) (#("f" 0 1 (fontified t)) . -486) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id741 . -1) (undo-tree-id743 . -1) (undo-tree-id745 . -1) (undo-tree-id747 . -1) 487) ((486 . 487) (#("file!(…)" 0 8 (fontified nil)) . 486) (486 . 494) (#("f" 0 1 (fontified nil)) . 486) (486 . 487) (#("file!($0)" 0 9 (fontified nil)) . 486) (486 . 495) (#("file!()" 0 1 (face font-lock-preprocessor-face fontified t) 1 2 (face font-lock-preprocessor-face fontified t) 2 3 (face font-lock-preprocessor-face fontified t) 3 4 (face font-lock-preprocessor-face fontified t) 4 5 (face font-lock-preprocessor-face fontified t) 5 6 (face (rainbow-delimiters-depth-6-face) fontified t) 6 7 (face (rainbow-delimiters-depth-6-face) fontified t)) . 486) (undo-tree-id1888 . -6) (undo-tree-id1889 . -6) (undo-tree-id1890 . -6)) (26015 39822 45346 0) 0 nil])
([nil nil ((951 . 952)) nil (26015 40420 173668 0) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -488) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id673 . -1) (undo-tree-id675 . -1) (undo-tree-id677 . -1) (undo-tree-id679 . -1) (undo-tree-id681 . -1) (undo-tree-id683 . -1) (undo-tree-id685 . -1) (undo-tree-id687 . -1) (undo-tree-id689 . -1) (#("e" 0 1 (fontified t)) . -489) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id693 . -1) (undo-tree-id695 . -1) (undo-tree-id697 . -1) (undo-tree-id699 . -1) (undo-tree-id701 . -1) (undo-tree-id703 . -1) (undo-tree-id705 . -1) (undo-tree-id707 . -1) (#("!" 0 1 (fontified t)) . -490) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id711 . -1) (undo-tree-id713 . -1) (undo-tree-id715 . -1) (undo-tree-id717 . -1) (undo-tree-id719 . -1) (undo-tree-id721 . -1) (undo-tree-id723 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-6-face) fontified t)) . -491) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id727 . -1) (undo-tree-id729 . -1) (undo-tree-id731 . -1) (undo-tree-id733 . -1) (undo-tree-id735 . -1) (undo-tree-id737 . -1) 492) ((488 . 492)) (26015 39821 961803 0) 0 nil])
([nil nil ((#("W" 0 1 (face font-lock-string-face fontified t)) . -950) (undo-tree-id3793 . -1) (undo-tree-id3794 . -1) (undo-tree-id3795 . -1) (undo-tree-id3796 . -1) (undo-tree-id3797 . -1) (undo-tree-id3798 . -1) (undo-tree-id3799 . -1) (undo-tree-id3800 . -1) (undo-tree-id3801 . -1) (undo-tree-id3802 . -1) (#("h" 0 1 (face font-lock-string-face fontified t)) . -951) (undo-tree-id3803 . -1) (undo-tree-id3804 . -1) (undo-tree-id3805 . -1) 952) nil (26015 40420 173667 0) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -487) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id641 . -1) (undo-tree-id643 . -1) (undo-tree-id645 . -1) (undo-tree-id647 . -1) (undo-tree-id649 . -1) (undo-tree-id651 . -1) (undo-tree-id653 . -1) (undo-tree-id655 . -1) (undo-tree-id657 . -1) (undo-tree-id659 . -1) (undo-tree-id661 . -1) (undo-tree-id663 . -1) (#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -488) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id668 . -1) 489) ((487 . 489)) (26015 39821 878237 0) 0 nil])
([nil nil ((950 . 971)) nil (26015 40420 173653 0) 0 nil])
([nil nil ((#("f}" 0 1 (fontified t) 1 2 (face (rainbow-delimiters-depth-5-face) fontified t)) . -486) (undo-tree-id1370 . -2) (undo-tree-id1371 . -2) (undo-tree-id1373 . -1) (undo-tree-id1375 . -1) (undo-tree-id1377 . -1) (undo-tree-id1379 . -1) (undo-tree-id1381 . -1) (undo-tree-id1383 . -1) (undo-tree-id1385 . -1) (undo-tree-id1387 . -1) (undo-tree-id1389 . -1) (undo-tree-id1391 . -1) (undo-tree-id1393 . -1) (undo-tree-id1395 . -1) (undo-tree-id1397 . -1) (undo-tree-id1399 . -1) (undo-tree-id1401 . -1) (undo-tree-id1403 . -1) (undo-tree-id1405 . -1) (undo-tree-id1407 . -1) (undo-tree-id1409 . -1) (undo-tree-id1411 . -2) (undo-tree-id1413 . -2) (undo-tree-id1415 . -2) (undo-tree-id1417 . -2) 488 (t 26015 39651 666090 976000)) ((486 . 488)) (26015 39821 794856 0) 0 nil])
([nil nil ((971 . 979)) nil (26015 40420 173652 0) 0 nil])
([nil nil ((#("inner: " 0 5 (face font-lock-variable-name-face fontified t) 5 7 (fontified t)) . -479) (undo-tree-id1312 . -7) (undo-tree-id1313 . -7) (undo-tree-id1315 . -7) (undo-tree-id1317 . -7) (undo-tree-id1319 . -7) (undo-tree-id1321 . -7) (undo-tree-id1323 . -7) (undo-tree-id1325 . -7) (undo-tree-id1327 . -7) (undo-tree-id1329 . -7) (undo-tree-id1331 . -7) (undo-tree-id1333 . -7) (undo-tree-id1335 . -7) (undo-tree-id1337 . -7) (undo-tree-id1339 . -7) (undo-tree-id1341 . -7) (undo-tree-id1343 . -7) (undo-tree-id1345 . -7) (undo-tree-id1347 . -7) (undo-tree-id1349 . -7) (undo-tree-id1351 . -7) (undo-tree-id1353 . -7) (undo-tree-id1355 . -7) (undo-tree-id1357 . -7) (undo-tree-id1359 . -7) (undo-tree-id1361 . -7) (undo-tree-id1363 . -7) (undo-tree-id1365 . -7) (undo-tree-id1367 . -7) (undo-tree-id1369 . -7) 486) ((479 . 486)) (26015 39821 711712 0) 0 nil])
([nil nil ((#("f" 0 1 (face font-lock-string-face fontified t)) . -978) (undo-tree-id3790 . -1) (undo-tree-id3791 . -1) (undo-tree-id3792 . -1) 979) nil (26015 40420 173651 0) 0 nil])
([nil nil ((#("File {" 0 4 (face font-lock-type-face fontified t) 4 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-5-face) fontified t)) . -473) (undo-tree-id1126 . -6) (undo-tree-id1127 . -6) (undo-tree-id1129 . -4) (undo-tree-id1131 . -4) (undo-tree-id1133 . -4) (undo-tree-id1135 . -4) (undo-tree-id1137 . -4) (undo-tree-id1139 . -4) (undo-tree-id1141 . -4) (undo-tree-id1143 . -4) (undo-tree-id1145 . -4) (undo-tree-id1147 . -4) (undo-tree-id1149 . -4) (undo-tree-id1151 . -4) (undo-tree-id1153 . -4) (undo-tree-id1155 . -4) (undo-tree-id1157 . -4) (undo-tree-id1159 . -4) (undo-tree-id1161 . -4) (undo-tree-id1163 . -4) (undo-tree-id1165 . -4) (undo-tree-id1167 . -4) (undo-tree-id1169 . -4) (undo-tree-id1171 . -4) (undo-tree-id1173 . -4) (undo-tree-id1175 . -4) (undo-tree-id1177 . -4) (undo-tree-id1179 . -4) (undo-tree-id1181 . -4) (undo-tree-id1183 . -4) (undo-tree-id1185 . -4) (undo-tree-id1187 . -4) (undo-tree-id1189 . -4) (undo-tree-id1191 . -4) (undo-tree-id1193 . -4) (undo-tree-id1195 . -4) (undo-tree-id1197 . -4) (undo-tree-id1199 . -4) (undo-tree-id1201 . -4) (undo-tree-id1203 . -4) (undo-tree-id1205 . -4) (undo-tree-id1207 . -4) (undo-tree-id1209 . -4) (undo-tree-id1211 . -4) (undo-tree-id1213 . -4) (undo-tree-id1215 . -4) (undo-tree-id1217 . -4) (undo-tree-id1219 . -4) (undo-tree-id1221 . -4) (undo-tree-id1223 . -4) (undo-tree-id1225 . -4) (undo-tree-id1227 . -4) (undo-tree-id1229 . -4) (undo-tree-id1231 . -4) (undo-tree-id1233 . -4) (undo-tree-id1235 . -4) (undo-tree-id1237 . -4) (undo-tree-id1239 . -4) (undo-tree-id1241 . -4) (undo-tree-id1243 . -4) (undo-tree-id1245 . -4) (undo-tree-id1247 . -4) (undo-tree-id1249 . -4) (undo-tree-id1251 . -4) (undo-tree-id1253 . -4) (undo-tree-id1255 . -6) (undo-tree-id1257 . -6) (undo-tree-id1259 . -6) (undo-tree-id1261 . -6) (undo-tree-id1263 . -6) (undo-tree-id1265 . -6) (undo-tree-id1267 . -6) (undo-tree-id1269 . -6) (undo-tree-id1271 . -6) (undo-tree-id1273 . -6) (undo-tree-id1275 . -6) (undo-tree-id1277 . -6) (undo-tree-id1279 . -6) (undo-tree-id1281 . -6) (undo-tree-id1283 . -6) (undo-tree-id1285 . -6) (undo-tree-id1287 . -6) (undo-tree-id1289 . -6) (undo-tree-id1291 . -6) (undo-tree-id1293 . -6) (undo-tree-id1295 . -6) (undo-tree-id1297 . -6) (undo-tree-id1299 . -6) (undo-tree-id1301 . -6) (undo-tree-id1303 . -6) (undo-tree-id1305 . -6) (undo-tree-id1307 . -6) (undo-tree-id1309 . -6) (undo-tree-id1311 . -6) 479) ((473 . 479)) (26015 39821 628340 0) 0 nil])
([nil nil ((978 . 987)) nil (26015 40420 173647 0) 0 nil])
([nil nil ((473 . 480)) ((#("f: File" 0 1 (face font-lock-variable-name-face fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 7 (face font-lock-type-face fontified t)) . 473) (undo-tree-id1886 . -7) (undo-tree-id1887 . -7)) (26015 39821 544608 0) 0 nil])
([nil nil ((987 . 989)) nil (26015 40420 173646 0) 0 nil])
([nil nil ((#("File" 0 4 (face font-lock-type-face fontified t)) . -476) (undo-tree-id1482 . -4) (undo-tree-id1483 . -4) (undo-tree-id1485 . -4) (undo-tree-id1487 . -4) (undo-tree-id1489 . -4) (undo-tree-id1491 . -4) (undo-tree-id1493 . -4) (undo-tree-id1495 . -4) (undo-tree-id1497 . -4) (undo-tree-id1499 . -4) (undo-tree-id1501 . -4) (undo-tree-id1503 . -4) (undo-tree-id1505 . -4) (undo-tree-id1507 . -4) (undo-tree-id1509 . -4) 480 (t 26015 39663 499716 66000)) ((476 . 480)) (26015 39821 461502 0) 0 nil])
([nil nil ((991 . 992)) nil (26015 40420 173645 0) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -474) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1421 . -1) (undo-tree-id1423 . -1) (undo-tree-id1425 . -1) (undo-tree-id1427 . -1) (undo-tree-id1429 . -1) (undo-tree-id1431 . -1) (undo-tree-id1433 . -1) (undo-tree-id1435 . -1) (undo-tree-id1437 . -1) (undo-tree-id1439 . -1) (undo-tree-id1441 . -1) (undo-tree-id1443 . -1) (undo-tree-id1445 . -1) (undo-tree-id1447 . -1) (undo-tree-id1449 . -1) (#(" " 0 1 (fontified t)) . -475) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1454 . -1) (undo-tree-id1456 . -1) (undo-tree-id1458 . -1) (undo-tree-id1460 . -1) (undo-tree-id1462 . -1) (undo-tree-id1464 . -1) (undo-tree-id1466 . -1) (undo-tree-id1468 . -1) (undo-tree-id1470 . -1) (undo-tree-id1472 . -1) (undo-tree-id1474 . -1) (undo-tree-id1476 . -1) (undo-tree-id1478 . -1) (undo-tree-id1480 . -1) 476) ((474 . 476)) (26015 39821 378603 0) 0 nil])
([nil nil ((989 . 997)) nil (26015 40420 173644 0) 0 nil])
([nil nil ((#("f)" 0 1 (fontified t) 1 2 (face (rainbow-delimiters-depth-4-face) fontified t)) . -473) (undo-tree-id1585 . -1) (undo-tree-id1586 . -2) (undo-tree-id1588 . -1) (undo-tree-id1590 . -1) (undo-tree-id1592 . -1) (undo-tree-id1594 . -1) (undo-tree-id1596 . -1) (undo-tree-id1598 . -1) (undo-tree-id1600 . -1) (undo-tree-id1602 . -1) (undo-tree-id1604 . -1) (undo-tree-id1606 . -1) (undo-tree-id1608 . -1) (undo-tree-id1610 . -1) (undo-tree-id1612 . -1) (undo-tree-id1614 . -1) (undo-tree-id1616 . -1) (undo-tree-id1618 . -1) (undo-tree-id1620 . -1) (undo-tree-id1622 . -1) (undo-tree-id1624 . -1) (undo-tree-id1626 . -1) (undo-tree-id1628 . -1) (undo-tree-id1630 . -1) (undo-tree-id1632 . -1) (undo-tree-id1634 . -1) (undo-tree-id1636 . -1) (undo-tree-id1638 . -1) (undo-tree-id1640 . -1) (undo-tree-id1642 . -1) 475 (t 26015 39668 405300 4000)) ((473 . 475)) (26015 39821 294958 0) 0 nil])
([nil nil ((1000 . 1017)) nil (26015 40420 173643 0) 0 nil])
([nil nil ((#("Ok(" 0 2 (face font-lock-type-face fontified t) 2 3 (face (rainbow-delimiters-depth-4-face) fontified t)) . -470) (undo-tree-id1521 . -3) (undo-tree-id1522 . -3) (undo-tree-id1523 . -3) (undo-tree-id1525 . -3) (undo-tree-id1527 . -3) (undo-tree-id1529 . -3) (undo-tree-id1531 . -3) (undo-tree-id1533 . -3) (undo-tree-id1535 . -3) (undo-tree-id1537 . -3) (undo-tree-id1539 . -3) (undo-tree-id1541 . -3) (undo-tree-id1543 . -3) (undo-tree-id1545 . -3) (undo-tree-id1547 . -3) (undo-tree-id1549 . -3) (undo-tree-id1551 . -3) (undo-tree-id1553 . -3) (undo-tree-id1555 . -3) (undo-tree-id1557 . -3) (undo-tree-id1559 . -3) (undo-tree-id1561 . -3) (undo-tree-id1563 . -3) (undo-tree-id1565 . -3) (undo-tree-id1567 . -3) (undo-tree-id1569 . -3) (undo-tree-id1571 . -3) (undo-tree-id1573 . -3) (undo-tree-id1575 . -3) (undo-tree-id1577 . -3) (undo-tree-id1579 . -3) (undo-tree-id1581 . -3) (undo-tree-id1583 . -3) 473) ((470 . 473)) (26015 39821 211710 0) 0 nil])
([nil nil ((1017 . 1027)) nil (26015 40420 173642 0) 0 nil])
([nil nil ((470 . 472)) ((#("Ok" 0 2 (face font-lock-type-face fontified t)) . 470) (undo-tree-id1884 . -2) (undo-tree-id1885 . -2)) (26015 39821 128256 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1025) (undo-tree-id3779 . -1) (undo-tree-id3780 . -1) (undo-tree-id3781 . -1) (undo-tree-id3782 . -1) (undo-tree-id3783 . -1) (undo-tree-id3784 . -1) (undo-tree-id3785 . -1) (undo-tree-id3786 . -1) (#("=" 0 1 (fontified t)) . -1026) (undo-tree-id3787 . -1) (undo-tree-id3788 . -1) (undo-tree-id3789 . -1) 1027) nil (26015 40420 173640 0) 0 nil])
([nil nil ((470 . 472) (#("Ok" 0 2 (fontified nil)) . 470) (470 . 472) (#("Ok" 0 2 (face font-lock-type-face fontified t)) . -470) (undo-tree-id1511 . -2) (undo-tree-id1513 . -1) (undo-tree-id1515 . -2) (undo-tree-id1517 . -2) (undo-tree-id1519 . -2) 472) ((470 . 472) (#("Ok" 0 2 (fontified nil)) . 470) (470 . 472) (#("Ok" 0 2 (face font-lock-type-face fontified t)) . 470) (undo-tree-id1881 . -2) (undo-tree-id1882 . -2) (undo-tree-id1883 . -2)) (26015 39821 45157 0) 0 nil])
([nil nil ((1025 . 1028)) nil (26015 40420 173629 0) 0 nil])
([nil nil ((472 . 474)) ((#("()" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t) 1 2 (face (rainbow-delimiters-depth-4-face) fontified t)) . 472) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1)) (26015 39820 961799 0) 0 nil])
([nil nil ((#("I" 0 1 (face font-lock-type-face fontified t)) . -1027) (undo-tree-id3776 . -1) (undo-tree-id3777 . -1) (undo-tree-id3778 . -1) 1028) nil (26015 40420 173627 0) 0 nil])
([nil nil ((473 . 474)) ((#("f" 0 1 (fontified t)) . 473)) (26015 39820 878521 0) 0 nil])
([nil nil ((1027 . 1030)) nil (26015 40420 173623 0) 0 nil])
([nil nil ((57 . 58) (t 26015 39692 41354 865000)) ((#("
" 0 1 (fontified t)) . 57) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1)) (26015 39820 794445 0) 0 nil])
([nil nil ((1027 . 1032) (#("ima" 0 3 (fontified nil)) . 1027) (1027 . 1030) (#("image" 0 5 (fontified nil)) . -1027) (1027 . 1032) (#("ima" 0 3 (fontified t)) . -1027) (undo-tree-id3768 . -3) (undo-tree-id3769 . -1) (undo-tree-id3770 . -2) (undo-tree-id3771 . -2) (undo-tree-id3772 . -3) (undo-tree-id3773 . -3) (undo-tree-id3774 . -3) (undo-tree-id3775 . -3) 1030) nil (26015 40420 173622 0) 0 nil])
([nil nil ((58 . 62)) ((#("use " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . 58) (undo-tree-id1827 . -4) (undo-tree-id1828 . -4)) (26015 39820 711494 0) 0 nil])
([nil nil ((1032 . 1035)) nil (26015 40420 173611 0) 0 nil])
([nil nil ((62 . 69)) ((#("std::Re" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t) 5 7 (face font-lock-type-face fontified t)) . 62) (undo-tree-id1825 . -7) (undo-tree-id1826 . -7)) (26015 39820 628847 0) 0 nil])
([nil nil ((#("N" 0 1 (face font-lock-type-face fontified t)) . -1034) (undo-tree-id3762 . -1) (undo-tree-id3763 . -1) (undo-tree-id3764 . -1) (undo-tree-id3765 . -1) (undo-tree-id3766 . -1) (undo-tree-id3767 . -1) 1035) nil (26015 40420 173610 0) 0 nil])
([nil nil ((67 . 73) (#("Re" 0 2 (fontified nil)) . 67) (67 . 69) (#("result" 0 6 (fontified nil)) . -67) (67 . 73) (#("Re" 0 2 (face font-lock-type-face fontified t)) . -67) (undo-tree-id1757 . -2) (undo-tree-id1759 . -1) (undo-tree-id1761 . -1) (undo-tree-id1763 . -2) (undo-tree-id1765 . -2) (undo-tree-id1767 . -2) (undo-tree-id1769 . -2) 69) ((67 . 69) (#("result" 0 6 (fontified nil)) . 67) (67 . 73) (#("Re" 0 2 (fontified nil)) . 67) (67 . 69) (#("result" 0 6 (fontified t)) . 67) (undo-tree-id1823 . -6) (undo-tree-id1824 . -6)) (26015 39820 544696 0) 0 nil])
([nil nil ((1034 . 1037)) nil (26015 40420 173603 0) 0 nil])
([nil nil ((73 . 76)) ((#("::r" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 73) (undo-tree-id1821 . -3) (undo-tree-id1822 . -3)) (26015 39820 461040 0) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -1034) (undo-tree-id3732 . -1) (undo-tree-id3733 . -1) (undo-tree-id3734 . -1) (undo-tree-id3735 . -1) (undo-tree-id3736 . -1) (undo-tree-id3737 . -1) (undo-tree-id3738 . -1) (undo-tree-id3739 . -1) (undo-tree-id3740 . -1) (undo-tree-id3741 . -1) (undo-tree-id3742 . -1) (undo-tree-id3743 . -1) (undo-tree-id3744 . -1) (undo-tree-id3745 . -1) (undo-tree-id3746 . -1) (#("e" 0 1 (fontified t)) . -1035) (undo-tree-id3747 . -1) (undo-tree-id3748 . -1) (undo-tree-id3749 . -1) (undo-tree-id3750 . -1) (undo-tree-id3751 . -1) (undo-tree-id3752 . -1) (undo-tree-id3753 . -1) (undo-tree-id3754 . -1) (undo-tree-id3755 . -1) (undo-tree-id3756 . -1) (#("w" 0 1 (fontified t)) . -1036) (undo-tree-id3757 . -1) (undo-tree-id3758 . -1) (undo-tree-id3759 . -1) (undo-tree-id3760 . -1) (undo-tree-id3761 . -1) 1037) nil (26015 40420 173600 0) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -74) (undo-tree-id1743 . -1) (undo-tree-id1745 . -1) (undo-tree-id1747 . -1) (undo-tree-id1749 . -1) (undo-tree-id1751 . -1) (#("r" 0 1 (fontified t)) . -75) (undo-tree-id1752 . -1) (undo-tree-id1754 . -1) (undo-tree-id1756 . -1) 76) ((74 . 76)) (26015 39820 377508 0) 0 nil])
([nil nil ((1034 . 1036)) nil (26015 40420 173570 0) 0 nil])
([nil nil ((74 . 78)) ((#("Resu" 0 1 (face font-lock-type-face fontified t) 1 4 (face font-lock-type-face fontified t)) . 74) (undo-tree-id1819 . -4) (undo-tree-id1820 . -4)) (26015 39820 293447 0) 0 nil])
([nil nil ((1034 . 1046) (#("Dg" 0 2 (fontified nil)) . 1034) (1034 . 1036) (#("DynamicImage" 0 12 (fontified nil)) . -1034) (1034 . 1046) (#("Dg" 0 2 (face font-lock-type-face fontified t)) . -1034) (undo-tree-id3724 . -2) (undo-tree-id3725 . -1) (undo-tree-id3726 . -1) (undo-tree-id3727 . -2) (undo-tree-id3728 . -2) (undo-tree-id3729 . -2) (undo-tree-id3730 . -2) (undo-tree-id3731 . -2) 1036) nil (26015 40420 173569 0) 0 nil])
([nil nil ((78 . 84)) ((#("lt::Ol" 0 2 (face font-lock-type-face fontified t) 2 4 (fontified t) 4 5 (face font-lock-type-face fontified t) 5 6 (face font-lock-type-face fontified t)) . 78) (undo-tree-id1817 . -6) (undo-tree-id1818 . -6)) (26015 39820 209448 0) 0 nil])
([nil nil ((1046 . 1051)) nil (26015 40420 173559 0) 0 nil])
([nil nil ((#("l" 0 1 (face font-lock-type-face fontified t)) . -83) (undo-tree-id1737 . -1) (undo-tree-id1739 . -1) (undo-tree-id1741 . -1) 84) ((83 . 84)) (26015 39820 126251 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1058 1059 nil nil nil t #s(yas--field 2 1061 1062 nil nil nil nil #s(yas--exit 1063 nil))) #s(yas--field 2 1061 1062 nil nil nil nil #s(yas--exit 1063 nil))) #s(yas--exit 1063 nil) 18 nil #s(yas--field 1 1058 1059 nil nil nil t #s(yas--field 2 1061 1062 nil nil nil nil #s(yas--exit 1063 nil))) nil nil)) (1048 . 1063) (#("new_rgba8(${1:w}, ${2:h})$0" 0 27 (fontified nil)) . 1048) (1048 . 1075) (#("new" 0 3 (fontified nil)) . 1048) (1048 . 1051) (#("new_rgba8(…)" 0 12 (fontified nil)) . -1048) (1048 . 1060) (#("new" 0 3 (fontified t)) . -1048) (undo-tree-id3713 . -3) (undo-tree-id3714 . -1) (undo-tree-id3715 . -1) (undo-tree-id3716 . -1) (undo-tree-id3717 . -2) (undo-tree-id3718 . -2) (undo-tree-id3719 . -3) (undo-tree-id3720 . -3) (undo-tree-id3721 . -3) (undo-tree-id3722 . -3) (undo-tree-id3723 . -3) 1051) nil (26015 40420 173557 0) 0 nil])
([nil nil ((#("use std::result:Result::O" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 7 (face font-lock-constant-face fontified t) 7 9 (fontified t) 9 15 (face font-lock-variable-name-face fontified t) 15 16 (fontified t) 16 17 (face font-lock-type-face fontified t) 17 22 (face font-lock-type-face fontified t) 22 24 (fontified t) 24 25 (face font-lock-type-face fontified t)) . 58) (undo-tree-id1647 . -1) (undo-tree-id1649 . -2) (undo-tree-id1651 . -3) (undo-tree-id1653 . -3) (undo-tree-id1655 . -4) (undo-tree-id1657 . -4) (undo-tree-id1659 . -4) (undo-tree-id1661 . -4) (undo-tree-id1663 . -5) (undo-tree-id1665 . -6) (undo-tree-id1667 . -7) (undo-tree-id1669 . -7) (undo-tree-id1671 . -8) (undo-tree-id1673 . -9) (undo-tree-id1675 . -9) (undo-tree-id1677 . -9) (undo-tree-id1679 . -9) (undo-tree-id1681 . -9) (undo-tree-id1683 . -9) (undo-tree-id1685 . -9) (undo-tree-id1687 . -15) (undo-tree-id1689 . -15) (undo-tree-id1691 . -16) (undo-tree-id1693 . -16) (undo-tree-id1695 . -16) (undo-tree-id1697 . -16) (undo-tree-id1699 . -16) (undo-tree-id1701 . -16) (undo-tree-id1703 . -17) (undo-tree-id1705 . -18) (undo-tree-id1707 . -18) (undo-tree-id1709 . -18) (undo-tree-id1711 . -19) (undo-tree-id1713 . -20) (undo-tree-id1715 . -21) (undo-tree-id1717 . -22) (undo-tree-id1719 . -23) (undo-tree-id1721 . -24) (undo-tree-id1723 . -25) (undo-tree-id1725 . -25) (undo-tree-id1727 . -25) (undo-tree-id1729 . -25) (undo-tree-id1731 . -25) (undo-tree-id1733 . -25) (undo-tree-id1735 . -25)) ((58 . 83)) (26015 39820 47736 0) 0 nil])
([nil nil ((#("w" 0 1 (fontified nil)) . 1059) (undo-tree-id3712 . -1) (1058 . 1059)) nil (26015 40420 173542 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 58) (undo-tree-id1644 . 1)) ((58 . 59)) (26015 39819 545674 0) 0 nil])
([nil nil ((apply yas--snippet-revive 1048 1063 #s(yas--snippet nil (#s(yas--field 1 1058 1059 nil nil nil t #s(yas--field 2 1061 1062 nil nil nil nil #s(yas--exit 1063 nil))) #s(yas--field 2 1061 1062 nil nil nil nil #s(yas--exit 1063 nil))) #s(yas--exit 1063 nil) 18 nil #s(yas--field 1 1058 1059 nil nil nil t #s(yas--field 2 1061 1062 nil nil nil nil #s(yas--exit 1063 nil))) nil nil))) nil (26015 40420 173540 0) 0 nil])
([nil nil ((58 . 59) (t 26015 39725 429811 639000)) ((#("
" 0 1 (fontified t)) . 58)) (26015 39819 371077 0) 0 nil])
([nil nil ((#("h" 0 1 (fontified t)) . -1061) (undo-tree-id3709 . -1) (undo-tree-id3710 . -1) (undo-tree-id3711 . -1) 1062) nil (26015 40420 173539 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 86 . 87) (nil fontified nil 58 . 87) (58 . 87)) ((#(" use std::result::Result::Ok;" 0 1 (fontified nil) 1 4 (face font-lock-keyword-face fontified nil) 4 5 (fontified nil) 5 8 (face font-lock-constant-face fontified nil) 8 10 (fontified nil) 10 16 (face font-lock-constant-face fontified nil) 16 18 (fontified nil) 18 24 (face font-lock-type-face fontified nil) 24 26 (fontified nil) 26 28 (face font-lock-type-face fontified nil) 28 29 (rear-nonsticky nil fontified nil)) . 58) (undo-tree-id1770 . -29) (undo-tree-id1771 . -29) (undo-tree-id1772 . -29) (undo-tree-id1773 . -29) (undo-tree-id1774 . -29) (undo-tree-id1775 . -29) (undo-tree-id1776 . -29) (undo-tree-id1777 . -29) (undo-tree-id1778 . -29) (undo-tree-id1779 . -29) (undo-tree-id1780 . -29) (undo-tree-id1781 . -29) (undo-tree-id1782 . -29) (undo-tree-id1783 . -29) (undo-tree-id1784 . -29) (undo-tree-id1785 . -29) (undo-tree-id1786 . -29) (undo-tree-id1787 . -29) (undo-tree-id1788 . -29) (undo-tree-id1789 . -29) (undo-tree-id1790 . -29) (undo-tree-id1791 . -29) (undo-tree-id1792 . -29) (undo-tree-id1793 . -29) (undo-tree-id1794 . -29) (undo-tree-id1795 . -29) (undo-tree-id1796 . -29) (undo-tree-id1797 . -29) (undo-tree-id1798 . -29) (undo-tree-id1799 . -29) (undo-tree-id1800 . -29) (undo-tree-id1801 . -29) (undo-tree-id1802 . -29) (undo-tree-id1803 . -29) (undo-tree-id1804 . -29) (undo-tree-id1805 . -29) (undo-tree-id1806 . -29) (undo-tree-id1807 . -29) (undo-tree-id1808 . -29) (undo-tree-id1809 . -29) (undo-tree-id1810 . -29) (undo-tree-id1811 . -29) (undo-tree-id1812 . -29) (undo-tree-id1813 . -29) (undo-tree-id1814 . -29) (undo-tree-id1815 . -29) (undo-tree-id1816 . -29) (nil rear-nonsticky t 86 . 87)) (26015 39819 196463 0) 0 nil])
([nil nil ((1061 . 1062)) nil (26015 40420 173534 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -58) 87) ((58 . 59) (t 26015 39743 780811 537000)) (26015 39743 767295 0) 0 nil])
([nil nil ((1063 . 1064)) nil (26015 40420 173533 0) 0 nil])
nil
([nil nil ((1064 . 1081)) nil (26015 40420 173532 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1137 . 1138) (nil fontified nil 1137 . 1138) (nil fontified nil 1136 . 1137) (nil fontified nil 1126 . 1136) (nil fontified nil 1125 . 1126) (nil fontified nil 1110 . 1125) (nil fontified nil 1109 . 1110) (nil fontified nil 1097 . 1109) (nil fontified nil 1093 . 1097) (nil fontified nil 1081 . 1093) (1081 . 1138)) nil (26015 40420 173531 0) 0 nil])
([nil nil ((#("            " 0 12 (fontified t)) . -1081) 1095) nil (26015 40420 173527 0) 0 nil])
([nil nil ((#("            let img = image::load_from_memory(&buffer)?;
            Self::from_image(device, queue, &img, label)" 0 12 (fontified t) 12 15 (face font-lock-keyword-face fontified t) 15 16 (fontified t) 16 19 (face font-lock-variable-name-face fontified t) 19 22 (fontified t) 22 27 (face font-lock-constant-face fontified t) 27 45 (fontified t) 45 46 (face (rainbow-delimiters-depth-4-face) fontified t) 46 47 (face rust-ampersand-face fontified t) 47 53 (fontified t) 53 54 (face (rainbow-delimiters-depth-4-face) fontified t) 54 55 (face rust-question-mark fontified t) 55 57 (fontified t) 57 69 (fontified t) 69 73 (face font-lock-type-face fontified t) 73 85 (fontified t) 85 86 (face (rainbow-delimiters-depth-4-face) fontified t) 86 101 (fontified t) 101 102 (face rust-ampersand-face fontified t) 102 112 (fontified t) 112 113 (face (rainbow-delimiters-depth-4-face) fontified t rear-nonsticky t)) . 688) (undo-tree-id3673 . -113) (undo-tree-id3674 . -69) (undo-tree-id3675 . -69) (undo-tree-id3676 . -69) (undo-tree-id3677 . -69) (undo-tree-id3678 . -69) (undo-tree-id3679 . -69) (undo-tree-id3680 . -73) (undo-tree-id3681 . -73) (undo-tree-id3682 . -69) (undo-tree-id3683 . -73) (undo-tree-id3684 . -73) (undo-tree-id3685 . -57) (undo-tree-id3686 . -69) (undo-tree-id3687 . -57) (undo-tree-id3688 . -57) (undo-tree-id3689 . -113) (undo-tree-id3690 . -113) (undo-tree-id3691 . -113) (undo-tree-id3692 . -113) (undo-tree-id3693 . -113) (undo-tree-id3694 . -113) (undo-tree-id3695 . -113) (undo-tree-id3696 . -51) (undo-tree-id3697 . -41) (undo-tree-id3698 . -12) (undo-tree-id3699 . -10) (undo-tree-id3700 . -9) (undo-tree-id3701 . -8) (undo-tree-id3702 . -7) (undo-tree-id3703 . -6) (undo-tree-id3704 . -5) (undo-tree-id3705 . -4) (undo-tree-id3706 . -3) (undo-tree-id3707 . -1) (undo-tree-id3708 . -113)) nil (26015 40420 173525 0) 0 nil])
([nil nil ((750 . 767)) nil (26015 40420 173489 0) 0 nil])
([nil nil ((nil fontified nil 879 . 880) (nil fontified nil 869 . 879) (nil fontified nil 868 . 869) (nil fontified nil 853 . 868) (nil fontified nil 852 . 853) (nil fontified nil 840 . 852) (nil fontified nil 836 . 840) (nil fontified nil 824 . 836) (nil fontified nil 822 . 824) (nil fontified nil 821 . 822) (nil fontified nil 820 . 821) (nil fontified nil 814 . 820) (nil fontified nil 813 . 814) (nil fontified nil 812 . 813) (nil fontified nil 794 . 812) (nil fontified nil 789 . 794) (nil fontified nil 786 . 789) (nil fontified nil 783 . 786) (nil fontified nil 782 . 783) (nil fontified nil 779 . 782) (nil fontified nil 767 . 779) (767 . 880)) nil (26015 40420 173487 0) 0 nil])
([nil nil ((#("            " 0 12 (fontified t)) . -767) 782) nil (26015 40420 173481 0) 0 nil])
([nil nil ((688 . 700)) nil (26015 40420 173479 0) 0 nil])
([nil nil ((700 . 702)) nil (26015 40420 173478 0) 0 nil])
([nil nil ((700 . 706) (#("bu" 0 2 (fontified nil)) . 700) (700 . 702) (#("buffer" 0 6 (fontified nil)) . -700) (700 . 706) (#("bu" 0 2 (fontified t)) . -700) (undo-tree-id3666 . -2) (undo-tree-id3667 . -1) (undo-tree-id3668 . -1) (undo-tree-id3669 . -2) (undo-tree-id3670 . -2) (undo-tree-id3671 . -2) (undo-tree-id3672 . -2) 702) nil (26015 40420 173477 0) 0 nil])
([nil nil ((830 . 846) (#("            " 0 12 (fontified t)) . 830) 857) nil (26015 40420 173467 0) 0 nil])
([nil nil ((#("buffer" 0 6 (fontified t)) . -820) (undo-tree-id3657 . -6) (undo-tree-id3658 . -6) (undo-tree-id3659 . -6) (undo-tree-id3660 . -6) (undo-tree-id3661 . -6) (undo-tree-id3662 . -6) (undo-tree-id3663 . -6) (undo-tree-id3664 . -6) (undo-tree-id3665 . -6) 826) nil (26015 40420 173465 0) 0 nil])
([nil nil ((820 . 821)) nil (26015 40420 174154 0) 0 nil])
([nil nil ((#("                v" 0 17 (fontified t)) . 886) (undo-tree-id3923 . -17) (undo-tree-id3924 . -17) (undo-tree-id3925 . -17) (undo-tree-id3926 . -17) (undo-tree-id3927 . -17) (undo-tree-id3928 . -17) (undo-tree-id3929 . -17) (undo-tree-id3930 . -17) (undo-tree-id3931 . -17) (undo-tree-id3932 . -17) (undo-tree-id3933 . -17) (undo-tree-id3934 . -17)) nil (26015 40423 468368 0) 0 nil] [nil nil ((#("
" 0 1 (fontified t)) . -824) (undo-tree-id3650 . -1) (undo-tree-id3651 . -1) (undo-tree-id3652 . -1) (undo-tree-id3653 . -1) (undo-tree-id3654 . -1) (undo-tree-id3655 . -1) (undo-tree-id3656 . -1) 825) ((824 . 825)) (26015 40420 173451 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 886) (undo-tree-id3922 . -1)) nil (26015 40423 468348 0) 0 nil])
nil
([nil nil ((#("Self" 0 4 (face font-lock-type-face fontified t)) . -462) (undo-tree-id3952 . -4) (undo-tree-id3953 . -4) 466 (t 26015 40423 487204 349000)) nil (26015 40444 52310 0) 0 nil])
([nil nil ((462 . 465)) nil (26015 40444 52307 0) 0 nil])
([nil nil ((apply yas--snippet-revive 462 467 #s(yas--snippet nil nil #s(yas--exit 466 nil) 19 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 466 nil) 19 nil nil nil nil)) (462 . 467) (#("Vec<$0>" 0 7 (fontified nil)) . 462) (462 . 469) (#("Vec" 0 3 (fontified nil)) . 462) (462 . 465) (#("Vec<…>" 0 6 (fontified nil)) . -462) (462 . 468) (#("Vec" 0 3 (face font-lock-type-face fontified t)) . -462) (undo-tree-id3943 . -3) (undo-tree-id3944 . -1) (undo-tree-id3945 . -1) (undo-tree-id3946 . -2) (undo-tree-id3947 . -2) (undo-tree-id3948 . -3) (undo-tree-id3949 . -3) (undo-tree-id3950 . -3) (undo-tree-id3951 . -3) 465) nil (26015 40444 52305 0) 0 nil])
([nil nil ((466 . 468)) nil (26015 40444 52292 0) 0 nil])
([nil nil ((466 . 468) (#("u8" 0 2 (fontified nil)) . 466) (466 . 468) (#("u8" 0 2 (face font-lock-type-face fontified t)) . -466) (undo-tree-id3935 . -2) (undo-tree-id3936 . -2) (undo-tree-id3937 . -1) (undo-tree-id3938 . -2) (undo-tree-id3939 . -2) (undo-tree-id3940 . -2) (undo-tree-id3941 . -2) (undo-tree-id3942 . -2) 468) nil (26015 40444 52288 0) 0 nil])
([nil nil ((703 . 704) (t 26015 40444 69912 956000)) nil (26015 40459 201612 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 706 712 nil nil nil t #s(yas--exit 713 nil))) #s(yas--exit 713 nil) 20 nil #s(yas--field 1 706 712 nil nil nil t #s(yas--exit 713 nil)) nil nil)) (703 . 709) (#("Ok(${1:()})$0" 0 13 (fontified nil)) . 703) (703 . 716) (#("Obuffer" 0 1 (fontified nil) 1 7 (face font-lock-type-face fontified nil)) . 703) (undo-tree-id3983 . -4) (undo-tree-id3984 . -4) (undo-tree-id3985 . -4) (undo-tree-id3986 . -4) (undo-tree-id3987 . -4) (undo-tree-id3988 . -4) (undo-tree-id3989 . -4) (undo-tree-id3990 . -4) (undo-tree-id3991 . -4) (undo-tree-id3992 . 6) (703 . 704) (#("Ok(…)" 0 5 (fontified nil)) . -703) (703 . 708) (#("O" 0 1 (face font-lock-type-face fontified t)) . -703) (undo-tree-id3993 . -1) (undo-tree-id3994 . -1) (undo-tree-id3995 . -1) (undo-tree-id3996 . -1) (undo-tree-id3997 . -1) (undo-tree-id3998 . -1) (undo-tree-id3999 . -1) (undo-tree-id4000 . -1) 704) nil (26015 40459 201609 0) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -706) (undo-tree-id3964 . -1) (undo-tree-id3965 . -1) (undo-tree-id3966 . -1) (undo-tree-id3967 . -1) (undo-tree-id3968 . -1) (undo-tree-id3969 . -1) (undo-tree-id3970 . -1) (undo-tree-id3971 . -1) (undo-tree-id3972 . -1) (undo-tree-id3973 . -1) (undo-tree-id3974 . -1) (undo-tree-id3975 . -1) (undo-tree-id3976 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -707) (undo-tree-id3977 . -1) (undo-tree-id3978 . -1) (undo-tree-id3979 . -1) (undo-tree-id3980 . -1) (undo-tree-id3981 . -1) (undo-tree-id3982 . -1) 708) nil (26015 40459 201587 0) 0 nil])
([nil nil ((706 . 708)) nil (26015 40459 201567 0) 0 nil])
([nil nil ((706 . 712) (#("bu" 0 2 (fontified nil)) . 706) (undo-tree-id3954 . -2) (706 . 708) (#("buffer" 0 6 (fontified nil)) . -706) (undo-tree-id3955 . -6) (706 . 712) (#("bu" 0 2 (fontified t)) . -706) (undo-tree-id3956 . -2) (undo-tree-id3957 . -2) (undo-tree-id3958 . -2) (undo-tree-id3959 . -1) (undo-tree-id3960 . -2) (undo-tree-id3961 . -2) (undo-tree-id3962 . -2) (undo-tree-id3963 . -2) 708) nil (26015 40459 201565 0) 0 nil])
([nil nil ((apply yas--snippet-revive 703 713 #s(yas--snippet nil (#s(yas--field 1 706 712 nil nil nil t #s(yas--exit 713 nil))) #s(yas--exit 713 nil) 20 nil #s(yas--field 1 706 712 nil nil nil t #s(yas--exit 713 nil)) nil nil))) nil (26015 40459 201543 0) 0 nil])
([nil nil ((#("f" 0 1 (face font-lock-variable-name-face fontified t)) . -442) (undo-tree-id4030 . -1) (undo-tree-id4031 . -1) (undo-tree-id4032 . -1) (undo-tree-id4033 . -1) (undo-tree-id4034 . -1) (undo-tree-id4035 . -1) (undo-tree-id4036 . -1) (undo-tree-id4037 . -1) (undo-tree-id4038 . -1) (undo-tree-id4039 . -1) (undo-tree-id4040 . -1) (undo-tree-id4041 . -1) (undo-tree-id4042 . -1) (undo-tree-id4043 . -1) (undo-tree-id4044 . -1) (undo-tree-id4045 . -1) (#("i" 0 1 (face font-lock-variable-name-face fontified t)) . -443) (undo-tree-id4046 . -1) (undo-tree-id4047 . -1) (undo-tree-id4048 . -1) (undo-tree-id4049 . -1) (undo-tree-id4050 . -1) (undo-tree-id4051 . -1) (undo-tree-id4052 . -1) (undo-tree-id4053 . -1) (undo-tree-id4054 . -1) (undo-tree-id4055 . -1) (undo-tree-id4056 . -1) (undo-tree-id4057 . -1) (undo-tree-id4058 . -1) (undo-tree-id4059 . -1) (#("l" 0 1 (face font-lock-variable-name-face fontified t)) . -444) (undo-tree-id4060 . -1) (undo-tree-id4061 . -1) (undo-tree-id4062 . -1) (undo-tree-id4063 . -1) (undo-tree-id4064 . -1) (undo-tree-id4065 . -1) (undo-tree-id4066 . -1) (undo-tree-id4067 . -1) (undo-tree-id4068 . -1) (undo-tree-id4069 . -1) (undo-tree-id4070 . -1) (undo-tree-id4071 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -445) (undo-tree-id4072 . -1) (undo-tree-id4073 . -1) (undo-tree-id4074 . -1) (undo-tree-id4075 . -1) (undo-tree-id4076 . -1) (undo-tree-id4077 . -1) (undo-tree-id4078 . -1) (undo-tree-id4079 . -1) (undo-tree-id4080 . -1) (undo-tree-id4081 . -1) 446 (t 26015 40459 221086 237000)) nil (26015 40483 81127 0) 0 nil])
([nil nil ((442 . 451)) nil (26015 40483 81077 0) 0 nil])
([nil nil ((#("file" 0 4 (fontified t)) . -749) (undo-tree-id4023 . -4) (undo-tree-id4024 . -4) (undo-tree-id4025 . -4) (undo-tree-id4026 . -4) (undo-tree-id4027 . -4) (undo-tree-id4028 . -4) (undo-tree-id4029 . -4) 753) nil (26015 40483 81076 0) 0 nil])
([nil nil ((749 . 751)) nil (26015 40483 81067 0) 0 nil])
([nil nil ((744 . 758) (#("read_to" 0 7 (fontified nil)) . 744) (744 . 751) (#("read_to_buffer" 0 14 (fontified nil)) . -744) (744 . 758) (#("read_to" 0 7 (fontified t)) . -744) (undo-tree-id4001 . -7) (undo-tree-id4002 . -7) (undo-tree-id4003 . -5) (undo-tree-id4004 . -5) (undo-tree-id4005 . -5) (undo-tree-id4006 . -5) (undo-tree-id4007 . -5) (undo-tree-id4008 . -5) (undo-tree-id4009 . -5) (undo-tree-id4010 . -5) (undo-tree-id4011 . -5) (undo-tree-id4012 . -5) (undo-tree-id4013 . -5) (undo-tree-id4014 . -5) (undo-tree-id4015 . -6) (undo-tree-id4016 . -6) (undo-tree-id4017 . -7) (undo-tree-id4018 . -7) (undo-tree-id4019 . -7) (undo-tree-id4020 . -7) (undo-tree-id4021 . -7) (undo-tree-id4022 . -7) 751) nil (26015 40483 81062 0) 0 nil])
([nil nil ((58 . 59) (t 26015 40483 98692 995000)) nil (26015 40494 169746 0) 0 nil])
([nil nil ((58 . 62)) nil (26015 40494 169744 0) 0 nil])
([nil nil ((62 . 68)) nil (26015 40494 169743 0) 0 nil])
([nil nil ((68 . 69)) nil (26015 40494 169742 0) 0 nil])
([nil nil ((67 . 73) (#("re" 0 2 (fontified nil)) . 67) (67 . 69) (#("result" 0 6 (fontified nil)) . -67) (67 . 73) (#("re" 0 2 (fontified t)) . -67) (undo-tree-id4097 . -2) (undo-tree-id4098 . -2) (undo-tree-id4099 . -1) (undo-tree-id4100 . -1) (undo-tree-id4101 . -1) (undo-tree-id4102 . -1) (undo-tree-id4103 . -1) (undo-tree-id4104 . -2) (undo-tree-id4105 . -2) (undo-tree-id4106 . -2) (undo-tree-id4107 . -2) (undo-tree-id4108 . -2) (undo-tree-id4109 . -2) (undo-tree-id4110 . -2) (undo-tree-id4111 . -2) 69) nil (26015 40494 169740 0) 0 nil])
([nil nil ((73 . 76)) nil (26015 40494 169724 0) 0 nil])
([nil nil ((76 . 77)) nil (26015 40494 169723 0) 0 nil])
([nil nil ((75 . 81) (#("Re" 0 2 (fontified nil)) . 75) (75 . 77) (#("Result" 0 6 (fontified nil)) . -75) (75 . 81) (#("Re" 0 2 (face font-lock-type-face fontified t)) . -75) (undo-tree-id4082 . -2) (undo-tree-id4083 . -2) (undo-tree-id4084 . -1) (undo-tree-id4085 . -1) (undo-tree-id4086 . -1) (undo-tree-id4087 . -1) (undo-tree-id4088 . -1) (undo-tree-id4089 . -1) (undo-tree-id4090 . -1) (undo-tree-id4091 . -1) (undo-tree-id4092 . -1) (undo-tree-id4093 . -2) (undo-tree-id4094 . -2) (undo-tree-id4095 . -2) (undo-tree-id4096 . -2) 77) nil (26015 40494 169720 0) 0 nil])
([nil nil ((81 . 83)) nil (26015 40494 169697 0) 0 nil])
([nil nil ((apply yas--snippet-revive 83 85 #s(yas--snippet nil nil #s(yas--exit 85 nil) 21 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 85 nil) 21 nil nil nil nil)) (83 . 85) (#("Ok$0" 0 4 (fontified nil)) . 83) (83 . 87) (#("Ok" 0 2 (fontified nil)) . -83) (83 . 85)) nil (26015 40494 169695 0) 0 nil])
([nil nil ((85 . 86)) nil (26015 40494 169689 0) 0 nil])
([nil nil ((1026 . 1029) (t 26015 40494 188021 516000)) nil (26015 40522 760525 0) 0 nil])
([nil nil ((1028 . 1030)) nil (26015 40522 760523 0) 0 nil])
([nil nil ((1053 . 1056)) nil (26015 40522 760519 0) 0 nil])
([nil nil ((1026 . 1027) (t 26015 40522 779444 902000)) nil (26015 40528 89754 0) 0 nil])
([nil nil ((#("        match read_to_buffer() {" 0 8 (fontified t) 8 13 (face font-lock-keyword-face fontified t) 13 14 (fontified t) 14 28 (fontified t) 28 29 (face (rainbow-delimiters-depth-3-face) fontified t) 29 30 (face (rainbow-delimiters-depth-3-face) fontified t) 30 31 (fontified t) 31 32 (face (rainbow-delimiters-depth-3-face) fontified t)) . 759) (undo-tree-id4395 . -1) (undo-tree-id4396 . -30) (undo-tree-id4397 . -30) (undo-tree-id4398 . -30) (undo-tree-id4399 . -29) (undo-tree-id4400 . -28) (undo-tree-id4401 . -25) (undo-tree-id4402 . -23) (undo-tree-id4403 . -21) (undo-tree-id4404 . -19) (undo-tree-id4405 . -30) (undo-tree-id4406 . -30) (undo-tree-id4407 . -32) (t 26015 40528 107563 57000)) nil (26015 41749 129275 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 759) (undo-tree-id4393 . -1) (undo-tree-id4394 . -1)) nil (26015 41749 129261 0) 0 nil])
([nil nil ((#("     }," 0 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-4-face) fontified t) 6 7 (fontified t)) . 906) (undo-tree-id4392 . -7)) nil (26015 41749 129258 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 906) (undo-tree-id4390 . -1) (undo-tree-id4391 . -1)) nil (26015 41749 129255 0) 0 nil])
([nil nil ((#("                 Err(e) => {
                warn!(\"Error while reading texture file: {:?}, use default instead\", e);
                let img = image::DynamicImage::new_rgba8(1, 1);
                Self::from_image(device, queue, &img, label)

            }" 0 5 (fontified t) 5 17 (fontified t) 17 20 (face font-lock-type-face fontified t) 20 21 (face (rainbow-delimiters-depth-4-face) fontified t) 21 22 (fontified t) 22 23 (face (rainbow-delimiters-depth-4-face) fontified t) 23 25 (fontified t) 25 26 (fontified t syntax-table (1)) 26 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-4-face) fontified t) 28 29 (fontified t) 29 45 (fontified t) 45 50 (face font-lock-preprocessor-face fontified t) 50 51 (face (rainbow-delimiters-depth-5-face) fontified t) 51 112 (face font-lock-string-face fontified t) 112 115 (fontified t) 115 116 (face (rainbow-delimiters-depth-5-face) fontified t) 116 118 (fontified t) 118 134 (fontified t) 134 137 (face font-lock-keyword-face fontified t) 137 138 (fontified t) 138 141 (face font-lock-variable-name-face fontified t) 141 144 (fontified t) 144 149 (face font-lock-constant-face fontified t) 149 151 (fontified t) 151 163 (face font-lock-type-face fontified t) 163 165 (fontified t) 165 174 (fontified t) 174 175 (face (rainbow-delimiters-depth-5-face) fontified t) 175 176 (fontified t) 176 179 (fontified t) 179 180 (face (rainbow-delimiters-depth-5-face) fontified t) 180 182 (fontified t) 182 198 (fontified t) 198 202 (face font-lock-type-face fontified t) 202 214 (fontified t) 214 215 (face (rainbow-delimiters-depth-5-face) fontified t) 215 230 (fontified t) 230 231 (face rust-ampersand-face fontified t) 231 241 (fontified t) 241 242 (face (rainbow-delimiters-depth-5-face) fontified t rear-nonsticky t) 242 243 (fontified t rear-nonsticky t) 243 244 (fontified t) 244 256 (fontified t) 256 257 (face (rainbow-delimiters-depth-4-face) fontified t)) . 901) (undo-tree-id4275 . -257) (undo-tree-id4276 . -198) (undo-tree-id4277 . -86) (undo-tree-id4278 . 172) (undo-tree-id4279 . -85) (undo-tree-id4280 . -85) (undo-tree-id4281 . -85) (undo-tree-id4282 . -85) (undo-tree-id4283 . -85) (undo-tree-id4284 . -85) (undo-tree-id4285 . -85) (undo-tree-id4286 . -85) (undo-tree-id4287 . -85) (undo-tree-id4288 . -85) (undo-tree-id4289 . -85) (undo-tree-id4290 . -85) (undo-tree-id4291 . -85) (undo-tree-id4292 . -85) (undo-tree-id4293 . -85) (undo-tree-id4294 . -85) (undo-tree-id4295 . -85) (undo-tree-id4296 . -85) (undo-tree-id4297 . -85) (undo-tree-id4298 . -85) (undo-tree-id4299 . -85) (undo-tree-id4300 . -85) (undo-tree-id4301 . -85) (undo-tree-id4302 . -85) (undo-tree-id4303 . -85) (undo-tree-id4304 . -85) (undo-tree-id4305 . -85) (undo-tree-id4306 . -173) (undo-tree-id4307 . -173) (undo-tree-id4308 . -173) (undo-tree-id4309 . -173) (undo-tree-id4310 . -173) (undo-tree-id4311 . -173) (undo-tree-id4312 . -173) (undo-tree-id4313 . -173) (undo-tree-id4314 . -173) (undo-tree-id4315 . -173) (undo-tree-id4316 . -173) (undo-tree-id4317 . -173) (undo-tree-id4318 . -173) (undo-tree-id4319 . -173) (undo-tree-id4320 . -173) (undo-tree-id4321 . -173) (undo-tree-id4322 . -173) (undo-tree-id4323 . -173) (undo-tree-id4324 . -173) (undo-tree-id4325 . -173) (undo-tree-id4326 . -173) (undo-tree-id4327 . -173) (undo-tree-id4328 . -173) (undo-tree-id4329 . -173) (undo-tree-id4330 . -173) (undo-tree-id4331 . -173) (undo-tree-id4332 . -173) (undo-tree-id4333 . -173) (undo-tree-id4334 . -173) (undo-tree-id4335 . -173) (undo-tree-id4336 . -5) (undo-tree-id4337 . -29) (undo-tree-id4338 . -118) (undo-tree-id4339 . -118) (undo-tree-id4340 . -118) (undo-tree-id4341 . -118) (undo-tree-id4342 . -118) (undo-tree-id4343 . -118) (undo-tree-id4344 . -118) (undo-tree-id4345 . -182) (undo-tree-id4346 . -243) (undo-tree-id4347 . -257) (undo-tree-id4348 . -257) (undo-tree-id4349 . -257) (undo-tree-id4350 . -243) (undo-tree-id4351 . -130) (undo-tree-id4352 . -38) (undo-tree-id4353 . -13) (undo-tree-id4354 . -5) (undo-tree-id4355 . -257) (undo-tree-id4356 . -5) (undo-tree-id4357 . -5) (undo-tree-id4358 . -5) (undo-tree-id4359 . -5) (undo-tree-id4360 . -5) (undo-tree-id4361 . -5) (undo-tree-id4362 . -5) (undo-tree-id4363 . -5) (undo-tree-id4364 . -5) (undo-tree-id4365 . -243) (undo-tree-id4366 . -243) (undo-tree-id4367 . -243) (undo-tree-id4368 . -189) (undo-tree-id4369 . -188) (undo-tree-id4370 . -187) (undo-tree-id4371 . -122) (undo-tree-id4372 . -124) (undo-tree-id4373 . -191) (undo-tree-id4374 . -243) (undo-tree-id4375 . -257) (undo-tree-id4376 . -257) (undo-tree-id4377 . -243) (undo-tree-id4378 . -257) (undo-tree-id4379 . -257) (undo-tree-id4380 . -257) (undo-tree-id4381 . -243) (undo-tree-id4382 . -190) (undo-tree-id4383 . -189) (undo-tree-id4384 . -124) (undo-tree-id4385 . -123) (undo-tree-id4386 . -122) (undo-tree-id4387 . -32) (undo-tree-id4388 . -243) (undo-tree-id4389 . -257)) nil (26015 41749 129248 0) 0 nil])
([nil nil ((#("            Ok(v) => {" 0 12 (fontified t) 12 14 (face font-lock-type-face fontified t) 14 15 (face (rainbow-delimiters-depth-3-face) fontified t) 15 16 (fontified t) 16 17 (face (rainbow-delimiters-depth-3-face) fontified t) 17 19 (fontified t) 19 20 (syntax-table (1) fontified t) 20 21 (fontified t) 21 22 (face (rainbow-delimiters-depth-3-face) fontified t)) . 759) (undo-tree-id4228 . -22) (undo-tree-id4229 . -22) (undo-tree-id4230 . -22) (undo-tree-id4231 . -21) (undo-tree-id4232 . -18) (undo-tree-id4233 . -15) (undo-tree-id4234 . -12) (undo-tree-id4235 . -11) (undo-tree-id4236 . -9) (undo-tree-id4237 . -8) (undo-tree-id4238 . -6) (undo-tree-id4239 . -5) (undo-tree-id4240 . -3) (undo-tree-id4241 . -2) (undo-tree-id4242 . -22) (undo-tree-id4243 . -17) (undo-tree-id4244 . -16) (undo-tree-id4245 . -14) (undo-tree-id4246 . -13) (undo-tree-id4247 . -12) (undo-tree-id4248 . -11) (undo-tree-id4249 . -10) (undo-tree-id4250 . -9) (undo-tree-id4251 . -22) (undo-tree-id4252 . -8) (undo-tree-id4253 . -8) (undo-tree-id4254 . -22) (undo-tree-id4255 . -22) (undo-tree-id4256 . -22) (undo-tree-id4257 . -21) (undo-tree-id4258 . -17) (undo-tree-id4259 . -13) (undo-tree-id4260 . -9) (undo-tree-id4261 . -7) (undo-tree-id4262 . -4) (undo-tree-id4263 . -3) (undo-tree-id4264 . -2) (undo-tree-id4265 . -1) (undo-tree-id4266 . -22) (undo-tree-id4267 . -22) (undo-tree-id4268 . -22) (undo-tree-id4269 . -22) (undo-tree-id4270 . -22) (undo-tree-id4271 . -22) (undo-tree-id4272 . -22) (undo-tree-id4273 . -22) (undo-tree-id4274 . -22)) nil (26015 41749 129129 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 759) (undo-tree-id4226 . -1) (undo-tree-id4227 . -1)) nil (26015 41749 129085 0) 0 nil])
([nil nil ((#("            Ok(buffer)" 0 12 (fontified t) 12 14 (face font-lock-type-face fontified t) 14 15 (face (rainbow-delimiters-depth-4-face) fontified t) 15 21 (fontified t) 21 22 (face (rainbow-delimiters-depth-4-face) fontified t)) . 725) (undo-tree-id4224 . -15) (undo-tree-id4225 . -22)) nil (26015 41749 129082 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 725) (undo-tree-id4223 . -1)) nil (26015 41749 129079 0) 0 nil])
([nil nil ((#("        };" 0 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-3-face) fontified t) 9 10 (fontified t)) . 725) (undo-tree-id4222 . -10)) nil (26015 41749 129077 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 725) (undo-tree-id4131 . -1) (undo-tree-id4132 . -1) (undo-tree-id4133 . -1) (undo-tree-id4134 . -1) (undo-tree-id4135 . -1) (undo-tree-id4136 . -1) (undo-tree-id4137 . -1) (undo-tree-id4138 . -1) (undo-tree-id4139 . -1) (undo-tree-id4140 . -1) (undo-tree-id4141 . -1) (undo-tree-id4142 . -1) (undo-tree-id4143 . -1) (undo-tree-id4144 . -1) (undo-tree-id4145 . -1) (undo-tree-id4146 . -1) (undo-tree-id4147 . -1) (undo-tree-id4148 . -1) (undo-tree-id4149 . -1) (undo-tree-id4150 . -1) (undo-tree-id4151 . -1) (undo-tree-id4152 . -1) (undo-tree-id4153 . -1) (undo-tree-id4154 . -1) (undo-tree-id4155 . -1) (undo-tree-id4156 . -1) (undo-tree-id4157 . -1) (undo-tree-id4158 . -1) (undo-tree-id4159 . -1) (undo-tree-id4160 . -1) (undo-tree-id4161 . -1) (undo-tree-id4162 . -1) (undo-tree-id4163 . -1) (undo-tree-id4164 . -1) (undo-tree-id4165 . -1) (undo-tree-id4166 . -1) (undo-tree-id4167 . -1) (undo-tree-id4168 . -1) (undo-tree-id4169 . -1) (undo-tree-id4170 . -1) (undo-tree-id4171 . -1) (undo-tree-id4172 . -1) (undo-tree-id4173 . -1) (undo-tree-id4174 . -1) (undo-tree-id4175 . -1) (undo-tree-id4176 . -1) (undo-tree-id4177 . -1) (undo-tree-id4178 . -1) (undo-tree-id4179 . -1) (undo-tree-id4180 . -1) (undo-tree-id4181 . -1) (undo-tree-id4182 . -1) (undo-tree-id4183 . -1) (undo-tree-id4184 . -1) (undo-tree-id4185 . -1) (undo-tree-id4186 . -1) (undo-tree-id4187 . -1) (undo-tree-id4188 . -1) (undo-tree-id4189 . -1) (undo-tree-id4190 . -1) (undo-tree-id4191 . -1) (undo-tree-id4192 . -1) (undo-tree-id4193 . -1) (undo-tree-id4194 . -1) (undo-tree-id4195 . -1) (undo-tree-id4196 . -1) (undo-tree-id4197 . -1) (undo-tree-id4198 . -1) (undo-tree-id4199 . -1) (undo-tree-id4200 . -1) (undo-tree-id4201 . -1) (undo-tree-id4202 . -1) (undo-tree-id4203 . -1) (undo-tree-id4204 . -1) (undo-tree-id4205 . -1) (undo-tree-id4206 . -1) (undo-tree-id4207 . -1) (undo-tree-id4208 . -1) (undo-tree-id4209 . -1) (undo-tree-id4210 . -1) (undo-tree-id4211 . -1) (undo-tree-id4212 . -1) (undo-tree-id4213 . -1) (undo-tree-id4214 . -1) (undo-tree-id4215 . -1) (undo-tree-id4216 . -1) (undo-tree-id4217 . -1) (undo-tree-id4218 . -1) (undo-tree-id4219 . -1) (undo-tree-id4220 . -1) (undo-tree-id4221 . -1)) nil (26015 41749 129071 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -737) (undo-tree-id4130 . -4) 725) nil (26015 41749 128983 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -789) 814) nil (26015 41749 128980 0) 0 nil])
([nil nil ((#("v" 0 1 (fontified t)) . -772) (undo-tree-id4117 . -1) (undo-tree-id4118 . -1) (undo-tree-id4119 . -1) (undo-tree-id4120 . -1) (undo-tree-id4121 . -1) (undo-tree-id4122 . -1) (undo-tree-id4123 . -1) (undo-tree-id4124 . -1) (undo-tree-id4125 . -1) (undo-tree-id4126 . -1) (undo-tree-id4127 . -1) (undo-tree-id4128 . -1) (undo-tree-id4129 . -1) 773) nil (26015 41749 128978 0) 0 nil])
([nil nil ((772 . 773)) nil (26015 41749 128963 0) 0 nil])
([nil nil ((772 . 778) (#("b" 0 1 (fontified nil)) . 772) (772 . 773) (#("buffer" 0 6 (fontified nil)) . -772) (772 . 778) (#("b" 0 1 (fontified t)) . -772) (undo-tree-id4112 . -1) (undo-tree-id4113 . -1) (undo-tree-id4114 . -1) (undo-tree-id4115 . -1) (undo-tree-id4116 . -1) 773) nil (26015 41749 128959 0) 0 nil])
([nil nil ((#("        let read_to_buffer = || -> Result<Vec<u8>> {" 0 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 26 (face font-lock-variable-name-face fontified t) 26 33 (fontified t) 33 34 (fontified t syntax-table (1)) 34 35 (fontified t) 35 41 (face font-lock-type-face fontified t) 41 42 (face (rainbow-delimiters-depth-3-face) fontified t) 42 45 (face font-lock-type-face fontified t) 45 46 (face (rainbow-delimiters-depth-4-face) fontified t) 46 48 (face font-lock-type-face fontified t) 48 49 (face (rainbow-delimiters-depth-4-face) fontified t) 49 50 (face (rainbow-delimiters-depth-3-face) fontified t) 50 51 (fontified t) 51 52 (face (rainbow-delimiters-depth-3-face) fontified t)) . 454) (undo-tree-id4419 . -52) (undo-tree-id4420 . -52) (undo-tree-id4421 . -52) (undo-tree-id4422 . -52) (undo-tree-id4423 . -52) (undo-tree-id4424 . -52) (undo-tree-id4425 . -52) (t 26015 41749 150907 834000)) nil (26015 41754 393228 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 454) (undo-tree-id4417 . -1) (undo-tree-id4418 . -1)) nil (26015 41754 393220 0) 0 nil])
([nil nil ((#("        }" 0 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-3-face) fontified t)) . 789) (undo-tree-id4410 . -9) (undo-tree-id4411 . -9) (undo-tree-id4412 . -9) (undo-tree-id4413 . -9) (undo-tree-id4414 . -9) (undo-tree-id4415 . -9) (undo-tree-id4416 . -9)) nil (26015 41754 393216 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 789) (undo-tree-id4408 . -1) (undo-tree-id4409 . -1)) nil (26015 41754 393205 0) 0 nil])
([nil current ((779 . 783) (758 . 770) (#("  " 0 2 (fontified t)) . 758) (undo-tree-id4426 . -2) (undo-tree-id4427 . -2) (#("    " 0 4 (fontified t)) . -713) (undo-tree-id4428 . -3) (#("    " 0 4 (fontified t)) . -660) (undo-tree-id4429 . -4) (undo-tree-id4430 . -2) (#("    " 0 4 (fontified t)) . -618) (#("    " 0 4 (fontified t)) . -587) (#("    " 0 4 (fontified t)) . -550) (#("    " 0 4 (fontified t)) . -497) (#("    " 0 4 (fontified t)) . -462) 383 (t 26015 41754 413169 982000)) nil (26015 41757 295970 0) 0 nil])
nil
