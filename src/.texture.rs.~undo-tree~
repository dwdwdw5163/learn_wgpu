(undo-tree-save-format-version . 1)
"b21274960fad415d8dc26c1be75ebd52d01f8c9c"
[nil nil nil nil (26017 26136 94352 0) 0 nil]
([nil nil ((1507 . 1508) (t 26015 41757 314763 757000)) nil (26017 26136 94351 0) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -1507) (undo-tree-id197 . -1) (undo-tree-id198 . -1) 1508) nil (26017 26136 94350 0) 0 nil])
([nil nil ((1463 . 1472)) nil (26017 26136 94347 0) 0 nil])
([nil nil ((1472 . 1473)) nil (26017 26136 94346 0) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -1472) (undo-tree-id196 . -1) 1473) nil (26017 26136 94345 0) 0 nil])
([nil nil ((1472 . 1478)) nil (26017 26136 94342 0) 0 nil])
([nil nil ((1478 . 1481)) nil (26017 26136 94341 0) 0 nil])
([nil nil ((1481 . 1482)) nil (26017 26136 94341 0) 0 nil])
([nil nil ((#("tex" 0 3 (fontified t)) . -1479) (undo-tree-id195 . -3) 1482) nil (26017 26136 94339 0) 0 nil])
([nil nil ((#("create_" 0 7 (fontified t)) . -1472) (undo-tree-id194 . -7) 1479) nil (26017 26136 94337 0) 0 nil])
([nil nil ((1472 . 1474)) nil (26017 26136 94335 0) 0 nil])
([nil nil ((1472 . 1478) (#("de" 0 2 (fontified nil)) . 1472) (1472 . 1474) (#("device" 0 6 (fontified nil)) . -1472) (1472 . 1478) (#("de" 0 2 (fontified t)) . -1472) (undo-tree-id193 . -2) 1474) nil (26017 26136 94333 0) 0 nil])
([nil nil ((1478 . 1480)) nil (26017 26136 94330 0) 0 nil])
([nil nil ((1480 . 1485)) nil (26017 26136 94328 0) 0 nil])
([nil nil ((150 . 177) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1531 1536 nil nil nil nil #s(yas--field 2 1538 1542 nil nil nil nil #s(yas--field 3 1544 1548 nil nil nil nil #s(yas--exit 1549 nil)))) #s(yas--field 2 1538 1542 nil nil nil nil #s(yas--field 3 1544 1548 nil nil nil nil #s(yas--exit 1549 nil))) #s(yas--field 3 1544 1548 nil nil nil nil #s(yas--exit 1549 nil))) #s(yas--exit 1549 nil) 2 nil #s(yas--field 1 1531 1536 nil nil nil nil #s(yas--field 2 1538 1542 nil nil nil nil #s(yas--field 3 1544 1548 nil nil nil nil #s(yas--exit 1549 nil)))) nil nil)) (1479 . 1522) (#("create_texture_with_data(${1:queue}, ${2:desc}, ${3:data})$0" 0 60 (fontified nil)) . 1479) (1479 . 1539) (#("create" 0 6 (fontified nil)) . 1479) (1479 . 1485) (#("create_texture_with_data(…) (use wgpu::util::DeviceExt)" 0 55 (fontified nil)) . -1479) (1479 . 1534) (#("create" 0 6 (fontified t)) . -1479) (undo-tree-id192 . -6) 1485) nil (26017 26136 94327 0) 0 nil])
([nil nil ((apply yas--snippet-revive 1506 1549 #s(yas--snippet nil (#s(yas--field 1 1531 1536 nil nil nil nil #s(yas--field 2 1538 1542 nil nil nil nil #s(yas--field 3 1544 1548 nil nil nil nil #s(yas--exit 1549 nil)))) #s(yas--field 2 1538 1542 nil nil nil nil #s(yas--field 3 1544 1548 nil nil nil nil #s(yas--exit 1549 nil))) #s(yas--field 3 1544 1548 nil nil nil nil #s(yas--exit 1549 nil))) #s(yas--exit 1549 nil) 2 nil #s(yas--field 1 1531 1536 nil nil nil nil #s(yas--field 2 1538 1542 nil nil nil nil #s(yas--field 3 1544 1548 nil nil nil nil #s(yas--exit 1549 nil)))) nil nil))) nil (26017 26136 94322 0) 0 nil])
([nil nil ((#("        device.create_texture_with_data(queue, desc, data)" 0 8 (fontified t) 8 15 (fontified t) 15 39 (fontified t) 39 40 (face (rainbow-delimiters-depth-3-face) fontified t) 40 57 (fontified t) 57 58 (face (rainbow-delimiters-depth-3-face) fontified t)) . 1491) (undo-tree-id189 . -35) (undo-tree-id190 . -35) (undo-tree-id191 . -58)) nil (26017 26136 94321 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1491)) nil (26017 26136 94317 0) 0 nil])
([nil nil ((1492 . 1500) (#("        " 0 8 (fontified nil)) . 1491) (undo-tree-id188 . -8) (1490 . 1500)) nil (26017 26136 94316 0) 0 nil])
([nil nil ((1500 . 1502)) nil (26017 26136 94313 0) 0 nil])
([nil nil ((1500 . 1506) (#("de" 0 2 (fontified nil)) . 1500) (1500 . 1502) (#("device" 0 6 (fontified nil)) . -1500) (1500 . 1506) (#("de" 0 2 (fontified t)) . -1500) (undo-tree-id187 . -2) 1502) nil (26017 26136 94312 0) 0 nil])
([nil nil ((1506 . 1515)) nil (26017 26136 94308 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1522 1526 nil nil nil nil #s(yas--exit 1527 nil))) #s(yas--exit 1527 nil) 3 nil #s(yas--field 1 1522 1526 nil nil nil nil #s(yas--exit 1527 nil)) nil nil)) (1507 . 1527) (#("create_texture(${1:desc})$0" 0 27 (fontified nil)) . 1507) (1507 . 1534) (#("create_t" 0 8 (fontified nil)) . 1507) (1507 . 1515) (#("create_texture(…)" 0 17 (fontified nil)) . -1507) (1507 . 1524) (#("create_t" 0 8 (fontified t)) . -1507) (undo-tree-id179 . -8) (undo-tree-id180 . -6) (undo-tree-id181 . -7) (undo-tree-id182 . -7) (undo-tree-id183 . -8) (undo-tree-id184 . -8) (undo-tree-id185 . -8) (undo-tree-id186 . -8) 1515) nil (26017 26136 94306 0) 0 nil])
([nil nil ((apply yas--snippet-revive 1507 1527 #s(yas--snippet nil (#s(yas--field 1 1522 1526 nil nil nil nil #s(yas--exit 1527 nil))) #s(yas--exit 1527 nil) 3 nil #s(yas--field 1 1522 1526 nil nil nil nil #s(yas--exit 1527 nil)) nil nil))) nil (26017 26136 94295 0) 0 nil])
([nil nil ((#("desc)" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-3-face) fontified t)) . -1522) (undo-tree-id168 . -5) (undo-tree-id169 . -5) (undo-tree-id170 . -5) (undo-tree-id171 . -5) (undo-tree-id172 . -1) (undo-tree-id173 . -2) (undo-tree-id174 . -3) (undo-tree-id175 . -4) (undo-tree-id176 . -5) (undo-tree-id177 . -5) (undo-tree-id178 . -5) 1527) nil (26017 26136 94294 0) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -1521) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) 1522) nil (26017 26136 94281 0) 0 nil])
([nil nil ((1521 . 1522)) nil (26017 26136 94247 0) 0 nil])
([nil nil ((#("v" 0 1 (fontified t)) . -1521) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) 1522) nil (26017 26136 94245 0) 0 nil])
([nil nil ((1521 . 1522)) nil (26017 26136 94238 0) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -1521) (undo-tree-id131 . -1) (undo-tree-id132 . -1) 1522) nil (26017 26136 94237 0) 0 nil])
([nil nil ((1521 . 1522)) nil (26017 26136 94234 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1532 1537 nil nil nil nil #s(yas--field 2 1539 1543 nil nil nil nil #s(yas--field 3 1545 1549 nil nil nil nil #s(yas--exit 1550 nil)))) #s(yas--field 2 1539 1543 nil nil nil nil #s(yas--field 3 1545 1549 nil nil nil nil #s(yas--exit 1550 nil))) #s(yas--field 3 1545 1549 nil nil nil nil #s(yas--exit 1550 nil))) #s(yas--exit 1550 nil) 4 nil #s(yas--field 1 1532 1537 nil nil nil nil #s(yas--field 2 1539 1543 nil nil nil nil #s(yas--field 3 1545 1549 nil nil nil nil #s(yas--exit 1550 nil)))) nil nil)) (1507 . 1550) (#("create_texture_with_data(${1:queue}, ${2:desc}, ${3:data})$0" 0 60 (fontified nil)) . 1507) (1507 . 1567) (#("create_texture_" 0 15 (fontified nil)) . 1507) (1507 . 1522) (#("create_texture_with_data(…) (as DeviceExt)" 0 42 (fontified nil)) . -1507) (1507 . 1549) (#("create_texture_" 0 15 (fontified t)) . -1507) (undo-tree-id82 . -14) (undo-tree-id83 . -15) (undo-tree-id84 . -14) (undo-tree-id85 . -14) (undo-tree-id86 . -14) (undo-tree-id87 . -14) (undo-tree-id88 . -14) (undo-tree-id89 . -14) (undo-tree-id90 . -14) (undo-tree-id91 . -14) (undo-tree-id92 . -14) (undo-tree-id93 . -14) (undo-tree-id94 . -14) (undo-tree-id95 . -14) (undo-tree-id96 . -14) (undo-tree-id97 . -14) (undo-tree-id98 . -14) (undo-tree-id99 . -14) (undo-tree-id100 . -14) (undo-tree-id101 . -14) (undo-tree-id102 . -14) (undo-tree-id103 . -14) (undo-tree-id104 . -14) (undo-tree-id105 . -14) (undo-tree-id106 . -14) (undo-tree-id107 . -14) (undo-tree-id108 . -14) (undo-tree-id109 . -14) (undo-tree-id110 . -14) (undo-tree-id111 . -14) (undo-tree-id112 . -14) (undo-tree-id113 . -14) (undo-tree-id114 . -14) (undo-tree-id115 . -14) (undo-tree-id116 . -14) (undo-tree-id117 . -14) (undo-tree-id118 . -14) (undo-tree-id119 . -14) (undo-tree-id120 . -14) (undo-tree-id121 . -14) (undo-tree-id122 . -14) (undo-tree-id123 . -14) (undo-tree-id124 . -14) (undo-tree-id125 . -14) (undo-tree-id126 . -15) (undo-tree-id127 . -15) (undo-tree-id128 . -15) (undo-tree-id129 . -15) (undo-tree-id130 . -15) 1522) nil (26017 26136 94230 0) 0 nil])
([nil nil ((apply yas--snippet-revive 1507 1550 #s(yas--snippet nil (#s(yas--field 1 1532 1537 nil nil nil nil #s(yas--field 2 1539 1543 nil nil nil nil #s(yas--field 3 1545 1549 nil nil nil nil #s(yas--exit 1550 nil)))) #s(yas--field 2 1539 1543 nil nil nil nil #s(yas--field 3 1545 1549 nil nil nil nil #s(yas--exit 1550 nil))) #s(yas--field 3 1545 1549 nil nil nil nil #s(yas--exit 1550 nil))) #s(yas--exit 1550 nil) 4 nil #s(yas--field 1 1532 1537 nil nil nil nil #s(yas--field 2 1539 1543 nil nil nil nil #s(yas--field 3 1545 1549 nil nil nil nil #s(yas--exit 1550 nil)))) nil nil))) nil (26017 26136 94177 0) 0 nil])
([nil nil ((1550 . 1551)) nil (26017 26136 94176 0) 0 nil])
([nil nil ((1553 . 1561) (#("        " 0 8 (fontified nil)) . 1552) (undo-tree-id79 . -8) (undo-tree-id80 . -8) (undo-tree-id81 . -8) (1551 . 1561)) nil (26017 26136 94174 0) 0 nil])
([nil nil ((1500 . 1514)) nil (26017 26136 94170 0) 0 nil])
([nil nil ((1546 . 1559)) nil (26017 26136 94169 0) 0 nil])
([nil nil ((1566 . 1578) (#(" " 0 1 (fontified nil)) . 1565) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (1566 . 1567)) nil (26017 26136 94168 0) 0 nil])
([nil nil ((1584 . 1596) (#(" " 0 1 (fontified nil)) . 1583) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (1584 . 1585)) nil (26017 26136 94159 0) 0 nil])
([nil nil ((1600 . 1609)) nil (26017 26136 94148 0) 0 nil])
([nil nil ((#("desc" 0 4 (fontified t)) . -1578) (undo-tree-id17 . -3) (undo-tree-id18 . -4) (undo-tree-id19 . -4) (undo-tree-id20 . -4) (undo-tree-id21 . -4) (undo-tree-id22 . -4) (undo-tree-id23 . -4) (undo-tree-id24 . -4) (undo-tree-id25 . -4) (undo-tree-id26 . -4) (undo-tree-id27 . -4) (undo-tree-id28 . -4) (undo-tree-id29 . -4) (undo-tree-id30 . -4) (undo-tree-id31 . -4) (undo-tree-id32 . -4) (undo-tree-id33 . -1) (undo-tree-id34 . -2) (undo-tree-id35 . -3) (undo-tree-id36 . -4) (undo-tree-id37 . -4) (undo-tree-id38 . -4) (undo-tree-id39 . -1) (undo-tree-id40 . -2) (undo-tree-id41 . -2) (undo-tree-id42 . -2) (undo-tree-id43 . -3) (undo-tree-id44 . -4) (undo-tree-id45 . -4) (undo-tree-id46 . -4) (undo-tree-id47 . -4) (undo-tree-id48 . -4) (undo-tree-id49 . -4) (undo-tree-id50 . -4) (undo-tree-id51 . -4) (undo-tree-id52 . -4) (undo-tree-id53 . -4) (undo-tree-id54 . -4) (undo-tree-id55 . -4) (undo-tree-id56 . -4) (undo-tree-id57 . -4) (undo-tree-id58 . -4) (undo-tree-id59 . -1) (undo-tree-id60 . -2) (undo-tree-id61 . -3) (undo-tree-id62 . -4) (undo-tree-id63 . -4) (undo-tree-id64 . -4) 1582) nil (26017 26136 94145 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1976 . 1977) (nil fontified nil 1976 . 1977) (nil fontified nil 1962 . 1976) (nil fontified nil 1961 . 1962) (nil fontified nil 1960 . 1961) (nil fontified nil 1959 . 1960) (nil fontified nil 1957 . 1959) (nil fontified nil 1945 . 1957) (nil fontified nil 1927 . 1945) (nil fontified nil 1919 . 1927) (nil fontified nil 1917 . 1919) (nil fontified nil 1904 . 1917) (nil fontified nil 1902 . 1904) (nil fontified nil 1898 . 1902) (nil fontified nil 1895 . 1898) (nil fontified nil 1880 . 1895) (nil fontified nil 1878 . 1880) (nil fontified nil 1865 . 1878) (nil fontified nil 1863 . 1865) (nil fontified nil 1859 . 1863) (nil fontified nil 1857 . 1859) (nil fontified nil 1852 . 1857) (nil fontified nil 1834 . 1852) (nil fontified nil 1820 . 1834) (nil fontified nil 1818 . 1820) (nil fontified nil 1805 . 1818) (nil fontified nil 1803 . 1805) (nil fontified nil 1799 . 1803) (nil fontified nil 1797 . 1799) (nil fontified nil 1791 . 1797) (nil fontified nil 1773 . 1791) (nil fontified nil 1771 . 1773) (nil fontified nil 1769 . 1771) (nil fontified nil 1753 . 1769) (nil fontified nil 1751 . 1753) (nil fontified nil 1747 . 1751) (nil fontified nil 1745 . 1747) (nil fontified nil 1736 . 1745) (nil fontified nil 1715 . 1736) (nil fontified nil 1703 . 1715) (nil fontified nil 1682 . 1703) (nil fontified nil 1667 . 1682) (nil fontified nil 1605 . 1667) (nil fontified nil 1604 . 1605) (nil fontified nil 1603 . 1604) (nil fontified nil 1586 . 1603) (nil fontified nil 1584 . 1586) (nil fontified nil 1580 . 1584) (nil fontified nil 1579 . 1580) (nil fontified nil 1578 . 1579) (1578 . 1977)) nil (26017 26136 94096 0) 0 nil])
([nil nil ((#("data" 0 4 (fontified t)) . -1991) (undo-tree-id4 . -4) (undo-tree-id5 . -4) (undo-tree-id6 . -4) (undo-tree-id7 . -4) (undo-tree-id8 . -4) (undo-tree-id9 . -4) (undo-tree-id10 . -4) (undo-tree-id11 . -4) (undo-tree-id12 . -4) (undo-tree-id13 . -4) (undo-tree-id14 . -4) (undo-tree-id15 . -4) (undo-tree-id16 . -4) 1995) nil (26017 26136 94082 0) 0 nil])
([nil nil ((1991 . 1993)) nil (26017 26136 94068 0) 0 nil])
([nil nil ((1992 . 1996) (#("r" 0 1 (fontified nil)) . 1992) (1992 . 1993) (#("rgba" 0 4 (fontified nil)) . -1992) (1992 . 1996) (#("r" 0 1 (fontified t)) . -1992) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) 1993) nil (26017 26136 94066 0) 0 nil])
([nil nil ((1996 . 1997)) nil (26017 26136 94029 0) 0 nil])
([nil nil ((apply -84 2021 3129 undo--wrap-and-run-primitive-undo 2021 3129 (("  " . 2021) (3125 . 3128) (3104 . 3107) (3086 . 3089) (3031 . 3034) (2973 . 2976) (2943 . 2946) (2904 . 2907) (2882 . 2885) (2864 . 2867) (2815 . 2818) (2782 . 2785) (2744 . 2747) (2691 . 2694) (2651 . 2654) (2619 . 2622) (2534 . 2537) (2518 . 2521) (2501 . 2504) (2463 . 2466) (2367 . 2370) (2303 . 2306) (2245 . 2248) (2209 . 2212) (2170 . 2173) (2145 . 2148) (2119 . 2122) (2077 . 2080) (2029 . 2032) (2021 . 2023)))) nil (26017 26146 675792 0) 0 nil])
([nil nil ((apply -42 1492 2051 undo--wrap-and-run-primitive-undo 1492 2051 ((2045 . 2048) (2023 . 2026) (2005 . 2008) (1967 . 1970) (1871 . 1874) (1807 . 1810) (1749 . 1752) (1713 . 1716) (1674 . 1677) (1649 . 1652) (1623 . 1626) (1580 . 1583) (1558 . 1561) (1500 . 1503) 1492))) nil (26017 27381 540449 0) 0 nil])
([nil nil ((apply 84 2054 3086 undo--wrap-and-run-primitive-undo 2054 3086 ((#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -3084) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -3066) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -3051) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2999) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2944) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2917) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2881) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2862) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2847) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2801) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2771) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2736) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2686) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2649) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2620) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2538) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2525) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2511) (#<marker at 3739 in texture.rs> . -1) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2476) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2383) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2322) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2267) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2234) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2198) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2176) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2153) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2114) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2069) 2054))) nil (26017 27381 540445 0) 0 nil])
([nil nil ((58 . 1351) (#("use std::result::Result::Ok;

use image::GenericImageView;
use anyhow::*;
use tracing::warn;
use wgpu::util::DeviceExt;

pub struct Texture {
    pub texture: wgpu::Texture,
    pub view: wgpu::TextureView,
    pub sampler: wgpu::Sampler,
}

impl Texture {
    pub fn from_path(
        path: &std::path::Path,
        device: &wgpu::Device,
        queue: &wgpu::Queue,
        label: Option<&str>
    ) -> Result<Self> {
        let f = File::open(path)?;
        let mut reader = std::io::BufReader::new(f);
        let mut buffer = Vec::new();
        // read the whole file
        reader.read_to_end(&mut buffer)?;
        let img = image::load_from_memory(&buffer)?;
        Self::from_image(device, queue, &img, label)
            
            
    }
    
    pub fn from_bytes(
        device: &wgpu::Device,
        queue: &wgpu::Queue,
        bytes: &[u8], 
        label: &str
    ) -> Result<Self> {
        let img = image::load_from_memory(bytes)?;
        Self::from_image(device, queue, &img, Some(label))
    }


    pub fn from_image(
        device: &wgpu::Device,
        queue: &wgpu::Queue,
        img: &image::DynamicImage,
        label: Option<&str>
    ) -> Result<Self> {
        let rgba = img.to_rgba8();
        let dimensions = img.dimensions();

        let size = wgpu::Extent3d {
            width: dimensions.0,
            height: dimensions.1,
            depth_or_array_layers: 1,
        };

        // let texture = device.create_texture_with_data(
        //     queue,
        //      &wgpu::TextureDescriptor {
        //         label,
        //         size,
        //         mip_level_count: 1,
        //         sample_count: 1,
        //         dimension: wgpu::TextureDimension::D2,
        //         format: wgpu::TextureFormat::Rgba8UnormSrgb,
        //         usage: wgpu::TextureUsages::TEXTURE_BINDING | wgpu::TextureUsages::COPY_DST,
        //         view_formats: &[],
        //     },
        //     &rgba,
        // );

        " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 7 (face font-lock-constant-face fontified t) 7 9 (fontified t) 9 15 (face font-lock-constant-face fontified t) 15 17 (fontified t) 17 23 (face font-lock-type-face fontified t) 23 25 (fontified t) 25 27 (face font-lock-type-face fontified t) 27 30 (fontified t) 30 33 (face font-lock-keyword-face fontified t) 33 34 (fontified t) 34 39 (face font-lock-constant-face fontified t) 39 41 (fontified t) 41 57 (face font-lock-type-face fontified t) 57 59 (fontified t) 59 62 (face font-lock-keyword-face fontified t) 62 63 (fontified t) 63 69 (face font-lock-constant-face fontified t) 69 74 (fontified t) 74 77 (face font-lock-keyword-face fontified t) 77 78 (fontified t) 78 85 (face font-lock-constant-face fontified t) 85 92 (fontified t) 121 124 (face font-lock-keyword-face) 125 131 (face font-lock-keyword-face) 132 139 (face font-lock-type-face) 140 141 (face (rainbow-delimiters-depth-1-face)) 146 149 (face font-lock-keyword-face) 150 157 (face font-lock-variable-name-face) 159 163 (face font-lock-constant-face) 165 172 (face font-lock-type-face) 178 181 (face font-lock-keyword-face) 182 186 (face font-lock-variable-name-face) 188 192 (face font-lock-constant-face) 194 205 (face font-lock-type-face) 211 214 (face font-lock-keyword-face) 215 222 (face font-lock-variable-name-face) 224 228 (face font-lock-constant-face) 230 237 (face font-lock-type-face) 239 240 (face (rainbow-delimiters-depth-1-face)) 242 246 (face font-lock-keyword-face) 247 254 (face font-lock-type-face) 255 256 (face (rainbow-delimiters-depth-1-face)) 261 264 (face font-lock-keyword-face) 265 267 (face font-lock-keyword-face) 268 277 (face font-lock-function-name-face) 277 278 (face (rainbow-delimiters-depth-2-face)) 287 291 (face font-lock-variable-name-face) 293 294 (face rust-ampersand-face) 294 297 (face font-lock-constant-face) 299 303 (face font-lock-constant-face) 305 309 (face font-lock-type-face) 319 325 (face font-lock-variable-name-face) 327 328 (face rust-ampersand-face) 328 332 (face font-lock-constant-face) 334 340 (face font-lock-type-face) 350 355 (face font-lock-variable-name-face) 357 358 (face rust-ampersand-face) 358 362 (face font-lock-constant-face) 364 369 (face font-lock-type-face) 379 384 (face font-lock-variable-name-face) 386 392 (face font-lock-type-face) 392 393 (face (rainbow-delimiters-depth-3-face)) 393 394 (face rust-ampersand-face) 394 397 (face font-lock-type-face) 397 398 (face (rainbow-delimiters-depth-3-face)) 403 404 (face (rainbow-delimiters-depth-2-face)) 406 407 (syntax-table (1)) 408 414 (face font-lock-type-face) 414 415 (face (rainbow-delimiters-depth-2-face)) 415 419 (face font-lock-type-face) 419 420 (face (rainbow-delimiters-depth-2-face)) 421 422 (face (rainbow-delimiters-depth-2-face)) 431 434 (face font-lock-keyword-face) 435 436 (face font-lock-variable-name-face) 439 443 (face font-lock-type-face) 449 450 (face (rainbow-delimiters-depth-3-face)) 454 455 (face (rainbow-delimiters-depth-3-face)) 455 456 (face rust-question-mark) 466 469 (face font-lock-keyword-face) 470 473 (face font-lock-keyword-face) 474 480 (face font-lock-variable-name-face) 483 486 (face font-lock-constant-face) 488 490 (face font-lock-constant-face) 492 501 (face font-lock-type-face) 506 507 (face (rainbow-delimiters-depth-3-face)) 508 509 (face (rainbow-delimiters-depth-3-face)) 519 522 (face font-lock-keyword-face) 523 526 (face font-lock-keyword-face) 527 533 (face font-lock-variable-name-face) 536 539 (face font-lock-type-face) 544 545 (face (rainbow-delimiters-depth-3-face)) 545 546 (face (rainbow-delimiters-depth-3-face)) 556 559 (face font-lock-comment-delimiter-face) 559 579 (face font-lock-comment-face) 605 606 (face (rainbow-delimiters-depth-3-face)) 606 607 (face rust-ampersand-face) 607 610 (face font-lock-keyword-face) 617 618 (face (rainbow-delimiters-depth-3-face)) 618 619 (face rust-question-mark) 629 632 (face font-lock-keyword-face) 633 636 (face font-lock-variable-name-face) 639 644 (face font-lock-constant-face) 662 663 (face (rainbow-delimiters-depth-3-face)) 663 664 (face rust-ampersand-face) 670 671 (face (rainbow-delimiters-depth-3-face)) 671 672 (face rust-question-mark) 682 686 (face font-lock-type-face) 698 699 (face (rainbow-delimiters-depth-3-face)) 714 715 (face rust-ampersand-face) 725 726 (face (rainbow-delimiters-depth-3-face)) 757 758 (face (rainbow-delimiters-depth-2-face)) 768 771 (face font-lock-keyword-face) 772 774 (face font-lock-keyword-face) 775 785 (face font-lock-function-name-face) 785 786 (face (rainbow-delimiters-depth-2-face)) 795 801 (face font-lock-variable-name-face) 803 804 (face rust-ampersand-face) 804 808 (face font-lock-constant-face) 810 816 (face font-lock-type-face) 826 831 (face font-lock-variable-name-face) 833 834 (face rust-ampersand-face) 834 838 (face font-lock-constant-face) 840 845 (face font-lock-type-face) 855 860 (face font-lock-variable-name-face) 862 863 (face rust-ampersand-face) 863 864 (face (rainbow-delimiters-depth-3-face)) 864 866 (face font-lock-type-face) 866 867 (face (rainbow-delimiters-depth-3-face)) 878 883 (face font-lock-variable-name-face) 885 886 (face rust-ampersand-face) 886 889 (face font-lock-type-face) 894 895 (face (rainbow-delimiters-depth-2-face)) 897 898 (syntax-table (1)) 899 905 (face font-lock-type-face) 905 906 (face (rainbow-delimiters-depth-2-face)) 906 910 (face font-lock-type-face) 910 911 (face (rainbow-delimiters-depth-2-face)) 912 913 (face (rainbow-delimiters-depth-2-face)) 922 925 (face font-lock-keyword-face) 926 929 (face font-lock-variable-name-face) 932 937 (face font-lock-constant-face) 955 956 (face (rainbow-delimiters-depth-3-face)) 961 962 (face (rainbow-delimiters-depth-3-face)) 962 963 (face rust-question-mark) 973 977 (face font-lock-type-face) 989 990 (face (rainbow-delimiters-depth-3-face)) 1005 1006 (face rust-ampersand-face) 1011 1015 (face font-lock-type-face) 1015 1016 (face (rainbow-delimiters-depth-4-face)) 1021 1022 (face (rainbow-delimiters-depth-4-face)) 1022 1023 (face (rainbow-delimiters-depth-3-face)) 1028 1029 (face (rainbow-delimiters-depth-2-face)) 1030 1031 (fontified t) 1031 1032 (fontified t) 1032 1036 (fontified t) 1036 1039 (face font-lock-keyword-face fontified t) 1039 1040 (fontified t) 1040 1042 (face font-lock-keyword-face fontified t) 1042 1043 (fontified t) 1043 1053 (face font-lock-function-name-face fontified t) 1053 1054 (face (rainbow-delimiters-depth-2-face) fontified t) 1054 1063 (fontified t) 1063 1069 (face font-lock-variable-name-face fontified t) 1069 1071 (fontified t) 1071 1072 (face rust-ampersand-face fontified t) 1072 1076 (face font-lock-constant-face fontified t) 1076 1078 (fontified t) 1078 1084 (face font-lock-type-face fontified t) 1084 1094 (fontified t) 1094 1099 (face font-lock-variable-name-face fontified t) 1099 1101 (fontified t) 1101 1102 (face rust-ampersand-face fontified t) 1102 1106 (face font-lock-constant-face fontified t) 1106 1108 (fontified t) 1108 1113 (face font-lock-type-face fontified t) 1113 1123 (fontified t) 1123 1126 (face font-lock-variable-name-face fontified t) 1126 1128 (fontified t) 1128 1129 (face rust-ampersand-face fontified t) 1129 1134 (face font-lock-constant-face fontified t) 1134 1136 (fontified t) 1136 1148 (face font-lock-type-face fontified t) 1148 1158 (fontified t) 1158 1163 (face font-lock-variable-name-face fontified t) 1163 1165 (fontified t) 1165 1171 (face font-lock-type-face fontified t) 1171 1172 (face (rainbow-delimiters-depth-3-face) fontified t) 1172 1173 (face rust-ampersand-face fontified t) 1173 1176 (face font-lock-type-face fontified t) 1176 1177 (face (rainbow-delimiters-depth-3-face) fontified t) 1177 1182 (fontified t) 1182 1183 (face (rainbow-delimiters-depth-2-face) fontified t) 1183 1185 (fontified t) 1185 1186 (fontified t syntax-table (1)) 1186 1187 (fontified t) 1187 1193 (face font-lock-type-face fontified t) 1193 1194 (face (rainbow-delimiters-depth-2-face) fontified t) 1194 1198 (face font-lock-type-face fontified t) 1198 1199 (face (rainbow-delimiters-depth-2-face) fontified t) 1199 1200 (fontified t) 1200 1201 (face (rainbow-delimiters-depth-2-face) fontified t) 1201 1210 (fontified t) 1210 1213 (face font-lock-keyword-face fontified t) 1213 1214 (fontified t) 1214 1218 (face font-lock-variable-name-face fontified t) 1218 1233 (fontified t) 1233 1234 (face (rainbow-delimiters-depth-3-face) fontified t) 1234 1235 (face (rainbow-delimiters-depth-3-face) fontified t) 1235 1245 (fontified t) 1245 1248 (face font-lock-keyword-face fontified t) 1248 1249 (fontified t) 1249 1259 (face font-lock-variable-name-face fontified t) 1259 1276 (fontified t) 1276 1277 (face (rainbow-delimiters-depth-3-face) fontified t) 1277 1278 (face (rainbow-delimiters-depth-3-face) fontified t) 1278 1289 (fontified t) 1289 1292 (face font-lock-keyword-face fontified t) 1292 1293 (fontified t) 1293 1297 (face font-lock-variable-name-face fontified t) 1297 1300 (fontified t) 1300 1304 (face font-lock-constant-face fontified t) 1304 1306 (fontified t) 1306 1314 (face font-lock-type-face fontified t) 1314 1315 (fontified t) 1315 1316 (face (rainbow-delimiters-depth-3-face) fontified t) 1316 1329 (fontified t) 1329 1334 (face font-lock-variable-name-face fontified t) 1334 1362 (fontified t) 1362 1368 (face font-lock-variable-name-face fontified t) 1368 1396 (fontified t) 1396 1417 (face font-lock-variable-name-face fontified t) 1417 1422 (fontified t) 1422 1430 (fontified t) 1430 1431 (face (rainbow-delimiters-depth-3-face) fontified t) 1431 1433 (fontified t) 1433 1434 (fontified t) 1434 1442 (fontified t) 1442 1445 (face font-lock-comment-delimiter-face fontified t) 1445 1448 (face font-lock-comment-face fontified t) 1448 1449 (face font-lock-comment-face fontified t) 1449 1456 (face font-lock-comment-face fontified t) 1456 1459 (face font-lock-comment-face fontified t) 1459 1465 (face font-lock-comment-face fontified t) 1465 1466 (face font-lock-comment-face fontified t) 1466 1490 (face font-lock-comment-face fontified t) 1490 1491 (face font-lock-comment-face fontified t) 1491 1492 (face font-lock-comment-face fontified t) 1492 1500 (fontified t) 1500 1503 (face font-lock-comment-delimiter-face fontified t) 1503 1507 (face font-lock-comment-delimiter-face fontified t) 1507 1514 (face font-lock-comment-face fontified t) 1514 1522 (fontified t) 1522 1525 (face font-lock-comment-delimiter-face fontified t) 1525 1529 (face font-lock-comment-delimiter-face fontified t) 1529 1530 (face font-lock-comment-delimiter-face fontified t) 1530 1531 (face font-lock-comment-face fontified t) 1531 1535 (face font-lock-comment-face fontified t) 1535 1537 (face font-lock-comment-face fontified t) 1537 1554 (face font-lock-comment-face fontified t) 1554 1555 (face font-lock-comment-face fontified t) 1555 1556 (face font-lock-comment-face fontified t) 1556 1557 (face font-lock-comment-face fontified t) 1557 1565 (fontified t) 1565 1568 (face font-lock-comment-delimiter-face fontified t) 1568 1576 (face font-lock-comment-delimiter-face fontified t) 1576 1583 (face font-lock-comment-face fontified t) 1583 1591 (fontified t) 1591 1594 (face font-lock-comment-delimiter-face fontified t) 1594 1602 (face font-lock-comment-delimiter-face fontified t) 1602 1608 (face font-lock-comment-face fontified t) 1608 1616 (fontified t) 1616 1619 (face font-lock-comment-delimiter-face fontified t) 1619 1627 (face font-lock-comment-delimiter-face fontified t) 1627 1642 (face font-lock-comment-face fontified t) 1642 1647 (face font-lock-comment-face fontified t) 1647 1655 (fontified t) 1655 1658 (face font-lock-comment-delimiter-face fontified t) 1658 1666 (face font-lock-comment-delimiter-face fontified t) 1666 1678 (face font-lock-comment-face fontified t) 1678 1683 (face font-lock-comment-face fontified t) 1683 1691 (fontified t) 1691 1694 (face font-lock-comment-delimiter-face fontified t) 1694 1702 (face font-lock-comment-delimiter-face fontified t) 1702 1711 (face font-lock-comment-face fontified t) 1711 1713 (face font-lock-comment-face fontified t) 1713 1717 (face font-lock-comment-face fontified t) 1717 1719 (face font-lock-comment-face fontified t) 1719 1735 (face font-lock-comment-face fontified t) 1735 1737 (face font-lock-comment-face fontified t) 1737 1739 (face font-lock-comment-face fontified t) 1739 1741 (face font-lock-comment-face fontified t) 1741 1749 (fontified t) 1749 1752 (face font-lock-comment-delimiter-face fontified t) 1752 1760 (face font-lock-comment-delimiter-face fontified t) 1760 1766 (face font-lock-comment-face fontified t) 1766 1768 (face font-lock-comment-face fontified t) 1768 1772 (face font-lock-comment-face fontified t) 1772 1774 (face font-lock-comment-face fontified t) 1774 1787 (face font-lock-comment-face fontified t) 1787 1789 (face font-lock-comment-face fontified t) 1789 1803 (face font-lock-comment-face fontified t) 1803 1805 (face font-lock-comment-face fontified t) 1805 1813 (fontified t) 1813 1816 (face font-lock-comment-delimiter-face fontified t) 1816 1824 (face font-lock-comment-delimiter-face fontified t) 1824 1829 (face font-lock-comment-face fontified t) 1829 1831 (face font-lock-comment-face fontified t) 1831 1835 (face font-lock-comment-face fontified t) 1835 1837 (face font-lock-comment-face fontified t) 1837 1850 (face font-lock-comment-face fontified t) 1850 1852 (face font-lock-comment-face fontified t) 1852 1867 (face font-lock-comment-face fontified t) 1867 1870 (face font-lock-comment-face fontified t) 1870 1874 (face font-lock-comment-face fontified t) 1874 1876 (face font-lock-comment-face fontified t) 1876 1889 (face font-lock-comment-face fontified t) 1889 1891 (face font-lock-comment-face fontified t) 1891 1899 (face font-lock-comment-face fontified t) 1899 1901 (face font-lock-comment-face fontified t) 1901 1909 (fontified t) 1909 1912 (face font-lock-comment-delimiter-face fontified t) 1912 1920 (face font-lock-comment-delimiter-face fontified t) 1920 1932 (face font-lock-comment-face fontified t) 1932 1934 (face font-lock-comment-face fontified t) 1934 1935 (face font-lock-comment-face fontified t) 1935 1936 (face font-lock-comment-face fontified t) 1936 1937 (face font-lock-comment-face fontified t) 1937 1939 (face font-lock-comment-face fontified t) 1939 1947 (fontified t) 1947 1950 (face font-lock-comment-delimiter-face fontified t) 1950 1954 (face font-lock-comment-delimiter-face fontified t) 1954 1955 (face font-lock-comment-face rear-nonsticky t fontified t) 1955 1957 (face font-lock-comment-face fontified t) 1957 1965 (fontified t) 1965 1968 (face font-lock-comment-delimiter-face fontified t) 1968 1972 (face font-lock-comment-delimiter-face fontified t) 1972 1973 (face font-lock-comment-face fontified t) 1973 1978 (face font-lock-comment-face fontified t) 1978 1979 (face font-lock-comment-face fontified t) 1979 1987 (fontified t) 1987 1990 (face font-lock-comment-delimiter-face fontified t) 1990 1991 (face font-lock-comment-face fontified t) 1991 1993 (face font-lock-comment-face fontified t) 1993 1994 (fontified t) 1994 2002 (fontified t)) . 58) (undo-tree-id234 . -1422) (undo-tree-id235 . -1528) (undo-tree-id236 . -1032) (undo-tree-id237 . -1978) (undo-tree-id238 . -1529) (undo-tree-id239 . -1996) (undo-tree-id240 . -1478) (undo-tree-id241 . -1482) (undo-tree-id242 . -1476) (undo-tree-id243 . -1992) (t 26017 27381 548151 865000)) nil (26018 23741 771694 0) 0 nil])
([nil nil ((58 . 2060) (#("
use image::GenericImageView;
use anyhow::*;

pub struct Texture {
    pub texture: wgpu::Texture,
    pub view: wgpu::TextureView,
    pub sampler: wgpu::Sampler,
}

impl Texture {
    pub fn from_path(
        path: &std::path::Path,
        device: &wgpu::Device,
        queue: &wgpu::Queue,
        label: Option<&str>
    ) -> Result<Self> {
        let mut f = File::open(path).unwrap();
        let mut buffer = Vec::new();
        // read the whole file
        f.read_to_end(&mut buffer).unwrap();
        let img = image::load_from_memory(&buffer)?;
        Self::from_image(device, queue, &img, label)
    }
    
    pub fn from_bytes(
        device: &wgpu::Device,
        queue: &wgpu::Queue,
        bytes: &[u8], 
        label: &str
    ) -> Result<Self> {
        let img = image::load_from_memory(bytes)?;
        Self::from_image(device, queue, &img, Some(label))
    }


    pub fn from_image(
        device: &wgpu::Device,
        queue: &wgpu::Queue,
        img: &image::DynamicImage,
        label: Option<&str>
    ) -> Result<Self> {
        let rgba = img.to_rgba8();
        let dimensions = img.dimensions();

        let size = wgpu::Extent3d {
            width: dimensions.0,
            height: dimensions.1,
            depth_or_array_layers: 1,
        };" 331 332 (syntax-table (1)) 758 759 (syntax-table (1)) 1046 1047 (syntax-table (1))) . 58) (t 26018 21663 799072 17000)) nil (26018 23741 771682 0) 0 nil])
([nil nil ((178 . 181) (t 26018 23638 667671 933000)) nil (26018 23741 771681 0) 0 nil])
([nil nil ((179 . 185)) nil (26018 23741 771679 0) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -183) (undo-tree-id232 . -1) (#("u" 0 1 (fontified t)) . -184) (undo-tree-id233 . -1) 185) nil (26018 23741 771678 0) 0 nil])
([nil nil ((183 . 201)) nil (26018 23741 771675 0) 0 nil])
([nil nil ((201 . 205)) nil (26018 23741 771674 0) 0 nil])
([nil nil ((#("g" 0 1 (face font-lock-function-name-face fontified t)) . -204) (undo-tree-id231 . -1) 205) nil (26018 23741 771672 0) 0 nil])
([nil nil ((204 . 216)) nil (26018 23741 771670 0) 0 nil])
([nil nil ((#("u" 0 1 (face font-lock-function-name-face fontified t)) . -214) (undo-tree-id229 . -1) (#("o" 0 1 (face font-lock-function-name-face fontified t)) . -215) (undo-tree-id230 . -1) 216) nil (26018 23741 771669 0) 0 nil])
([nil nil ((214 . 224)) nil (26018 23741 771665 0) 0 nil])
([nil nil ((224 . 227)) nil (26018 23741 771664 0) 0 nil])
([nil nil ((224 . 228) (#("wg" 0 2 (fontified nil)) . 224) (224 . 226) (#("wg:wgpu" 0 2 (face font-lock-variable-name-face fontified nil) 2 3 (fontified nil) 3 7 (fontified nil)) . -224) (undo-tree-id228 . -3) (227 . 231)) nil (26018 23741 771663 0) 0 nil])
([nil nil ((228 . 232)) nil (26018 23741 771660 0) 0 nil])
([nil nil ((#("u" 0 1 (face font-lock-type-face fontified t)) . -231) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) 232) nil (26018 23741 771659 0) 0 nil])
([nil nil ((231 . 234)) nil (26018 23741 771654 0) 0 nil])
([nil nil ((230 . 245) (#("Bind" 0 4 (fontified nil)) . 230) (230 . 234) (#("BindGroupLayout" 0 15 (fontified nil)) . -230) (230 . 245) (#("Bind" 0 4 (face font-lock-type-face fontified t)) . -230) (undo-tree-id210 . -4) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -2) (undo-tree-id219 . -2) (undo-tree-id220 . -2) (undo-tree-id221 . -4) (undo-tree-id222 . -4) (undo-tree-id223 . -4) 234) nil (26018 23741 771651 0) 0 nil])
([nil nil ((245 . 248)) nil (26018 23741 771635 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . 248) (248 . 252) (247 . 249)) nil (26018 23741 771634 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1440 . 1441) (nil fontified nil 1440 . 1441) (nil fontified nil 1439 . 1440) (nil fontified nil 1438 . 1439) (nil fontified nil 1424 . 1438) (nil fontified nil 1423 . 1424) (nil fontified nil 1396 . 1423) (nil fontified nil 1395 . 1396) (nil fontified nil 1391 . 1395) (nil fontified nil 1389 . 1391) (nil fontified nil 1384 . 1389) (nil fontified nil 1366 . 1384) (nil fontified nil 1365 . 1366) (nil fontified nil 1347 . 1365) (nil fontified nil 1346 . 1347) (nil fontified nil 1324 . 1346) (nil fontified nil 1320 . 1324) (nil fontified nil 1318 . 1320) (nil fontified nil 1313 . 1318) (nil fontified nil 1287 . 1313) (nil fontified nil 1286 . 1287) (nil fontified nil 1277 . 1286) (nil fontified nil 1275 . 1277) (nil fontified nil 1257 . 1275) (nil fontified nil 1255 . 1257) (nil fontified nil 1251 . 1255) (nil fontified nil 1250 . 1251) (nil fontified nil 1243 . 1250) (nil fontified nil 1241 . 1243) (nil fontified nil 1230 . 1241) (nil fontified nil 1228 . 1230) (nil fontified nil 1224 . 1228) (nil fontified nil 1222 . 1224) (nil fontified nil 1220 . 1222) (nil fontified nil 1196 . 1220) (nil fontified nil 1161 . 1196) (nil fontified nil 1158 . 1161) (nil fontified nil 1134 . 1158) (nil fontified nil 1088 . 1134) (nil fontified nil 1085 . 1088) (nil fontified nil 1059 . 1085) (nil fontified nil 1051 . 1059) (nil fontified nil 1049 . 1051) (nil fontified nil 1037 . 1049) (nil fontified nil 1035 . 1037) (nil fontified nil 1031 . 1035) (nil fontified nil 1029 . 1031) (nil fontified nil 1019 . 1029) (nil fontified nil 990 . 1019) (nil fontified nil 983 . 990) (nil fontified nil 958 . 983) (nil fontified nil 957 . 958) (nil fontified nil 956 . 957) (nil fontified nil 936 . 956) (nil fontified nil 934 . 936) (nil fontified nil 930 . 934) (nil fontified nil 908 . 930) (nil fontified nil 907 . 908) (nil fontified nil 885 . 907) (nil fontified nil 881 . 885) (nil fontified nil 879 . 881) (nil fontified nil 874 . 879) (nil fontified nil 848 . 874) (nil fontified nil 847 . 848) (nil fontified nil 821 . 847) (nil fontified nil 820 . 821) (nil fontified nil 819 . 820) (nil fontified nil 815 . 819) (nil fontified nil 813 . 815) (nil fontified nil 803 . 813) (nil fontified nil 802 . 803) (nil fontified nil 801 . 802) (nil fontified nil 800 . 801) (nil fontified nil 795 . 800) (nil fontified nil 793 . 795) (nil fontified nil 776 . 793) (nil fontified nil 774 . 776) (nil fontified nil 770 . 774) (nil fontified nil 768 . 770) (nil fontified nil 757 . 768) (nil fontified nil 727 . 757) (nil fontified nil 725 . 727) (nil fontified nil 723 . 725) (nil fontified nil 703 . 723) (nil fontified nil 701 . 703) (nil fontified nil 697 . 701) (nil fontified nil 695 . 697) (nil fontified nil 681 . 695) (nil fontified nil 651 . 681) (nil fontified nil 646 . 651) (nil fontified nil 644 . 646) (nil fontified nil 632 . 644) (nil fontified nil 603 . 632) (nil fontified nil 602 . 603) (nil fontified nil 601 . 602) (nil fontified nil 594 . 601) (nil fontified nil 592 . 594) (nil fontified nil 581 . 592) (nil fontified nil 579 . 581) (nil fontified nil 575 . 579) (nil fontified nil 573 . 575) (nil fontified nil 571 . 573) (nil fontified nil 545 . 571) (nil fontified nil 537 . 545) (nil fontified nil 535 . 537) (nil fontified nil 523 . 535) (nil fontified nil 521 . 523) (nil fontified nil 517 . 521) (nil fontified nil 515 . 517) (nil fontified nil 505 . 515) (nil fontified nil 476 . 505) (nil fontified nil 469 . 476) (nil fontified nil 444 . 469) (nil fontified nil 443 . 444) (nil fontified nil 442 . 443) (nil fontified nil 422 . 442) (nil fontified nil 420 . 422) (nil fontified nil 416 . 420) (nil fontified nil 395 . 416) (nil fontified nil 394 . 395) (nil fontified nil 393 . 394) (nil fontified nil 391 . 393) (nil fontified nil 384 . 391) (nil fontified nil 367 . 384) (nil fontified nil 366 . 367) (nil fontified nil 365 . 366) (nil fontified nil 340 . 365) (nil fontified nil 338 . 340) (nil fontified nil 334 . 338) (nil fontified nil 333 . 334) (nil fontified nil 332 . 333) (nil fontified nil 286 . 332) (nil fontified nil 261 . 286) (nil fontified nil 260 . 261) (nil fontified nil 257 . 260) (nil fontified nil 248 . 257) (248 . 1441)) nil (26018 23741 771627 0) 0 nil])
([nil nil ((1441 . 1446)) nil (26018 23741 771591 0) 0 nil])
([nil nil ((1446 . 1447)) nil (26018 23741 771590 0) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -1446) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) 1447) nil (26018 23741 771589 0) 0 nil])
([nil nil ((1446 . 1449)) nil (26018 23741 771585 0) 0 nil])
([nil nil ((1446 . 1471) (#("tex" 0 3 (fontified nil)) . 1446) (1446 . 1449) (#("texture_bind_group_layout" 0 25 (fontified nil)) . -1446) (1446 . 1471) (#("tex" 0 3 (fontified t)) . -1446) (undo-tree-id199 . -3) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -2) (undo-tree-id203 . -2) (undo-tree-id204 . -3) (undo-tree-id205 . -3) (undo-tree-id206 . -3) 1449) nil (26018 23741 771580 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1342) (#("    " 0 4 (fontified t)) . -1292) (#("    " 0 4 (fontified t)) . -1277) (#("    " 0 4 (fontified t)) . -1262) (#("    " 0 4 (fontified t)) . -1233) (#("    " 0 4 (fontified t)) . -1144) (#("    " 0 4 (fontified t)) . -1086) (#("    " 0 4 (fontified t)) . -1017) (#("    " 0 4 (fontified t)) . -955) (#("    " 0 4 (fontified t)) . -923) (#("    " 0 4 (fontified t)) . -874) (#("    " 0 4 (fontified t)) . -855) (#("    " 0 4 (fontified t)) . -826) (#("    " 0 4 (fontified t)) . -803) (#("    " 0 4 (fontified t)) . -717) (#("    " 0 4 (fontified t)) . -645) (#("    " 0 4 (fontified t)) . -600) (#("    " 0 4 (fontified t)) . -543) (#("    " 0 4 (fontified t)) . -481) (#("    " 0 4 (fontified t)) . -449) (#("    " 0 4 (fontified t)) . -400) (#("    " 0 4 (fontified t)) . -372) (#("    " 0 4 (fontified t)) . -293) (#("    " 0 4 (fontified t)) . -253) 179 (t 26018 23741 779640 634000)) nil (26018 23762 331142 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . 220) (220 . 224) (219 . 221)) nil (26018 23762 331134 0) 0 nil])
([nil nil ((220 . 224)) nil (26018 23762 331132 0) 0 nil])
([nil nil ((224 . 234)) nil (26018 23762 331131 0) 0 nil])
([nil nil ((233 . 237) (#("w" 0 1 (fontified nil)) . 233) (233 . 234) (#("wgpu" 0 4 (fontified nil)) . -233) (233 . 237) (#("w" 0 1 (fontified t)) . -233) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) 234) nil (26018 23762 331130 0) 0 nil])
([nil nil ((237 . 241)) nil (26018 23762 331123 0) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -240) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) 241) nil (26018 23762 331121 0) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -239) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) 240) nil (26018 23762 331115 0) 0 nil])
([nil nil ((239 . 245)) nil (26018 23762 331104 0) 0 nil])
([nil nil ((#("u" 0 1 (face font-lock-type-face fontified t)) . -242) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (#("c" 0 1 (face font-lock-type-face fontified t)) . -243) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -244) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) 245) nil (26018 23762 331101 0) 0 nil])
([nil nil ((242 . 243)) nil (26018 23762 331078 0) 0 nil])
([nil nil ((239 . 245) (#("Devi" 0 4 (fontified nil)) . 239) (239 . 243) (#("Device" 0 6 (fontified nil)) . -239) (239 . 245) (#("Devi" 0 4 (face font-lock-type-face fontified t)) . -239) (undo-tree-id244 . -4) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -2) (undo-tree-id249 . -2) (undo-tree-id250 . -2) (undo-tree-id251 . -3) (undo-tree-id252 . -3) (undo-tree-id253 . -3) (undo-tree-id254 . -3) (undo-tree-id255 . -3) (undo-tree-id256 . -3) (undo-tree-id257 . -3) (undo-tree-id258 . -3) (undo-tree-id259 . -3) (undo-tree-id260 . -3) (undo-tree-id261 . -3) (undo-tree-id262 . -3) (undo-tree-id263 . -3) (undo-tree-id264 . -3) (undo-tree-id265 . -3) (undo-tree-id266 . -3) (undo-tree-id267 . -3) (undo-tree-id268 . -4) (undo-tree-id269 . -4) (undo-tree-id270 . -4) (undo-tree-id271 . -4) 243) nil (26018 23762 331075 0) 0 nil])
([nil nil ((245 . 246)) nil (26018 23762 331034 0) 0 nil])
([nil current ((#("
" 0 1 (fontified t)) . -275) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) 276 (t 26018 23762 340641 660000)) nil (26018 23765 629563 0) 0 nil])
nil
