(undo-tree-save-format-version . 1)
"a94082050ce377285f49cf92eb54d9e6d2e859e4"
[nil nil nil nil (26015 30081 571748 0) 0 nil]
([nil nil ((9947 . 9949) (t 26015 28460 89937 668000)) nil (26015 30161 529191 0) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -9947) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -9948) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) 9949 (t 26015 30161 532150 935000)) nil (26015 30189 975572 0) 0 nil])
([nil nil ((9947 . 9949) (t 26015 30189 978632 119000)) nil (26015 32657 512214 0) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -9947) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -9948) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) 9949 (t 26015 32657 515356 138000)) nil (26015 33378 63964 0) 0 nil])
([nil nil ((14473 . 14486) (t 26015 33378 66950 905000)) nil (26015 33840 712071 0) 0 nil])
([nil nil ((14486 . 14491)) nil (26015 33840 712070 0) 0 nil])
([nil nil ((#("$" 0 1 (fontified t)) . -14486) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (#("s" 0 1 (fontified t)) . -14487) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (#("e" 0 1 (fontified t)) . -14488) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (#("l" 0 1 (fontified t)) . -14489) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (#("f" 0 1 (fontified t)) . -14490) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) 14491) nil (26015 33840 712066 0) 0 nil])
([nil nil ((14486 . 14493)) nil (26015 33840 712008 0) 0 nil])
([nil nil ((14492 . 14508) (#("l" 0 1 (fontified nil)) . 14492) (14492 . 14493) (#("light_bind_group" 0 16 (fontified nil)) . -14492) (14492 . 14508) (#("l" 0 1 (fontified t)) . -14492) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) 14493) nil (26015 33840 712003 0) 0 nil])
([nil nil ((14508 . 14509)) nil (26015 33840 711981 0) 0 nil])
([nil nil ((11002 . 11010) (#("        " 0 8 (fontified nil)) . 11001) (undo-tree-id151 . -8) (undo-tree-id152 . -8) (undo-tree-id153 . -8) (11001 . 11010) (#("        " 0 8 (fontified nil)) . 11000) (undo-tree-id154 . -8) (undo-tree-id155 . -8) (undo-tree-id156 . -8) (10999 . 11009) (t 26015 33840 715934 273000)) nil (26015 33854 390030 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 11667 . 11668) (nil fontified nil 11010 . 11668) (11010 . 11668)) nil (26015 33854 390015 0) 0 nil])
([nil nil ((11809 . 11817) (11795 . 11807) (#("    " 0 4 (fontified t)) . 11795) (11771 . 11787) (#("        " 0 8 (fontified t)) . 11771) (11724 . 11740) (#("        " 0 8 (fontified t)) . 11724) (11670 . 11686) (#("        " 0 8 (fontified t)) . 11670) (11639 . 11655) (#("        " 0 8 (fontified t)) . 11639) (11614 . 11630) (#("        " 0 8 (fontified t)) . 11614) (11589 . 11605) (#("        " 0 8 (fontified t)) . 11589) (11553 . 11565) (#("    " 0 4 (fontified t)) . 11553) (11538 . 11550) (#("    " 0 4 (fontified t)) . 11538) (11453 . 11469) (#("        " 0 8 (fontified t)) . 11453) (11408 . 11424) (#("        " 0 8 (fontified t)) . 11408) (11352 . 11364) (#("    " 0 4 (fontified t)) . 11352) (11336 . 11348) (#("    " 0 4 (fontified t)) . 11336) (11293 . 11309) (#("        " 0 8 (fontified t)) . 11293) (11201 . 11217) (#("        " 0 8 (fontified t)) . 11201) (11147 . 11163) (#("        " 0 8 (fontified t)) . 11147) (11058 . 11070) (#("    " 0 4 (fontified t)) . 11058) (11020 . 11028) 11000) nil (26015 33854 390007 0) 0 nil])
([nil nil ((#("wgpu::ShaderModuleDescriptor {
                label: Some(\"Light Shader\"),
                source: wgpu::ShaderSource::Wgsl(include_str!(\"light.wgsl\").into())," 0 4 (face font-lock-constant-face fontified t) 4 6 (fontified t) 6 28 (face font-lock-type-face fontified t) 28 29 (fontified t) 29 30 (face (rainbow-delimiters-depth-4-face) fontified t) 30 47 (fontified t) 47 52 (face font-lock-variable-name-face fontified t) 52 54 (fontified t) 54 58 (face font-lock-type-face fontified t) 58 59 (face (rainbow-delimiters-depth-5-face) fontified t) 59 73 (face font-lock-string-face fontified t) 73 74 (face (rainbow-delimiters-depth-5-face) fontified t) 74 92 (fontified t) 92 98 (face font-lock-variable-name-face fontified t) 98 100 (fontified t) 100 104 (face font-lock-constant-face fontified t) 104 106 (fontified t) 106 118 (face font-lock-type-face fontified t) 118 120 (fontified t) 120 124 (face font-lock-type-face fontified t) 124 125 (face (rainbow-delimiters-depth-5-face) fontified t) 125 137 (face font-lock-preprocessor-face fontified t) 137 138 (face (rainbow-delimiters-depth-6-face) fontified t) 138 150 (face font-lock-string-face fontified t) 150 151 (face (rainbow-delimiters-depth-6-face) fontified t) 151 156 (fontified t) 156 157 (face (rainbow-delimiters-depth-6-face) fontified t) 157 158 (face (rainbow-delimiters-depth-6-face) fontified t) 158 159 (face (rainbow-delimiters-depth-5-face) fontified t) 159 160 (fontified t)) . -11377) (undo-tree-id179 . -160) (undo-tree-id180 . -160) (undo-tree-id181 . -1) (undo-tree-id182 . -2) (undo-tree-id183 . -3) (undo-tree-id184 . -4) (undo-tree-id185 . -7) (undo-tree-id186 . -9) (undo-tree-id187 . -12) (undo-tree-id188 . -15) (undo-tree-id189 . -73) (undo-tree-id190 . -75) (undo-tree-id191 . -132) (undo-tree-id192 . -133) (undo-tree-id193 . -134) (undo-tree-id194 . -136) (undo-tree-id195 . -137) (undo-tree-id196 . -138) (undo-tree-id197 . -139) (undo-tree-id198 . -140) (undo-tree-id199 . -141) (undo-tree-id200 . -142) (undo-tree-id201 . -143) (undo-tree-id202 . -142) (undo-tree-id203 . -141) (undo-tree-id204 . -140) (undo-tree-id205 . -139) (undo-tree-id206 . -137) (undo-tree-id207 . -136) (undo-tree-id208 . -137) (undo-tree-id209 . -138) (undo-tree-id210 . -141) (undo-tree-id211 . -144) (undo-tree-id212 . -146) (undo-tree-id213 . -148) (undo-tree-id214 . -150) (undo-tree-id215 . -151) (undo-tree-id216 . -152) (undo-tree-id217 . -153) (undo-tree-id218 . -154) (undo-tree-id219 . -155) (undo-tree-id220 . -156) (undo-tree-id221 . -157) (undo-tree-id222 . -158) (undo-tree-id223 . -159) (undo-tree-id224 . -160) (undo-tree-id225 . -76) (undo-tree-id226 . -160) (undo-tree-id227 . -160) (undo-tree-id228 . -160) (undo-tree-id229 . -160) (undo-tree-id230 . -160) (undo-tree-id231 . -160) (undo-tree-id232 . -160) (undo-tree-id233 . -160) 11537 (t 26015 33854 393557 760000)) nil (26015 33890 173730 0) 0 nil])
([nil nil ((11377 . 11379)) nil (26015 33890 173674 0) 0 nil])
([nil nil ((11377 . 11381) (#("wp" 0 2 (fontified nil)) . 11377) (11377 . 11379) (#("wgpu" 0 4 (fontified nil)) . -11377) (11377 . 11381) (#("wp" 0 2 (fontified t)) . -11377) (undo-tree-id170 . -2) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -2) (undo-tree-id175 . -2) (undo-tree-id176 . -2) (undo-tree-id177 . -2) (undo-tree-id178 . -2) 11379) nil (26015 33890 173672 0) 0 nil])
([nil nil ((11381 . 11387)) nil (26015 33890 173661 0) 0 nil])
([nil nil ((apply yas--snippet-revive 11383 11398 #s(yas--snippet nil nil #s(yas--exit 11397 nil) 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 11397 nil) 0 nil nil nil nil)) (11383 . 11398) (#("include_wgsl!($0)" 0 17 (fontified nil)) . 11383) (11383 . 11400) (#("incl" 0 4 (fontified nil)) . 11383) (11383 . 11387) (#("include_wgsl!(…)" 0 16 (fontified nil)) . -11383) (11383 . 11399) (#("incl" 0 4 (fontified t)) . -11383) (undo-tree-id157 . -4) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -2) (undo-tree-id162 . -2) (undo-tree-id163 . -3) (undo-tree-id164 . -3) (undo-tree-id165 . -4) (undo-tree-id166 . -4) (undo-tree-id167 . -4) (undo-tree-id168 . -4) (undo-tree-id169 . -4) 11387) nil (26015 33890 173659 0) 0 nil])
([nil nil ((11397 . 11399)) nil (26015 33890 173636 0) 0 nil])
([nil nil ((11398 . 11404)) nil (26015 33890 173635 0) 0 nil])
([nil nil ((11404 . 11408)) nil (26015 33890 173634 0) 0 nil])
([nil nil ((11410 . 11411)) nil (26015 33890 173629 0) 0 nil])
([nil nil ((#("
        // lib.rs
        let light_render_pipeline = {
            let layout = device.create_pipeline_layout(&wgpu::PipelineLayoutDescriptor {
                label: Some(\"Light Pipeline Layout\"),
                bind_group_layouts: &[&camera_bind_group_layout, &light_bind_group_layout],
                push_constant_ranges: &[],
            });
            let shader = wgpu::include_wgsl!(\"light.wgsl\");
            };
            create_render_pipeline(
                &device,
                &layout,
                config.format,
                Some(texture::Texture::DEPTH_FORMAT),
                &[model::ModelVertex::desc()],
                shader,
            )
        };
" 0 1 (fontified t) 1 9 (fontified t) 9 12 (face font-lock-comment-delimiter-face fontified t) 12 19 (face font-lock-comment-face fontified t) 19 27 (fontified t) 27 30 (face font-lock-keyword-face fontified t) 30 31 (fontified t) 31 52 (face font-lock-variable-name-face fontified t) 52 55 (fontified t) 55 56 (face (rainbow-delimiters-depth-3-face) fontified t) 56 69 (fontified t) 69 72 (face font-lock-keyword-face fontified t) 72 73 (fontified t) 73 79 (face font-lock-variable-name-face fontified t) 79 111 (fontified t) 111 112 (face (rainbow-delimiters-depth-4-face) fontified t) 112 113 (face rust-ampersand-face fontified t) 113 117 (face font-lock-constant-face fontified t) 117 119 (fontified t) 119 143 (face font-lock-type-face fontified t) 143 144 (fontified t) 144 145 (face (rainbow-delimiters-depth-5-face) fontified t) 145 162 (fontified t) 162 167 (face font-lock-variable-name-face fontified t) 167 169 (fontified t) 169 173 (face font-lock-type-face fontified t) 173 174 (face (rainbow-delimiters-depth-6-face) fontified t) 174 197 (face font-lock-string-face fontified t) 197 198 (face (rainbow-delimiters-depth-6-face) fontified t) 198 216 (fontified t) 216 234 (face font-lock-variable-name-face fontified t) 234 236 (fontified t) 236 237 (face rust-ampersand-face fontified t) 237 238 (face (rainbow-delimiters-depth-6-face) fontified t) 238 239 (face rust-ampersand-face fontified t) 239 265 (fontified t) 265 266 (face rust-ampersand-face fontified t) 266 289 (fontified t) 289 290 (face (rainbow-delimiters-depth-6-face) fontified t) 290 308 (fontified t) 308 328 (face font-lock-variable-name-face fontified t) 328 330 (fontified t) 330 331 (face rust-ampersand-face fontified t) 331 332 (face (rainbow-delimiters-depth-6-face) fontified t) 332 333 (face (rainbow-delimiters-depth-6-face) fontified t) 333 347 (fontified t) 347 348 (face (rainbow-delimiters-depth-5-face) fontified t) 348 349 (face (rainbow-delimiters-depth-4-face) fontified t) 349 351 (fontified t) 351 363 (fontified t) 363 366 (face font-lock-keyword-face fontified t) 366 367 (fontified t) 367 373 (face font-lock-variable-name-face fontified t) 373 376 (fontified t) 376 380 (face font-lock-constant-face fontified t) 380 382 (fontified t) 382 395 (face font-lock-preprocessor-face fontified t) 395 396 (face (rainbow-delimiters-depth-4-face) fontified t) 396 408 (face font-lock-string-face fontified t) 408 409 (face (rainbow-delimiters-depth-4-face) fontified t) 409 410 (fontified t) 410 411 (fontified t) 411 423 (fontified t) 423 424 (face (rainbow-delimiters-depth-3-face) fontified t) 424 438 (fontified t) 438 460 (fontified t) 460 461 (face (rainbow-delimiters-depth-3-face) fontified t) 461 478 (fontified t) 478 479 (face rust-ampersand-face fontified t) 479 503 (fontified t) 503 504 (face rust-ampersand-face fontified t) 504 528 (fontified t) 528 559 (fontified t) 559 563 (face font-lock-type-face fontified t) 563 564 (face (rainbow-delimiters-depth-4-face) fontified t) 564 571 (face font-lock-constant-face fontified t) 571 573 (fontified t) 573 580 (face font-lock-type-face fontified t) 580 582 (fontified t) 582 594 (face font-lock-type-face fontified t) 594 595 (face (rainbow-delimiters-depth-4-face) fontified t) 595 613 (fontified t) 613 614 (face rust-ampersand-face fontified t) 614 615 (face (rainbow-delimiters-depth-4-face) fontified t) 615 620 (face font-lock-constant-face fontified t) 620 622 (fontified t) 622 633 (face font-lock-type-face fontified t) 633 639 (fontified t) 639 640 (face (rainbow-delimiters-depth-5-face) fontified t) 640 641 (face (rainbow-delimiters-depth-5-face) fontified t) 641 642 (face (rainbow-delimiters-depth-4-face) fontified t) 642 660 (fontified t) 660 680 (fontified t) 680 681 (face (rainbow-delimiters-depth-3-face) fontified t) 681 690 (fontified t) 690 691 (face (rainbow-delimiters-depth-2-face) fontified t) 691 692 (fontified t) 692 693 (fontified t rear-nonsticky t)) . 11001) (undo-tree-id298 . -693) (undo-tree-id299 . -9) (undo-tree-id300 . -376) (undo-tree-id301 . -376) (undo-tree-id302 . -376) (undo-tree-id303 . -376) (undo-tree-id304 . -376) (undo-tree-id305 . -376) (undo-tree-id306 . -376) (undo-tree-id307 . -376) (undo-tree-id308 . -376) (undo-tree-id309 . -376) (undo-tree-id310 . -376) (undo-tree-id311 . -376) (undo-tree-id312 . -376) (undo-tree-id313 . -376) (undo-tree-id314 . -376) (undo-tree-id315 . -376) (undo-tree-id316 . -376) (undo-tree-id317 . -376) (undo-tree-id318 . -376) (undo-tree-id319 . -376) (undo-tree-id320 . -376) (undo-tree-id321 . -376) (undo-tree-id322 . -376) (undo-tree-id323 . -376) (undo-tree-id324 . -376) (undo-tree-id325 . -376) (undo-tree-id326 . -376) (undo-tree-id327 . -376) (undo-tree-id328 . -376) (undo-tree-id329 . -376) (undo-tree-id330 . -376) (undo-tree-id331 . -376) (undo-tree-id332 . -376) (undo-tree-id333 . -376) (undo-tree-id334 . -376) (undo-tree-id335 . -376) (undo-tree-id336 . -376) (undo-tree-id337 . -376) (undo-tree-id338 . -376) (undo-tree-id339 . -376) (undo-tree-id340 . -376) (undo-tree-id341 . -376) (undo-tree-id342 . -376) (undo-tree-id343 . -376) (undo-tree-id344 . -376) (undo-tree-id345 . -376) (undo-tree-id346 . -376) (undo-tree-id347 . -376) (undo-tree-id348 . -376) (undo-tree-id349 . -376) (undo-tree-id350 . -376) (undo-tree-id351 . -376) (undo-tree-id352 . -376) (undo-tree-id353 . -376) (undo-tree-id354 . -376) (undo-tree-id355 . -376) (undo-tree-id356 . -376) (undo-tree-id357 . -376) (undo-tree-id358 . -376) (undo-tree-id359 . -376) (undo-tree-id360 . -376) (undo-tree-id361 . -376) (undo-tree-id362 . -382) (undo-tree-id363 . -382) (undo-tree-id364 . -382) (undo-tree-id365 . -382) (undo-tree-id366 . -382) (undo-tree-id367 . -382) (undo-tree-id368 . -382) (undo-tree-id369 . -382) (undo-tree-id370 . -382) (undo-tree-id371 . -382) (undo-tree-id372 . -382) (undo-tree-id373 . -382) (undo-tree-id374 . 286) (undo-tree-id375 . -410) (undo-tree-id376 . -410) (undo-tree-id377 . -410) (undo-tree-id378 . -410) (undo-tree-id379 . -410) (undo-tree-id380 . -410) (undo-tree-id381 . -410) (undo-tree-id382 . -410) (undo-tree-id383 . -410) (undo-tree-id384 . -410) (undo-tree-id385 . -410) (undo-tree-id386 . -410) (undo-tree-id387 . -410) (undo-tree-id388 . -410) (undo-tree-id389 . -410) (undo-tree-id390 . -410) (undo-tree-id391 . -410) (undo-tree-id392 . -410) (undo-tree-id393 . -410) (undo-tree-id394 . -410) (undo-tree-id395 . -410) (undo-tree-id396 . -410) (undo-tree-id397 . -410) (undo-tree-id398 . -410) (undo-tree-id399 . -410) (undo-tree-id400 . -410) (undo-tree-id401 . -410) (undo-tree-id402 . -55) (undo-tree-id403 . -55) (undo-tree-id404 . -55) (undo-tree-id405 . -55) (undo-tree-id406 . -55) (undo-tree-id407 . -55) (undo-tree-id408 . -55) (undo-tree-id409 . -55) (undo-tree-id410 . -55) (undo-tree-id411 . -55) (undo-tree-id412 . -55) (undo-tree-id413 . -55) (undo-tree-id414 . -55) (undo-tree-id415 . -55) (undo-tree-id416 . -55) (undo-tree-id417 . -55) (undo-tree-id418 . -693) (undo-tree-id419 . -693) (undo-tree-id420 . -693) (undo-tree-id421 . -693) (undo-tree-id422 . -693) (undo-tree-id423 . -693) (undo-tree-id424 . -693) (undo-tree-id425 . -693) (undo-tree-id426 . -693) (undo-tree-id427 . -693) (undo-tree-id428 . -692) (undo-tree-id429 . -692) (undo-tree-id430 . -692) (undo-tree-id431 . -692) (undo-tree-id432 . -692) (undo-tree-id433 . -692) (undo-tree-id434 . -692) (undo-tree-id435 . -692) (undo-tree-id436 . -692) (undo-tree-id437 . -692) (undo-tree-id438 . -692) (undo-tree-id439 . -692) (undo-tree-id440 . -693) (undo-tree-id441 . -693) (undo-tree-id442 . -693) (undo-tree-id443 . -657) (undo-tree-id444 . -498) (undo-tree-id445 . -436) (undo-tree-id446 . -420) (undo-tree-id447 . -343) (undo-tree-id448 . -207) (undo-tree-id449 . -25) (undo-tree-id450 . -6) (undo-tree-id451 . -6) (undo-tree-id452 . -6) (undo-tree-id453 . -6) (undo-tree-id454 . -6) (undo-tree-id455 . -693) (undo-tree-id456 . -376) (undo-tree-id457 . -693) 11007 (t 26015 33890 179487 341000)) nil (26015 33937 829089 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 11658 . 11659) (nil fontified nil 11001 . 11659) (11001 . 11659)) nil (26015 33937 828926 0) 0 nil])
([nil nil ((11808 . 11816) (11794 . 11806) (#("    " 0 4 (fontified t)) . 11794) (undo-tree-id295 . -3) (11770 . 11786) (#("        " 0 8 (fontified t)) . 11770) (11723 . 11739) (#("        " 0 8 (fontified t)) . 11723) (11669 . 11685) (#("        " 0 8 (fontified t)) . 11669) (undo-tree-id296 . -2) (11638 . 11654) (#("        " 0 8 (fontified t)) . 11638) (11613 . 11629) (#("        " 0 8 (fontified t)) . 11613) (11588 . 11604) (#("        " 0 8 (fontified t)) . 11588) (11552 . 11564) (#("    " 0 4 (fontified t)) . 11552) (11537 . 11549) (#("    " 0 4 (fontified t)) . 11537) (11452 . 11468) (#("        " 0 8 (fontified t)) . 11452) (11407 . 11423) (#("        " 0 8 (fontified t)) . 11407) (11351 . 11363) (#("    " 0 4 (fontified t)) . 11351) (11335 . 11347) (#("    " 0 4 (fontified t)) . 11335) (11292 . 11308) (#("        " 0 8 (fontified t)) . 11292) (11200 . 11216) (#("        " 0 8 (fontified t)) . 11200) (11146 . 11162) (#("        " 0 8 (fontified t)) . 11146) (undo-tree-id297 . -1) (11057 . 11069) (#("    " 0 4 (fontified t)) . 11057) (11019 . 11027) (11001 . 11009) 11000) nil (26015 33937 828922 0) 0 nil])
([nil nil ((#(" wgpu::ShaderModuleDescriptor {
                label: Some(\"Light Shader\"),
                source: wgpu::ShaderSource::Wgsl(include_str!(\"light.wgsl\").into())," 0 1 (fontified t) 1 5 (face font-lock-constant-face fontified t) 5 7 (fontified t) 7 29 (face font-lock-type-face fontified t) 29 30 (fontified t) 30 31 (face (rainbow-delimiters-depth-4-face) fontified t) 31 48 (fontified t) 48 53 (face font-lock-variable-name-face fontified t) 53 55 (fontified t) 55 59 (face font-lock-type-face fontified t) 59 60 (face (rainbow-delimiters-depth-5-face) fontified t) 60 74 (face font-lock-string-face fontified t) 74 75 (face (rainbow-delimiters-depth-5-face) fontified t) 75 93 (fontified t) 93 99 (face font-lock-variable-name-face fontified t) 99 101 (fontified t) 101 105 (face font-lock-constant-face fontified t) 105 107 (fontified t) 107 119 (face font-lock-type-face fontified t) 119 121 (fontified t) 121 125 (face font-lock-type-face fontified t) 125 126 (face (rainbow-delimiters-depth-5-face) fontified t) 126 138 (face font-lock-preprocessor-face fontified t) 138 139 (face (rainbow-delimiters-depth-6-face) fontified t) 139 151 (face font-lock-string-face fontified t) 151 152 (face (rainbow-delimiters-depth-6-face) fontified t) 152 157 (fontified t) 157 158 (face (rainbow-delimiters-depth-6-face) fontified t) 158 159 (face (rainbow-delimiters-depth-6-face) fontified t) 159 160 (face (rainbow-delimiters-depth-5-face) fontified t) 160 161 (fontified t)) . -11375) (undo-tree-id261 . -154) (undo-tree-id262 . -161) (undo-tree-id263 . -1) (undo-tree-id264 . -5) (undo-tree-id265 . -10) (undo-tree-id266 . -13) (undo-tree-id267 . -16) (undo-tree-id268 . -19) (undo-tree-id269 . -21) (undo-tree-id270 . -23) (undo-tree-id271 . -26) (undo-tree-id272 . -29) (undo-tree-id273 . -30) (undo-tree-id274 . -31) (undo-tree-id275 . -76) (undo-tree-id276 . -152) (undo-tree-id277 . -153) (undo-tree-id278 . -154) (undo-tree-id279 . -154) (undo-tree-id280 . -154) (undo-tree-id281 . -154) (undo-tree-id282 . -154) (undo-tree-id283 . -154) (undo-tree-id284 . -154) (undo-tree-id285 . -155) (undo-tree-id286 . -156) (undo-tree-id287 . -157) (undo-tree-id288 . -158) (undo-tree-id289 . -159) (undo-tree-id290 . -160) (undo-tree-id291 . -161) (undo-tree-id292 . -77) (undo-tree-id293 . -161) (undo-tree-id294 . -161) 11536) nil (26015 33937 828907 0) 0 nil])
([nil nil ((11375 . 11376)) nil (26015 33937 828868 0) 0 nil])
([nil nil ((#("w" 0 1 (fontified t)) . -11375) (undo-tree-id259 . -1) (undo-tree-id260 . -1) 11376) nil (26015 33937 828867 0) 0 nil])
([nil nil ((11375 . 11378)) nil (26015 33937 828864 0) 0 nil])
([nil nil ((11376 . 11380) (#("wg" 0 2 (fontified nil)) . 11376) (11376 . 11378) (#("wgpu" 0 4 (fontified nil)) . -11376) (11376 . 11380) (#("wg" 0 2 (fontified t)) . -11376) (undo-tree-id250 . -2) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -2) (undo-tree-id255 . -2) (undo-tree-id256 . -2) (undo-tree-id257 . -2) (undo-tree-id258 . -2) 11378) nil (26015 33937 828862 0) 0 nil])
([nil nil ((11380 . 11386)) nil (26015 33937 828851 0) 0 nil])
([nil nil ((apply yas--snippet-revive 11382 11397 #s(yas--snippet nil nil #s(yas--exit 11396 nil) 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 11396 nil) 1 nil nil nil nil)) (11382 . 11397) (#("include_wgsl!($0)" 0 17 (fontified nil)) . 11382) (11382 . 11399) (#("incl" 0 4 (fontified nil)) . 11382) (11382 . 11386) (#("include_wgsl!(…)" 0 16 (fontified nil)) . -11382) (11382 . 11398) (#("incl" 0 4 (fontified t)) . -11382) (undo-tree-id234 . -4) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -2) (undo-tree-id239 . -2) (undo-tree-id240 . -3) (undo-tree-id241 . -3) (undo-tree-id242 . -3) (undo-tree-id243 . -3) (undo-tree-id244 . -4) (undo-tree-id245 . -4) (undo-tree-id246 . -4) (undo-tree-id247 . -4) (undo-tree-id248 . -4) (undo-tree-id249 . -4) 11386) nil (26015 33937 828848 0) 0 nil])
([nil nil ((11396 . 11398)) nil (26015 33937 828819 0) 0 nil])
([nil nil ((11397 . 11407)) nil (26015 33937 828817 0) 0 nil])
([nil nil ((11409 . 11410)) nil (26015 33937 828813 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -11420) (#("            " 0 12 (fontified nil)) . 11411) (11411 . 11423) (11411 . 11412) (t 26015 33937 835708 705000)) nil (26015 33943 651273 0) 0 nil])
([nil nil ((#("};" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 2 (fontified t)) . 11420) (undo-tree-id459 . -2) (undo-tree-id460 . -2) (undo-tree-id461 . -2) (undo-tree-id462 . -2) (undo-tree-id463 . -2) (undo-tree-id464 . -2) (undo-tree-id465 . -2) (undo-tree-id466 . -2) (undo-tree-id467 . -2) (undo-tree-id468 . -2) (undo-tree-id469 . -2) (undo-tree-id470 . -2)) nil (26015 33943 651270 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 11420) (undo-tree-id458 . -1)) nil (26015 33943 651255 0) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -11424) 11420 (t 26015 33943 658025 428000)) nil (26015 33945 388596 0) 0 nil])
([nil nil ((14918 . 14927) (t 26015 33945 395355 314000)) nil (26015 34147 258160 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -14919) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (#(" " 0 1 (fontified t)) . -14920) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (#(" " 0 1 (fontified t)) . -14921) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (#(" " 0 1 (fontified t)) . -14922) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (#(" " 0 1 (fontified t)) . -14923) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (#(" " 0 1 (fontified t)) . -14924) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (#(" " 0 1 (fontified t)) . -14925) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (#(" " 0 1 (fontified t)) . -14926) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) 14927) nil (26015 34147 258155 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 14919) (undo-tree-id528 . -1)) nil (26015 34147 258105 0) 0 nil])
([nil nil ((#("        
" 0 9 (fontified t)) . 14919) (undo-tree-id526 . -8) (undo-tree-id527 . -9)) nil (26015 34147 258102 0) 0 nil])
([nil nil ((14994 . 15002) (#("        " 0 8 (fontified nil)) . 14993) (undo-tree-id523 . -8) (undo-tree-id524 . -8) (undo-tree-id525 . -8) (14992 . 15002)) nil (26015 34147 258099 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 15011 . 15012) (nil fontified nil 15003 . 15012) (nil fontified nil 15002 . 15003) (15002 . 15012)) nil (26015 34147 258095 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 15021 . 15022) (nil fontified nil 15013 . 15022) (nil fontified nil 15012 . 15013) (15012 . 15022)) nil (26015 34147 258093 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 15031 . 15032) (nil fontified nil 15023 . 15032) (nil fontified nil 15022 . 15023) (15022 . 15032)) nil (26015 34147 258091 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -15027) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (#(" " 0 1 (fontified t)) . -15028) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (#(" " 0 1 (fontified t)) . -15029) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (#(" " 0 1 (fontified t)) . -15030) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (#("
" 0 1 (rear-nonsticky t fontified t)) . -15031) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) 15032) nil (26015 34147 258088 0) 0 nil])
([nil nil ((#("        
" 0 8 (fontified t) 8 9 (rear-nonsticky t fontified t)) . 15003) (undo-tree-id492 . -9) (undo-tree-id493 . -9) (undo-tree-id494 . -9) (undo-tree-id495 . -9) (undo-tree-id496 . -9)) nil (26015 34147 258062 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 15003) (undo-tree-id491 . -1)) nil (26015 34147 258056 0) 0 nil])
([nil nil ((#("        
" 0 8 (fontified t) 8 9 (rear-nonsticky t fontified t)) . 15003) (undo-tree-id484 . -9) (undo-tree-id485 . -9) (undo-tree-id486 . -9) (undo-tree-id487 . -9) (undo-tree-id488 . -9) (undo-tree-id489 . -9) (undo-tree-id490 . -9)) nil (26015 34147 258053 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 15003) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1)) nil (26015 34147 258045 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 15276 . 15277) (nil fontified nil 15003 . 15277) (15003 . 15277)) nil (26015 34147 258040 0) 0 nil])
([nil nil ((15278 . 15286) (#("    " 0 4 (face font-lock-comment-face fontified nil)) . 15278) (undo-tree-id471 . -4) (undo-tree-id472 . -4) (undo-tree-id473 . -4) (undo-tree-id474 . -4) (undo-tree-id475 . -4) (undo-tree-id476 . -4) (undo-tree-id477 . -4) (undo-tree-id478 . -4) (undo-tree-id479 . -4) (15277 . 15278)) nil (26015 34147 258036 0) 0 nil])
([nil nil ((12201 . 12214) (t 26015 34147 265858 249000)) nil (26015 34181 829166 0) 0 nil])
([nil nil ((12214 . 12216)) nil (26015 34181 829165 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -12213) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (#("l" 0 1 (fontified t)) . -12214) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (#("i" 0 1 (fontified t)) . -12215) (undo-tree-id648 . -1) (undo-tree-id649 . -1) 12216) nil (26015 34181 829163 0) 0 nil])
([nil nil ((3547 . 3552)) nil (26015 34181 829149 0) 0 nil])
([nil nil ((3552 . 3553)) nil (26015 34181 829148 0) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -3552) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) 3553) nil (26015 34181 829147 0) 0 nil])
([nil nil ((3552 . 3573)) nil (26015 34181 829143 0) 0 nil])
([nil nil ((3573 . 3577)) nil (26015 34181 829142 0) 0 nil])
([nil nil ((3575 . 3579) (#("wp" 0 2 (fontified nil)) . 3575) (3575 . 3577) (#("wgpu" 0 4 (fontified nil)) . -3575) (3575 . 3579) (#("wp" 0 2 (fontified t)) . -3575) (undo-tree-id623 . -2) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -2) (undo-tree-id630 . -2) (undo-tree-id631 . -2) (undo-tree-id632 . -2) (undo-tree-id633 . -2) 3577) nil (26015 34181 829140 0) 0 nil])
([nil nil ((3579 . 3584)) nil (26015 34181 829128 0) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-type-face fontified t)) . -3583) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) 3584) nil (26015 34181 829126 0) 0 nil])
([nil nil ((3583 . 3584)) nil (26015 34181 829119 0) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-type-face fontified t)) . -3583) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) 3584) nil (26015 34181 829118 0) 0 nil])
([nil nil ((3583 . 3588)) nil (26015 34181 829113 0) 0 nil])
([nil nil ((3581 . 3595) (#("RenderP" 0 7 (fontified nil)) . 3581) (3581 . 3588) (#("RenderPipeline" 0 14 (fontified nil)) . -3581) (3581 . 3595) (#("RenderP" 0 7 (face font-lock-type-face fontified t)) . -3581) (undo-tree-id581 . -7) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -2) (undo-tree-id585 . -2) (undo-tree-id586 . -2) (undo-tree-id587 . -2) (undo-tree-id588 . -2) (undo-tree-id589 . -2) (undo-tree-id590 . -2) (undo-tree-id591 . -2) (undo-tree-id592 . -2) (undo-tree-id593 . -2) (undo-tree-id594 . -2) (undo-tree-id595 . -2) (undo-tree-id596 . -2) (undo-tree-id597 . -2) (undo-tree-id598 . -2) (undo-tree-id599 . -3) (undo-tree-id600 . -3) (undo-tree-id601 . -4) (undo-tree-id602 . -4) (undo-tree-id603 . -5) (undo-tree-id604 . -6) (undo-tree-id605 . -6) (undo-tree-id606 . -6) (undo-tree-id607 . -7) (undo-tree-id608 . -7) (undo-tree-id609 . -7) (undo-tree-id610 . -7) (undo-tree-id611 . -7) (undo-tree-id612 . -7) 3588) nil (26015 34181 829109 0) 0 nil])
([nil nil ((3595 . 3596)) nil (26015 34181 829068 0) 0 nil])
([nil nil ((12250 . 12263) (t 26015 34181 836495 327000)) nil (26015 34187 955539 0) 0 nil])
([nil nil ((12263 . 12264)) nil (26015 34187 955538 0) 0 nil])
([nil nil ((12263 . 12284) (#("l" 0 1 (fontified nil)) . 12263) (12263 . 12264) (#("light_render_pipeline" 0 21 (fontified nil)) . -12263) (12263 . 12284) (#("l" 0 1 (fontified t)) . -12263) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) 12264) nil (26015 34187 955535 0) 0 nil])
([nil nil ((12284 . 12285)) nil (26015 34187 955518 0) 0 nil])
([nil nil ((11287 . 11308) (t 26015 34187 962940 622000)) nil (26015 34363 637298 0) 0 nil])
([nil nil ((11335 . 11355) (#(" " 0 1 (fontified nil)) . 11334) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (11335 . 11336)) nil (26015 34363 637296 0) 0 nil])
([nil nil ((11379 . 11396)) nil (26015 34363 637277 0) 0 nil])
([nil nil ((9996 . 9998) (t 26015 34363 644813 776000)) nil (26015 34387 726273 0) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -9996) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -9997) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) 9998 (t 26015 34387 734378 293000)) nil (26015 34397 966183 0) 0 nil])
([nil nil ((15156 . 15157) (t 26015 34397 973363 76000)) nil (26015 34611 580644 0) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -15156) (undo-tree-id724 . -1) (undo-tree-id725 . -1) 15157) nil (26015 34611 580643 0) 0 nil])
([nil nil ((15156 . 15160)) nil (26015 34611 580640 0) 0 nil])
([nil nil ((apply yas--snippet-revive 15156 15163 #s(yas--snippet nil nil #s(yas--exit 15162 nil) 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 15162 nil) 2 nil nil nil nil)) (15156 . 15163) (#("info!($0)" 0 9 (fontified nil)) . 15156) (15156 . 15165) (#("info" 0 4 (fontified nil)) . 15156) (15156 . 15160) (#("info!(…)" 0 8 (fontified nil)) . -15156) (15156 . 15164) (#("info" 0 4 (fontified t)) . -15156) (undo-tree-id714 . -4) (undo-tree-id715 . -1) (undo-tree-id716 . -2) (undo-tree-id717 . -2) (undo-tree-id718 . -3) (undo-tree-id719 . -3) (undo-tree-id720 . -4) (undo-tree-id721 . -4) (undo-tree-id722 . -4) (undo-tree-id723 . -4) 15160) nil (26015 34611 580638 0) 0 nil])
([nil nil ((15162 . 15164)) nil (26015 34611 580624 0) 0 nil])
([nil nil ((15163 . 15168)) nil (26015 34611 580623 0) 0 nil])
([nil nil ((15168 . 15189)) nil (26015 34611 580622 0) 0 nil])
([nil nil ((15189 . 15190)) nil (26015 34611 580621 0) 0 nil])
([nil nil ((#("g" 0 1 (face font-lock-string-face fontified t)) . -15189) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) 15190) nil (26015 34611 580620 0) 0 nil])
([nil nil ((15189 . 15190)) nil (26015 34611 580605 0) 0 nil])
([nil nil ((15192 . 15193)) nil (26015 34611 580601 0) 0 nil])
([nil nil ((15470 . 15478) (#("        " 0 8 (fontified nil)) . 15469) (undo-tree-id765 . -8) (undo-tree-id766 . -8) (undo-tree-id767 . -8) (undo-tree-id768 . -8) (undo-tree-id769 . -8) (undo-tree-id770 . -8) (undo-tree-id771 . -8) (undo-tree-id772 . -8) (undo-tree-id773 . -8) (undo-tree-id774 . -8) (15477 . 15478) (t 26015 34611 588029 960000)) nil (26015 34691 917332 0) 0 nil])
([nil nil ((15478 . 15482)) nil (26015 34691 917321 0) 0 nil])
([nil nil ((apply yas--snippet-revive 15478 15485 #s(yas--snippet nil nil #s(yas--exit 15484 nil) 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 15484 nil) 3 nil nil nil nil)) (15478 . 15485) (#("info!($0)" 0 9 (fontified nil)) . 15478) (15478 . 15487) (#("info" 0 4 (fontified nil)) . 15478) (15478 . 15482) (#("info!(…)" 0 8 (fontified nil)) . -15478) (15478 . 15486) (#("info" 0 4 (fontified t)) . -15478) (undo-tree-id757 . -4) (undo-tree-id758 . -1) (undo-tree-id759 . -2) (undo-tree-id760 . -2) (undo-tree-id761 . -3) (undo-tree-id762 . -3) (undo-tree-id763 . -4) (undo-tree-id764 . -4) 15482) nil (26015 34691 917319 0) 0 nil])
([nil nil ((15484 . 15486)) nil (26015 34691 917308 0) 0 nil])
([nil nil ((15485 . 15490)) nil (26015 34691 917307 0) 0 nil])
([nil nil ((#("        render_pass.set_pipeline(&self.render_pipeline); // 2." 0 32 (fontified t) 32 33 (face (rainbow-delimiters-depth-3-face) fontified t) 33 34 (face rust-ampersand-face fontified t) 34 38 (face font-lock-keyword-face fontified t) 38 54 (fontified t) 54 55 (face (rainbow-delimiters-depth-3-face) fontified t) 55 57 (fontified t) 57 60 (face font-lock-comment-delimiter-face fontified t) 60 62 (face font-lock-comment-face fontified t)) . 15010) (undo-tree-id750 . -62) (undo-tree-id751 . -62) (undo-tree-id752 . -62) (undo-tree-id753 . -62) (undo-tree-id754 . -62) (undo-tree-id755 . -62) (undo-tree-id756 . -62)) nil (26015 34691 917306 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 15010) (undo-tree-id748 . -1) (undo-tree-id749 . -1)) nil (26015 34691 917298 0) 0 nil])
([nil nil ((15429 . 15442)) nil (26015 34691 917296 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 15504 . 15505) (nil fontified nil 15504 . 15505) (nil fontified nil 15502 . 15504) (nil fontified nil 15499 . 15502) (nil fontified nil 15497 . 15499) (nil fontified nil 15496 . 15497) (nil fontified nil 15480 . 15496) (nil fontified nil 15476 . 15480) (nil fontified nil 15475 . 15476) (nil fontified nil 15474 . 15475) (nil fontified nil 15442 . 15474) (15442 . 15505)) nil (26015 34691 917294 0) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -15442) 15470) nil (26015 34691 917290 0) 0 nil])
([nil nil ((#("
" 0 1 (face font-lock-comment-face rear-nonsticky t fontified t)) . -15496) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) 15497) nil (26015 34691 917288 0) 0 nil])
([nil nil ((15429 . 15430)) nil (26015 34691 917267 0) 0 nil])
([nil nil ((15427 . 15438)) nil (26015 34691 917266 0) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-string-face fontified t)) . -15437) (undo-tree-id728 . -1) (undo-tree-id729 . -1) 15438) nil (26015 34691 917264 0) 0 nil])
([nil nil ((15437 . 15449)) nil (26015 34691 917261 0) 0 nil])
([nil nil ((#("g" 0 1 (face font-lock-string-face fontified t)) . -15448) (undo-tree-id726 . -1) (undo-tree-id727 . -1) 15449) nil (26015 34691 917259 0) 0 nil])
([nil nil ((15448 . 15449)) nil (26015 34691 917246 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -15461) (undo-tree-id775 . -4) 15480 (t 26015 34691 924953 569000)) nil (26015 34693 923314 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 8628 . 8629) (nil fontified nil 8599 . 8629) (8599 . 8629) (t 26015 34693 931229 884000)) nil (26015 37160 302259 0) 0 nil])
([nil nil ((8599 . 8600)) nil (26015 37160 302254 0) 0 nil])
([nil nil ((#("id()" 0 2 (fontified t) 2 3 (face (rainbow-delimiters-depth-5-face) fontified t) 3 4 (face (rainbow-delimiters-depth-5-face) fontified t)) . -16566) (undo-tree-id972 . -4) (undo-tree-id973 . -4) (undo-tree-id974 . -4) (undo-tree-id975 . -4) (undo-tree-id976 . -4) (undo-tree-id977 . -4) (undo-tree-id978 . -4) (undo-tree-id979 . -4) (undo-tree-id980 . -4) (undo-tree-id981 . -4) (undo-tree-id982 . -4) (undo-tree-id983 . -4) (undo-tree-id984 . -4) (undo-tree-id985 . -4) (undo-tree-id986 . -4) (undo-tree-id987 . -4) (undo-tree-id988 . -4) (undo-tree-id989 . -4) (undo-tree-id990 . -4) (undo-tree-id991 . -4) 16570 (t 26015 37160 311667 742000)) nil (26015 47228 968874 0) 0 nil])
([nil nil ((#("window()." 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-5-face) fontified t) 7 8 (face (rainbow-delimiters-depth-5-face) fontified t) 8 9 (fontified t)) . -16557) (undo-tree-id951 . -9) (undo-tree-id952 . -9) (undo-tree-id953 . -9) (undo-tree-id954 . -9) (undo-tree-id955 . -9) (undo-tree-id956 . -9) (undo-tree-id957 . -9) (undo-tree-id958 . -9) (undo-tree-id959 . -9) (undo-tree-id960 . -9) (undo-tree-id961 . -9) (undo-tree-id962 . -9) (undo-tree-id963 . -9) (undo-tree-id964 . -9) (undo-tree-id965 . -9) (undo-tree-id966 . -9) (undo-tree-id967 . -9) (undo-tree-id968 . -9) (undo-tree-id969 . -9) (undo-tree-id970 . -9) (undo-tree-id971 . -9) 16566) nil (26015 47228 968852 0) 0 nil])
([nil nil ((#("state." 0 6 (fontified t)) . -16551) (undo-tree-id929 . -6) (undo-tree-id930 . -6) (undo-tree-id931 . -6) (undo-tree-id932 . -6) (undo-tree-id933 . -6) (undo-tree-id934 . -6) (undo-tree-id935 . -6) (undo-tree-id936 . -6) (undo-tree-id937 . -6) (undo-tree-id938 . -6) (undo-tree-id939 . -6) (undo-tree-id940 . -6) (undo-tree-id941 . -6) (undo-tree-id942 . -6) (undo-tree-id943 . -6) (undo-tree-id944 . -6) (undo-tree-id945 . -6) (undo-tree-id946 . -6) (undo-tree-id947 . -6) (undo-tree-id948 . -6) (undo-tree-id949 . -6) (undo-tree-id950 . -6) 16557) nil (26015 47228 968830 0) 0 nil])
([nil nil ((#("id == " 0 6 (fontified t)) . -16545) (undo-tree-id906 . -6) (undo-tree-id907 . -6) (undo-tree-id908 . -6) (undo-tree-id909 . -6) (undo-tree-id910 . -6) (undo-tree-id911 . -6) (undo-tree-id912 . -6) (undo-tree-id913 . -6) (undo-tree-id914 . -6) (undo-tree-id915 . -6) (undo-tree-id916 . -6) (undo-tree-id917 . -6) (undo-tree-id918 . -6) (undo-tree-id919 . -6) (undo-tree-id920 . -6) (undo-tree-id921 . -6) (undo-tree-id922 . -6) (undo-tree-id923 . -6) (undo-tree-id924 . -6) (undo-tree-id925 . -6) (undo-tree-id926 . -6) (undo-tree-id927 . -6) (undo-tree-id928 . -6) 16551) nil (26015 47228 968806 0) 0 nil])
([nil nil ((#("window_" 0 7 (fontified t)) . -16538) (undo-tree-id882 . -7) (undo-tree-id883 . -7) (undo-tree-id884 . -7) (undo-tree-id885 . -7) (undo-tree-id886 . -7) (undo-tree-id887 . -7) (undo-tree-id888 . -7) (undo-tree-id889 . -7) (undo-tree-id890 . -7) (undo-tree-id891 . -7) (undo-tree-id892 . -7) (undo-tree-id893 . -7) (undo-tree-id894 . -7) (undo-tree-id895 . -7) (undo-tree-id896 . -7) (undo-tree-id897 . -7) (undo-tree-id898 . -7) (undo-tree-id899 . -7) (undo-tree-id900 . -7) (undo-tree-id901 . -7) (undo-tree-id902 . -7) (undo-tree-id903 . -7) (undo-tree-id904 . -7) (undo-tree-id905 . -7) 16545) nil (26015 47228 968781 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -16534) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (#("i" 0 1 (fontified t)) . -16535) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -16536) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (#(" " 0 1 (fontified t)) . -16537) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) 16538) nil (26015 47228 968750 0) 0 nil])
([nil nil ((#("                window_id," 0 26 (fontified t)) . 16494) (undo-tree-id1002 . -26) (undo-tree-id1003 . -26) (undo-tree-id1004 . -26) (undo-tree-id1005 . -26) (undo-tree-id1006 . -26) (undo-tree-id1007 . -26) (undo-tree-id1008 . -26) (undo-tree-id1009 . -26) (undo-tree-id1010 . -26) (undo-tree-id1011 . -26) (t 26015 47228 979801 284000)) nil (26015 47237 93797 0) 0 nil])
([nil nil ((16494 . 16510)) nil (26015 47237 93785 0) 0 nil])
([nil nil ((16510 . 16512)) nil (26015 47237 93783 0) 0 nil])
([nil nil ((#("。" 0 1 (fontified t)) . -16510) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (#("。" 0 1 (fontified t)) . -16511) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) 16512) nil (26015 47237 93781 0) 0 nil])
([nil nil ((16510 . 16512)) nil (26015 47470 437095 0) 0 nil])
([nil nil ((#("    camera: Camera,
    camera_controller: CameraController," 0 4 (fontified t) 4 10 (face font-lock-variable-name-face fontified t) 10 12 (fontified t) 12 18 (face font-lock-type-face fontified t) 18 24 (fontified t) 24 41 (face font-lock-variable-name-face fontified t) 41 43 (fontified t) 43 59 (face font-lock-type-face fontified t) 59 60 (fontified t)) . 3273) (undo-tree-id1114 . -60) (undo-tree-id1115 . -19) (undo-tree-id1116 . -19) (undo-tree-id1117 . -19) (undo-tree-id1118 . -19) (undo-tree-id1119 . -19) (undo-tree-id1120 . -60) (undo-tree-id1121 . -60) (undo-tree-id1122 . -60) (undo-tree-id1123 . -59) (undo-tree-id1124 . -50) (undo-tree-id1125 . -45) (undo-tree-id1126 . -40) (undo-tree-id1127 . -36) (undo-tree-id1128 . -33) (undo-tree-id1129 . -30) (undo-tree-id1130 . -29) (undo-tree-id1131 . -7) (undo-tree-id1132 . -6) (undo-tree-id1133 . -5) (undo-tree-id1134 . -4) (undo-tree-id1135 . -3) (undo-tree-id1136 . -2) (undo-tree-id1137 . -60) (t 26015 47471 876906 897000)) nil (26015 48076 886650 0) 0 nil] [nil nil ((17457 . 17478) (t 26015 47237 101366 18000)) ((#("
                    " 0 1 (fontified t) 1 21 (fontified t)) . 17457) (undo-tree-id1083 . -21) (undo-tree-id1084 . -21) (undo-tree-id1085 . -21) (undo-tree-id1086 . -21) (undo-tree-id1087 . -21) (undo-tree-id1088 . -21) (undo-tree-id1089 . -21) (undo-tree-id1090 . -21) (undo-tree-id1091 . -21) (undo-tree-id1092 . -21) (undo-tree-id1093 . -21) (undo-tree-id1094 . -21) (undo-tree-id1095 . -21) (undo-tree-id1096 . -21) (undo-tree-id1097 . -21) (undo-tree-id1098 . -21) (undo-tree-id1099 . -21) (undo-tree-id1100 . -21) (undo-tree-id1101 . -21) (undo-tree-id1102 . -21) (undo-tree-id1103 . -21) (undo-tree-id1104 . -21) (undo-tree-id1105 . -21) (undo-tree-id1106 . -21) (undo-tree-id1107 . -21) (undo-tree-id1108 . -21) (undo-tree-id1109 . -21) (undo-tree-id1110 . -21) (undo-tree-id1111 . -1) (undo-tree-id1112 . -21) (undo-tree-id1113 . -21)) (26015 47470 95553 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 3464 . 3465) (nil fontified nil 3273 . 3465) (3273 . 3465)) nil (26015 48076 886610 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 18092 . 18093) (nil fontified nil 18092 . 18093) (nil fontified nil 18070 . 18092) (nil fontified nil 18069 . 18070) (nil fontified nil 18066 . 18069) (nil fontified nil 18060 . 18066) (nil fontified nil 18059 . 18060) (nil fontified nil 18053 . 18059) (nil fontified nil 18051 . 18053) (nil fontified nil 18044 . 18051) (nil fontified nil 18043 . 18044) (nil fontified nil 18042 . 18043) (nil fontified nil 18040 . 18042) (nil fontified nil 18039 . 18040) (nil fontified nil 18038 . 18039) (nil fontified nil 18037 . 18038) (nil fontified nil 18034 . 18037) (nil fontified nil 18010 . 18034) (nil fontified nil 17972 . 18010) (nil fontified nil 17953 . 17972) (nil fontified nil 17936 . 17953) (nil fontified nil 17933 . 17936) (nil fontified nil 17907 . 17933) (nil fontified nil 17906 . 17907) (nil fontified nil 17905 . 17906) (nil fontified nil 17895 . 17905) (nil fontified nil 17894 . 17895) (nil fontified nil 17892 . 17894) (nil fontified nil 17891 . 17892) (nil fontified nil 17880 . 17891) (nil fontified nil 17878 . 17880) (nil fontified nil 17866 . 17878) (nil fontified nil 17864 . 17866) (nil fontified nil 17860 . 17864) (nil fontified nil 17859 . 17860) (nil fontified nil 17856 . 17859) (nil fontified nil 17832 . 17856) (nil fontified nil 17779 . 17832) (nil fontified nil 17776 . 17779) (nil fontified nil 17750 . 17776) (nil fontified nil 17749 . 17750) (nil fontified nil 17739 . 17749) (nil fontified nil 17738 . 17739) (nil fontified nil 17725 . 17738) (nil fontified nil 17724 . 17725) (nil fontified nil 17722 . 17724) (nil fontified nil 17721 . 17722) (nil fontified nil 17717 . 17721) (nil fontified nil 17715 . 17717) (nil fontified nil 17703 . 17715) (nil fontified nil 17701 . 17703) (nil fontified nil 17697 . 17701) (nil fontified nil 17696 . 17697) (nil fontified nil 17693 . 17696) (nil fontified nil 17669 . 17693) (nil fontified nil 17654 . 17669) (nil fontified nil 17637 . 17654) (nil fontified nil 17634 . 17637) (nil fontified nil 17609 . 17634) (nil fontified nil 17608 . 17609) (nil fontified nil 17607 . 17608) (nil fontified nil 17606 . 17607) (nil fontified nil 17605 . 17606) (nil fontified nil 17603 . 17605) (nil fontified nil 17602 . 17603) (nil fontified nil 17601 . 17602) (nil fontified nil 17600 . 17601) (nil fontified nil 17598 . 17600) (nil fontified nil 17573 . 17598) (nil fontified nil 17572 . 17573) (nil fontified nil 17571 . 17572) (nil fontified nil 17570 . 17571) (nil fontified nil 17565 . 17570) (nil fontified nil 17563 . 17565) (nil fontified nil 17558 . 17563) (nil fontified nil 17556 . 17558) (nil fontified nil 17552 . 17556) (nil fontified nil 17551 . 17552) (nil fontified nil 17538 . 17551) (nil fontified nil 17533 . 17538) (nil fontified nil 17513 . 17533) (nil fontified nil 17511 . 17513) (nil fontified nil 17510 . 17511) (nil fontified nil 17509 . 17510) (nil fontified nil 17492 . 17509) (nil fontified nil 17478 . 17492) (17478 . 18093)) ((#("                   state.update();
                    match state.render(wgpu::Color::BLACK) {
                        Ok(_) => {}
                        // Reconfigure the surface if lost
                        Err(wgpu::SurfaceError::Lost) => state.resize(state.size),
                        // The system is out of memory, we should probably quit
                        Err(wgpu::SurfaceError::OutOfMemory) => elwh.exit(),
                        // All other errors (Outdated, Timeout) should be resolved by the next frame
                        Err(e) => tracing::error!(\"{:?}\", e),
                    }" 0 14 (fontified nil) 14 19 (fontified nil) 19 31 (fontified nil) 31 32 (face (rainbow-delimiters-depth-7-face) fontified nil) 32 33 (face (rainbow-delimiters-depth-7-face) fontified nil) 33 35 (fontified nil) 35 55 (fontified nil) 55 60 (face font-lock-keyword-face fontified nil) 60 73 (fontified nil) 73 74 (face (rainbow-delimiters-depth-7-face) fontified nil) 74 78 (face font-lock-constant-face fontified nil) 78 80 (fontified nil) 80 85 (face font-lock-type-face fontified nil) 85 87 (fontified nil) 87 92 (face font-lock-type-face fontified nil) 92 93 (face (rainbow-delimiters-depth-7-face) fontified nil) 93 94 (fontified nil) 94 95 (face (rainbow-delimiters-depth-7-face) fontified nil) 95 96 (fontified nil) 96 120 (fontified nil) 120 122 (face font-lock-type-face fontified nil) 122 123 (face (rainbow-delimiters-depth-8-face) fontified nil) 123 124 (fontified nil) 124 125 (face (rainbow-delimiters-depth-8-face) fontified nil) 125 127 (fontified nil) 127 128 (syntax-table (1) fontified nil) 128 129 (fontified nil) 129 130 (face (rainbow-delimiters-depth-8-face) fontified nil) 130 131 (face (rainbow-delimiters-depth-8-face) fontified nil) 131 132 (fontified nil) 132 156 (fontified nil) 156 159 (face font-lock-comment-delimiter-face fontified nil) 159 176 (face font-lock-comment-face fontified nil) 176 191 (face font-lock-comment-face fontified nil) 191 215 (fontified nil) 215 218 (face font-lock-type-face fontified nil) 218 219 (face (rainbow-delimiters-depth-8-face) fontified nil) 219 223 (face font-lock-constant-face fontified nil) 223 225 (fontified nil) 225 237 (face font-lock-type-face fontified nil) 237 239 (fontified nil) 239 243 (face font-lock-type-face fontified nil) 243 244 (face (rainbow-delimiters-depth-8-face) fontified nil) 244 246 (fontified nil) 246 247 (syntax-table (1) fontified nil) 247 260 (fontified nil) 260 261 (face (rainbow-delimiters-depth-8-face) fontified nil) 261 271 (fontified nil) 271 272 (face (rainbow-delimiters-depth-8-face) fontified nil) 272 274 (fontified nil) 274 298 (fontified nil) 298 301 (face font-lock-comment-delimiter-face fontified nil) 301 354 (face font-lock-comment-face fontified nil) 354 378 (fontified nil) 378 381 (face font-lock-type-face fontified nil) 381 382 (face (rainbow-delimiters-depth-8-face) fontified nil) 382 386 (face font-lock-constant-face fontified nil) 386 388 (fontified nil) 388 400 (face font-lock-type-face fontified nil) 400 402 (fontified nil) 402 413 (face font-lock-type-face fontified nil) 413 414 (face (rainbow-delimiters-depth-8-face) fontified nil) 414 416 (fontified nil) 416 417 (syntax-table (1) fontified nil) 417 427 (fontified nil) 427 428 (face (rainbow-delimiters-depth-8-face) fontified nil) 428 429 (face (rainbow-delimiters-depth-8-face) fontified nil) 429 431 (fontified nil) 431 455 (fontified nil) 455 458 (face font-lock-comment-delimiter-face fontified nil) 458 475 (face font-lock-comment-face fontified nil) 475 494 (face font-lock-comment-face fontified nil) 494 532 (face font-lock-comment-face fontified nil) 532 556 (fontified nil) 556 559 (face font-lock-type-face fontified nil) 559 560 (face (rainbow-delimiters-depth-8-face) fontified nil) 560 561 (fontified nil) 561 562 (face (rainbow-delimiters-depth-8-face) fontified nil) 562 564 (fontified nil) 564 565 (syntax-table (1) fontified nil) 565 566 (fontified nil) 566 573 (face font-lock-constant-face fontified nil) 573 575 (fontified nil) 575 581 (face font-lock-preprocessor-face fontified nil) 581 582 (face (rainbow-delimiters-depth-8-face) fontified nil) 582 588 (face font-lock-string-face fontified nil) 588 591 (fontified nil) 591 592 (face (rainbow-delimiters-depth-8-face) fontified nil) 592 594 (fontified nil) 594 614 (fontified nil) 614 615 (face (rainbow-delimiters-depth-7-face) fontified nil rear-nonsticky nil)) . 17478) (undo-tree-id1056 . -474) (undo-tree-id1057 . -31) (undo-tree-id1058 . -474) (undo-tree-id1059 . -474) (undo-tree-id1060 . -474) (undo-tree-id1061 . -474) (undo-tree-id1062 . -474) (undo-tree-id1063 . -474) (undo-tree-id1064 . -474) (undo-tree-id1065 . -474) (undo-tree-id1066 . -474) (undo-tree-id1067 . -474) (undo-tree-id1068 . -474) (undo-tree-id1069 . -474) (undo-tree-id1070 . -474) (undo-tree-id1071 . -474) (undo-tree-id1072 . -474) (undo-tree-id1073 . -474) (undo-tree-id1074 . -474) (undo-tree-id1075 . -474) (undo-tree-id1076 . -474) (undo-tree-id1077 . -474) (undo-tree-id1078 . -474) (undo-tree-id1079 . -474) (undo-tree-id1080 . -474) (undo-tree-id1081 . -474) (undo-tree-id1082 . -31) (nil fontified t 17511 . 17513) (nil fontified t 17573 . 17574) (nil fontified t 17609 . 17610) (nil fontified t 17654 . 17669) (nil fontified t 17750 . 17752) (nil fontified t 17779 . 17832) (nil fontified t 17907 . 17909) (nil fontified t 17972 . 18010) (nil fontified t 18070 . 18072) (nil rear-nonsticky t 18092 . 18093)) (26015 47469 709799 0) 0 nil])
([nil nil ((#("
        let camera = Camera {
            // position the camera 1 unit up and 2 units back
            // +z is out of the screen
            eye: (0.0, 10.0, 2.0).into(),
            // have it look at the origin
            target: (0.0, 5.0, 0.0).into(),
            // which way is \"up\"
            up: cgmath::Vector3::unit_y(),
            aspect: config.width as f32 / config.height as f32,
            fovy: 45.0,
            znear: 0.1,
            zfar: 100.0,
        };
" 0 9 (fontified t) 9 12 (face font-lock-keyword-face fontified t) 12 13 (fontified t) 13 19 (face font-lock-variable-name-face fontified t) 19 22 (fontified t) 22 28 (face font-lock-type-face fontified t) 28 29 (fontified t) 29 30 (face (rainbow-delimiters-depth-3-face) fontified t) 30 43 (fontified t) 43 46 (face font-lock-comment-delimiter-face fontified t) 46 93 (face font-lock-comment-face fontified t) 93 105 (fontified t) 105 108 (face font-lock-comment-delimiter-face fontified t) 108 132 (face font-lock-comment-face fontified t) 132 144 (fontified t) 144 147 (face font-lock-variable-name-face fontified t) 147 149 (fontified t) 149 150 (face (rainbow-delimiters-depth-4-face) fontified t) 150 164 (fontified t) 164 165 (face (rainbow-delimiters-depth-4-face) fontified t) 165 170 (fontified t) 170 171 (face (rainbow-delimiters-depth-4-face) fontified t) 171 172 (face (rainbow-delimiters-depth-4-face) fontified t) 172 186 (fontified t) 186 189 (face font-lock-comment-delimiter-face fontified t) 189 216 (face font-lock-comment-face fontified t) 216 217 (fontified t) 217 228 (fontified t) 228 234 (fontified t face font-lock-variable-name-face) 234 236 (fontified t) 236 237 (fontified t face (rainbow-delimiters-depth-4-face)) 237 250 (fontified t) 250 251 (fontified t face (rainbow-delimiters-depth-4-face)) 251 256 (fontified t) 256 257 (fontified t face (rainbow-delimiters-depth-4-face)) 257 258 (fontified t face (rainbow-delimiters-depth-4-face)) 258 260 (fontified t) 260 272 (fontified t) 272 275 (face font-lock-comment-delimiter-face fontified t) 275 293 (face font-lock-comment-face fontified t) 293 305 (fontified t) 305 307 (face font-lock-variable-name-face fontified t) 307 309 (fontified t) 309 315 (face font-lock-constant-face fontified t) 315 317 (fontified t) 317 324 (face font-lock-type-face fontified t) 324 332 (fontified t) 332 333 (face (rainbow-delimiters-depth-4-face) fontified t) 333 334 (face (rainbow-delimiters-depth-4-face) fontified t) 334 348 (fontified t) 348 354 (face font-lock-variable-name-face fontified t) 354 369 (fontified t) 369 371 (face font-lock-keyword-face fontified t) 371 372 (fontified t) 372 375 (face font-lock-type-face fontified t) 375 392 (fontified t) 392 394 (face font-lock-keyword-face fontified t) 394 395 (fontified t) 395 398 (face font-lock-type-face fontified t) 398 412 (fontified t) 412 416 (face font-lock-variable-name-face fontified t) 416 436 (fontified t) 436 441 (face font-lock-variable-name-face fontified t) 441 460 (fontified t) 460 464 (face font-lock-variable-name-face fontified t) 464 473 (fontified t) 473 481 (fontified t) 481 482 (face (rainbow-delimiters-depth-3-face) fontified t) 482 484 (fontified t)) . 7800) (undo-tree-id1150 . -484) (undo-tree-id1151 . -484) (undo-tree-id1152 . -484) (undo-tree-id1153 . -484) (undo-tree-id1154 . -483) (undo-tree-id1155 . -465) (undo-tree-id1156 . -437) (undo-tree-id1157 . -411) (undo-tree-id1158 . -301) (undo-tree-id1159 . -222) (undo-tree-id1160 . -178) (undo-tree-id1161 . -135) (undo-tree-id1162 . -95) (undo-tree-id1163 . -32) (undo-tree-id1164 . -1) (undo-tree-id1165 . -484) (t 26015 48076 896953 761000)) nil (26015 48096 91638 0) 0 nil])
([nil nil ((#("                   " 0 14 (fontified t) 14 19 (fontified t)) . -17478) 17509) ((17478 . 17497)) (26015 47469 380943 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 8173 . 8174) (nil fontified nil 7800 . 8174) (7800 . 8174)) nil (26015 48096 91622 0) 0 nil])
([nil nil ((17407 . 17409)) ((#(".." 0 1 (fontified t) 1 2 (fontified t)) . 17407) (undo-tree-id1047 . -2) (undo-tree-id1048 . -1) (undo-tree-id1049 . -2) (undo-tree-id1050 . -2) (undo-tree-id1051 . -2) (undo-tree-id1052 . -2) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -2)) (26015 47469 57167 0) 0 nil])
([nil nil ((#("        // ..." 0 8 (fontified t) 8 11 (face font-lock-comment-delimiter-face fontified t) 11 14 (face font-lock-comment-face fontified t)) . 8084) (undo-tree-id1139 . -14) (undo-tree-id1140 . -14) (undo-tree-id1141 . -14) (undo-tree-id1142 . -14) (undo-tree-id1143 . -14) (undo-tree-id1144 . -14) (undo-tree-id1145 . -14) (undo-tree-id1146 . -14) (undo-tree-id1147 . -14) (undo-tree-id1148 . -14) (undo-tree-id1149 . -14)) nil (26015 48096 91619 0) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -17407) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (#("." 0 1 (fontified t)) . -17408) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) 17409) ((17407 . 17409)) (26015 47468 696806 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 8084) (undo-tree-id1138 . -1)) nil (26015 48096 91604 0) 0 nil])
([nil nil ((17407 . 17409)) ((#("//" 0 2 (face font-lock-comment-delimiter-face fontified t)) . 17407) (undo-tree-id1025 . -2) (undo-tree-id1026 . -2) (undo-tree-id1027 . -2) (undo-tree-id1028 . -2) (undo-tree-id1029 . -2) (undo-tree-id1030 . -2) (undo-tree-id1031 . -2) (undo-tree-id1032 . -2) (undo-tree-id1033 . -2) (undo-tree-id1034 . -2) (undo-tree-id1035 . -2) (undo-tree-id1036 . -2) (undo-tree-id1037 . -2) (undo-tree-id1038 . -2) (undo-tree-id1039 . -2) (undo-tree-id1040 . -2) (undo-tree-id1041 . -2) (undo-tree-id1042 . -2) (undo-tree-id1043 . -2) (undo-tree-id1044 . -2) (undo-tree-id1045 . -2) (undo-tree-id1046 . -2) (t 26015 47426 53605 460000)) (26015 47426 44432 0) 0 nil])
([nil nil ((#("        camera_uniform.update_view_proj(&camera);" 0 39 (fontified t) 39 40 (face (rainbow-delimiters-depth-3-face) fontified t) 40 41 (face rust-ampersand-face fontified t) 41 47 (fontified t) 47 48 (face (rainbow-delimiters-depth-3-face) fontified t) 48 49 (fontified t)) . 8215) (undo-tree-id1174 . -49) (undo-tree-id1175 . -49) (undo-tree-id1176 . -49) (undo-tree-id1177 . -49) (undo-tree-id1178 . -49) (undo-tree-id1179 . -49) (undo-tree-id1180 . -49) (t 26015 48096 100611 30000)) nil (26015 48122 342418 0) 0 nil])
nil
([nil nil ((#("
" 0 1 (fontified t)) . 8215) (undo-tree-id1173 . -1)) nil (26015 48122 342410 0) 0 nil])
([nil nil ((8215 . 8216)) nil (26015 48122 342408 0) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -8215) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) 8216) nil (26015 48122 342407 0) 0 nil])
([nil nil ((#("        camera_uniform.update_view_proj(&camera, &projection); // UPDATED!" 0 39 (fontified t) 39 40 (face (rainbow-delimiters-depth-3-face) fontified t) 40 41 (face rust-ampersand-face fontified t) 41 49 (fontified t) 49 50 (face rust-ampersand-face fontified t) 50 60 (fontified t) 60 61 (face (rainbow-delimiters-depth-3-face) fontified t) 61 63 (fontified t) 63 66 (face font-lock-comment-delimiter-face fontified t) 66 73 (face font-lock-comment-face fontified t) 73 74 (face font-lock-comment-face fontified t rear-nonsticky t)) . 8085) (undo-tree-id1166 . -74)) nil (26015 48122 342399 0) 0 nil])
([nil nil ((8140 . 8149)) nil (26015 48122 342382 0) 0 nil])
([nil nil ((nil fontified nil 8222 . 8223) (nil fontified nil 8215 . 8222) (nil fontified nil 8212 . 8215) (nil fontified nil 8210 . 8212) (nil fontified nil 8209 . 8210) (nil fontified nil 8199 . 8209) (nil fontified nil 8198 . 8199) (nil fontified nil 8190 . 8198) (nil fontified nil 8189 . 8190) (nil fontified nil 8188 . 8189) (nil fontified nil 8149 . 8188) (8149 . 8223)) nil (26015 48122 342380 0) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -8149) 8201) nil (26015 48122 342372 0) 0 nil])
([nil nil ((#("        let camera_controller = CameraController::new(1.0);" 0 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 29 (face font-lock-variable-name-face fontified t) 29 32 (fontified t) 32 48 (face font-lock-type-face fontified t) 48 53 (fontified t) 53 54 (face (rainbow-delimiters-depth-3-face) fontified t) 54 57 (fontified t) 57 58 (face (rainbow-delimiters-depth-3-face) fontified t) 58 59 (fontified t)) . 10520) (undo-tree-id1183 . -59) (undo-tree-id1184 . -59) (undo-tree-id1185 . -59) (undo-tree-id1186 . -59) (undo-tree-id1187 . -59) (undo-tree-id1188 . -59) (undo-tree-id1189 . -59) (t 26015 48122 352339 350000)) nil (26015 48129 761537 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 10520) (undo-tree-id1182 . -1)) nil (26015 48129 761529 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 10520) (undo-tree-id1181 . -1)) nil (26015 48129 761524 0) 0 nil])
([nil nil ((#("           
            camera,
            camera_controller," 0 16 (fontified t) 16 32 (fontified t) 32 62 (fontified t)) . 12004) (undo-tree-id1220 . -62) (undo-tree-id1221 . -31) (undo-tree-id1222 . -31) (undo-tree-id1223 . -31) (undo-tree-id1224 . -29) (undo-tree-id1225 . -28) (undo-tree-id1226 . -26) (undo-tree-id1227 . -25) (undo-tree-id1228 . -31) (undo-tree-id1229 . -24) (undo-tree-id1230 . -24) (undo-tree-id1231 . -62) (undo-tree-id1232 . -62) (undo-tree-id1233 . -62) (undo-tree-id1234 . -60) (undo-tree-id1235 . -59) (undo-tree-id1236 . -57) (undo-tree-id1237 . -52) (undo-tree-id1238 . -49) (undo-tree-id1239 . -47) (undo-tree-id1240 . -45) (undo-tree-id1241 . -42) (undo-tree-id1242 . -40) (undo-tree-id1243 . -39) (undo-tree-id1244 . -37) (undo-tree-id1245 . -36) (undo-tree-id1246 . -35) (undo-tree-id1247 . -34) (undo-tree-id1248 . -33) (undo-tree-id1249 . -32) (undo-tree-id1250 . -1) (undo-tree-id1251 . -31) (undo-tree-id1252 . -62) 12005 (t 26015 48129 770685 413000)) nil (26015 48151 98327 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 12146 . 12147) (nil fontified nil 12004 . 12147) (12004 . 12147)) nil (26015 48151 98290 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -12015) 12006) nil (26015 48151 98288 0) 0 nil])
([nil nil ((#(" // NEW!" 0 1 (fontified t) 1 4 (face font-lock-comment-delimiter-face fontified t) 4 8 (face font-lock-comment-face fontified t)) . 12046) (undo-tree-id1219 . -8)) nil (26015 48151 98287 0) 0 nil])
([nil nil ((#(" // NEW!" 0 1 (fontified t) 1 4 (face font-lock-comment-delimiter-face fontified t) 4 7 (face font-lock-comment-face fontified t) 7 8 (face font-lock-comment-face rear-nonsticky t fontified t)) . 12130) (undo-tree-id1209 . -8) (undo-tree-id1210 . -8) (undo-tree-id1211 . -8) (undo-tree-id1212 . -8) (undo-tree-id1213 . -8) (undo-tree-id1214 . -8) (undo-tree-id1215 . -7) (undo-tree-id1216 . -4) (undo-tree-id1217 . -8) (undo-tree-id1218 . -8)) nil (26015 48151 98284 0) 0 nil])
([nil nil ((#("            // ..." 0 12 (fontified t) 12 15 (face font-lock-comment-delimiter-face fontified t) 15 18 (face font-lock-comment-face fontified t)) . 12078) (undo-tree-id1191 . -18) (undo-tree-id1192 . -18) (undo-tree-id1193 . -17) (undo-tree-id1194 . -15) (undo-tree-id1195 . -14) (undo-tree-id1196 . -13) (undo-tree-id1197 . -12) (undo-tree-id1198 . -11) (undo-tree-id1199 . -10) (undo-tree-id1200 . -18) (undo-tree-id1201 . -18) (undo-tree-id1202 . -18) (undo-tree-id1203 . -18) (undo-tree-id1204 . -18) (undo-tree-id1205 . -18) (undo-tree-id1206 . -18) (undo-tree-id1207 . -18) (undo-tree-id1208 . -18)) nil (26015 48151 98272 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 12078) (undo-tree-id1190 . -1)) nil (26015 48151 98253 0) 0 nil])
([nil nil ((12111 . 12124)) nil (26015 48151 98241 0) 0 nil])
([nil nil ((12915 . 12928) (t 26015 48151 109615 892000)) nil (26015 48171 574773 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 12988 . 12989) (nil fontified nil 12928 . 12989) (12928 . 12989)) nil (26015 48171 574771 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -12928) 12984) nil (26015 48171 574766 0) 0 nil])
([nil nil ((#("        self.camera_controller.process_events(event)" 0 8 (fontified t) 8 12 (face font-lock-keyword-face fontified t) 12 36 (fontified t) 36 40 (fontified t) 40 45 (fontified t) 45 46 (face (rainbow-delimiters-depth-3-face) fontified t) 46 51 (fontified t) 51 52 (face (rainbow-delimiters-depth-3-face) fontified t)) . 13071) (undo-tree-id1322 . -52) (undo-tree-id1323 . -52) (undo-tree-id1324 . -52) (undo-tree-id1325 . -52) (undo-tree-id1326 . -52) (undo-tree-id1327 . -52) (undo-tree-id1328 . -52) (t 26015 48171 586288 598000)) nil (26015 48240 112893 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 13071) (undo-tree-id1321 . -1)) nil (26015 48240 112885 0) 0 nil])
([nil nil ((13074 . 13078) (#("        " 0 8 (fontified nil)) . 13073) (13073 . 13081) (#("    " 0 4 (fontified nil)) . 13073) (undo-tree-id1315 . -4) (undo-tree-id1316 . -4) (undo-tree-id1317 . -4) (13073 . 13078) (#("        " 0 8 (fontified nil)) . 13072) (13072 . 13080) (#("    " 0 4 (fontified nil)) . 13072) (undo-tree-id1318 . -4) (undo-tree-id1319 . -4) (undo-tree-id1320 . -4) (13076 . 13077) (#("        " 0 8 (fontified nil)) . 13071) (13071 . 13079) (13071 . 13072)) nil (26015 48240 112882 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 13752 . 13753) (nil fontified nil 13071 . 13753) (13071 . 13753)) nil (26015 48240 112872 0) 0 nil])
([nil nil ((13820 . 13828) (#("    " 0 4 (fontified t)) . 13820) (13804 . 13808) (13790 . 13794) (13761 . 13777) (#("            " 0 12 (fontified t)) . 13761) (13691 . 13707) (#("            " 0 12 (fontified t)) . 13691) (13680 . 13684) (13653 . 13669) (#("            " 0 12 (fontified t)) . 13653) (undo-tree-id1313 . -9) (13630 . 13646) (#("            " 0 12 (fontified t)) . 13630) (13587 . 13603) (#("            " 0 12 (fontified t)) . 13587) (13557 . 13561) (13543 . 13547) (13514 . 13530) (#("            " 0 12 (fontified t)) . 13514) (undo-tree-id1314 . -8) (13452 . 13468) (#("            " 0 12 (fontified t)) . 13452) (13405 . 13409) (13333 . 13337) (13306 . 13322) (#("            " 0 12 (fontified t)) . 13306) (13134 . 13150) (#("            " 0 12 (fontified t)) . 13134) (13101 . 13105) (13071 . 13079) (#("    " 0 4 (fontified t)) . 13071) 13024) nil (26015 48240 112869 0) 0 nil])
([nil nil ((#("input:" 0 5 (face font-lock-variable-name-face fontified t) 5 6 (fontified t)) . -13150) (undo-tree-id1295 . -6) (undo-tree-id1296 . -6) (undo-tree-id1297 . -6) (undo-tree-id1298 . -6) (undo-tree-id1299 . -6) (undo-tree-id1300 . -6) (undo-tree-id1301 . -6) (undo-tree-id1302 . -6) (undo-tree-id1303 . -6) (undo-tree-id1304 . -6) (undo-tree-id1305 . -6) (undo-tree-id1306 . -6) (undo-tree-id1307 . -6) (undo-tree-id1308 . -6) (undo-tree-id1309 . -6) (undo-tree-id1310 . -6) (undo-tree-id1311 . -6) (undo-tree-id1312 . -6) 13156) nil (26015 48240 112858 0) 0 nil])
([nil nil ((13150 . 13151)) nil (26015 48240 112840 0) 0 nil])
([nil nil ((13150 . 13155) (#("e" 0 1 (fontified nil)) . 13150) (13150 . 13151) (#("event" 0 5 (fontified nil)) . -13150) (13150 . 13155) (#("e" 0 1 (fontified t)) . -13150) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) 13151) nil (26015 48240 112838 0) 0 nil])
([nil nil ((13155 . 13156)) nil (26015 48240 112831 0) 0 nil])
([nil nil ((#("keycode" 0 7 (face font-lock-variable-name-face fontified t)) . -13217) (undo-tree-id1272 . -7) (undo-tree-id1273 . -7) (undo-tree-id1274 . -7) (undo-tree-id1275 . -7) (undo-tree-id1276 . -7) (undo-tree-id1277 . -7) (undo-tree-id1278 . -7) (undo-tree-id1279 . -7) (undo-tree-id1280 . -7) (undo-tree-id1281 . -7) (undo-tree-id1282 . -7) (undo-tree-id1283 . -7) (undo-tree-id1284 . -7) (undo-tree-id1285 . -7) (undo-tree-id1286 . -7) (undo-tree-id1287 . -7) (undo-tree-id1288 . -7) (undo-tree-id1289 . -7) 13224) nil (26015 48240 112829 0) 0 nil])
([nil nil ((#("virtual_" 0 8 (face font-lock-variable-name-face fontified t)) . -13209) (undo-tree-id1253 . -8) (undo-tree-id1254 . -8) (undo-tree-id1255 . -8) (undo-tree-id1256 . -8) (undo-tree-id1257 . -8) (undo-tree-id1258 . -8) (undo-tree-id1259 . -8) (undo-tree-id1260 . -8) (undo-tree-id1261 . -8) (undo-tree-id1262 . -8) (undo-tree-id1263 . -8) (undo-tree-id1264 . -8) (undo-tree-id1265 . -8) (undo-tree-id1266 . -8) (undo-tree-id1267 . -8) (undo-tree-id1268 . -8) (undo-tree-id1269 . -8) (undo-tree-id1270 . -8) (undo-tree-id1271 . -8) 13217) nil (26015 48240 113123 0) 0 nil])
([nil nil ((13209 . 13211)) nil (26015 48295 581268 0) 0 nil] [nil nil ((13209 . 13210)) ((#("K" 0 1 (face font-lock-variable-name-face fontified t)) . 13209) (undo-tree-id1329 . -1)) (26015 48240 112780 0) 0 nil])
([nil nil ((#("                    p : Some(key)," 0 20 (fontified t) 20 21 (face font-lock-variable-name-face fontified t) 21 22 (fontified t) 22 24 (fontified t) 24 28 (face font-lock-type-face fontified t) 28 29 (face (rainbow-delimiters-depth-6-face) fontified t) 29 32 (fontified t) 32 33 (face (rainbow-delimiters-depth-6-face) fontified t) 33 34 (fontified t)) . 13189) (undo-tree-id1420 . -20) (undo-tree-id1421 . -20) (undo-tree-id1422 . -20) (undo-tree-id1423 . -20) (undo-tree-id1424 . -20) (undo-tree-id1425 . -20) (undo-tree-id1426 . -20) (undo-tree-id1427 . -20) (undo-tree-id1428 . -20) (undo-tree-id1429 . -20) (undo-tree-id1430 . -20) (undo-tree-id1431 . -20) (undo-tree-id1432 . -20) (undo-tree-id1433 . -20) (undo-tree-id1434 . -20) (undo-tree-id1435 . -20) (undo-tree-id1436 . -20) (undo-tree-id1437 . -20) (undo-tree-id1438 . -20) (undo-tree-id1439 . -21) (undo-tree-id1440 . 12) (undo-tree-id1441 . -21) (undo-tree-id1442 . -21) (undo-tree-id1443 . -21) (undo-tree-id1444 . -21) (undo-tree-id1445 . -22) (undo-tree-id1446 . -22) (undo-tree-id1447 . -22) (undo-tree-id1448 . -34)) nil (26015 48295 581266 0) 0 nil])
nil
([nil nil ((13189 . 13209)) nil (26015 48295 581234 0) 0 nil])
([nil nil ((13209 . 13211)) nil (26015 48295 581233 0) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -13209) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (#("h" 0 1 (fontified t)) . -13210) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) 13211) nil (26015 48295 581231 0) 0 nil])
([nil nil ((#("KeyboardInput" 0 13 (face font-lock-type-face fontified t)) . -13173) (undo-tree-id1401 . -13) (undo-tree-id1402 . -13) (undo-tree-id1403 . -11) (undo-tree-id1404 . -11) (undo-tree-id1405 . -11) (undo-tree-id1406 . -11) (undo-tree-id1407 . -11) (undo-tree-id1408 . -13) (undo-tree-id1409 . -13) (undo-tree-id1410 . -13) (undo-tree-id1411 . -13) (undo-tree-id1412 . -13) (undo-tree-id1413 . -13) 13186) nil (26015 48295 581224 0) 0 nil])
([nil nil ((13173 . 13176)) nil (26015 48295 581211 0) 0 nil])
([nil nil ((13173 . 13181) (#("Key" 0 3 (fontified nil)) . 13173) (13173 . 13176) (#("KeyEvent" 0 8 (fontified nil)) . -13173) (13173 . 13181) (#("Key" 0 3 (face font-lock-type-face fontified t)) . -13173) (undo-tree-id1391 . -3) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -2) (undo-tree-id1395 . -2) (undo-tree-id1396 . -2) (undo-tree-id1397 . -3) (undo-tree-id1398 . -3) (undo-tree-id1399 . -3) (undo-tree-id1400 . -3) 13176) nil (26015 48295 581209 0) 0 nil])
([nil nil ((13204 . 13205)) nil (26015 48295 581197 0) 0 nil])
([nil nil ((13204 . 13216) (#("p" 0 1 (fontified nil)) . 13204) (13204 . 13205) (#("physical_key" 0 12 (fontified nil)) . -13204) (13204 . 13216) (#("p" 0 1 (fontified t)) . -13204) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) 13205) nil (26015 48295 581195 0) 0 nil])
([nil nil ((13216 . 13219)) nil (26015 48295 581188 0) 0 nil])
([nil nil ((13219 . 13221)) nil (26015 48295 581187 0) 0 nil])
([nil nil ((#("K" 0 1 (face font-lock-type-face fontified t)) . -13218) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -13219) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (#("y" 0 1 (face font-lock-type-face fontified t)) . -13220) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) 13221) nil (26015 48295 581184 0) 0 nil])
([nil nil ((13218 . 13229)) nil (26015 48295 581157 0) 0 nil])
([nil nil ((#("L" 0 1 (face font-lock-type-face fontified t)) . -13226) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -13227) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -13228) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) 13229) nil (26015 48295 581155 0) 0 nil])
([nil nil ((13226 . 13232)) nil (26015 48295 581140 0) 0 nil])
([nil nil ((#("K" 0 1 (face font-lock-type-face fontified t)) . -13231) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) 13232) nil (26015 48295 581138 0) 0 nil])
([nil nil ((13231 . 13232)) nil (26015 48295 581130 0) 0 nil])
([nil nil ((#("K" 0 1 (face font-lock-type-face fontified t)) . -13231) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) 13232) nil (26015 48295 581129 0) 0 nil])
([nil nil ((13231 . 13232)) nil (26015 48295 581126 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 13236 13236 nil nil nil nil #s(yas--exit 13237 nil))) #s(yas--exit 13237 nil) 32 nil #s(yas--field 1 13236 13236 nil nil nil nil #s(yas--exit 13237 nil)) nil nil)) (13231 . 13237) (#("Code($1)$0" 0 10 (fontified nil)) . 13231) (13231 . 13241) (#("C" 0 1 (fontified nil)) . 13231) (13231 . 13232) (#("Code(…)" 0 7 (fontified nil)) . -13231) (13231 . 13238) (#("C" 0 1 (face font-lock-type-face fontified t)) . -13231) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) 13232) nil (26015 48295 581123 0) 0 nil])
([nil nil ((apply yas--snippet-revive 13231 13237 #s(yas--snippet nil (#s(yas--field 1 13236 13236 nil nil nil nil #s(yas--exit 13237 nil))) #s(yas--exit 13237 nil) 32 nil #s(yas--field 1 13236 13236 nil nil nil nil #s(yas--exit 13237 nil)) nil nil))) nil (26015 48295 581111 0) 0 nil])
([nil nil ((13236 . 13239)) nil (26015 48295 581109 0) 0 nil])
([nil nil ((13240 . 13241)) nil (26015 48295 581105 0) 0 nil])
([nil nil ((#("Left" 0 4 (face font-lock-type-face fontified t)) . -13629) (undo-tree-id1500 . -4) (undo-tree-id1501 . -4) (undo-tree-id1502 . -4) (undo-tree-id1503 . -4) (undo-tree-id1504 . -4) (undo-tree-id1505 . -4) (undo-tree-id1506 . -4) (undo-tree-id1507 . -4) (undo-tree-id1508 . -4) (undo-tree-id1509 . -4) 13633 (t 26015 48295 593496 717000)) nil (26015 48332 719894 0) 0 nil])
([nil nil ((#("MouseButton::" 0 11 (face font-lock-type-face fontified t) 11 13 (fontified t)) . -13616) (undo-tree-id1468 . -6) (undo-tree-id1469 . -6) (undo-tree-id1470 . -6) (undo-tree-id1471 . -6) (undo-tree-id1472 . -6) (undo-tree-id1473 . -6) (undo-tree-id1474 . -6) (undo-tree-id1475 . -6) (undo-tree-id1476 . -11) (undo-tree-id1477 . -11) (undo-tree-id1478 . -11) (undo-tree-id1479 . -11) (undo-tree-id1480 . -11) (undo-tree-id1481 . -11) (undo-tree-id1482 . -11) (undo-tree-id1483 . -11) (undo-tree-id1484 . -11) (undo-tree-id1485 . -11) (undo-tree-id1486 . -11) (undo-tree-id1487 . -11) (undo-tree-id1488 . -11) (undo-tree-id1489 . -13) (undo-tree-id1490 . -13) (undo-tree-id1491 . -13) (undo-tree-id1492 . -13) (undo-tree-id1493 . -13) (undo-tree-id1494 . -13) (undo-tree-id1495 . -13) (undo-tree-id1496 . -13) (undo-tree-id1497 . -13) (undo-tree-id1498 . -13) (undo-tree-id1499 . -13) 13629) nil (26015 48332 719882 0) 0 nil])
([nil nil ((13616 . 13620)) nil (26015 48332 719850 0) 0 nil])
([nil nil ((256 . 269) (13616 . 13616) (13616 . 13627) (#("Mous" 0 4 (fontified nil)) . 13616) (13616 . 13620) (#("MouseButton (use winit::event::MouseButton)" 0 43 (fontified nil)) . -13616) (13616 . 13659) (#("Mous" 0 4 (face font-lock-type-face fontified t)) . -13616) (undo-tree-id1455 . -4) (undo-tree-id1456 . -4) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -2) (undo-tree-id1460 . -2) (undo-tree-id1461 . -2) (undo-tree-id1462 . -3) (undo-tree-id1463 . -3) (undo-tree-id1464 . -4) (undo-tree-id1465 . -4) (undo-tree-id1466 . -4) (undo-tree-id1467 . -4) 13620) nil (26015 48332 719848 0) 0 nil])
([nil nil ((13640 . 13643)) nil (26015 48332 719832 0) 0 nil])
([nil nil ((apply yas--snippet-revive 13642 13646 #s(yas--snippet nil nil #s(yas--exit 13646 nil) 33 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 13646 nil) 33 nil nil nil nil)) (13642 . 13646) (#("Left$0" 0 6 (fontified nil)) . 13642) (13642 . 13648) (#("L" 0 1 (fontified nil)) . 13642) (13642 . 13643) (#("Left" 0 4 (fontified nil)) . -13642) (13642 . 13646) (#("L" 0 1 (face font-lock-type-face fontified t)) . -13642) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) 13643) nil (26015 48453 682490 0) 0 nil])
([nil nil ((17184 . 17197)) nil (26015 48468 152177 0) 0 nil] [nil nil ((17282 . 17299) (t 26015 48332 731409 247000)) ((#("
                " 0 1 (fontified t) 1 17 (fontified t)) . 17282) (undo-tree-id1801 . -17) (undo-tree-id1802 . -17) (undo-tree-id1803 . -17) (undo-tree-id1804 . -17) (undo-tree-id1805 . -17) (undo-tree-id1806 . -17) (undo-tree-id1807 . -17) (undo-tree-id1808 . -17) (undo-tree-id1809 . -17) (undo-tree-id1810 . -17) (undo-tree-id1811 . -17) (undo-tree-id1812 . -17) (undo-tree-id1813 . -17) (undo-tree-id1814 . -17) (undo-tree-id1815 . -17) (undo-tree-id1816 . -17) (undo-tree-id1817 . -17) (undo-tree-id1818 . -17) (undo-tree-id1819 . -17) (undo-tree-id1820 . -17) (undo-tree-id1821 . -17) (undo-tree-id1822 . -17) (undo-tree-id1823 . -17) (undo-tree-id1824 . -17) (undo-tree-id1825 . -17) (undo-tree-id1826 . -17) (undo-tree-id1827 . -17) (undo-tree-id1828 . -17) (undo-tree-id1829 . -17) (undo-tree-id1830 . -17) (undo-tree-id1831 . -17) (undo-tree-id1832 . -17) (undo-tree-id1833 . -17) (undo-tree-id1834 . -17) (undo-tree-id1835 . -17) (undo-tree-id1836 . -17) (undo-tree-id1837 . -17) (undo-tree-id1838 . -17) (undo-tree-id1839 . -17) (undo-tree-id1840 . -17) (undo-tree-id1841 . -17) (undo-tree-id1842 . -17) (undo-tree-id1843 . -17) (undo-tree-id1844 . -17) (undo-tree-id1845 . -17) (undo-tree-id1846 . -17) (undo-tree-id1847 . -17) (undo-tree-id1848 . -17) (undo-tree-id1849 . -17) (undo-tree-id1850 . -17) (undo-tree-id1851 . -17) (undo-tree-id1852 . -17) (undo-tree-id1853 . -17) (undo-tree-id1854 . -17) (undo-tree-id1855 . -17) (undo-tree-id1856 . -17) (undo-tree-id1857 . -17) (undo-tree-id1858 . -17) (undo-tree-id1859 . -17) (undo-tree-id1860 . -17) (undo-tree-id1861 . -17) (undo-tree-id1862 . -17) (undo-tree-id1863 . -17) (undo-tree-id1864 . -17) (undo-tree-id1865 . -17) (undo-tree-id1866 . -17) (undo-tree-id1867 . -17) (undo-tree-id1868 . -17) (undo-tree-id1869 . -17) (undo-tree-id1870 . -17) (undo-tree-id1871 . -17) (undo-tree-id1872 . -17) (undo-tree-id1873 . -17) (undo-tree-id1874 . -17) (undo-tree-id1875 . -17) (undo-tree-id1876 . -17) (undo-tree-id1877 . -17) (undo-tree-id1878 . -17) (undo-tree-id1879 . -17) (undo-tree-id1880 . -17) (undo-tree-id1881 . -17) (undo-tree-id1882 . -17) (undo-tree-id1883 . -17) (undo-tree-id1884 . -17) (undo-tree-id1885 . -17) (undo-tree-id1886 . -17) (undo-tree-id1887 . -17) (undo-tree-id1888 . -17) (undo-tree-id1889 . -17) (undo-tree-id1890 . -17) (undo-tree-id1891 . -17) (undo-tree-id1892 . -17) (undo-tree-id1893 . -17) (undo-tree-id1894 . -17) (undo-tree-id1895 . -17) (undo-tree-id1896 . -17) (undo-tree-id1897 . -17) (undo-tree-id1898 . -17) (undo-tree-id1899 . -17) (undo-tree-id1900 . -17) (undo-tree-id1901 . -17) (undo-tree-id1902 . -17) (undo-tree-id1903 . -17) (undo-tree-id1904 . -17) (undo-tree-id1905 . -17) (undo-tree-id1906 . -17) (undo-tree-id1907 . -17) (undo-tree-id1908 . -17) (undo-tree-id1909 . -17) (undo-tree-id1910 . -17) (undo-tree-id1911 . -17) (undo-tree-id1912 . -17) (undo-tree-id1913 . -17) (undo-tree-id1914 . -17) (undo-tree-id1915 . -17) (undo-tree-id1916 . -17) (undo-tree-id1917 . -17) (undo-tree-id1918 . -17) (undo-tree-id1919 . -17) (undo-tree-id1920 . -17) (undo-tree-id1921 . -17) (undo-tree-id1922 . -17) (undo-tree-id1923 . -17) (undo-tree-id1924 . -17) (undo-tree-id1925 . -17) (undo-tree-id1926 . -17) (undo-tree-id1927 . -17) (undo-tree-id1928 . -17) (undo-tree-id1929 . -17) (undo-tree-id1930 . -17) (undo-tree-id1931 . -17) (undo-tree-id1932 . -17) (undo-tree-id1933 . -17) (undo-tree-id1934 . -17) (undo-tree-id1935 . -17) (undo-tree-id1936 . -17) (undo-tree-id1937 . -17) (undo-tree-id1938 . -17) (undo-tree-id1939 . -17) (undo-tree-id1940 . -17) (undo-tree-id1941 . -17) (undo-tree-id1942 . -17) (undo-tree-id1943 . -17) (undo-tree-id1944 . -17) (undo-tree-id1945 . -17) (undo-tree-id1946 . -17) (undo-tree-id1947 . -17) (undo-tree-id1948 . -17) (undo-tree-id1949 . -17) (undo-tree-id1950 . -17) (undo-tree-id1951 . -17) (undo-tree-id1952 . -17) (undo-tree-id1953 . -17) (undo-tree-id1954 . -17) (undo-tree-id1955 . -17) (undo-tree-id1956 . -17) (undo-tree-id1957 . -17) (undo-tree-id1958 . -17) (undo-tree-id1959 . -17) (undo-tree-id1960 . -17) (undo-tree-id1961 . -17) (undo-tree-id1962 . -17) (undo-tree-id1963 . -17) (undo-tree-id1964 . -17) (undo-tree-id1965 . -17) (undo-tree-id1966 . -17) (undo-tree-id1967 . -17) (undo-tree-id1968 . -17) (undo-tree-id1969 . -17) (undo-tree-id1970 . -17) (undo-tree-id1971 . -17) (undo-tree-id1972 . -17) (undo-tree-id1973 . -17) (undo-tree-id1974 . -17) (undo-tree-id1975 . -17) (undo-tree-id1976 . -17) (undo-tree-id1977 . -17) (undo-tree-id1978 . -17) (undo-tree-id1979 . -17) (undo-tree-id1980 . -17) (undo-tree-id1981 . -17) (undo-tree-id1982 . -17) (undo-tree-id1983 . -17) (undo-tree-id1984 . -17) (undo-tree-id1985 . -17) (undo-tree-id1986 . -17) (undo-tree-id1987 . -17) (undo-tree-id1988 . -17) (undo-tree-id1989 . -17) (undo-tree-id1990 . -17) (undo-tree-id1991 . -17) (undo-tree-id1992 . -17) (undo-tree-id1993 . -17) (undo-tree-id1994 . -17) (undo-tree-id1995 . -17) (undo-tree-id1996 . -17) (undo-tree-id1997 . -17) (undo-tree-id1998 . -17) (undo-tree-id1999 . -17) (undo-tree-id2000 . -17) (undo-tree-id2001 . -17) (undo-tree-id2002 . -17) (undo-tree-id2003 . -17) (undo-tree-id2004 . -17) (undo-tree-id2005 . -17) (undo-tree-id2006 . -17) (undo-tree-id2007 . -17) (undo-tree-id2008 . -17) (undo-tree-id2009 . -17) (undo-tree-id2010 . -17) (undo-tree-id2011 . -17) (undo-tree-id2012 . -17) (undo-tree-id2013 . -17) (undo-tree-id2014 . -17) (undo-tree-id2015 . -17) (undo-tree-id2016 . -17) (undo-tree-id2017 . -17) (undo-tree-id2018 . -1) (undo-tree-id2019 . -17) (undo-tree-id2020 . -17) (undo-tree-id2021 . -17) (undo-tree-id2022 . -17) (undo-tree-id2023 . -17) (undo-tree-id2024 . -17) (undo-tree-id2025 . -17)) (26015 48452 549809 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 17201 . 17202) (nil fontified nil 17197 . 17202) (17197 . 17202)) nil (26015 48468 152176 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 17575 . 17576) (nil fontified nil 17299 . 17576) (17299 . 17576)) ((#("            Event::DeviceEvent {
                event: DeviceEvent::MouseMotion{ delta, },
                .. // We're not using device_id currently
            } => if state.mouse_pressed {
                state.camera_controller.process_mouse(delta.0, delta.1)
            }" 0 12 (fontified nil) 12 17 (face font-lock-type-face fontified nil) 17 19 (fontified nil) 19 30 (face font-lock-type-face fontified nil) 30 31 (fontified nil) 31 32 (face (rainbow-delimiters-depth-6-face) fontified nil) 32 33 (fontified nil) 33 49 (fontified nil) 49 54 (face font-lock-variable-name-face fontified nil) 54 56 (fontified nil) 56 67 (face font-lock-type-face fontified nil) 67 69 (fontified nil) 69 80 (face font-lock-type-face fontified nil) 80 81 (face (rainbow-delimiters-depth-7-face) fontified nil) 81 89 (fontified nil) 89 90 (face (rainbow-delimiters-depth-7-face) fontified nil) 90 92 (fontified nil) 92 111 (fontified nil) 111 114 (face font-lock-comment-delimiter-face fontified nil) 114 150 (face font-lock-comment-face fontified nil) 150 162 (fontified nil) 162 163 (face (rainbow-delimiters-depth-6-face) fontified nil) 163 165 (fontified nil) 165 166 (syntax-table (1) fontified nil) 166 167 (fontified nil) 167 169 (face font-lock-keyword-face fontified nil) 169 190 (fontified nil) 190 191 (face (rainbow-delimiters-depth-6-face) fontified nil) 191 192 (fontified nil) 192 245 (fontified nil) 245 246 (face (rainbow-delimiters-depth-7-face) fontified nil) 246 262 (fontified nil) 262 263 (face (rainbow-delimiters-depth-7-face) fontified nil) 263 264 (fontified nil) 264 276 (fontified nil) 276 277 (face (rainbow-delimiters-depth-6-face) fontified nil rear-nonsticky nil)) . 17299) (undo-tree-id1638 . -15) (undo-tree-id1639 . -15) (undo-tree-id1640 . -15) (undo-tree-id1641 . -15) (undo-tree-id1642 . -15) (undo-tree-id1643 . -15) (undo-tree-id1644 . -15) (undo-tree-id1645 . -15) (undo-tree-id1646 . -15) (undo-tree-id1647 . -15) (undo-tree-id1648 . -15) (undo-tree-id1649 . -15) (undo-tree-id1650 . -15) (undo-tree-id1651 . -15) (undo-tree-id1652 . -15) (undo-tree-id1653 . -15) (undo-tree-id1654 . -15) (undo-tree-id1655 . -15) (undo-tree-id1656 . -15) (undo-tree-id1657 . -15) (undo-tree-id1658 . -15) (undo-tree-id1659 . -15) (undo-tree-id1660 . -15) (undo-tree-id1661 . -15) (undo-tree-id1662 . -15) (undo-tree-id1663 . -15) (undo-tree-id1664 . -15) (undo-tree-id1665 . -15) (undo-tree-id1666 . -15) (undo-tree-id1667 . -15) (undo-tree-id1668 . -15) (undo-tree-id1669 . -15) (undo-tree-id1670 . -15) (undo-tree-id1671 . -15) (undo-tree-id1672 . -15) (undo-tree-id1673 . -15) (undo-tree-id1674 . -15) (undo-tree-id1675 . -15) (undo-tree-id1676 . -15) (undo-tree-id1677 . -15) (undo-tree-id1678 . -15) (undo-tree-id1679 . -15) (undo-tree-id1680 . -15) (undo-tree-id1681 . -15) (undo-tree-id1682 . -15) (undo-tree-id1683 . -15) (undo-tree-id1684 . -15) (undo-tree-id1685 . -15) (undo-tree-id1686 . -15) (undo-tree-id1687 . -15) (undo-tree-id1688 . -15) (undo-tree-id1689 . -15) (undo-tree-id1690 . -17) (undo-tree-id1691 . -17) (undo-tree-id1692 . -17) (undo-tree-id1693 . -17) (undo-tree-id1694 . -17) (undo-tree-id1695 . -17) (undo-tree-id1696 . -17) (undo-tree-id1697 . -17) (undo-tree-id1698 . -17) (undo-tree-id1699 . -17) (undo-tree-id1700 . -17) (undo-tree-id1701 . -175) (undo-tree-id1702 . -175) (undo-tree-id1703 . -175) (undo-tree-id1704 . -175) (undo-tree-id1705 . -175) (undo-tree-id1706 . -175) (undo-tree-id1707 . -175) (undo-tree-id1708 . -175) (undo-tree-id1709 . -175) (undo-tree-id1710 . -175) (undo-tree-id1711 . -175) (undo-tree-id1712 . -175) (undo-tree-id1713 . -175) (undo-tree-id1714 . -175) (undo-tree-id1715 . -175) (undo-tree-id1716 . -175) (undo-tree-id1717 . -175) (undo-tree-id1718 . -175) (undo-tree-id1719 . -175) (undo-tree-id1720 . -175) (undo-tree-id1721 . -175) (undo-tree-id1722 . -63) (undo-tree-id1723 . -23) (undo-tree-id1724 . -23) (undo-tree-id1725 . -23) (undo-tree-id1726 . -23) (undo-tree-id1727 . -23) (undo-tree-id1728 . -23) (undo-tree-id1729 . -23) (undo-tree-id1730 . -23) (undo-tree-id1731 . -210) (undo-tree-id1732 . -210) (undo-tree-id1733 . -210) (undo-tree-id1734 . -210) (undo-tree-id1735 . -210) (undo-tree-id1736 . -165) (undo-tree-id1737 . -165) (undo-tree-id1738 . -165) (undo-tree-id1739 . -165) (undo-tree-id1740 . -165) (undo-tree-id1741 . -165) (undo-tree-id1742 . -165) (undo-tree-id1743 . -165) (undo-tree-id1744 . -165) (undo-tree-id1745 . -165) (undo-tree-id1746 . -165) (undo-tree-id1747 . -165) (undo-tree-id1748 . -165) (undo-tree-id1749 . -165) (undo-tree-id1750 . -165) (undo-tree-id1751 . -165) (undo-tree-id1752 . -165) (undo-tree-id1753 . -165) (undo-tree-id1754 . -165) (undo-tree-id1755 . -27) (undo-tree-id1756 . -27) (undo-tree-id1757 . -27) (undo-tree-id1758 . -27) (undo-tree-id1759 . -27) (undo-tree-id1760 . -27) (undo-tree-id1761 . -27) (undo-tree-id1762 . -27) (undo-tree-id1763 . -27) (undo-tree-id1764 . -27) (undo-tree-id1765 . -27) (undo-tree-id1766 . -27) (undo-tree-id1767 . -27) (undo-tree-id1768 . -65) (undo-tree-id1769 . -23) (undo-tree-id1770 . -23) (undo-tree-id1771 . -23) (undo-tree-id1772 . -23) (undo-tree-id1773 . -23) (undo-tree-id1774 . -23) (undo-tree-id1775 . -23) (undo-tree-id1776 . -23) (undo-tree-id1777 . -23) (undo-tree-id1778 . -23) (undo-tree-id1779 . -23) (undo-tree-id1780 . -23) (undo-tree-id1781 . -23) (undo-tree-id1782 . -23) (undo-tree-id1783 . -23) (undo-tree-id1784 . -23) (undo-tree-id1785 . -23) (undo-tree-id1786 . -23) (undo-tree-id1787 . -23) (undo-tree-id1788 . -23) (undo-tree-id1789 . -23) (undo-tree-id1790 . -23) (undo-tree-id1791 . -30) (undo-tree-id1792 . -30) (undo-tree-id1793 . -30) (undo-tree-id1794 . -30) (undo-tree-id1795 . -30) (undo-tree-id1796 . -30) (undo-tree-id1797 . -30) (undo-tree-id1798 . -30) (undo-tree-id1799 . -30) (undo-tree-id1800 . -17) (nil fontified t 17562 . 17563) (nil fontified t 17561 . 17562) (nil fontified t 17545 . 17561) (nil fontified t 17544 . 17545) (nil fontified t 17491 . 17544) (nil fontified t 17490 . 17491) (nil fontified t 17489 . 17490) (nil fontified t 17468 . 17489) (nil fontified t 17466 . 17468) (nil fontified t 17465 . 17466) (nil fontified t 17464 . 17465) (nil fontified t 17462 . 17464) (nil fontified t 17461 . 17462) (nil fontified t 17449 . 17461) (nil fontified t 17413 . 17449) (nil fontified t 17410 . 17413) (nil fontified t 17391 . 17410) (nil fontified t 17389 . 17391) (nil fontified t 17388 . 17389) (nil fontified t 17380 . 17388) (nil fontified t 17379 . 17380) (nil fontified t 17368 . 17379) (nil fontified t 17366 . 17368) (nil fontified t 17355 . 17366) (nil fontified t 17353 . 17355) (nil fontified t 17348 . 17353) (nil fontified t 17332 . 17348) (nil fontified t 17331 . 17332) (nil fontified t 17330 . 17331) (nil fontified t 17329 . 17330) (nil fontified t 17318 . 17329) (nil fontified t 17316 . 17318) (nil fontified t 17311 . 17316) (nil fontified t 17299 . 17311) (nil rear-nonsticky t 17575 . 17576)) (26015 48452 306429 0) 0 nil])
([nil nil ((#("E" 0 1 (face font-lock-type-face fontified t)) . -17197) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) (#("v" 0 1 (face font-lock-type-face fontified t)) . -17198) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -17199) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -17200) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) (undo-tree-id2071 . -1) (#("t" 0 1 (face font-lock-type-face rear-nonsticky t fontified t)) . -17201) (undo-tree-id2072 . -1) (undo-tree-id2073 . -1) (undo-tree-id2074 . -1) (undo-tree-id2075 . -1) (undo-tree-id2076 . -1) (undo-tree-id2077 . -1) (undo-tree-id2078 . -1) (undo-tree-id2079 . -1) (undo-tree-id2080 . -1) 17202) nil (26015 48468 152171 0) 0 nil])
([nil nil ((17567 . 17583) (#("            " 0 12 (fontified t)) . 17567) (17507 . 17511) (17445 . 17461) (#("            " 0 12 (fontified t)) . 17445) (17399 . 17403) (17336 . 17340) (#("            " 0 12 (fontified t)) . -17299) 17260) ((17299 . 17311) (#("    " 0 4 (fontified t)) . 17336) (#("    " 0 4 (fontified t)) . 17399) (17445 . 17457) (#("                " 0 16 (fontified t)) . 17445) (#("    " 0 4 (fontified t)) . 17507) (17567 . 17579) (#("                " 0 16 (fontified t)) . 17567)) (26015 48452 1603 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 17473 . 17474) (nil fontified nil 17197 . 17474) (17197 . 17474)) nil (26015 48468 152110 0) 0 nil])
([nil nil ((#("Event" 0 5 (face font-lock-type-face fontified t)) . -17299) (undo-tree-id1520 . -3) (undo-tree-id1521 . -3) (undo-tree-id1522 . -3) (undo-tree-id1523 . -3) (undo-tree-id1524 . -3) (undo-tree-id1525 . -3) (undo-tree-id1526 . -3) (undo-tree-id1527 . -3) (undo-tree-id1528 . -3) (undo-tree-id1529 . -3) (undo-tree-id1530 . -3) (undo-tree-id1531 . -3) (undo-tree-id1532 . -3) (undo-tree-id1533 . -3) (undo-tree-id1534 . -3) (undo-tree-id1535 . -3) (undo-tree-id1536 . -3) (undo-tree-id1537 . -3) (undo-tree-id1538 . -3) (undo-tree-id1539 . -3) (undo-tree-id1540 . -3) (undo-tree-id1541 . -3) (undo-tree-id1542 . -3) (undo-tree-id1543 . -3) (undo-tree-id1544 . -3) (undo-tree-id1545 . -3) (undo-tree-id1546 . -3) (undo-tree-id1547 . -3) (undo-tree-id1548 . -3) (undo-tree-id1549 . -3) (undo-tree-id1550 . -3) (undo-tree-id1551 . -3) (undo-tree-id1552 . -3) (undo-tree-id1553 . -3) (undo-tree-id1554 . -3) (undo-tree-id1555 . -3) (undo-tree-id1556 . -3) (undo-tree-id1557 . -3) (undo-tree-id1558 . -3) (undo-tree-id1559 . -3) (undo-tree-id1560 . -3) (undo-tree-id1561 . -3) (undo-tree-id1562 . -3) (undo-tree-id1563 . -3) (undo-tree-id1564 . -3) (undo-tree-id1565 . -3) (undo-tree-id1566 . -3) (undo-tree-id1567 . -3) (undo-tree-id1568 . -3) (undo-tree-id1569 . -3) (undo-tree-id1570 . -3) (undo-tree-id1571 . -3) (undo-tree-id1572 . -5) (undo-tree-id1573 . -5) (undo-tree-id1574 . -5) (undo-tree-id1575 . -5) (undo-tree-id1576 . -5) (undo-tree-id1577 . -5) (undo-tree-id1578 . -5) (undo-tree-id1579 . -5) (undo-tree-id1580 . -5) (undo-tree-id1581 . -5) (undo-tree-id1582 . -5) (undo-tree-id1583 . -5) (undo-tree-id1584 . -5) (undo-tree-id1585 . -5) 17304 (t 26015 48364 714780 340000)) ((17299 . 17304)) (26015 48451 769766 0) 0 nil])
([nil nil ((#("            " 0 12 (fontified t)) . -17197) 17181) nil (26015 48468 152108 0) 0 nil])
([nil nil ((17299 . 17300)) ((#("W" 0 1 (face font-lock-type-face fontified t)) . 17299) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1)) (26015 48451 540297 0) 0 nil])
([nil nil ((17462 . 17463)) nil (26015 48468 152102 0) 0 nil])
([nil nil ((17299 . 17310) (#("W" 0 1 (fontified nil)) . 17299) (17299 . 17300) (#("WindowEvent" 0 11 (fontified nil)) . -17299) (17299 . 17310) (#("W" 0 1 (face font-lock-type-face fontified t)) . -17299) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) 17300) ((17299 . 17300) (#("WindowEvent" 0 11 (fontified nil)) . 17299) (17299 . 17310) (#("W" 0 1 (fontified nil)) . 17299) (17299 . 17300) (#("WindowEvent" 0 11 (face font-lock-type-face fontified t)) . 17299) (undo-tree-id1586 . -11) (undo-tree-id1587 . -11) (undo-tree-id1588 . -11) (undo-tree-id1589 . -11) (undo-tree-id1590 . -11) (undo-tree-id1591 . -11) (undo-tree-id1592 . -11) (undo-tree-id1593 . -11) (undo-tree-id1594 . -11) (undo-tree-id1595 . -11) (undo-tree-id1596 . -11) (undo-tree-id1597 . -11) (undo-tree-id1598 . -11) (undo-tree-id1599 . -11) (undo-tree-id1600 . -11) (undo-tree-id1601 . -11) (undo-tree-id1602 . -8) (undo-tree-id1603 . -8) (undo-tree-id1604 . -8) (undo-tree-id1605 . -8) (undo-tree-id1606 . -8) (undo-tree-id1607 . -8) (undo-tree-id1608 . -8) (undo-tree-id1609 . -8) (undo-tree-id1610 . -8) (undo-tree-id1611 . -8) (undo-tree-id1612 . -8) (undo-tree-id1613 . -8) (undo-tree-id1614 . -8) (undo-tree-id1615 . -8) (undo-tree-id1616 . -8) (undo-tree-id1617 . -8) (undo-tree-id1618 . -8) (undo-tree-id1619 . -8) (undo-tree-id1620 . -8) (undo-tree-id1621 . -8) (undo-tree-id1622 . -8) (undo-tree-id1623 . -8) (undo-tree-id1624 . -8) (undo-tree-id1625 . -8) (undo-tree-id1626 . -8) (undo-tree-id1627 . -8) (t 26015 48386 124214 65000)) (26015 48386 112707 0) 0 nil])
([nil nil ((#("DeviceEvent" 0 11 (face font-lock-type-face fontified t)) . -17241) (undo-tree-id2098 . -11) (undo-tree-id2099 . -11) (undo-tree-id2100 . -4) (undo-tree-id2101 . -4) (undo-tree-id2102 . -4) (undo-tree-id2103 . -4) (undo-tree-id2104 . -4) (undo-tree-id2105 . -4) (undo-tree-id2106 . -4) (undo-tree-id2107 . -11) (undo-tree-id2108 . -11) (undo-tree-id2109 . -11) (undo-tree-id2110 . -11) (undo-tree-id2111 . -11) (undo-tree-id2112 . -11) (undo-tree-id2113 . -11) (undo-tree-id2114 . -11) 17252 (t 26015 48468 164103 340000)) nil (26015 48483 278316 0) 0 nil])
nil
([nil nil ((17241 . 17247)) nil (26015 48483 278298 0) 0 nil])
([nil nil ((269 . 282) (17241 . 17241) (17241 . 17252) (#("Device" 0 6 (fontified nil)) . 17241) (17241 . 17247) (#("DeviceEvent (use winit::event::DeviceEvent)" 0 43 (fontified nil)) . -17241) (17241 . 17284) (#("Device" 0 6 (face font-lock-type-face fontified t)) . -17241) (undo-tree-id2081 . -6) (undo-tree-id2082 . -1) (undo-tree-id2083 . -1) (undo-tree-id2084 . -2) (undo-tree-id2085 . -2) (undo-tree-id2086 . -2) (undo-tree-id2087 . -3) (undo-tree-id2088 . -3) (undo-tree-id2089 . -4) (undo-tree-id2090 . -4) (undo-tree-id2091 . -5) (undo-tree-id2092 . -5) (undo-tree-id2093 . -6) (undo-tree-id2094 . -6) (undo-tree-id2095 . -6) (undo-tree-id2096 . -6) (undo-tree-id2097 . -6) 17247) nil (26015 48483 278292 0) 0 nil])
([nil nil ((#("        self.camera_controller.update_camera(&mut self.camera);
        self.camera_uniform.update_view_proj(&self.camera);" 0 3 (fontified t) 3 8 (fontified t) 8 12 (face font-lock-keyword-face fontified t) 12 37 (fontified t) 37 44 (fontified t) 44 45 (face (rainbow-delimiters-depth-3-face) fontified t) 45 46 (face rust-ampersand-face fontified t) 46 49 (face font-lock-keyword-face fontified t) 49 50 (fontified t) 50 54 (face font-lock-keyword-face fontified t) 54 61 (fontified t) 61 62 (face (rainbow-delimiters-depth-3-face) fontified t) 62 64 (fontified t) 64 72 (fontified t) 72 76 (face font-lock-keyword-face fontified t) 76 108 (fontified t) 108 109 (face (rainbow-delimiters-depth-3-face) fontified t) 109 110 (face rust-ampersand-face fontified t) 110 114 (face font-lock-keyword-face fontified t) 114 121 (fontified t) 121 122 (face (rainbow-delimiters-depth-3-face) fontified t) 122 123 (fontified t)) . 13897) (undo-tree-id2115 . -123) (undo-tree-id2116 . -123) (undo-tree-id2117 . -123) (undo-tree-id2118 . -123) (undo-tree-id2119 . -122) (undo-tree-id2120 . -113) (undo-tree-id2121 . -102) (undo-tree-id2122 . -96) (undo-tree-id2123 . -87) (undo-tree-id2124 . -82) (undo-tree-id2125 . -78) (undo-tree-id2126 . -75) (undo-tree-id2127 . -73) (undo-tree-id2128 . -7) (undo-tree-id2129 . -6) (undo-tree-id2130 . -5) (undo-tree-id2131 . -4) (undo-tree-id2132 . -2) (undo-tree-id2133 . -1) (undo-tree-id2134 . -123) (t 26015 48483 290579 350000)) nil (26015 48538 522001 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 14033 . 14034) (nil fontified nil 13897 . 14034) (13897 . 14034)) nil (26015 48538 521975 0) 0 nil])
([nil nil ((13961 . 13969) (#("    " 0 4 (fontified t)) . 13961) 14034) nil (26015 48538 521973 0) 0 nil])
([nil nil ((13897 . 13905) (#("    " 0 4 (fontified t)) . 13897) 13918) nil (26015 48538 521967 0) 0 nil])
([nil nil ((#("    fn update(&mut self) {" 0 4 (fontified t) 4 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 13 (face font-lock-function-name-face fontified t) 13 14 (face (rainbow-delimiters-depth-2-face) fontified t) 14 15 (face rust-ampersand-face fontified t) 15 18 (face font-lock-keyword-face fontified t) 18 19 (fontified t) 19 23 (face font-lock-keyword-face fontified t) 23 24 (face (rainbow-delimiters-depth-2-face) fontified t) 24 25 (fontified t) 25 26 (face (rainbow-delimiters-depth-2-face) fontified t)) . 13870) (undo-tree-id2141 . -26) (undo-tree-id2142 . -26) (undo-tree-id2143 . -26) (undo-tree-id2144 . -26) (undo-tree-id2145 . -25) (undo-tree-id2146 . -21) (undo-tree-id2147 . -19) (undo-tree-id2148 . -17) (undo-tree-id2149 . -16) (undo-tree-id2150 . -15) (undo-tree-id2151 . -26) (t 26015 48538 536632 739000)) nil (26015 48558 239985 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 13915 . 13916) (nil fontified nil 13870 . 13916) (13870 . 13916)) nil (26015 48558 239972 0) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . -13915) (undo-tree-id2135 . -1) (undo-tree-id2136 . -1) (undo-tree-id2137 . -1) (undo-tree-id2138 . -1) (undo-tree-id2139 . -1) (undo-tree-id2140 . -1) 13916) nil (26015 48605 848372 0) 0 nil])
([nil nil ((14446 . 14450) (#("    " 0 4 (fontified nil)) . 14445) (undo-tree-id2263 . -4) (undo-tree-id2264 . -4) (undo-tree-id2265 . -4) (14445 . 14450) (#("    " 0 4 (fontified nil)) . -14436) (14448 . 14449)) nil (26015 48634 15440 0) 0 nil] [nil nil ((#("        self.light_uniform.position =
            (cgmath::Matrix4::from_axis_angle((0.0, 1.0, 0.0).into(), cgmath::Deg(1.0))
             * old_position)
            .into();" 0 8 (fontified t) 8 12 (face font-lock-keyword-face fontified t) 12 38 (fontified t) 38 50 (fontified t) 50 51 (face (rainbow-delimiters-depth-3-face) fontified t) 51 57 (face font-lock-constant-face fontified t) 57 59 (fontified t) 59 66 (face font-lock-type-face fontified t) 66 83 (fontified t) 83 84 (face (rainbow-delimiters-depth-4-face) fontified t) 84 85 (face (rainbow-delimiters-depth-5-face) fontified t) 85 98 (fontified t) 98 99 (face (rainbow-delimiters-depth-5-face) fontified t) 99 104 (fontified t) 104 105 (face (rainbow-delimiters-depth-5-face) fontified t) 105 106 (face (rainbow-delimiters-depth-5-face) fontified t) 106 108 (fontified t) 108 114 (face font-lock-constant-face fontified t) 114 116 (fontified t) 116 119 (face font-lock-type-face fontified t) 119 120 (face (rainbow-delimiters-depth-5-face) fontified t) 120 123 (fontified t) 123 124 (face (rainbow-delimiters-depth-5-face) fontified t) 124 125 (face (rainbow-delimiters-depth-4-face) fontified t) 125 126 (fontified t) 126 137 (fontified t) 137 153 (fontified t) 153 154 (face (rainbow-delimiters-depth-3-face) fontified t) 154 155 (fontified t) 155 171 (fontified t) 171 172 (fontified t) 172 173 (face (rainbow-delimiters-depth-3-face) fontified t) 173 174 (face (rainbow-delimiters-depth-3-face) fontified t) 174 175 (fontified t)) . 14273) (undo-tree-id2159 . -175) (undo-tree-id2160 . -175) (undo-tree-id2161 . -175) (undo-tree-id2162 . -175) (undo-tree-id2163 . -144) (undo-tree-id2164 . -140) (undo-tree-id2165 . -50) (undo-tree-id2166 . -49) (undo-tree-id2167 . -47) (undo-tree-id2168 . -46) (undo-tree-id2169 . -45) (undo-tree-id2170 . -5) (undo-tree-id2171 . -4) (undo-tree-id2172 . -3) (undo-tree-id2173 . -2) (undo-tree-id2174 . -1) (undo-tree-id2175 . -175) (t 26015 48558 251322 677000)) ((14273 . 14448)) (26015 48605 9582 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 14622 . 14623) (nil fontified nil 14450 . 14623) (14450 . 14623)) nil (26015 48634 15435 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 14445 . 14446) (nil fontified nil 14273 . 14446) (14273 . 14446)) ((#("self.light_uniform.position =
    (cgmath::Quaternion::from_axis_angle((0.0, 1.0, 0.0).into(), cgmath::Deg(60.0 * dt.as_secs_f32()))
    * old_position).into(); // UPDATED!
" 0 4 (face font-lock-keyword-face fontified nil) 4 30 (fontified nil) 30 34 (fontified nil) 34 35 (face (rainbow-delimiters-depth-3-face) fontified nil) 35 41 (face font-lock-constant-face fontified nil) 41 43 (fontified nil) 43 53 (face font-lock-type-face fontified nil) 53 70 (fontified nil) 70 71 (face (rainbow-delimiters-depth-4-face) fontified nil) 71 72 (face (rainbow-delimiters-depth-5-face) fontified nil) 72 85 (fontified nil) 85 86 (face (rainbow-delimiters-depth-5-face) fontified nil) 86 91 (fontified nil) 91 92 (face (rainbow-delimiters-depth-5-face) fontified nil) 92 93 (face (rainbow-delimiters-depth-5-face) fontified nil) 93 95 (fontified nil) 95 101 (face font-lock-constant-face fontified nil) 101 103 (fontified nil) 103 106 (face font-lock-type-face fontified nil) 106 107 (face (rainbow-delimiters-depth-5-face) fontified nil) 107 128 (fontified nil) 128 129 (face (rainbow-delimiters-depth-6-face) fontified nil) 129 130 (face (rainbow-delimiters-depth-6-face) fontified nil) 130 131 (face (rainbow-delimiters-depth-5-face) fontified nil) 131 132 (face (rainbow-delimiters-depth-4-face) fontified nil) 132 133 (fontified nil) 133 137 (fontified nil) 137 151 (fontified nil) 151 152 (face (rainbow-delimiters-depth-3-face) fontified nil) 152 157 (fontified nil) 157 158 (face (rainbow-delimiters-depth-3-face) fontified nil) 158 159 (face (rainbow-delimiters-depth-3-face) fontified nil) 159 161 (fontified nil) 161 164 (face font-lock-comment-delimiter-face fontified nil) 164 172 (face font-lock-comment-face fontified nil) 172 173 (face font-lock-comment-face rear-nonsticky nil fontified nil)) . 14273) (undo-tree-id2208 . -133) (undo-tree-id2209 . -135) (undo-tree-id2210 . -133) (undo-tree-id2211 . -133) (undo-tree-id2212 . -133) (undo-tree-id2213 . -133) (undo-tree-id2214 . -133) (undo-tree-id2215 . -133) (undo-tree-id2216 . -133) (undo-tree-id2217 . -133) (undo-tree-id2218 . -133) (undo-tree-id2219 . -133) (undo-tree-id2220 . -133) (undo-tree-id2221 . -133) (undo-tree-id2222 . -133) (undo-tree-id2223 . -133) (undo-tree-id2224 . -133) (undo-tree-id2225 . -133) (undo-tree-id2226 . -133) (undo-tree-id2227 . -133) (undo-tree-id2228 . -133) (undo-tree-id2229 . -133) (undo-tree-id2230 . -133) (undo-tree-id2231 . -133) (undo-tree-id2232 . -133) (undo-tree-id2233 . -133) (undo-tree-id2234 . -133) (undo-tree-id2235 . -133) (undo-tree-id2236 . -133) (undo-tree-id2237 . -133) (undo-tree-id2238 . -133) (undo-tree-id2239 . -133) (nil fontified t 14405 . 14406) (nil fontified t 14404 . 14405) (nil fontified t 14403 . 14404) (nil fontified t 14402 . 14403) (nil fontified t 14401 . 14402) (nil fontified t 14380 . 14401) (nil fontified t 14379 . 14380) (nil fontified t 14376 . 14379) (nil fontified t 14374 . 14376) (nil fontified t 14368 . 14374) (nil fontified t 14366 . 14368) (nil fontified t 14365 . 14366) (nil fontified t 14364 . 14365) (nil fontified t 14359 . 14364) (nil fontified t 14358 . 14359) (nil fontified t 14345 . 14358) (nil fontified t 14344 . 14345) (nil fontified t 14343 . 14344) (nil fontified t 14326 . 14343) (nil fontified t 14316 . 14326) (nil fontified t 14314 . 14316) (nil fontified t 14308 . 14314) (nil fontified t 14307 . 14308) (nil fontified t 14303 . 14307) (nil fontified t 14277 . 14303) (nil fontified t 14273 . 14277) (nil rear-nonsticky t 14445 . 14446)) (26015 48604 553799 0) 0 nil])
([nil nil ((14587 . 14596) (#("    " 0 4 (fontified t)) . 14587) (14480 . 14488) (#("    " 0 4 (fontified t)) . 14480) 14464) nil (26015 48634 15433 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -14460) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (14410 . 14419) (#("    " 0 4 (fontified t)) . 14410) (undo-tree-id2158 . -2) (14303 . 14311) (#("    " 0 4 (fontified t)) . 14303) (14269 . 14273) (#("    " 0 4 (fontified t)) . -14198) 14194) ((14198 . 14202) (#("    " 0 4 (fontified t)) . 14269) (14303 . 14307) (#("        " 0 8 (fontified t)) . 14303) (14410 . 14414) (#("         " 0 9 (fontified t)) . 14410) (undo-tree-id2176 . -9) (undo-tree-id2177 . -9) (undo-tree-id2178 . -9) (undo-tree-id2179 . -9) (undo-tree-id2180 . -9) (undo-tree-id2181 . -9) (undo-tree-id2182 . -9) (undo-tree-id2183 . -9) (undo-tree-id2184 . -9) (undo-tree-id2185 . -9) (undo-tree-id2186 . -9) (undo-tree-id2187 . -9) (undo-tree-id2188 . -9) (undo-tree-id2189 . -9) (undo-tree-id2190 . -9) (undo-tree-id2191 . -9) (undo-tree-id2192 . -9) (undo-tree-id2193 . -9) (undo-tree-id2194 . -9) (undo-tree-id2195 . -9) (undo-tree-id2196 . -9) (undo-tree-id2197 . -9) (undo-tree-id2198 . -9) (undo-tree-id2199 . -9) (undo-tree-id2200 . -9) (undo-tree-id2201 . -9) (undo-tree-id2202 . -9) (undo-tree-id2203 . -9) (undo-tree-id2204 . -9) (undo-tree-id2205 . -9) (undo-tree-id2206 . -9) (undo-tree-id2207 . -9) (14460 . 14464) (t 26015 48595 548669 749000)) (26015 48595 535377 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -14711) (#("    " 0 4 (fontified t)) . -14617) (undo-tree-id2254 . -1) (undo-tree-id2255 . -1) (undo-tree-id2256 . -1) (undo-tree-id2257 . -1) (undo-tree-id2258 . -1) (#("    " 0 2 (fontified t) 2 4 (fontified t)) . -14392) (#("    " 0 4 (fontified t)) . -14307) (undo-tree-id2259 . -4) (undo-tree-id2260 . -3) (undo-tree-id2261 . -1) (#("    " 0 4 (fontified t)) . -14269) (undo-tree-id2262 . -1) (#("    " 0 4 (fontified t)) . -14194) (#("    " 0 4 (fontified t)) . -14170) 14179) nil (26015 48634 15430 0) 0 nil])
nil
([nil nil ((14755 . 14759) (14653 . 14661) (#("    " 0 4 (fontified t)) . 14653) (undo-tree-id2240 . -4) (undo-tree-id2241 . -4) (undo-tree-id2242 . -4) (undo-tree-id2243 . -4) (undo-tree-id2244 . -4) (14612 . 14616) (14500 . 14504) (14454 . 14462) (#("    " 0 4 (fontified t)) . 14454) (undo-tree-id2245 . -4) (undo-tree-id2246 . -4) (undo-tree-id2247 . -4) (undo-tree-id2248 . -4) (14440 . 14444) (14412 . 14416) (14323 . 14327) (14277 . 14285) (#("    " 0 4 (fontified t)) . 14277) (undo-tree-id2249 . -4) (undo-tree-id2250 . -4) (undo-tree-id2251 . -3) (undo-tree-id2252 . -2) (undo-tree-id2253 . -1) (14198 . 14206) (#("    " 0 4 (fontified t)) . 14198) (14170 . 14178) (#("    " 0 3 (fontified t) 3 4 (fontified t)) . 14170) (13870 . 13874) 13861) nil (26015 48634 15416 0) 0 nil])
([nil nil ((apply -12 14277 14465 undo--wrap-and-run-primitive-undo 14277 14465 ((14449 . 14452) (14417 . 14420) (14326 . 14329) (14285 . 14288) 14277))) nil (26015 48634 15388 0) 0 nil])
([nil nil ((#("Quaternion" 0 10 (face font-lock-type-face fontified t)) . -14525) (undo-tree-id2271 . -10) (undo-tree-id2272 . -10) (undo-tree-id2273 . -10) (undo-tree-id2274 . -10) (undo-tree-id2275 . -10) (undo-tree-id2276 . -10) (undo-tree-id2277 . -10) (undo-tree-id2278 . -10) (undo-tree-id2279 . -10) (undo-tree-id2280 . -10) (undo-tree-id2281 . -10) (undo-tree-id2282 . -10) (undo-tree-id2283 . -10) (undo-tree-id2284 . -10) 14535 (t 26015 48634 28076 304000)) nil (26015 48729 738560 0) 0 nil])
([nil nil ((14525 . 14526)) nil (26015 48729 738545 0) 0 nil])
([nil nil ((14525 . 14532) (#("M" 0 1 (fontified nil)) . 14525) (14525 . 14526) (#("Matrix4" 0 7 (fontified nil)) . -14525) (14525 . 14532) (#("M" 0 1 (face font-lock-type-face fontified t)) . -14525) (undo-tree-id2266 . -1) (undo-tree-id2267 . -1) (undo-tree-id2268 . -1) (undo-tree-id2269 . -1) (undo-tree-id2270 . -1) 14526) nil (26015 48729 738536 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 17439 . 17440) (nil fontified nil 17375 . 17440) (17375 . 17440) (t 26015 48729 752252 958000)) nil (26015 48791 417923 0) 0 nil])
([nil nil ((#("                    state.update();" 0 15 (fontified t) 15 32 (fontified t) 32 33 (face (rainbow-delimiters-depth-7-face) fontified t) 33 34 (face (rainbow-delimiters-depth-7-face) fontified t) 34 35 (fontified t)) . 18899) (undo-tree-id2285 . -35) (undo-tree-id2286 . -35) (undo-tree-id2287 . -35) (undo-tree-id2288 . -35) (undo-tree-id2289 . -31) (undo-tree-id2290 . -19) (undo-tree-id2291 . -15) (undo-tree-id2292 . -11) (undo-tree-id2293 . -8) (undo-tree-id2294 . -5) (undo-tree-id2295 . -3) (undo-tree-id2296 . -1) (undo-tree-id2297 . -35)) nil (26015 48791 417920 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 19071 . 19072) (nil fontified nil 18899 . 19072) (18899 . 19072)) nil (26015 48791 417893 0) 0 nil])
([nil current ((19067 . 19071) (19023 . 19027) (18970 . 18974) (18915 . 18919) 18763) nil (26015 48791 417888 0) 0 nil])
nil
