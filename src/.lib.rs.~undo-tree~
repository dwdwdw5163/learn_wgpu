(undo-tree-save-format-version . 1)
"a486961b1b07f260682528c87f6d162c6a1a667c"
[nil nil nil nil (26008 4661 992159 0) 0 nil]
([nil nil ((apply 51 8485 9163 undo--wrap-and-run-primitive-undo 8485 9163 ((#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -9124) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -9113) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -9099) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -9049) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -8991) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -8946) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -8898) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -8844) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -8828) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -8777) (#<marker at 12362 in rs-wgpu/lib.rs> . -2) (#<marker at 12362 in rs-wgpu/lib.rs> . -1) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -8766) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -8752) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -8701) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -8642) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -8596) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -8548) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -8493) 8485))) nil (26008 4763 332573 0) 0 nil] [nil nil ((apply -54 8468 9269 undo--wrap-and-run-primitive-undo 8468 9269 ((9223 . 9226) (9206 . 9209) (9186 . 9189) (9130 . 9133) (9066 . 9069) (9015 . 9018) (8961 . 8964) (8901 . 8904) (8879 . 8882) (8822 . 8825) (8805 . 8808) (8785 . 8788) (8728 . 8731) (8663 . 8666) (8611 . 8614) (8557 . 8560) (8496 . 8499) (8476 . 8479) 8468))) ((apply 54 8468 9215 undo--wrap-and-run-primitive-undo 8468 9215 ((#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 8476) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 8496) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 8557) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 8611) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 8663) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 8728) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 8785) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 8805) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 8822) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 8879) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 8901) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 8961) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 9015) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 9066) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 9130) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 9186) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 9206) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 9223) 8468))) (26008 4661 710293 0) 0 nil])
([nil nil ((8690 . 8693) (t 26008 4763 337354 925000)) nil (26008 4843 601255 0) 0 nil])
([nil nil ((8468 . 8469)) ((#("u" 0 1 (fontified t)) . 8468) (undo-tree-id0 . -1)) (26008 4661 709955 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -8690) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (#("a" 0 1 (fontified t)) . -8691) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (#("s" 0 1 (face font-lock-keyword-face fontified t)) . -8692) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) 8693) nil (26008 4843 601249 0) 0 nil])
nil
([nil nil ((8690 . 8692) (t 26008 4843 603909 314000)) nil (26008 4911 943952 0) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -8691) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) 8692) nil (26008 4911 943950 0) 0 nil])
([nil nil ((8691 . 8693)) nil (26008 4911 943943 0) 0 nil])
([nil nil ((apply yas--snippet-revive 8691 8701 #s(yas--snippet nil nil #s(yas--exit 8701 nil) 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 8701 nil) 0 nil nil nil nil)) (8691 . 8701) (#("as_slice()$0" 0 12 (fontified nil)) . 8691) (8691 . 8703) (#("as" 0 2 (fontified nil)) . 8691) (8691 . 8693) (#("as_slice()" 0 10 (fontified nil)) . -8691) (8691 . 8701) (#("as" 0 2 (face font-lock-keyword-face fontified t)) . -8691) (undo-tree-id65 . -2) (undo-tree-id66 . -2) (undo-tree-id67 . -1) (undo-tree-id68 . -2) (undo-tree-id69 . -2) (undo-tree-id70 . -2) (undo-tree-id71 . -2) (undo-tree-id72 . -2) 8693) nil (26008 4911 943940 0) 0 nil])
([nil nil ((9049 . 9052)) nil (26008 4911 943929 0) 0 nil])
([nil nil ((9052 . 9055)) nil (26008 4911 943928 0) 0 nil])
([nil nil ((apply yas--snippet-revive 9050 9060 #s(yas--snippet nil nil #s(yas--exit 9060 nil) 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 9060 nil) 1 nil nil nil nil)) (9050 . 9060) (#("as_slice()$0" 0 12 (fontified nil)) . 9050) (9050 . 9062) (#("as_sl" 0 5 (fontified nil)) . 9050) (9050 . 9055) (#("as_slice()" 0 10 (fontified nil)) . -9050) (9050 . 9060) (#("as_sl" 0 5 (fontified t)) . -9050) (undo-tree-id46 . -2) (undo-tree-id47 . -5) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -2) (undo-tree-id51 . -2) (undo-tree-id52 . -2) (undo-tree-id53 . -2) (undo-tree-id54 . -2) (undo-tree-id55 . -3) (undo-tree-id56 . -3) (undo-tree-id57 . -4) (undo-tree-id58 . -4) (undo-tree-id59 . -4) (undo-tree-id60 . -4) (undo-tree-id61 . -5) (undo-tree-id62 . -5) (undo-tree-id63 . -5) (undo-tree-id64 . -5) 9055) nil (26008 4911 943926 0) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . -8681) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) 8682) nil (26008 4911 943903 0) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . -9040) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) 9041) nil (26008 4911 943888 0) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . -1501) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) 1502 (t 26008 4911 947137 31000)) nil (26008 4962 391026 0) 0 nil])
([nil nil ((1501 . 1502)) nil (26008 4962 390998 0) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . -1561) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) 1562 (t 26008 4962 394326 354000)) nil (26008 4981 381997 0) 0 nil])
([nil nil ((1561 . 1562)) nil (26008 4981 381984 0) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . -1597) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) 1598) nil (26008 4981 381982 0) 0 nil])
([nil nil ((1597 . 1598)) nil (26008 4981 381969 0) 0 nil])
([nil nil ((#("3" 0 1 (fontified t)) . -1501) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) 1502 (t 26008 4981 385423 679000)) nil (26008 4993 362392 0) 0 nil])
([nil nil ((1501 . 1502)) nil (26008 4993 362368 0) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . -1501) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) 1502 (t 26008 4993 366100 591000)) nil (26008 5044 889868 0) 0 nil])
([nil nil ((1501 . 1502)) nil (26008 5044 889816 0) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . -1026) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (#("0" 0 1 (fontified t)) . -1027) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) 1028 (t 26008 5044 893358 288000)) nil (26008 5060 710493 0) 0 nil])
([nil nil ((1026 . 1027)) nil (26008 5060 710459 0) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -1127) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) 1128 (t 26008 5060 714140 114000)) nil (26008 5215 547320 0) 0 nil])
([nil nil ((1129 . 1130) (1139 . 1140) (1127 . 1127) (1127 . 1129)) nil (26008 5215 547304 0) 0 nil])
([nil nil ((1129 . 1130)) nil (26008 5215 547302 0) 0 nil])
([nil nil ((1129 . 1138) (#("p" 0 1 (fontified nil)) . 1129) (1129 . 1130) (#("point_num" 0 9 (fontified nil)) . -1129) (1129 . 1138) (#("p" 0 1 (fontified t)) . -1129) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) 1130) nil (26008 5215 547299 0) 0 nil])
([nil nil ((1139 . 1140)) nil (26008 5215 547278 0) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -1151) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) 1152 (t 26008 5215 550721 186000)) nil (26008 5217 725348 0) 0 nil])
([nil nil ((1138 . 1143) (t 26008 5217 729271 418000)) nil (26008 5225 838749 0) 0 nil])
([nil nil ((1142 . 1145) (#("f" 0 1 (fontified nil)) . 1142) (1142 . 1143) (#("f64" 0 3 (fontified nil)) . -1142) (1142 . 1145) (#("f" 0 1 (fontified t)) . -1142) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) 1143) nil (26008 5225 838966 0) 0 nil])
([nil nil ((#("(2.0*std::f64::consts::PI/(n as f64)) as f32" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t) 1 5 (fontified t) 5 8 (face font-lock-constant-face fontified t) 8 10 (fontified t) 10 13 (face font-lock-type-face fontified t) 13 15 (fontified t) 15 21 (face font-lock-constant-face fontified t) 21 23 (fontified t) 23 25 (face font-lock-type-face fontified t) 25 26 (fontified t) 26 27 (face (rainbow-delimiters-depth-5-face) fontified t) 27 29 (fontified t) 29 31 (face font-lock-keyword-face fontified t) 31 32 (fontified t) 32 35 (face font-lock-type-face fontified t) 35 36 (face (rainbow-delimiters-depth-5-face) fontified t) 36 37 (face (rainbow-delimiters-depth-4-face) fontified t) 37 38 (fontified t) 38 40 (face font-lock-keyword-face fontified t) 40 41 (fontified t) 41 44 (face font-lock-type-face fontified t)) . -1191) (undo-tree-id222 . -44) (undo-tree-id223 . -44) (undo-tree-id224 . -1) (undo-tree-id225 . -5) (undo-tree-id226 . -10) (undo-tree-id227 . -13) (undo-tree-id228 . -14) (undo-tree-id229 . -16) (undo-tree-id230 . -18) (undo-tree-id231 . -19) (undo-tree-id232 . -22) (undo-tree-id233 . -24) (undo-tree-id234 . -26) (undo-tree-id235 . -28) (undo-tree-id236 . -30) (undo-tree-id237 . -32) (undo-tree-id238 . -34) (undo-tree-id239 . -36) (undo-tree-id240 . -38) (undo-tree-id241 . -39) (undo-tree-id242 . -41) (undo-tree-id243 . -42) (undo-tree-id244 . -43) (undo-tree-id245 . -44) (undo-tree-id246 . -44) (undo-tree-id247 . -44) (undo-tree-id248 . -44) (undo-tree-id249 . -44) (undo-tree-id250 . -44) (undo-tree-id251 . -44) (undo-tree-id252 . -44) (undo-tree-id253 . -44) 1235 (t 26008 5226 306127 742000)) nil (26008 5238 733959 0) 0 nil] [nil nil ((1145 . 1154)) ((#("
        " 0 9 (fontified t)) . 1145) (undo-tree-id220 . -9) (undo-tree-id221 . -1)) (26008 5225 838725 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1253 . 1254) (nil fontified nil 1251 . 1254) (nil fontified nil 1250 . 1251) (nil fontified nil 1248 . 1250) (nil fontified nil 1247 . 1248) (nil fontified nil 1246 . 1247) (nil fontified nil 1245 . 1246) (nil fontified nil 1242 . 1245) (nil fontified nil 1241 . 1242) (nil fontified nil 1239 . 1241) (nil fontified nil 1237 . 1239) (nil fontified nil 1236 . 1237) (nil fontified nil 1235 . 1236) (nil fontified nil 1234 . 1235) (nil fontified nil 1231 . 1234) (nil fontified nil 1230 . 1231) (nil fontified nil 1228 . 1230) (nil fontified nil 1218 . 1228) (nil fontified nil 1217 . 1218) (nil fontified nil 1216 . 1217) (nil fontified nil 1214 . 1216) (nil fontified nil 1212 . 1214) (nil fontified nil 1206 . 1212) (nil fontified nil 1204 . 1206) (nil fontified nil 1201 . 1204) (nil fontified nil 1199 . 1201) (nil fontified nil 1196 . 1199) (nil fontified nil 1192 . 1196) (nil fontified nil 1191 . 1192) (1191 . 1254)) nil (26008 5238 733911 0) 0 nil])
nil
([nil nil ((#("1" 0 1 (fontified t)) . -1538) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) 1539 (t 26008 5238 737618 612000)) nil (26008 5316 363308 0) 0 nil])
([nil nil ((1538 . 1539)) nil (26008 5316 363282 0) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . -1598) (undo-tree-id271 . -1) (undo-tree-id272 . -1) 1599 (t 26008 5316 366991 135000)) nil (26008 5331 328178 0) 0 nil])
([nil nil ((1598 . 1599)) nil (26008 5331 328174 0) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . -1634) (undo-tree-id270 . -1) 1635) nil (26008 5331 328173 0) 0 nil])
([nil nil ((1634 . 1635)) nil (26008 5331 328161 0) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . -1538) (undo-tree-id273 . -1) (undo-tree-id274 . -1) 1539 (t 26008 5331 332998 855000)) nil (26008 5347 483683 0) 0 nil])
([nil nil ((1538 . 1539)) nil (26008 5347 483667 0) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -1537) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (#("1" 0 1 (fontified t)) . -1538) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) 1539 (t 26008 5347 487681 488000)) nil (26008 5375 897441 0) 0 nil])
([nil nil ((1607 . 1616) (t 26008 5375 901572 893000)) nil (26008 5423 64115 0) 0 nil])
([nil nil ((1616 . 1624)) nil (26008 5423 64114 0) 0 nil])
([nil nil ((#(">" 0 1 (syntax-table (1) fontified t)) . -1622) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (#("=" 0 1 (fontified t)) . -1623) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) 1624) nil (26008 5423 64112 0) 0 nil])
([nil nil ((1622 . 1624)) nil (26008 5423 64084 0) 0 nil])
([nil nil ((1622 . 1623)) nil (26008 5423 64083 0) 0 nil])
([nil nil ((1625 . 1627)) nil (26008 5423 64082 0) 0 nil])
([nil nil ((1626 . 1635) (#("p" 0 1 (fontified nil)) . 1626) (1626 . 1627) (#("point_num" 0 9 (fontified nil)) . -1626) (1626 . 1635) (#("p" 0 1 (fontified t)) . -1626) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) 1627) nil (26008 5423 64080 0) 0 nil])
([nil nil ((1644 . 1648) 1663) nil (26008 5423 64073 0) 0 nil])
([nil nil ((1635 . 1637)) nil (26008 5423 64072 0) 0 nil])
([nil nil ((1677 . 1678)) nil (26008 5423 64071 0) 0 nil])
([nil nil ((1677 . 1686)) nil (26008 5423 64070 0) 0 nil])
([nil nil ((1687 . 1690)) nil (26008 5423 64069 0) 0 nil])
([nil nil ((apply yas--snippet-revive 1688 1717 #s(yas--snippet nil nil #s(yas--exit 1707 nil) 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1707 nil) 2 nil nil nil nil)) (1688 . 1717) (#("else {
            $0
        }" 0 31 (fontified nil)) . 1688) (1710 . 1718) (1695 . 1707) (#("    " 0 4 (fontified nil)) . 1695) (1688 . 1703) (#("el" 0 2 (fontified nil)) . 1688) (1688 . 1690) (#("else" 0 4 (fontified nil)) . -1688) (1688 . 1692) (#("el" 0 2 (fontified t)) . -1688) (undo-tree-id379 . -2) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -2) (undo-tree-id383 . -2) (undo-tree-id384 . -2) (undo-tree-id385 . -2) 1690) nil (26008 5423 64067 0) 0 nil])
([nil nil ((#(">" 0 1 (syntax-table (1) fontified t)) . -1623) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (#("=" 0 1 (fontified t)) . -1624) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) 1625) nil (26008 5423 64054 0) 0 nil])
([nil nil ((1623 . 1624)) nil (26008 5423 64014 0) 0 nil])
([nil nil ((1706 . 1708)) nil (26008 5423 64013 0) 0 nil])
([nil nil ((1706 . 1713) (#("in" 0 2 (fontified nil)) . 1706) (1706 . 1708) (#("indices" 0 7 (fontified nil)) . -1706) (1706 . 1713) (#("in" 0 2 (face font-lock-keyword-face fontified t)) . -1706) (undo-tree-id331 . -2) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -2) (undo-tree-id335 . -2) (undo-tree-id336 . -2) (undo-tree-id337 . -2) 1708) nil (26008 5423 64011 0) 0 nil])
([nil nil ((1713 . 1716)) nil (26008 5423 64002 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1719 1720 nil nil nil t #s(yas--exit 1721 nil))) #s(yas--exit 1721 nil) 3 nil #s(yas--field 1 1719 1720 nil nil nil t #s(yas--exit 1721 nil)) nil nil)) (1714 . 1725) (#("push(${1:value})$0" 0 18 (fontified nil)) . 1714) (1714 . 1732) (#("pu" 0 2 (fontified nil)) . 1714) (1714 . 1716) (#("push(…)" 0 7 (fontified nil)) . -1714) (1714 . 1721) (#("pu" 0 2 (fontified t)) . -1714) (undo-tree-id323 . -2) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -2) (undo-tree-id329 . -2) (undo-tree-id330 . -2) 1716) nil (26008 5423 64000 0) 0 nil])
([nil nil ((#("value" 0 5 (fontified nil)) . 1720) (undo-tree-id322 . -5) (1719 . 1720)) nil (26008 5423 63987 0) 0 nil])
([nil nil ((apply yas--snippet-revive 1714 1721 #s(yas--snippet nil (#s(yas--field 1 1719 1720 nil nil nil t #s(yas--exit 1721 nil))) #s(yas--exit 1721 nil) 3 nil #s(yas--field 1 1719 1720 nil nil nil t #s(yas--exit 1721 nil)) nil nil))) nil (26008 5423 63978 0) 0 nil])
([nil nil ((1721 . 1722)) nil (26008 5423 63973 0) 0 nil])
([nil nil ((5565 . 5573) (#("        " 0 8 (fontified nil)) . 5564) (undo-tree-id413 . -8) (undo-tree-id414 . -8) (undo-tree-id415 . -8) (5563 . 5573) (t 26008 5423 97837 466000)) nil (26011 38401 423693 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 5751 . 5752) (nil fontified nil 5564 . 5752) (5564 . 5752)) nil (26011 38401 423679 0) 0 nil])
([nil nil ((5630 . 5638) 5752) nil (26011 38401 423677 0) 0 nil])
([nil nil ((5564 . 5572) 5608) nil (26011 38401 423676 0) 0 nil])
([nil nil ((5768 . 5777)) nil (26011 38401 423675 0) 0 nil])
([nil nil ((5768 . 5777)) nil (26011 38401 424357 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 6335 . 6336) (nil fontified nil 5777 . 6336) (5777 . 6336)) nil (26011 38427 631909 0) 0 nil] [nil nil ((nil rear-nonsticky nil 5989 . 5990) (nil fontified nil 5982 . 5990) (nil fontified nil 5981 . 5982) (nil fontified nil 5980 . 5981) (nil fontified nil 5973 . 5980) (nil fontified nil 5970 . 5973) (nil fontified nil 5968 . 5970) (nil fontified nil 5967 . 5968) (nil fontified nil 5966 . 5967) (nil fontified nil 5959 . 5966) (nil fontified nil 5958 . 5959) (nil fontified nil 5942 . 5958) (nil fontified nil 5920 . 5942) (nil fontified nil 5919 . 5920) (nil fontified nil 5911 . 5919) (nil fontified nil 5910 . 5911) (nil fontified nil 5909 . 5910) (nil fontified nil 5897 . 5909) (nil fontified nil 5890 . 5897) (nil fontified nil 5888 . 5890) (nil fontified nil 5881 . 5888) (nil fontified nil 5878 . 5881) (nil fontified nil 5863 . 5878) (nil fontified nil 5862 . 5863) (nil fontified nil 5859 . 5862) (nil fontified nil 5851 . 5859) (nil fontified nil 5842 . 5851) (nil fontified nil 5839 . 5842) (nil fontified nil 5837 . 5839) (nil fontified nil 5836 . 5837) (nil fontified nil 5820 . 5836) (nil fontified nil 5819 . 5820) (nil fontified nil 5805 . 5819) (nil fontified nil 5802 . 5805) (nil fontified nil 5789 . 5802) (nil fontified nil 5788 . 5789) (nil fontified nil 5785 . 5788) (nil fontified nil 5777 . 5785) (5777 . 5990)) ((#("        let diffuse_bytes = include_bytes!(\"happy-tree.png\"); // CHANGED!
        let diffuse_texture = texture::Texture::from_bytes(&device, &queue, diffuse_bytes, \"happy-tree.png\").unwrap(); // CHANGED!
        " 0 8 (fontified nil) 8 11 (face font-lock-keyword-face fontified nil) 11 12 (fontified nil) 12 25 (face font-lock-variable-name-face fontified nil) 25 28 (fontified nil) 28 42 (face font-lock-preprocessor-face fontified nil) 42 43 (face (rainbow-delimiters-depth-3-face) fontified nil) 43 59 (face font-lock-string-face fontified nil) 59 60 (face (rainbow-delimiters-depth-3-face) fontified nil) 60 62 (fontified nil) 62 65 (face font-lock-comment-delimiter-face fontified nil) 65 74 (face font-lock-comment-face fontified nil) 74 82 (fontified nil) 82 85 (face font-lock-keyword-face fontified nil) 85 86 (fontified nil) 86 101 (face font-lock-variable-name-face fontified nil) 101 104 (fontified nil) 104 111 (face font-lock-constant-face fontified nil) 111 113 (fontified nil) 113 120 (face font-lock-type-face fontified nil) 120 132 (fontified nil) 132 133 (face (rainbow-delimiters-depth-3-face) fontified nil) 133 134 (face rust-ampersand-face fontified nil) 134 142 (fontified nil) 142 143 (face rust-ampersand-face fontified nil) 143 165 (fontified nil) 165 181 (face font-lock-string-face fontified nil) 181 182 (face (rainbow-delimiters-depth-3-face) fontified nil) 182 189 (fontified nil) 189 190 (face (rainbow-delimiters-depth-3-face) fontified nil) 190 191 (face (rainbow-delimiters-depth-3-face) fontified nil) 191 193 (fontified nil) 193 196 (face font-lock-comment-delimiter-face fontified nil) 196 203 (face font-lock-comment-face fontified nil) 203 204 (face font-lock-comment-face fontified nil rear-nonsticky t) 204 205 (face font-lock-comment-face fontified nil) 205 212 (fontified nil) 212 213 (rear-nonsticky nil fontified nil)) . 5777) (undo-tree-id416 . -213) (undo-tree-id417 . -213) (undo-tree-id418 . -205) (nil fontified t 5842 . 5851) (nil fontified t 5981 . 5982) (nil rear-nonsticky t 5989 . 5990)) (26011 38401 423667 0) 0 nil])
([nil nil ((6445 . 6453) (6431 . 6443) (#("    " 0 4 (fontified t)) . 6431) (6380 . 6396) (#("        " 0 8 (fontified t)) . 6380) (6361 . 6377) (#("        " 0 8 (fontified t)) . 6361) (6339 . 6359) (#("            " 0 12 (fontified t)) . 6339) (6235 . 6259) (#("                " 0 16 (fontified t)) . 6235) (undo-tree-id419 . -14) (6199 . 6223) (#("                " 0 16 (fontified t)) . 6199) (undo-tree-id420 . -13) (6156 . 6176) (#("            " 0 12 (fontified t)) . 6156) (undo-tree-id421 . -12) (6133 . 6153) (#("            " 0 12 (fontified t)) . 6133) (undo-tree-id422 . -11) (6028 . 6052) (#("                " 0 16 (fontified t)) . 6028) (undo-tree-id423 . -10) (5992 . 6016) (#("                " 0 16 (fontified t)) . 5992) (5949 . 5969) (#("            " 0 12 (fontified t)) . 5949) (undo-tree-id424 . -9) (5921 . 5937) (#("        " 0 8 (fontified t)) . 5921) (undo-tree-id425 . -8) (5869 . 5885) (#("        " 0 8 (fontified t)) . 5869) (undo-tree-id426 . -7) (5828 . 5840) (#("    " 0 4 (fontified t)) . 5828) 5567) nil (26011 38427 631904 0) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 3139 . 3140) (nil fontified nil 3054 . 3140) (3054 . 3140)) nil (26011 38427 631879 0) 0 nil])
([nil nil ((19 . 20) (t 26011 38427 640050 218000)) nil (26011 38467 564287 0) 0 nil])
([nil nil ((20 . 21)) nil (26011 38467 564286 0) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -20) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) 21) nil (26011 38467 564285 0) 0 nil])
([nil nil ((20 . 26)) nil (26011 38467 564281 0) 0 nil])
([nil nil ((24 . 31) (#("te" 0 2 (fontified nil)) . 24) (24 . 26) (#("crate::" 0 7 (fontified nil)) . -24) (24 . 31) (#("te" 0 2 (face font-lock-constant-face fontified t)) . -24) (undo-tree-id795 . -2) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -2) (undo-tree-id799 . -2) (undo-tree-id800 . -2) 26) nil (26011 38467 564279 0) 0 nil])
([nil nil ((31 . 34)) nil (26011 38467 564271 0) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -32) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (#("x" 0 1 (fontified t)) . -33) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) 34) nil (26011 38467 564269 0) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -31) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) 32) nil (26011 38467 564249 0) 0 nil])
([nil nil ((#("crate::" 0 5 (face font-lock-keyword-face fontified t) 5 7 (fontified t)) . -24) (undo-tree-id737 . -7) (undo-tree-id738 . -7) (undo-tree-id739 . -7) (undo-tree-id740 . -7) (undo-tree-id741 . -7) (undo-tree-id742 . -7) (undo-tree-id743 . -7) (undo-tree-id744 . -7) (undo-tree-id745 . -7) (undo-tree-id746 . -7) (undo-tree-id747 . -7) (undo-tree-id748 . -7) (undo-tree-id749 . -7) (undo-tree-id750 . -7) (undo-tree-id751 . -7) (undo-tree-id752 . -7) (undo-tree-id753 . -7) (undo-tree-id754 . -7) (undo-tree-id755 . -7) (undo-tree-id756 . -7) (undo-tree-id757 . -7) (undo-tree-id758 . -7) 31) nil (26011 38467 564230 0) 0 nil])
([nil nil ((24 . 28)) nil (26011 38467 564208 0) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-constant-face fontified t)) . -24) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (#("e" 0 1 (face font-lock-constant-face fontified t)) . -25) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (#("x" 0 1 (face font-lock-constant-face fontified t)) . -26) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (#("t" 0 1 (face font-lock-constant-face fontified t)) . -27) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) 28) nil (26011 38467 564204 0) 0 nil])
([nil nil ((24 . 25)) nil (26011 38467 564144 0) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-constant-face fontified t)) . -24) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) 25) nil (26011 38467 564143 0) 0 nil])
([nil nil ((24 . 25)) nil (26011 38467 564137 0) 0 nil])
([nil nil ((24 . 30) (#("s" 0 1 (fontified nil)) . 24) (24 . 25) (#("self::" 0 6 (fontified nil)) . -24) (24 . 30) (#("s" 0 1 (face font-lock-constant-face fontified t)) . -24) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) 25) nil (26011 38467 564135 0) 0 nil])
([nil nil ((30 . 33)) nil (26011 38467 564128 0) 0 nil])
([nil nil ((#("tex" 0 3 (fontified t)) . -30) (undo-tree-id664 . -3) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -2) (undo-tree-id671 . -2) (undo-tree-id672 . -2) (undo-tree-id673 . -2) (undo-tree-id674 . -3) (undo-tree-id675 . -3) (undo-tree-id676 . -3) (undo-tree-id677 . -3) (undo-tree-id678 . -3) 33) nil (26011 38467 564126 0) 0 nil])
([nil nil ((#("self::" 0 4 (face font-lock-keyword-face fontified t) 4 6 (fontified t)) . -24) (undo-tree-id645 . -6) (undo-tree-id646 . -6) (undo-tree-id647 . -6) (undo-tree-id648 . -6) (undo-tree-id649 . -6) (undo-tree-id650 . -6) (undo-tree-id651 . -6) (undo-tree-id652 . -6) (undo-tree-id653 . -6) (undo-tree-id654 . -6) (undo-tree-id655 . -6) (undo-tree-id656 . -6) (undo-tree-id657 . -6) (undo-tree-id658 . -6) (undo-tree-id659 . -6) (undo-tree-id660 . -6) (undo-tree-id661 . -6) (undo-tree-id662 . -6) (undo-tree-id663 . -6) 30) nil (26011 38467 564108 0) 0 nil])
([nil nil ((24 . 25)) nil (26011 38467 564090 0) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-constant-face fontified t)) . -24) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) 25) nil (26011 38467 564088 0) 0 nil])
([nil nil ((24 . 26)) nil (26011 38467 564081 0) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-constant-face fontified t)) . -25) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) 26) nil (26011 38467 564080 0) 0 nil])
([nil nil ((25 . 27)) nil (26011 38467 564072 0) 0 nil])
([nil nil ((27 . 31)) nil (26011 38467 564071 0) 0 nil])
([nil nil ((#("texture" 0 7 (face font-lock-constant-face fontified t)) . -24) (undo-tree-id601 . -7) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -2) (undo-tree-id617 . -2) (undo-tree-id618 . -2) (undo-tree-id619 . -2) (undo-tree-id620 . -3) (undo-tree-id621 . -3) (undo-tree-id622 . -3) (undo-tree-id623 . -3) (undo-tree-id624 . -4) (undo-tree-id625 . -5) (undo-tree-id626 . -6) (undo-tree-id627 . -7) (undo-tree-id628 . -7) (undo-tree-id629 . -7) (undo-tree-id630 . -7) (undo-tree-id631 . -7) 31) nil (26011 38467 564069 0) 0 nil])
([nil nil ((24 . 25)) nil (26011 38467 564038 0) 0 nil])
([nil nil ((24 . 31) (#("c" 0 1 (fontified nil)) . 24) (24 . 25) (#("crate::" 0 7 (fontified nil)) . -24) (24 . 31) (#("c" 0 1 (face font-lock-constant-face fontified t)) . -24) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) 25) nil (26011 38467 564036 0) 0 nil])
([nil nil ((31 . 33)) nil (26011 38467 564027 0) 0 nil])
([nil nil ((#("use crate::te" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 9 (face font-lock-keyword-face fontified t) 9 13 (fontified t)) . 20) (undo-tree-id429 . -4) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -2) (undo-tree-id433 . -2) (undo-tree-id434 . -2) (undo-tree-id435 . -3) (undo-tree-id436 . -3) (undo-tree-id437 . -3) (undo-tree-id438 . -4) (undo-tree-id439 . -4) (undo-tree-id440 . -4) (undo-tree-id441 . -4) (undo-tree-id442 . -4) (undo-tree-id443 . -4) (undo-tree-id444 . -4) (undo-tree-id445 . -4) (undo-tree-id446 . -4) (undo-tree-id447 . -4) (undo-tree-id448 . -4) (undo-tree-id449 . -4) (undo-tree-id450 . -4) (undo-tree-id451 . -4) (undo-tree-id452 . -4) (undo-tree-id453 . -4) (undo-tree-id454 . -4) (undo-tree-id455 . -4) (undo-tree-id456 . -4) (undo-tree-id457 . -4) (undo-tree-id458 . -4) (undo-tree-id459 . -4) (undo-tree-id460 . -4) (undo-tree-id461 . -4) (undo-tree-id462 . -4) (undo-tree-id463 . -4) (undo-tree-id464 . -4) (undo-tree-id465 . -4) (undo-tree-id466 . -4) (undo-tree-id467 . -4) (undo-tree-id468 . -4) (undo-tree-id469 . -4) (undo-tree-id470 . -4) (undo-tree-id471 . -4) (undo-tree-id472 . -4) (undo-tree-id473 . -4) (undo-tree-id474 . -4) (undo-tree-id475 . -4) (undo-tree-id476 . -4) (undo-tree-id477 . -4) (undo-tree-id478 . -4) (undo-tree-id479 . -4) (undo-tree-id480 . -4) (undo-tree-id481 . -4) (undo-tree-id482 . -4) (undo-tree-id483 . -4) (undo-tree-id484 . -4) (undo-tree-id485 . -4) (undo-tree-id486 . -4) (undo-tree-id487 . -4) (undo-tree-id488 . -4) (undo-tree-id489 . -4) (undo-tree-id490 . -4) (undo-tree-id491 . -4) (undo-tree-id492 . -4) (undo-tree-id493 . -4) (undo-tree-id494 . -4) (undo-tree-id495 . -4) (undo-tree-id496 . -4) (undo-tree-id497 . -4) (undo-tree-id498 . -4) (undo-tree-id499 . -4) (undo-tree-id500 . -4) (undo-tree-id501 . -4) (undo-tree-id502 . -4) (undo-tree-id503 . -4) (undo-tree-id504 . -4) (undo-tree-id505 . -4) (undo-tree-id506 . -4) (undo-tree-id507 . -4) (undo-tree-id508 . -4) (undo-tree-id509 . -4) (undo-tree-id510 . -4) (undo-tree-id511 . -4) (undo-tree-id512 . -4) (undo-tree-id513 . -4) (undo-tree-id514 . -4) (undo-tree-id515 . -4) (undo-tree-id516 . -4) (undo-tree-id517 . -4) (undo-tree-id518 . -4) (undo-tree-id519 . -4) (undo-tree-id520 . -4) (undo-tree-id521 . -4) (undo-tree-id522 . -4) (undo-tree-id523 . -4) (undo-tree-id524 . -4) (undo-tree-id525 . -4) (undo-tree-id526 . -4) (undo-tree-id527 . -4) (undo-tree-id528 . -4) (undo-tree-id529 . -4) (undo-tree-id530 . -4) (undo-tree-id531 . -4) (undo-tree-id532 . -4) (undo-tree-id533 . -4) (undo-tree-id534 . -4) (undo-tree-id535 . -4) (undo-tree-id536 . -4) (undo-tree-id537 . -4) (undo-tree-id538 . -4) (undo-tree-id539 . -4) (undo-tree-id540 . -4) (undo-tree-id541 . -4) (undo-tree-id542 . -4) (undo-tree-id543 . -4) (undo-tree-id544 . -4) (undo-tree-id545 . -4) (undo-tree-id546 . -4) (undo-tree-id547 . -4) (undo-tree-id548 . -4) (undo-tree-id549 . -4) (undo-tree-id550 . -4) (undo-tree-id551 . -4) (undo-tree-id552 . -4) (undo-tree-id553 . -4) (undo-tree-id554 . -4) (undo-tree-id555 . -4) (undo-tree-id556 . -4) (undo-tree-id557 . -4) (undo-tree-id558 . -4) (undo-tree-id559 . -4) (undo-tree-id560 . -4) (undo-tree-id561 . -4) (undo-tree-id562 . -4) (undo-tree-id563 . -4) (undo-tree-id564 . -4) (undo-tree-id565 . -4) (undo-tree-id566 . -4) (undo-tree-id567 . -4) (undo-tree-id568 . -4) (undo-tree-id569 . -4) (undo-tree-id570 . -4) (undo-tree-id571 . -4) (undo-tree-id572 . -4) (undo-tree-id573 . -4) (undo-tree-id574 . -4) (undo-tree-id575 . -4) (undo-tree-id576 . -4) (undo-tree-id577 . -4) (undo-tree-id578 . -4) (undo-tree-id579 . -4) (undo-tree-id580 . -4) (undo-tree-id581 . -4) (undo-tree-id582 . -4) (undo-tree-id583 . -4) (undo-tree-id584 . -4) (undo-tree-id585 . -4) (undo-tree-id586 . -4) (undo-tree-id587 . -11) (undo-tree-id588 . -11) (undo-tree-id589 . -11) (undo-tree-id590 . -12) (undo-tree-id591 . -13) (undo-tree-id592 . -13) (undo-tree-id593 . -13) (undo-tree-id594 . -13)) nil (26011 38467 564019 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 20) (undo-tree-id427 . 1) (undo-tree-id428 . -1)) nil (26011 38467 563847 0) 0 nil])
([nil nil ((#("texture" 0 7 (face font-lock-constant-face fontified t)) . -3116) (undo-tree-id804 . -7) (undo-tree-id805 . -7) (undo-tree-id806 . -7) (undo-tree-id807 . -7) (undo-tree-id808 . -7) (undo-tree-id809 . -7) (undo-tree-id810 . -7) (undo-tree-id811 . -7) (undo-tree-id812 . -7) (undo-tree-id813 . -7) 3123 (t 26011 38467 571712 267000)) nil (26011 38478 434380 0) 0 nil])
([nil nil ((3116 . 3123)) nil (26011 38478 434358 0) 0 nil])
([nil nil ((10612 . 10625) (t 26011 38478 442219 482000)) nil (26011 38537 413724 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 10691 . 10692) (nil fontified nil 10625 . 10692) (10625 . 10692)) nil (26011 38537 413722 0) 0 nil])
([nil nil ((#("            " 0 12 (fontified t)) . -10625) 10639) nil (26011 38537 413717 0) 0 nil])
([nil nil ((222 . 223) (t 26011 38537 421439 618000)) nil (26011 38603 936552 0) 0 nil])
([nil nil ((223 . 228)) nil (26011 38603 936551 0) 0 nil])
([nil nil ((227 . 231) (#("w" 0 1 (fontified nil)) . 227) (227 . 228) (#("wgpu" 0 4 (fontified nil)) . -227) (227 . 231) (#("w" 0 1 (face font-lock-constant-face fontified t)) . -227) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) 228) nil (26011 38603 936549 0) 0 nil])
([nil nil ((231 . 240)) nil (26011 38603 936541 0) 0 nil])
([nil nil ((#("use wgpu::texture" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 8 (face font-lock-constant-face fontified t) 8 17 (fontified t)) . 223) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -2) (undo-tree-id835 . -2) (undo-tree-id836 . -3) (undo-tree-id837 . -3) (undo-tree-id838 . -3) (undo-tree-id839 . -4) (undo-tree-id840 . -4) (undo-tree-id841 . -4) (undo-tree-id842 . -4) (undo-tree-id843 . -4) (undo-tree-id844 . -4) (undo-tree-id845 . -4) (undo-tree-id846 . -8) (undo-tree-id847 . -8) (undo-tree-id848 . -8) (undo-tree-id849 . -9) (undo-tree-id850 . -9) (undo-tree-id851 . -10) (undo-tree-id852 . -10) (undo-tree-id853 . -10) (undo-tree-id854 . -11) (undo-tree-id855 . -11) (undo-tree-id856 . -11) (undo-tree-id857 . -11) (undo-tree-id858 . -11) (undo-tree-id859 . -12) (undo-tree-id860 . -12) (undo-tree-id861 . -12) (undo-tree-id862 . -13) (undo-tree-id863 . -13) (undo-tree-id864 . -13) (undo-tree-id865 . -14) (undo-tree-id866 . -14) (undo-tree-id867 . -14) (undo-tree-id868 . -15) (undo-tree-id869 . -15) (undo-tree-id870 . -15) (undo-tree-id871 . -16) (undo-tree-id872 . -16) (undo-tree-id873 . -17) (undo-tree-id874 . -17) (undo-tree-id875 . -17) (undo-tree-id876 . -17) (undo-tree-id877 . -17)) nil (26011 38603 936538 0) 0 nil])
([nil nil ((223 . 225)) nil (26011 38603 936493 0) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -224) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) 225) nil (26011 38603 936491 0) 0 nil])
([nil nil ((224 . 226)) nil (26011 38603 936486 0) 0 nil])
([nil nil ((226 . 227)) nil (26011 38603 936485 0) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -226) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) 227) nil (26011 38603 936484 0) 0 nil])
([nil nil ((226 . 228)) nil (26011 38603 936474 0) 0 nil])
([nil nil ((227 . 234) (#("c" 0 1 (fontified nil)) . 227) (227 . 228) (#("crate::" 0 7 (fontified nil)) . -227) (227 . 234) (#("c" 0 1 (face font-lock-constant-face fontified t)) . -227) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) 228) nil (26011 38603 936472 0) 0 nil])
([nil nil ((234 . 242)) nil (26011 38676 562352 0) 0 nil])
([nil nil ((6000 . 6001) (t 26011 38603 945144 102000)) nil (26011 38741 220057 0) 0 nil] [nil nil ((#("texture;" 0 8 (fontified t)) . -234) (undo-tree-id1639 . -8) (undo-tree-id1640 . -8) (undo-tree-id1641 . -8) (undo-tree-id1642 . -8) (undo-tree-id1643 . -8) (undo-tree-id1644 . -8) (undo-tree-id1645 . -8) (undo-tree-id1646 . -8) (undo-tree-id1647 . -8) (undo-tree-id1648 . -8) (undo-tree-id1649 . -8) (undo-tree-id1650 . -8) (undo-tree-id1651 . -8) (undo-tree-id1652 . -8) (undo-tree-id1653 . -8) (undo-tree-id1654 . -8) (undo-tree-id1655 . -8) (undo-tree-id1656 . -8) (undo-tree-id1657 . -8) (undo-tree-id1658 . -8) (undo-tree-id1659 . -8) (undo-tree-id1660 . -8) (undo-tree-id1661 . -8) (undo-tree-id1662 . -8) (undo-tree-id1663 . -8) (undo-tree-id1664 . -8) (undo-tree-id1665 . -8) (undo-tree-id1666 . -8) (undo-tree-id1667 . -8) (undo-tree-id1668 . -8) (undo-tree-id1669 . -8) (undo-tree-id1670 . -8) (undo-tree-id1671 . -8) (undo-tree-id1672 . -8) (undo-tree-id1673 . -8) (undo-tree-id1674 . -8) (undo-tree-id1675 . -8) (undo-tree-id1676 . -8) (undo-tree-id1677 . -8) (undo-tree-id1678 . -8) (undo-tree-id1679 . -8) (undo-tree-id1680 . -8) (undo-tree-id1681 . -8) (undo-tree-id1682 . -8) (undo-tree-id1683 . -8) (undo-tree-id1684 . -8) (undo-tree-id1685 . -8) (undo-tree-id1686 . -8) (undo-tree-id1687 . -8) (undo-tree-id1688 . -8) (undo-tree-id1689 . -8) (undo-tree-id1690 . -8) (undo-tree-id1691 . -8) (undo-tree-id1692 . -8) (undo-tree-id1693 . -8) (undo-tree-id1694 . -8) (undo-tree-id1695 . -8) (undo-tree-id1696 . -8) (undo-tree-id1697 . -8) (undo-tree-id1698 . -8) (undo-tree-id1699 . -8) (undo-tree-id1700 . -8) (undo-tree-id1701 . -8) (undo-tree-id1702 . -8) (undo-tree-id1703 . -8) (undo-tree-id1704 . -8) (undo-tree-id1705 . -8) (undo-tree-id1706 . -8) (undo-tree-id1707 . -8) (undo-tree-id1708 . -8) (undo-tree-id1709 . -8) (undo-tree-id1710 . -8) (undo-tree-id1711 . -8) (undo-tree-id1712 . -8) (undo-tree-id1713 . -8) (undo-tree-id1714 . -8) (undo-tree-id1715 . -8) (undo-tree-id1716 . -8) (undo-tree-id1717 . -8) (undo-tree-id1718 . -8) (undo-tree-id1719 . -8) 242 (t 26011 38603 945144 102000)) ((234 . 242)) (26011 38675 968632 0) 0 nil])
([nil nil ((6000 . 6002)) nil (26011 38741 220056 0) 0 nil])
([nil nil ((#("crate::" 0 5 (face font-lock-keyword-face fontified t) 5 7 (fontified t)) . -227) (undo-tree-id1556 . -7) (undo-tree-id1557 . -7) (undo-tree-id1558 . -7) (undo-tree-id1559 . -7) (undo-tree-id1560 . -7) (undo-tree-id1561 . -7) (undo-tree-id1562 . -7) (undo-tree-id1563 . -7) (undo-tree-id1564 . -7) (undo-tree-id1565 . -7) (undo-tree-id1566 . -7) (undo-tree-id1567 . -7) (undo-tree-id1568 . -7) (undo-tree-id1569 . -7) (undo-tree-id1570 . -7) (undo-tree-id1571 . -7) (undo-tree-id1572 . -7) (undo-tree-id1573 . -7) (undo-tree-id1574 . -7) (undo-tree-id1575 . -7) (undo-tree-id1576 . -7) (undo-tree-id1577 . -7) (undo-tree-id1578 . -7) (undo-tree-id1579 . -7) (undo-tree-id1580 . -7) (undo-tree-id1581 . -7) (undo-tree-id1582 . -7) (undo-tree-id1583 . -7) (undo-tree-id1584 . -7) (undo-tree-id1585 . -7) (undo-tree-id1586 . -7) (undo-tree-id1587 . -7) (undo-tree-id1588 . -7) (undo-tree-id1589 . -7) (undo-tree-id1590 . -7) (undo-tree-id1591 . -7) (undo-tree-id1592 . -7) (undo-tree-id1593 . -7) (undo-tree-id1594 . -7) (undo-tree-id1595 . -7) (undo-tree-id1596 . -7) (undo-tree-id1597 . -7) (undo-tree-id1598 . -7) (undo-tree-id1599 . -7) (undo-tree-id1600 . -7) (undo-tree-id1601 . -7) (undo-tree-id1602 . -7) (undo-tree-id1603 . -7) (undo-tree-id1604 . -7) (undo-tree-id1605 . -7) (undo-tree-id1606 . -7) (undo-tree-id1607 . -7) (undo-tree-id1608 . -7) (undo-tree-id1609 . -7) (undo-tree-id1610 . -7) (undo-tree-id1611 . -7) (undo-tree-id1612 . -7) (undo-tree-id1613 . -7) (undo-tree-id1614 . -7) (undo-tree-id1615 . -7) (undo-tree-id1616 . -7) (undo-tree-id1617 . -7) (undo-tree-id1618 . -7) (undo-tree-id1619 . -7) (undo-tree-id1620 . -7) (undo-tree-id1621 . -7) (undo-tree-id1622 . -7) (undo-tree-id1623 . -7) (undo-tree-id1624 . -7) (undo-tree-id1625 . -7) (undo-tree-id1626 . -7) (undo-tree-id1627 . -7) (undo-tree-id1628 . -7) (undo-tree-id1629 . -7) (undo-tree-id1630 . -7) (undo-tree-id1631 . -7) (undo-tree-id1632 . -7) (undo-tree-id1633 . -7) (undo-tree-id1634 . -7) (undo-tree-id1635 . -7) (undo-tree-id1636 . -7) (undo-tree-id1637 . -7) (undo-tree-id1638 . -7) 234) ((227 . 234)) (26011 38675 749977 0) 0 nil])
([nil nil ((6000 . 6004) (#("wp" 0 2 (fontified nil)) . 6000) (6000 . 6002) (#("wgpu" 0 4 (fontified nil)) . -6000) (6000 . 6004) (#("wp" 0 2 (fontified t)) . -6000) (undo-tree-id2006 . -2) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (undo-tree-id2011 . -2) (undo-tree-id2012 . -2) (undo-tree-id2013 . -2) (undo-tree-id2014 . -2) (undo-tree-id2015 . -2) 6002) nil (26011 38741 220053 0) 0 nil])
([nil nil ((227 . 230)) ((#("rs_" 0 1 (face font-lock-constant-face fontified t) 1 2 (face font-lock-constant-face fontified t) 2 3 (face font-lock-constant-face fontified t)) . 227) (undo-tree-id1746 . -3) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -2) (undo-tree-id1751 . -2) (undo-tree-id1752 . -2) (undo-tree-id1753 . -2) (undo-tree-id1754 . -2) (undo-tree-id1755 . -3) (undo-tree-id1756 . -3) (undo-tree-id1757 . -3) (undo-tree-id1758 . -3) (undo-tree-id1759 . -3) (undo-tree-id1760 . -3) (undo-tree-id1761 . -3) (undo-tree-id1762 . -3) (undo-tree-id1763 . -2) (undo-tree-id1764 . -2) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -3) (undo-tree-id1768 . -3)) (26011 38675 399824 0) 0 nil])
([nil nil ((6004 . 6013)) nil (26011 38741 220041 0) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-constant-face fontified t)) . -227) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (#("s" 0 1 (face font-lock-constant-face fontified t)) . -228) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (#("_" 0 1 (face font-lock-constant-face fontified t)) . -229) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) 230) ((227 . 230)) (26011 38675 40175 0) 0 nil])
([nil nil ((#("texture" 0 7 (fontified t)) . -6006) (undo-tree-id1988 . -7) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) (undo-tree-id1992 . -2) (undo-tree-id1993 . -2) (undo-tree-id1994 . -3) (undo-tree-id1995 . -3) (undo-tree-id1996 . -4) (undo-tree-id1997 . -4) (undo-tree-id1998 . -5) (undo-tree-id1999 . -5) (undo-tree-id2000 . -6) (undo-tree-id2001 . -6) (undo-tree-id2002 . -7) (undo-tree-id2003 . -7) (undo-tree-id2004 . -7) (undo-tree-id2005 . -7) 6013) nil (26011 38741 220039 0) 0 nil])
([nil nil ((227 . 231)) ((#("rs_g" 0 1 (face font-lock-constant-face fontified t) 1 2 (face font-lock-constant-face fontified t) 2 3 (face font-lock-constant-face fontified t) 3 4 (face font-lock-constant-face fontified t)) . 227) (undo-tree-id1720 . -4) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -2) (undo-tree-id1726 . -2) (undo-tree-id1727 . -2) (undo-tree-id1728 . -2) (undo-tree-id1729 . -2) (undo-tree-id1730 . -2) (undo-tree-id1731 . -3) (undo-tree-id1732 . -3) (undo-tree-id1733 . -3) (undo-tree-id1734 . -3) (undo-tree-id1735 . -4) (undo-tree-id1736 . -3) (undo-tree-id1737 . -3) (undo-tree-id1738 . -2) (undo-tree-id1739 . -2) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (undo-tree-id1742 . -3) (undo-tree-id1743 . -3) (undo-tree-id1744 . -4) (undo-tree-id1745 . -4)) (26011 38674 854971 0) 0 nil])
([nil nil ((#("w" 0 1 (fontified t)) . -6000) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (#("g" 0 1 (fontified t)) . -6001) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (#("p" 0 1 (fontified t)) . -6002) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (#("u" 0 1 (fontified t)) . -6003) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (#(":" 0 1 (fontified t)) . -6004) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (#(":" 0 1 (fontified t)) . -6005) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) (undo-tree-id1976 . -1) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (#(" " 0 1 (fontified t)) . -6006) (undo-tree-id1983 . -1) (undo-tree-id1984 . -1) (undo-tree-id1985 . 1) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) 6007) nil (26011 38741 220009 0) 0 nil])
([nil nil ((#("g" 0 1 (face font-lock-constant-face fontified t)) . -230) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) 231) ((230 . 231)) (26011 38674 746093 0) 0 nil])
([nil nil ((5669 . 5678) (t 26011 38741 231244 202000)) nil (26011 38747 900947 0) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -223) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (#("s" 0 1 (fontified t)) . -224) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -225) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (#(" " 0 1 (fontified t)) . -226) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (#("r" 0 1 (face font-lock-constant-face fontified t)) . -227) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (#("s" 0 1 (face font-lock-constant-face fontified t)) . -228) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (#("_" 0 1 (face font-lock-constant-face fontified t)) . -229) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) 230) ((223 . 230)) (26011 38674 743726 0) 0 nil])
([nil nil ((241 . 244) (t 26011 38747 910691 607000)) nil (26011 38782 662429 0) 0 nil])
nil
([nil nil ((#("use crate::texture::*;" 0 1 (face font-lock-keyword-face fontified t) 1 2 (face font-lock-keyword-face fontified t) 2 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 9 (face font-lock-keyword-face fontified t) 9 11 (fontified t) 11 18 (face font-lock-constant-face fontified t) 18 22 (fontified t)) . 223) (undo-tree-id2018 . -22) (undo-tree-id2019 . -22) (undo-tree-id2020 . -22) (undo-tree-id2021 . -22) (undo-tree-id2022 . -22) (undo-tree-id2023 . -22) (undo-tree-id2024 . -22) (undo-tree-id2025 . -22) (undo-tree-id2026 . -22) (undo-tree-id2027 . -22) (undo-tree-id2028 . -18) (undo-tree-id2029 . -19) (undo-tree-id2030 . -19) (undo-tree-id2031 . -19) (undo-tree-id2032 . -20) (undo-tree-id2033 . -20) (undo-tree-id2034 . 1) (undo-tree-id2035 . -20) (undo-tree-id2036 . -20) (undo-tree-id2037 . -20) (undo-tree-id2038 . -21) (undo-tree-id2039 . -21) (undo-tree-id2040 . -21) (undo-tree-id2041 . -21) (undo-tree-id2042 . -21) (undo-tree-id2043 . -21) (undo-tree-id2044 . -21) (undo-tree-id2045 . -21) (undo-tree-id2046 . -21) (undo-tree-id2047 . -22)) nil (26011 38782 662426 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 223) (undo-tree-id2016 . 1) (undo-tree-id2017 . -1)) nil (26011 38782 662392 0) 0 nil])
([nil nil ((5732 . 5741) (t 26011 38782 673058 933000)) nil (26011 38813 487225 0) 0 nil])
([nil nil ((5741 . 5746)) nil (26011 38813 487224 0) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -5744) (undo-tree-id2114 . -1) (undo-tree-id2115 . -1) (undo-tree-id2116 . -1) (undo-tree-id2117 . -1) (undo-tree-id2118 . -1) (undo-tree-id2119 . -1) (undo-tree-id2120 . -1) (undo-tree-id2121 . -1) (#(":" 0 1 (fontified t)) . -5745) (undo-tree-id2122 . -1) (undo-tree-id2123 . -1) (undo-tree-id2124 . -1) (undo-tree-id2125 . -1) 5746) nil (26011 38813 487222 0) 0 nil])
([nil nil ((5744 . 5747)) nil (26011 38813 487210 0) 0 nil])
([nil nil ((5745 . 5752) (#("cr" 0 2 (fontified nil)) . 5745) (5745 . 5747) (#("crate::" 0 7 (fontified nil)) . -5745) (5745 . 5752) (#("cr" 0 2 (face font-lock-constant-face fontified t)) . -5745) (undo-tree-id2104 . -2) (undo-tree-id2105 . -1) (undo-tree-id2106 . -1) (undo-tree-id2107 . -1) (undo-tree-id2108 . -1) (undo-tree-id2109 . -2) (undo-tree-id2110 . -2) (undo-tree-id2111 . -2) (undo-tree-id2112 . -2) (undo-tree-id2113 . -2) 5747) nil (26011 38813 487208 0) 0 nil])
([nil nil ((5752 . 5754)) nil (26011 38813 487196 0) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -5753) (undo-tree-id2098 . -1) (undo-tree-id2099 . -1) (undo-tree-id2100 . -1) (undo-tree-id2101 . -1) (undo-tree-id2102 . -1) (undo-tree-id2103 . -1) 5754) nil (26011 38813 487194 0) 0 nil])
([nil nil ((#("        use crate::t" 0 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 17 (face font-lock-keyword-face fontified t) 17 20 (fontified t)) . 5733) (undo-tree-id2048 . -8) (undo-tree-id2049 . -8) (undo-tree-id2050 . -8) (undo-tree-id2051 . -9) (undo-tree-id2052 . -9) (undo-tree-id2053 . -10) (undo-tree-id2054 . -10) (undo-tree-id2055 . -11) (undo-tree-id2056 . -11) (undo-tree-id2057 . -11) (undo-tree-id2058 . -11) (undo-tree-id2059 . -11) (undo-tree-id2060 . -11) (undo-tree-id2061 . -11) (undo-tree-id2062 . -11) (undo-tree-id2063 . -11) (undo-tree-id2064 . -11) (undo-tree-id2065 . -12) (undo-tree-id2066 . -12) (undo-tree-id2067 . -12) (undo-tree-id2068 . -12) (undo-tree-id2069 . -12) (undo-tree-id2070 . -12) (undo-tree-id2071 . -12) (undo-tree-id2072 . -12) (undo-tree-id2073 . -12) (undo-tree-id2074 . -12) (undo-tree-id2075 . -19) (undo-tree-id2076 . -19) (undo-tree-id2077 . -19) (undo-tree-id2078 . -19) (undo-tree-id2079 . -19) (undo-tree-id2080 . -19) (undo-tree-id2081 . -19) (undo-tree-id2082 . -19) (undo-tree-id2083 . -20) (undo-tree-id2084 . -20) (undo-tree-id2085 . -20) (undo-tree-id2086 . -20) (undo-tree-id2087 . -20) (undo-tree-id2088 . -20) (undo-tree-id2089 . -20) (undo-tree-id2090 . -20) (undo-tree-id2091 . -20) (undo-tree-id2092 . -20) (undo-tree-id2093 . -20) (undo-tree-id2094 . -20) (undo-tree-id2095 . -20) (undo-tree-id2096 . -20) (undo-tree-id2097 . -20)) nil (26011 38813 487182 0) 0 nil])
([nil nil ((223 . 228) (t 26011 38813 497588 60000)) nil (26011 38920 367824 0) 0 nil])
([nil nil ((227 . 234) (#("c" 0 1 (fontified nil)) . 227) (227 . 228) (#("crate::" 0 7 (fontified nil)) . -227) (227 . 234) (#("c" 0 1 (face font-lock-constant-face fontified t)) . -227) (undo-tree-id2126 . -1) (undo-tree-id2127 . -1) (undo-tree-id2128 . -1) (undo-tree-id2129 . -1) (undo-tree-id2130 . -1) 228) nil (26011 38920 367822 0) 0 nil])
([nil nil ((234 . 242)) nil (26011 38920 367806 0) 0 nil])
([nil nil ((241 . 244) (t 26011 38920 377516 712000)) nil (26011 38926 627509 0) 0 nil])
([nil nil ((244 . 250)) nil (26011 38926 627504 0) 0 nil])
([nil nil ((#("Texture" 0 7 (face font-lock-type-face fontified t)) . -243) (undo-tree-id2173 . -7) (undo-tree-id2174 . -7) (undo-tree-id2175 . -7) (undo-tree-id2176 . -7) (undo-tree-id2177 . -7) (undo-tree-id2178 . -7) (undo-tree-id2179 . -7) (undo-tree-id2180 . -7) (undo-tree-id2181 . -7) (undo-tree-id2182 . -7) (undo-tree-id2183 . -7) (undo-tree-id2184 . -7) (undo-tree-id2185 . -7) (undo-tree-id2186 . -7) 250 (t 26011 38926 638685 354000)) nil (26011 38929 357113 0) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -241) (undo-tree-id2131 . -1) (undo-tree-id2132 . -1) (undo-tree-id2133 . -1) (undo-tree-id2134 . -1) (undo-tree-id2135 . -1) (undo-tree-id2136 . -1) (undo-tree-id2137 . -1) (undo-tree-id2138 . -1) (undo-tree-id2139 . -1) (undo-tree-id2140 . -1) (undo-tree-id2141 . -1) (undo-tree-id2142 . -1) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (undo-tree-id2145 . -1) (undo-tree-id2146 . -1) (undo-tree-id2147 . -1) (undo-tree-id2148 . -1) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (#(":" 0 1 (fontified t)) . -242) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1) (undo-tree-id2164 . -1) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) 243) nil (26011 38929 357092 0) 0 nil])
([nil nil ((223 . 224) (t 26011 38929 367015 387000)) nil (26011 38970 961689 0) 0 nil])
([nil nil ((#("use crate::texture;" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 9 (face font-lock-keyword-face fontified t) 9 11 (fontified t) 11 18 (fontified t) 18 19 (fontified t)) . 224) (undo-tree-id2206 . 1) (undo-tree-id2207 . -18) (undo-tree-id2208 . -18) (undo-tree-id2209 . -18) (undo-tree-id2210 . -18) (undo-tree-id2211 . -18) (undo-tree-id2212 . -18) (undo-tree-id2213 . -18) (undo-tree-id2214 . -18) (undo-tree-id2215 . -18) (undo-tree-id2216 . -18) (undo-tree-id2217 . -18) (undo-tree-id2218 . -18) (undo-tree-id2219 . -18) (undo-tree-id2220 . -18) (undo-tree-id2221 . -18) (undo-tree-id2222 . -18) (undo-tree-id2223 . -18) (undo-tree-id2224 . -18) (undo-tree-id2225 . -18) (undo-tree-id2226 . -18) (undo-tree-id2227 . -18) (undo-tree-id2228 . -18) (undo-tree-id2229 . -18) (undo-tree-id2230 . -18) (undo-tree-id2231 . -18) (undo-tree-id2232 . -18) (undo-tree-id2233 . -18) (undo-tree-id2234 . -18) (undo-tree-id2235 . -18) (undo-tree-id2236 . -18) (undo-tree-id2237 . -18) (undo-tree-id2238 . -18) (undo-tree-id2239 . -18) (undo-tree-id2240 . -18) (undo-tree-id2241 . -18) (undo-tree-id2242 . -18) (undo-tree-id2243 . -18) (undo-tree-id2244 . -18) (undo-tree-id2245 . -18) (undo-tree-id2246 . -18) (undo-tree-id2247 . -18) (undo-tree-id2248 . -18) (undo-tree-id2249 . -18) (undo-tree-id2250 . -18) (undo-tree-id2251 . -18) (undo-tree-id2252 . -18) (undo-tree-id2253 . -19)) nil (26011 38970 961686 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 224) (undo-tree-id2204 . 1) (undo-tree-id2205 . -1)) nil (26011 38970 961636 0) 0 nil])
([nil nil ((224 . 229)) nil (26011 38970 961633 0) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -227) (undo-tree-id2192 . -1) (undo-tree-id2193 . -1) (undo-tree-id2194 . -1) (undo-tree-id2195 . -1) (undo-tree-id2196 . -1) (undo-tree-id2197 . -1) (undo-tree-id2198 . -1) (undo-tree-id2199 . -1) (#(" " 0 1 (fontified t)) . -228) (undo-tree-id2200 . -1) (undo-tree-id2201 . -1) (undo-tree-id2202 . -1) (undo-tree-id2203 . -1) 229) nil (26011 38970 961631 0) 0 nil])
([nil nil ((227 . 230)) nil (26011 38970 961617 0) 0 nil])
([nil nil ((228 . 236) (#("te" 0 2 (fontified nil)) . 228) (228 . 230) (#("texture;" 0 8 (fontified nil)) . -228) (228 . 236) (#("te" 0 2 (face font-lock-constant-face fontified t)) . -228) (undo-tree-id2187 . -2) (undo-tree-id2188 . -1) (undo-tree-id2189 . -1) (undo-tree-id2190 . -2) (undo-tree-id2191 . -2) 230) nil (26011 38970 961613 0) 0 nil])
([nil nil ((#("
" 0 1 (face font-lock-comment-face fontified t)) . -5744) (undo-tree-id2254 . -1) (undo-tree-id2255 . -1) (undo-tree-id2256 . -1) (undo-tree-id2257 . -1) 5745 (t 26011 38970 972673 818000)) nil (26011 39018 745498 0) 0 nil])
([nil nil ((5875 . 5884)) nil (26011 39018 745488 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 7068 . 7069) (nil fontified nil 5884 . 7069) (5884 . 7069)) nil (26011 39018 745484 0) 0 nil])
([nil nil ((14452 . 14461) (t 26011 39018 755379 546000)) nil (26011 39343 856379 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 14530 . 14531) (nil fontified nil 14461 . 14531) (14461 . 14531)) nil (26011 39343 856378 0) 0 nil])
([nil nil ((#("
" 0 1 (face font-lock-comment-face rear-nonsticky t fontified t)) . -14530) (undo-tree-id2318 . -1) (undo-tree-id2319 . -1) (undo-tree-id2320 . -1) (undo-tree-id2321 . -1) 14531) nil (26011 39343 856376 0) 0 nil])
([nil nil ((#("&" 0 1 (fontified t)) . -8107) (undo-tree-id2258 . -1) (undo-tree-id2259 . -1) (undo-tree-id2260 . -1) (undo-tree-id2261 . -1) (undo-tree-id2262 . -1) (undo-tree-id2263 . -1) (undo-tree-id2264 . -1) (undo-tree-id2265 . -1) (undo-tree-id2266 . -1) (undo-tree-id2267 . -1) (undo-tree-id2268 . -1) (undo-tree-id2269 . -1) (undo-tree-id2270 . -1) (undo-tree-id2271 . -1) (undo-tree-id2272 . -1) (undo-tree-id2273 . -1) (undo-tree-id2274 . -1) (undo-tree-id2275 . -1) (undo-tree-id2276 . -1) (undo-tree-id2277 . -1) (undo-tree-id2278 . -1) (undo-tree-id2279 . -1) (undo-tree-id2280 . -1) (undo-tree-id2281 . -1) (undo-tree-id2282 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -8108) (undo-tree-id2283 . -1) (undo-tree-id2284 . -1) (undo-tree-id2285 . -1) (undo-tree-id2286 . -1) (undo-tree-id2287 . -1) (undo-tree-id2288 . -1) (undo-tree-id2289 . -1) (undo-tree-id2290 . -1) (undo-tree-id2291 . -1) (undo-tree-id2292 . -1) (undo-tree-id2293 . -1) (undo-tree-id2294 . -1) (undo-tree-id2295 . -1) (undo-tree-id2296 . -1) (undo-tree-id2297 . -1) (undo-tree-id2298 . -1) (undo-tree-id2299 . -1) (undo-tree-id2300 . -1) (undo-tree-id2301 . -1) (undo-tree-id2302 . -1) (undo-tree-id2303 . -1) (undo-tree-id2304 . -1) (undo-tree-id2305 . -1) (undo-tree-id2306 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -8109) (undo-tree-id2307 . -1) (undo-tree-id2308 . -1) (undo-tree-id2309 . -1) (undo-tree-id2310 . -1) (undo-tree-id2311 . -1) (undo-tree-id2312 . -1) (undo-tree-id2313 . -1) (undo-tree-id2314 . -1) (undo-tree-id2315 . -1) (undo-tree-id2316 . -1) (undo-tree-id2317 . -1) 8110) nil (26011 39343 856367 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 8135 . 8136) (nil fontified nil 8107 . 8136) (8107 . 8136)) nil (26011 39343 856282 0) 0 nil])
([nil nil ((#("color: [f32; 3]," 0 5 (face font-lock-variable-name-face fontified t) 5 7 (fontified t) 7 8 (face (rainbow-delimiters-depth-2-face) fontified t) 8 11 (face font-lock-type-face fontified t) 11 14 (fontified t) 14 15 (face (rainbow-delimiters-depth-2-face) fontified t) 15 16 (fontified t)) . -405) (undo-tree-id2344 . -16) (undo-tree-id2345 . -1) (undo-tree-id2346 . -7) (undo-tree-id2347 . -11) (undo-tree-id2348 . -14) (undo-tree-id2349 . -16) (undo-tree-id2350 . -16) (undo-tree-id2351 . -16) 421 (t 26011 39343 867326 300000)) nil (26011 39383 993726 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 438 . 439) (nil fontified nil 405 . 439) (405 . 439)) nil (26011 39383 993717 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -405) 425) nil (26011 39383 993716 0) 0 nil])
([nil nil ((#("3" 0 1 (face font-lock-type-face fontified t)) . -2477) (undo-tree-id2336 . -1) (undo-tree-id2337 . -1) (undo-tree-id2338 . -1) (undo-tree-id2339 . -1) (undo-tree-id2340 . -1) (undo-tree-id2341 . -1) (undo-tree-id2342 . -1) (undo-tree-id2343 . -1) 2478) nil (26011 39383 993714 0) 0 nil])
([nil nil ((2477 . 2478)) nil (26011 39383 993705 0) 0 nil])
([nil nil ((apply yas--snippet-revive 2469 2478 #s(yas--snippet nil nil #s(yas--exit 2478 nil) 18 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2478 nil) 18 nil nil nil nil)) (2469 . 2478) (#("Float32x2$0" 0 11 (fontified nil)) . 2469) (2469 . 2480) (#("Float32x2" 0 9 (fontified nil)) . 2469) (2469 . 2478) (#("Float32x2" 0 9 (face font-lock-type-face fontified t)) . -2469) (undo-tree-id2322 . -9) (undo-tree-id2323 . -8) (undo-tree-id2324 . -8) (undo-tree-id2325 . -8) (undo-tree-id2326 . -8) (undo-tree-id2327 . -8) (undo-tree-id2328 . -8) (undo-tree-id2329 . -8) (undo-tree-id2330 . -8) (undo-tree-id2331 . -9) (undo-tree-id2332 . -9) (undo-tree-id2333 . -9) (undo-tree-id2334 . -9) (undo-tree-id2335 . -9) 2478) nil (26011 39383 993700 0) 0 nil])
([nil nil ((#("const VERTICES: &[Vertex] = &[
    Vertex { position: [-0.0868241, 0.49240386, 0.0], color: [0.5, 0.0, 0.5] }, // A
    Vertex { position: [-0.49513406, 0.06958647, 0.0], color: [0.5, 0.0, 0.5] }, // B
    Vertex { position: [-0.21918549, -0.44939706, 0.0], color: [0.5, 0.0, 0.5] }, // C
    Vertex { position: [0.35966998, -0.3473291, 0.0], color: [0.5, 0.0, 0.5] }, // D
    Vertex { position: [0.44147372, 0.2347359, 0.0], color: [0.5, 0.0, 0.5] }, // E
];" 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 14 (face font-lock-variable-name-face fontified t) 14 16 (fontified t) 16 17 (face rust-ampersand-face fontified t) 17 18 (face (rainbow-delimiters-depth-1-face) fontified t) 18 24 (face font-lock-type-face fontified t) 24 25 (face (rainbow-delimiters-depth-1-face) fontified t) 25 28 (fontified t) 28 29 (face rust-ampersand-face fontified t) 29 30 (face (rainbow-delimiters-depth-1-face) fontified t) 30 35 (fontified t) 35 41 (face font-lock-type-face fontified t) 41 42 (fontified t) 42 43 (face (rainbow-delimiters-depth-2-face) fontified t) 43 44 (fontified t) 44 52 (face font-lock-variable-name-face fontified t) 52 54 (fontified t) 54 55 (face (rainbow-delimiters-depth-3-face) fontified t) 55 82 (fontified t) 82 83 (face (rainbow-delimiters-depth-3-face) fontified t) 83 85 (fontified t) 85 90 (face font-lock-variable-name-face fontified t) 90 92 (fontified t) 92 93 (face (rainbow-delimiters-depth-3-face) fontified t) 93 106 (fontified t) 106 107 (face (rainbow-delimiters-depth-3-face) fontified t) 107 108 (fontified t) 108 109 (face (rainbow-delimiters-depth-2-face) fontified t) 109 111 (fontified t) 111 114 (face font-lock-comment-delimiter-face fontified t) 114 116 (face font-lock-comment-face fontified t) 116 120 (fontified t) 120 126 (face font-lock-type-face fontified t) 126 127 (fontified t) 127 128 (face (rainbow-delimiters-depth-2-face) fontified t) 128 129 (fontified t) 129 137 (face font-lock-variable-name-face fontified t) 137 139 (fontified t) 139 140 (face (rainbow-delimiters-depth-3-face) fontified t) 140 168 (fontified t) 168 169 (face (rainbow-delimiters-depth-3-face) fontified t) 169 171 (fontified t) 171 176 (face font-lock-variable-name-face fontified t) 176 178 (fontified t) 178 179 (face (rainbow-delimiters-depth-3-face) fontified t) 179 192 (fontified t) 192 193 (face (rainbow-delimiters-depth-3-face) fontified t) 193 194 (fontified t) 194 195 (face (rainbow-delimiters-depth-2-face) fontified t) 195 197 (fontified t) 197 200 (face font-lock-comment-delimiter-face fontified t) 200 202 (face font-lock-comment-face fontified t) 202 206 (fontified t) 206 212 (face font-lock-type-face fontified t) 212 213 (fontified t) 213 214 (face (rainbow-delimiters-depth-2-face) fontified t) 214 215 (fontified t) 215 223 (face font-lock-variable-name-face fontified t) 223 225 (fontified t) 225 226 (face (rainbow-delimiters-depth-3-face) fontified t) 226 255 (fontified t) 255 256 (face (rainbow-delimiters-depth-3-face) fontified t) 256 258 (fontified t) 258 263 (face font-lock-variable-name-face fontified t) 263 265 (fontified t) 265 266 (face (rainbow-delimiters-depth-3-face) fontified t) 266 279 (fontified t) 279 280 (face (rainbow-delimiters-depth-3-face) fontified t) 280 281 (fontified t) 281 282 (face (rainbow-delimiters-depth-2-face) fontified t) 282 284 (fontified t) 284 287 (face font-lock-comment-delimiter-face fontified t) 287 289 (face font-lock-comment-face fontified t) 289 293 (fontified t) 293 299 (face font-lock-type-face fontified t) 299 300 (fontified t) 300 301 (face (rainbow-delimiters-depth-2-face) fontified t) 301 302 (fontified t) 302 310 (face font-lock-variable-name-face fontified t) 310 312 (fontified t) 312 313 (face (rainbow-delimiters-depth-3-face) fontified t) 313 340 (fontified t) 340 341 (face (rainbow-delimiters-depth-3-face) fontified t) 341 343 (fontified t) 343 348 (face font-lock-variable-name-face fontified t) 348 350 (fontified t) 350 351 (face (rainbow-delimiters-depth-3-face) fontified t) 351 364 (fontified t) 364 365 (face (rainbow-delimiters-depth-3-face) fontified t) 365 366 (fontified t) 366 367 (face (rainbow-delimiters-depth-2-face) fontified t) 367 369 (fontified t) 369 372 (face font-lock-comment-delimiter-face fontified t) 372 374 (face font-lock-comment-face fontified t) 374 378 (fontified t) 378 384 (face font-lock-type-face fontified t) 384 385 (fontified t) 385 386 (face (rainbow-delimiters-depth-2-face) fontified t) 386 387 (fontified t) 387 395 (face font-lock-variable-name-face fontified t) 395 397 (fontified t) 397 398 (face (rainbow-delimiters-depth-3-face) fontified t) 398 424 (fontified t) 424 425 (face (rainbow-delimiters-depth-3-face) fontified t) 425 427 (fontified t) 427 432 (face font-lock-variable-name-face fontified t) 432 434 (fontified t) 434 435 (face (rainbow-delimiters-depth-3-face) fontified t) 435 448 (fontified t) 448 449 (face (rainbow-delimiters-depth-3-face) fontified t) 449 450 (fontified t) 450 451 (face (rainbow-delimiters-depth-2-face) fontified t) 451 453 (fontified t) 453 456 (face font-lock-comment-delimiter-face fontified t) 456 458 (face font-lock-comment-face fontified t) 458 459 (face (rainbow-delimiters-depth-1-face) fontified t) 459 460 (fontified t)) . 451) (undo-tree-id2352 . -460) (undo-tree-id2353 . -6) (undo-tree-id2354 . -460) (undo-tree-id2355 . -460) (undo-tree-id2356 . -460) (undo-tree-id2357 . -378) (undo-tree-id2358 . -291) (undo-tree-id2359 . -116) (undo-tree-id2360 . -460) (t 26011 39384 3728 501000)) nil (26011 39394 33577 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 992 . 993) (nil fontified nil 451 . 993) (451 . 993)) nil (26011 39394 33557 0) 0 nil])
([nil nil ((#("
fn create_circle() -> (Vec<Vertex>, Vec<u16>) {
    let point_num = 500;
    let mut vertexs = (0..point_num).map(|n| {
        let y = f64::sin(2.0*std::f64::consts::PI/(point_num as f64)*(n as f64)) as f32;
        let x = f64::cos(2.0*std::f64::consts::PI/(point_num as f64)*(n as f64)) as f32;
        Vertex {
            position: [x, y, 0.0],
            color: [0.0, 1.0, 0.0],
        }
    }).collect::<Vec<Vertex>>();
    vertexs.insert(0, Vertex { position: [0.0, 0.0, 0.0], color: [0.0, 1.0, 0.0] });
    let mut indices: Vec<u16> = vec![];
    for i in 0..point_num {
        indices.push(0 as u16);
        indices.push((i+1) as u16);
        if i+2 < point_num {
            indices.push((i+2) as u16);
        } else {
            indices.push(1);
        }
    }
    (vertexs, indices)
    
}" 0 1 (fontified t) 1 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 17 (face font-lock-function-name-face fontified t) 17 18 (face (rainbow-delimiters-depth-1-face) fontified t) 18 19 (face (rainbow-delimiters-depth-1-face) fontified t) 19 21 (fontified t) 21 22 (fontified t syntax-table (1)) 22 23 (fontified t) 23 24 (face (rainbow-delimiters-depth-1-face) fontified t) 24 27 (face font-lock-type-face fontified t) 27 28 (face (rainbow-delimiters-depth-2-face) fontified t) 28 34 (face font-lock-type-face fontified t) 34 35 (face (rainbow-delimiters-depth-2-face) fontified t) 35 37 (fontified t) 37 40 (face font-lock-type-face fontified t) 40 41 (face (rainbow-delimiters-depth-2-face) fontified t) 41 44 (face font-lock-type-face fontified t) 44 45 (face (rainbow-delimiters-depth-2-face) fontified t) 45 46 (face (rainbow-delimiters-depth-1-face) fontified t) 46 47 (fontified t) 47 48 (face (rainbow-delimiters-depth-1-face) fontified t) 48 49 (fontified t) 49 53 (fontified t) 53 56 (face font-lock-keyword-face fontified t) 56 57 (fontified t) 57 66 (face font-lock-variable-name-face fontified t) 66 74 (fontified t) 74 78 (fontified t) 78 81 (face font-lock-keyword-face fontified t) 81 82 (fontified t) 82 85 (face font-lock-keyword-face fontified t) 85 86 (fontified t) 86 93 (face font-lock-variable-name-face fontified t) 93 96 (fontified t) 96 97 (face (rainbow-delimiters-depth-2-face) fontified t) 97 109 (fontified t) 109 110 (face (rainbow-delimiters-depth-2-face) fontified t) 110 114 (fontified t) 114 115 (face (rainbow-delimiters-depth-2-face) fontified t) 115 119 (fontified t) 119 120 (face (rainbow-delimiters-depth-3-face) fontified t) 120 121 (fontified t) 121 129 (fontified t) 129 132 (face font-lock-keyword-face fontified t) 132 133 (fontified t) 133 134 (face font-lock-variable-name-face fontified t) 134 137 (fontified t) 137 140 (face font-lock-type-face fontified t) 140 145 (fontified t) 145 146 (face (rainbow-delimiters-depth-4-face) fontified t) 146 150 (fontified t) 150 153 (face font-lock-constant-face fontified t) 153 155 (fontified t) 155 158 (face font-lock-type-face fontified t) 158 160 (fontified t) 160 166 (face font-lock-constant-face fontified t) 166 168 (fontified t) 168 170 (face font-lock-type-face fontified t) 170 171 (fontified t) 171 172 (face (rainbow-delimiters-depth-5-face) fontified t) 172 182 (fontified t) 182 184 (face font-lock-keyword-face fontified t) 184 185 (fontified t) 185 188 (face font-lock-type-face fontified t) 188 189 (face (rainbow-delimiters-depth-5-face) fontified t) 189 190 (fontified t) 190 191 (face (rainbow-delimiters-depth-5-face) fontified t) 191 193 (fontified t) 193 195 (face font-lock-keyword-face fontified t) 195 196 (fontified t) 196 199 (face font-lock-type-face fontified t) 199 200 (face (rainbow-delimiters-depth-5-face) fontified t) 200 201 (face (rainbow-delimiters-depth-4-face) fontified t) 201 202 (fontified t) 202 204 (face font-lock-keyword-face fontified t) 204 205 (fontified t) 205 208 (face font-lock-type-face fontified t) 208 210 (fontified t) 210 218 (fontified t) 218 221 (face font-lock-keyword-face fontified t) 221 222 (fontified t) 222 223 (face font-lock-variable-name-face fontified t) 223 226 (fontified t) 226 229 (face font-lock-type-face fontified t) 229 234 (fontified t) 234 235 (face (rainbow-delimiters-depth-4-face) fontified t) 235 239 (fontified t) 239 242 (face font-lock-constant-face fontified t) 242 244 (fontified t) 244 247 (face font-lock-type-face fontified t) 247 249 (fontified t) 249 255 (face font-lock-constant-face fontified t) 255 257 (fontified t) 257 259 (face font-lock-type-face fontified t) 259 260 (fontified t) 260 261 (face (rainbow-delimiters-depth-5-face) fontified t) 261 271 (fontified t) 271 273 (face font-lock-keyword-face fontified t) 273 274 (fontified t) 274 277 (face font-lock-type-face fontified t) 277 278 (face (rainbow-delimiters-depth-5-face) fontified t) 278 279 (fontified t) 279 280 (face (rainbow-delimiters-depth-5-face) fontified t) 280 282 (fontified t) 282 284 (face font-lock-keyword-face fontified t) 284 285 (fontified t) 285 288 (face font-lock-type-face fontified t) 288 289 (face (rainbow-delimiters-depth-5-face) fontified t) 289 290 (face (rainbow-delimiters-depth-4-face) fontified t) 290 291 (fontified t) 291 293 (face font-lock-keyword-face fontified t) 293 294 (fontified t) 294 296 (face font-lock-type-face fontified t) 296 297 (face font-lock-type-face fontified t rear-nonsticky t) 297 299 (fontified t) 299 307 (fontified t) 307 313 (face font-lock-type-face fontified t) 313 314 (fontified t) 314 315 (face (rainbow-delimiters-depth-4-face) fontified t) 315 328 (fontified t) 328 336 (face font-lock-variable-name-face fontified t) 336 338 (fontified t) 338 339 (face (rainbow-delimiters-depth-5-face) fontified t) 339 348 (fontified t) 348 349 (face (rainbow-delimiters-depth-5-face) fontified t) 349 363 (fontified t) 363 368 (face font-lock-variable-name-face fontified t) 368 370 (fontified t) 370 371 (face (rainbow-delimiters-depth-5-face) fontified t) 371 384 (fontified t) 384 385 (face (rainbow-delimiters-depth-5-face) fontified t) 385 395 (fontified t) 395 396 (face (rainbow-delimiters-depth-4-face) fontified t) 396 397 (fontified t) 397 401 (fontified t) 401 402 (face (rainbow-delimiters-depth-3-face) fontified t) 402 403 (face (rainbow-delimiters-depth-2-face) fontified t) 403 413 (fontified t) 413 414 (face (rainbow-delimiters-depth-2-face) fontified t) 414 417 (face font-lock-type-face fontified t) 417 418 (face (rainbow-delimiters-depth-3-face) fontified t) 418 424 (face font-lock-type-face fontified t) 424 425 (face (rainbow-delimiters-depth-3-face) fontified t) 425 426 (face (rainbow-delimiters-depth-2-face) fontified t) 426 427 (face (rainbow-delimiters-depth-2-face) fontified t) 427 428 (face (rainbow-delimiters-depth-2-face) fontified t) 428 430 (fontified t) 430 448 (fontified t) 448 449 (face (rainbow-delimiters-depth-2-face) fontified t) 449 452 (fontified t) 452 458 (face font-lock-type-face fontified t) 458 459 (fontified t) 459 460 (face (rainbow-delimiters-depth-3-face) fontified t) 460 461 (fontified t) 461 469 (face font-lock-variable-name-face fontified t) 469 471 (fontified t) 471 472 (face (rainbow-delimiters-depth-4-face) fontified t) 472 485 (fontified t) 485 486 (face (rainbow-delimiters-depth-4-face) fontified t) 486 488 (fontified t) 488 493 (face font-lock-variable-name-face fontified t) 493 495 (fontified t) 495 496 (face (rainbow-delimiters-depth-4-face) fontified t) 496 509 (fontified t) 509 510 (face (rainbow-delimiters-depth-4-face) fontified t) 510 511 (fontified t) 511 512 (face (rainbow-delimiters-depth-3-face) fontified t) 512 513 (face (rainbow-delimiters-depth-2-face) fontified t) 513 519 (fontified t) 519 522 (face font-lock-keyword-face fontified t) 522 523 (fontified t) 523 526 (face font-lock-keyword-face fontified t) 526 527 (fontified t) 527 534 (face font-lock-variable-name-face fontified t) 534 536 (fontified t) 536 539 (face font-lock-type-face fontified t) 539 540 (face (rainbow-delimiters-depth-2-face) fontified t) 540 543 (face font-lock-type-face fontified t) 543 544 (face (rainbow-delimiters-depth-2-face) fontified t) 544 547 (fontified t) 547 551 (face font-lock-preprocessor-face fontified t) 551 552 (face (rainbow-delimiters-depth-2-face) fontified t) 552 553 (face (rainbow-delimiters-depth-2-face) fontified t) 553 555 (fontified t) 555 559 (fontified t) 559 562 (face font-lock-keyword-face fontified t) 562 563 (fontified t) 563 564 (face font-lock-variable-name-face fontified t) 564 565 (fontified t) 565 567 (face font-lock-keyword-face fontified t) 567 576 (fontified t) 576 580 (fontified t) 580 581 (fontified t) 581 582 (face (rainbow-delimiters-depth-2-face) fontified t) 582 583 (fontified t) 583 603 (fontified t) 603 604 (face (rainbow-delimiters-depth-3-face) fontified t) 604 606 (fontified t) 606 608 (face font-lock-keyword-face fontified t) 608 609 (fontified t) 609 612 (face font-lock-type-face fontified t) 612 613 (face (rainbow-delimiters-depth-3-face) fontified t) 613 615 (fontified t) 615 635 (fontified t) 635 636 (face (rainbow-delimiters-depth-3-face) fontified t) 636 637 (face (rainbow-delimiters-depth-4-face) fontified t) 637 640 (fontified t) 640 641 (face (rainbow-delimiters-depth-4-face) fontified t) 641 642 (fontified t) 642 644 (face font-lock-keyword-face fontified t) 644 645 (fontified t) 645 648 (face font-lock-type-face fontified t) 648 649 (face (rainbow-delimiters-depth-3-face) fontified t) 649 651 (fontified t) 651 659 (fontified t) 659 661 (face font-lock-keyword-face fontified t) 661 666 (fontified t) 666 667 (fontified t syntax-table (1)) 667 668 (fontified t) 668 678 (fontified t) 678 679 (face (rainbow-delimiters-depth-3-face) fontified t) 679 680 (fontified t) 680 704 (fontified t) 704 705 (face (rainbow-delimiters-depth-4-face) fontified t) 705 706 (face (rainbow-delimiters-depth-5-face) fontified t) 706 709 (fontified t) 709 710 (face (rainbow-delimiters-depth-5-face) fontified t) 710 711 (fontified t) 711 713 (face font-lock-keyword-face fontified t) 713 714 (fontified t) 714 717 (face font-lock-type-face fontified t) 717 718 (face (rainbow-delimiters-depth-4-face) fontified t) 718 720 (fontified t) 720 728 (fontified t) 728 729 (face (rainbow-delimiters-depth-3-face) fontified t) 729 730 (fontified t) 730 734 (face font-lock-keyword-face fontified t) 734 735 (fontified t) 735 736 (face (rainbow-delimiters-depth-3-face) fontified t) 736 737 (fontified t) 737 749 (fontified t) 749 757 (fontified t) 757 761 (fontified t) 761 762 (face (rainbow-delimiters-depth-4-face) fontified t) 762 763 (fontified t) 763 764 (face (rainbow-delimiters-depth-4-face) fontified t) 764 765 (fontified t) 765 766 (fontified t) 766 767 (fontified t) 767 768 (fontified t) 768 774 (fontified t) 774 775 (face (rainbow-delimiters-depth-3-face) fontified t) 775 776 (fontified t) 776 780 (fontified t) 780 781 (face (rainbow-delimiters-depth-2-face) fontified t) 781 786 (fontified t) 786 787 (face (rainbow-delimiters-depth-2-face) fontified t) 787 803 (fontified t) 803 804 (face (rainbow-delimiters-depth-2-face) fontified t) 804 810 (fontified t) 810 811 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1065) (undo-tree-id2387 . -811) (undo-tree-id2388 . -234) (undo-tree-id2389 . -4) (undo-tree-id2390 . -811) (undo-tree-id2391 . -811) (undo-tree-id2392 . -811) (undo-tree-id2393 . -809) (undo-tree-id2394 . -775) (undo-tree-id2395 . -661) (undo-tree-id2396 . -592) (undo-tree-id2397 . -437) (undo-tree-id2398 . -357) (undo-tree-id2399 . -215) (undo-tree-id2400 . -78) (undo-tree-id2401 . -52) (undo-tree-id2402 . -3) (undo-tree-id2403 . -811) (t 26011 39394 45113 393000)) nil (26011 39404 66 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1064) (undo-tree-id2361 . -1) (undo-tree-id2362 . -1) (undo-tree-id2363 . -1) (undo-tree-id2364 . -1) (undo-tree-id2365 . -1) (undo-tree-id2366 . -1) (undo-tree-id2367 . -1) (undo-tree-id2368 . -1) (undo-tree-id2369 . -1) (undo-tree-id2370 . -1) (undo-tree-id2371 . -1) (undo-tree-id2372 . -1) (undo-tree-id2373 . -1) (undo-tree-id2374 . -1) (undo-tree-id2375 . -1) (undo-tree-id2376 . -1) (undo-tree-id2377 . -1) (undo-tree-id2378 . -1) (undo-tree-id2379 . -1) (undo-tree-id2380 . -1) (undo-tree-id2381 . -1) (undo-tree-id2382 . -1) (undo-tree-id2383 . -1) (undo-tree-id2384 . -1) (undo-tree-id2385 . -1) (undo-tree-id2386 . -1) 1065) nil (26011 39404 45 0) 0 nil])
([nil nil ((#("        let (vertices, indices) = create_circle();" 0 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 13 (face (rainbow-delimiters-depth-3-face) fontified t) 13 14 (fontified t) 14 30 (fontified t) 30 31 (face (rainbow-delimiters-depth-3-face) fontified t) 31 47 (fontified t) 47 48 (face (rainbow-delimiters-depth-3-face) fontified t) 48 49 (face (rainbow-delimiters-depth-3-face) fontified t) 49 50 (fontified t)) . 9305) (undo-tree-id2470 . -42) (undo-tree-id2471 . -42) (undo-tree-id2472 . -42) (undo-tree-id2473 . -42) (undo-tree-id2474 . -42) (undo-tree-id2475 . -42) (undo-tree-id2476 . -50) (t 26011 39404 11029 594000)) nil (26011 39452 536508 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 9305) (undo-tree-id2468 . -1) (undo-tree-id2469 . -1)) nil (26011 39452 536500 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 9305) (undo-tree-id2467 . -1)) nil (26011 39452 536497 0) 0 nil])
([nil nil ((#("        
        // new()
        let vertex_buffer = device.create_buffer_init(
            &wgpu::util::BufferInitDescriptor {
                label: Some(\"Vertex Buffer\"),
                contents: bytemuck::cast_slice(vertices.as_slice()),
                usage: wgpu::BufferUsages::VERTEX,
            }
        );
        let num_vertices = vertices.len() as u32;

        // NEW!
        let index_buffer = device.create_buffer_init(
            &wgpu::util::BufferInitDescriptor {
                label: Some(\"Index Buffer\"),
                contents: bytemuck::cast_slice(indices.as_slice()),
                usage: wgpu::BufferUsages::INDEX,
            }
        );
        let num_indices = indices.len() as u32;
" 0 9 (fontified t) 9 17 (fontified t) 17 20 (face font-lock-comment-delimiter-face fontified t) 20 26 (face font-lock-comment-face fontified t) 26 34 (fontified t) 34 37 (face font-lock-keyword-face fontified t) 37 38 (fontified t) 38 51 (face font-lock-variable-name-face fontified t) 51 73 (fontified t) 73 79 (fontified t) 79 80 (face (rainbow-delimiters-depth-3-face) fontified t) 80 81 (fontified t) 81 89 (fontified t) 89 93 (fontified t) 93 94 (face rust-ampersand-face fontified t) 94 98 (face font-lock-constant-face fontified t) 98 100 (fontified t) 100 104 (face font-lock-constant-face fontified t) 104 106 (fontified t) 106 126 (face font-lock-type-face fontified t) 126 127 (fontified t) 127 128 (face (rainbow-delimiters-depth-4-face) fontified t) 128 129 (fontified t) 129 137 (fontified t) 137 145 (fontified t) 145 150 (face font-lock-variable-name-face fontified t) 150 152 (fontified t) 152 156 (face font-lock-type-face fontified t) 156 157 (face (rainbow-delimiters-depth-5-face) fontified t) 157 172 (face font-lock-string-face fontified t) 172 173 (face (rainbow-delimiters-depth-5-face) fontified t) 173 175 (fontified t) 175 183 (fontified t) 183 191 (fontified t) 191 199 (face font-lock-variable-name-face fontified t) 199 201 (fontified t) 201 209 (face font-lock-constant-face fontified t) 209 221 (fontified t) 221 222 (face (rainbow-delimiters-depth-5-face) fontified t) 222 225 (fontified t) 225 231 (fontified t) 231 239 (fontified t) 239 240 (face (rainbow-delimiters-depth-6-face) fontified t) 240 241 (face (rainbow-delimiters-depth-6-face) fontified t) 241 242 (face (rainbow-delimiters-depth-5-face) fontified t) 242 244 (fontified t) 244 252 (fontified t) 252 260 (fontified t) 260 265 (face font-lock-variable-name-face fontified t) 265 267 (fontified t) 267 271 (face font-lock-constant-face fontified t) 271 273 (fontified t) 273 285 (face font-lock-type-face fontified t) 285 287 (fontified t) 287 293 (face font-lock-type-face fontified t) 293 295 (fontified t) 295 303 (fontified t) 303 307 (fontified t) 307 308 (face (rainbow-delimiters-depth-4-face) fontified t) 308 309 (fontified t) 309 317 (fontified t) 317 318 (face (rainbow-delimiters-depth-3-face) fontified t) 318 320 (fontified t) 320 327 (fontified t) 327 328 (fontified t) 328 331 (face font-lock-keyword-face fontified t) 331 332 (fontified t) 332 344 (face font-lock-variable-name-face fontified t) 344 359 (fontified t) 359 360 (face (rainbow-delimiters-depth-3-face) fontified t) 360 361 (face (rainbow-delimiters-depth-3-face) fontified t) 361 362 (fontified t) 362 364 (face font-lock-keyword-face fontified t) 364 365 (fontified t) 365 368 (face font-lock-type-face fontified t) 368 370 (fontified t) 370 379 (fontified t) 379 382 (face font-lock-comment-delimiter-face fontified t) 382 387 (face font-lock-comment-face fontified t) 387 395 (fontified t) 395 398 (face font-lock-keyword-face fontified t) 398 399 (fontified t) 399 411 (face font-lock-variable-name-face fontified t) 411 439 (fontified t) 439 440 (face (rainbow-delimiters-depth-3-face) fontified t) 440 441 (fontified t) 441 449 (fontified t) 449 453 (fontified t) 453 454 (face rust-ampersand-face fontified t) 454 458 (face font-lock-constant-face fontified t) 458 460 (fontified t) 460 464 (face font-lock-constant-face fontified t) 464 466 (fontified t) 466 486 (face font-lock-type-face fontified t) 486 487 (fontified t) 487 488 (face (rainbow-delimiters-depth-4-face) fontified t) 488 489 (fontified t) 489 497 (fontified t) 497 505 (fontified t) 505 510 (face font-lock-variable-name-face fontified t) 510 512 (fontified t) 512 516 (face font-lock-type-face fontified t) 516 517 (face (rainbow-delimiters-depth-5-face) fontified t) 517 531 (face font-lock-string-face fontified t) 531 532 (face (rainbow-delimiters-depth-5-face) fontified t) 532 534 (fontified t) 534 542 (fontified t) 542 550 (fontified t) 550 558 (face font-lock-variable-name-face fontified t) 558 560 (fontified t) 560 568 (face font-lock-constant-face fontified t) 568 580 (fontified t) 580 581 (face (rainbow-delimiters-depth-5-face) fontified t) 581 589 (fontified t) 589 597 (fontified t) 597 598 (face (rainbow-delimiters-depth-6-face) fontified t) 598 599 (face (rainbow-delimiters-depth-6-face) fontified t) 599 600 (face (rainbow-delimiters-depth-5-face) fontified t) 600 602 (fontified t) 602 610 (fontified t) 610 618 (fontified t) 618 623 (face font-lock-variable-name-face fontified t) 623 625 (fontified t) 625 629 (face font-lock-constant-face fontified t) 629 631 (fontified t) 631 643 (face font-lock-type-face fontified t) 643 645 (fontified t) 645 650 (face font-lock-type-face fontified t) 650 652 (fontified t) 652 660 (fontified t) 660 664 (fontified t) 664 665 (face (rainbow-delimiters-depth-4-face) fontified t) 665 666 (fontified t) 666 674 (fontified t) 674 675 (face (rainbow-delimiters-depth-3-face) fontified t) 675 677 (fontified t) 677 685 (fontified t) 685 688 (face font-lock-keyword-face fontified t) 688 689 (fontified t) 689 700 (face font-lock-variable-name-face fontified t) 700 714 (fontified t) 714 715 (face (rainbow-delimiters-depth-3-face) fontified t) 715 716 (face (rainbow-delimiters-depth-3-face) fontified t) 716 717 (fontified t) 717 719 (face font-lock-keyword-face fontified t) 719 720 (fontified t) 720 723 (face font-lock-type-face fontified t) 723 725 (fontified t)) . 10053) (undo-tree-id2439 . -725) (undo-tree-id2440 . -328) (undo-tree-id2441 . -328) (undo-tree-id2442 . -26) (undo-tree-id2443 . -725) (undo-tree-id2444 . -725) (undo-tree-id2445 . -725) (undo-tree-id2446 . -724) (undo-tree-id2447 . -676) (undo-tree-id2448 . -665) (undo-tree-id2449 . -645) (undo-tree-id2450 . -475) (undo-tree-id2451 . -386) (undo-tree-id2452 . -370) (undo-tree-id2453 . -345) (undo-tree-id2454 . -308) (undo-tree-id2455 . -260) (undo-tree-id2456 . -187) (undo-tree-id2457 . -186) (undo-tree-id2458 . -137) (undo-tree-id2459 . -87) (undo-tree-id2460 . -86) (undo-tree-id2461 . -30) (undo-tree-id2462 . -29) (undo-tree-id2463 . -28) (undo-tree-id2464 . -10) (undo-tree-id2465 . -9) (undo-tree-id2466 . -725)) nil (26011 39452 536494 0) 0 nil])
([nil nil ((#("
" 0 1 (face font-lock-comment-face fontified t)) . -10052) (undo-tree-id2404 . -1) (undo-tree-id2405 . -1) (undo-tree-id2406 . -1) (undo-tree-id2407 . -1) (undo-tree-id2408 . -1) (undo-tree-id2409 . -1) (undo-tree-id2410 . -1) (undo-tree-id2411 . -1) (undo-tree-id2412 . -1) (undo-tree-id2413 . -1) (undo-tree-id2414 . -1) (undo-tree-id2415 . -1) (undo-tree-id2416 . -1) (undo-tree-id2417 . -1) (undo-tree-id2418 . -1) (undo-tree-id2419 . -1) (undo-tree-id2420 . -1) (undo-tree-id2421 . -1) (undo-tree-id2422 . -1) (undo-tree-id2423 . -1) (undo-tree-id2424 . -1) (undo-tree-id2425 . -1) (undo-tree-id2426 . -1) (undo-tree-id2427 . -1) (undo-tree-id2428 . -1) (undo-tree-id2429 . -1) (undo-tree-id2430 . -1) (undo-tree-id2431 . -1) (undo-tree-id2432 . -1) (undo-tree-id2433 . -1) (undo-tree-id2434 . -1) (undo-tree-id2435 . -1) (undo-tree-id2436 . -1) (undo-tree-id2437 . -1) (undo-tree-id2438 . -1) 10053) nil (26011 39452 536464 0) 0 nil])
([nil nil ((apply 54 9305 9998 undo--wrap-and-run-primitive-undo 9305 9998 ((#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -9959) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -9948) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -9934) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -9884) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -9827) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -9782) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -9734) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -9680) (#("// " 0 2 (face font-lock-comment-delimiter-face fontified t) 2 3 (face font-lock-comment-delimiter-face fontified t)) . -9664) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -9613) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -9602) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -9588) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -9537) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -9479) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -9433) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -9385) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -9330) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -9313) 9305))) nil (26011 39452 536413 0) 0 nil])
([nil nil ((5028 . 5037) (t 26011 39452 548169 974000)) nil (26011 39628 980879 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 5169 . 5170) (nil fontified nil 5037 . 5170) (5037 . 5170)) nil (26011 39628 980878 0) 0 nil])
([nil nil ((5142 . 5150) (#("    " 0 4 (fontified t)) . 5142) (5111 . 5119) (#("    " 0 4 (fontified t)) . 5111) (5073 . 5081) (#("    " 0 4 (fontified t)) . 5073) (#("    " 0 4 (fontified t)) . -5037) (undo-tree-id2477 . -1) 4960) nil (26011 39628 980873 0) 0 nil])
([nil nil ((#("foo.txt" 0 7 (face font-lock-string-face fontified t)) . -5061) (undo-tree-id2562 . -7) (undo-tree-id2563 . -7) (undo-tree-id2564 . -1) (undo-tree-id2565 . -2) (undo-tree-id2566 . -3) (undo-tree-id2567 . -4) (undo-tree-id2568 . -5) (undo-tree-id2569 . -6) (undo-tree-id2570 . -7) (undo-tree-id2571 . -7) (undo-tree-id2572 . -7) 5068 (t 26011 39628 992592 791000)) nil (26011 39650 869090 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 5074 . 5075) (nil fontified nil 5061 . 5075) (5061 . 5075)) nil (26011 39650 869079 0) 0 nil])
([nil nil ((#("        let diffuse_bytes = include_bytes!(\"happy-tree.png\"); // CHANGED!" 0 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 25 (face font-lock-variable-name-face fontified t) 25 28 (fontified t) 28 42 (face font-lock-preprocessor-face fontified t) 42 43 (face (rainbow-delimiters-depth-3-face) fontified t) 43 59 (face font-lock-string-face fontified t) 59 60 (face (rainbow-delimiters-depth-3-face) fontified t) 60 62 (fontified t) 62 65 (face font-lock-comment-delimiter-face fontified t) 65 73 (face font-lock-comment-face fontified t)) . 4955) (undo-tree-id2479 . -38) (undo-tree-id2480 . -73) (undo-tree-id2481 . -38) (undo-tree-id2482 . -5) (undo-tree-id2483 . -5) (undo-tree-id2484 . -5) (undo-tree-id2485 . -5) (undo-tree-id2486 . -5) (undo-tree-id2487 . -5) (undo-tree-id2488 . -5) (undo-tree-id2489 . -5) (undo-tree-id2490 . -5) (undo-tree-id2491 . -5) (undo-tree-id2492 . -5) (undo-tree-id2493 . -5) (undo-tree-id2494 . -5) (undo-tree-id2495 . -5) (undo-tree-id2496 . -5) (undo-tree-id2497 . -5) (undo-tree-id2498 . -5) (undo-tree-id2499 . -5) (undo-tree-id2500 . -5) (undo-tree-id2501 . -5) (undo-tree-id2502 . -58) (undo-tree-id2503 . -58) (undo-tree-id2504 . -58) (undo-tree-id2505 . -58) (undo-tree-id2506 . -58) (undo-tree-id2507 . -58) (undo-tree-id2508 . -58) (undo-tree-id2509 . -58) (undo-tree-id2510 . -58) (undo-tree-id2511 . -58) (undo-tree-id2512 . -58) (undo-tree-id2513 . -58) (undo-tree-id2514 . -58) (undo-tree-id2515 . -58) (undo-tree-id2516 . -58) (undo-tree-id2517 . -58) (undo-tree-id2518 . -58) (undo-tree-id2519 . -58) (undo-tree-id2520 . -58) (undo-tree-id2521 . -58) (undo-tree-id2522 . -44) (undo-tree-id2523 . -44) (undo-tree-id2524 . -44) (undo-tree-id2525 . -45) (undo-tree-id2526 . -47) (undo-tree-id2527 . -50) (undo-tree-id2528 . -51) (undo-tree-id2529 . -52) (undo-tree-id2530 . -53) (undo-tree-id2531 . -54) (undo-tree-id2532 . -55) (undo-tree-id2533 . -56) (undo-tree-id2534 . -57) (undo-tree-id2535 . -58) (undo-tree-id2536 . -59) (undo-tree-id2537 . -59) (undo-tree-id2538 . -59) (undo-tree-id2539 . -59) (undo-tree-id2540 . -59) (undo-tree-id2541 . -44) (undo-tree-id2542 . -58) (undo-tree-id2543 . -58) (undo-tree-id2544 . -58) (undo-tree-id2545 . -58) (undo-tree-id2546 . -58) (undo-tree-id2547 . -58) (undo-tree-id2548 . -58) (undo-tree-id2549 . -58) (undo-tree-id2550 . -58) (undo-tree-id2551 . -58) (undo-tree-id2552 . -58) (undo-tree-id2553 . -58) (undo-tree-id2554 . -44) (undo-tree-id2555 . -73) (undo-tree-id2556 . -73) (undo-tree-id2557 . -73) (undo-tree-id2558 . -73) (undo-tree-id2559 . -73) (undo-tree-id2560 . -73) (undo-tree-id2561 . -73)) nil (26011 39650 869073 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 4955) (undo-tree-id2478 . -1)) nil (26011 39650 868990 0) 0 nil])
([nil nil ((4975 . 4984)) nil (26011 39650 868980 0) 0 nil])
([nil nil ((#("?" 0 1 (face rust-question-mark fontified t)) . -5012) (undo-tree-id2762 . -1) (undo-tree-id2763 . -1) (undo-tree-id2764 . -1) (undo-tree-id2765 . -1) (undo-tree-id2766 . -1) (undo-tree-id2767 . -1) (undo-tree-id2768 . -1) (undo-tree-id2769 . -1) (undo-tree-id2770 . -1) (undo-tree-id2771 . -1) 5013 (t 26011 39650 881210 971000)) nil (26011 39695 953439 0) 0 nil])
([nil nil ((5012 . 5013)) nil (26011 39695 953428 0) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -5012) (undo-tree-id2748 . -1) (undo-tree-id2749 . -1) (undo-tree-id2750 . -1) (undo-tree-id2751 . -1) (undo-tree-id2752 . -1) (undo-tree-id2753 . -1) (undo-tree-id2754 . -1) (undo-tree-id2755 . -1) (undo-tree-id2756 . -1) (undo-tree-id2757 . -1) (undo-tree-id2758 . -1) (undo-tree-id2759 . -1) (undo-tree-id2760 . -1) (undo-tree-id2761 . -1) 5013) nil (26011 39695 953426 0) 0 nil])
([nil nil ((5012 . 5014)) nil (26011 39695 953411 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5020 5038 nil nil nil t #s(yas--exit 5039 nil))) #s(yas--exit 5039 nil) 19 nil #s(yas--field 1 5020 5038 nil nil nil t #s(yas--exit 5039 nil)) nil nil)) (5013 . 5024) (#("expect(${1:msg})$0" 0 18 (fontified nil)) . 5013) (5013 . 5031) (#("e" 0 1 (fontified nil)) . 5013) (5013 . 5014) (#("expect(…)" 0 9 (fontified nil)) . -5013) (5013 . 5022) (#("e" 0 1 (fontified t)) . -5013) (undo-tree-id2742 . -1) (undo-tree-id2743 . -1) (undo-tree-id2744 . -1) (undo-tree-id2745 . -1) (undo-tree-id2746 . -1) (undo-tree-id2747 . -1) 5014) nil (26011 39695 953409 0) 0 nil])
([nil nil ((5021 . 5022) (#("msg" 0 3 (fontified nil)) . 5021) (undo-tree-id2741 . -3) (5020 . 5021)) nil (26011 39695 953400 0) 0 nil])
([nil nil ((5021 . 5037)) nil (26011 39695 953397 0) 0 nil])
([nil nil ((apply yas--snippet-revive 5013 5039 #s(yas--snippet nil (#s(yas--field 1 5020 5038 nil nil nil t #s(yas--exit 5039 nil))) #s(yas--exit 5039 nil) 19 nil #s(yas--field 1 5020 5038 nil nil nil t #s(yas--exit 5039 nil)) nil nil))) nil (26011 39695 953396 0) 0 nil])
([nil nil ((#("?" 0 1 (face rust-question-mark fontified t)) . -5144) (undo-tree-id2731 . -1) (undo-tree-id2732 . -1) (undo-tree-id2733 . -1) (undo-tree-id2734 . -1) (undo-tree-id2735 . -1) (undo-tree-id2736 . -1) (undo-tree-id2737 . -1) (undo-tree-id2738 . -1) (undo-tree-id2739 . -1) (undo-tree-id2740 . -1) 5145) nil (26011 39695 953395 0) 0 nil])
([nil nil ((5144 . 5151)) nil (26011 39695 953383 0) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -5144) (undo-tree-id2623 . -1) (undo-tree-id2624 . -1) (undo-tree-id2625 . -1) (undo-tree-id2626 . -1) (undo-tree-id2627 . -1) (undo-tree-id2628 . -1) (undo-tree-id2629 . -1) (undo-tree-id2630 . -1) (undo-tree-id2631 . -1) (undo-tree-id2632 . -1) (undo-tree-id2633 . -1) (undo-tree-id2634 . -1) (undo-tree-id2635 . -1) (undo-tree-id2636 . -1) (undo-tree-id2637 . -1) (undo-tree-id2638 . -1) (undo-tree-id2639 . -1) (undo-tree-id2640 . -1) (undo-tree-id2641 . -1) (undo-tree-id2642 . -1) (undo-tree-id2643 . -1) (undo-tree-id2644 . -1) (undo-tree-id2645 . -1) (undo-tree-id2646 . -1) (undo-tree-id2647 . -1) (undo-tree-id2648 . -1) (undo-tree-id2649 . -1) (undo-tree-id2650 . -1) (undo-tree-id2651 . -1) (undo-tree-id2652 . -1) (undo-tree-id2653 . -1) (undo-tree-id2654 . -1) (#("e" 0 1 (fontified t)) . -5145) (undo-tree-id2655 . -1) (undo-tree-id2656 . -1) (undo-tree-id2657 . -1) (undo-tree-id2658 . -1) (undo-tree-id2659 . -1) (undo-tree-id2660 . -1) (undo-tree-id2661 . -1) (undo-tree-id2662 . -1) (undo-tree-id2663 . -1) (undo-tree-id2664 . -1) (undo-tree-id2665 . -1) (undo-tree-id2666 . -1) (undo-tree-id2667 . -1) (undo-tree-id2668 . -1) (undo-tree-id2669 . -1) (undo-tree-id2670 . -1) (undo-tree-id2671 . -1) (undo-tree-id2672 . -1) (undo-tree-id2673 . -1) (undo-tree-id2674 . -1) (undo-tree-id2675 . -1) (undo-tree-id2676 . -1) (undo-tree-id2677 . -1) (undo-tree-id2678 . -1) (undo-tree-id2679 . -1) (undo-tree-id2680 . -1) (undo-tree-id2681 . -1) (#("x" 0 1 (fontified t)) . -5146) (undo-tree-id2682 . -1) (undo-tree-id2683 . -1) (undo-tree-id2684 . -1) (undo-tree-id2685 . -1) (undo-tree-id2686 . -1) (undo-tree-id2687 . -1) (undo-tree-id2688 . -1) (undo-tree-id2689 . -1) (undo-tree-id2690 . -1) (undo-tree-id2691 . -1) (undo-tree-id2692 . -1) (undo-tree-id2693 . -1) (undo-tree-id2694 . -1) (undo-tree-id2695 . -1) (undo-tree-id2696 . -1) (undo-tree-id2697 . -1) (undo-tree-id2698 . -1) (undo-tree-id2699 . -1) (undo-tree-id2700 . -1) (undo-tree-id2701 . -1) (undo-tree-id2702 . -1) (#("p" 0 1 (fontified t)) . -5147) (undo-tree-id2703 . -1) (undo-tree-id2704 . -1) (undo-tree-id2705 . -1) (undo-tree-id2706 . -1) (undo-tree-id2707 . -1) (undo-tree-id2708 . -1) (undo-tree-id2709 . -1) (undo-tree-id2710 . -1) (undo-tree-id2711 . -1) (undo-tree-id2712 . -1) (#("e" 0 1 (fontified t)) . -5148) (undo-tree-id2713 . -1) (undo-tree-id2714 . -1) (undo-tree-id2715 . -1) (undo-tree-id2716 . -1) (undo-tree-id2717 . -1) (undo-tree-id2718 . -1) (undo-tree-id2719 . -1) (undo-tree-id2720 . -1) (#("c" 0 1 (fontified t)) . -5149) (undo-tree-id2721 . -1) (undo-tree-id2722 . -1) (undo-tree-id2723 . -1) (undo-tree-id2724 . -1) (undo-tree-id2725 . -1) (undo-tree-id2726 . -1) (#("t" 0 1 (fontified t)) . -5150) (undo-tree-id2727 . -1) (undo-tree-id2728 . -1) (undo-tree-id2729 . -1) (undo-tree-id2730 . -1) 5151) nil (26011 39695 953377 0) 0 nil])
([nil nil ((5144 . 5153)) nil (26011 39695 953265 0) 0 nil])
([nil nil ((5152 . 5154)) nil (26011 39695 953264 0) 0 nil])
([nil nil ((5153 . 5158)) nil (26011 39695 953263 0) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-string-face fontified t)) . -5153) (undo-tree-id2583 . -1) (undo-tree-id2584 . -1) (undo-tree-id2585 . -1) (undo-tree-id2586 . -1) (undo-tree-id2587 . -1) (undo-tree-id2588 . -1) (undo-tree-id2589 . -1) (undo-tree-id2590 . -1) (undo-tree-id2591 . -1) (undo-tree-id2592 . -1) (undo-tree-id2593 . -1) (undo-tree-id2594 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -5154) (undo-tree-id2595 . -1) (undo-tree-id2596 . -1) (undo-tree-id2597 . -1) (undo-tree-id2598 . -1) (undo-tree-id2599 . -1) (undo-tree-id2600 . -1) (undo-tree-id2601 . -1) (undo-tree-id2602 . -1) (undo-tree-id2603 . -1) (undo-tree-id2604 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -5155) (undo-tree-id2605 . -1) (undo-tree-id2606 . -1) (undo-tree-id2607 . -1) (undo-tree-id2608 . -1) (undo-tree-id2609 . -1) (undo-tree-id2610 . -1) (undo-tree-id2611 . -1) (undo-tree-id2612 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -5156) (undo-tree-id2613 . -1) (undo-tree-id2614 . -1) (undo-tree-id2615 . -1) (undo-tree-id2616 . -1) (undo-tree-id2617 . -1) (undo-tree-id2618 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -5157) (undo-tree-id2619 . -1) (undo-tree-id2620 . -1) (undo-tree-id2621 . -1) (undo-tree-id2622 . -1) 5158) nil (26011 39695 953260 0) 0 nil])
([nil nil ((5153 . 5163)) nil (26011 39695 953220 0) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-string-face fontified t)) . -5161) (undo-tree-id2573 . -1) (undo-tree-id2574 . -1) (undo-tree-id2575 . -1) (undo-tree-id2576 . -1) (undo-tree-id2577 . -1) (undo-tree-id2578 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -5162) (undo-tree-id2579 . -1) (undo-tree-id2580 . -1) (undo-tree-id2581 . -1) (undo-tree-id2582 . -1) 5163) nil (26011 39695 953217 0) 0 nil])
([nil nil ((5161 . 5163)) nil (26011 39695 953196 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -5077) (undo-tree-id2772 . -1) (undo-tree-id2773 . -1) (undo-tree-id2774 . -1) (undo-tree-id2775 . -1) (undo-tree-id2776 . -1) (undo-tree-id2777 . -1) (undo-tree-id2778 . -1) (undo-tree-id2779 . -1) (undo-tree-id2780 . -1) (undo-tree-id2781 . -1) (undo-tree-id2782 . -1) 5078 (t 26011 39695 965882 710000)) nil (26011 39700 823318 0) 0 nil])
([nil nil ((273 . 275) (t 26011 39700 836500 129000)) nil (26011 39733 441027 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 330 . 331) (nil fontified nil 275 . 331) (275 . 331)) nil (26011 39733 441025 0) 0 nil])
([nil nil ((#("fs::" 0 2 (face font-lock-constant-face fontified t) 2 4 (fontified t)) . -5038) (undo-tree-id2794 . -4) (undo-tree-id2795 . -4) (undo-tree-id2796 . -4) (undo-tree-id2797 . -4) (undo-tree-id2798 . -4) (undo-tree-id2799 . -4) (undo-tree-id2800 . -4) (undo-tree-id2801 . -4) (undo-tree-id2802 . -4) (undo-tree-id2803 . -4) 5042) nil (26011 39733 441023 0) 0 nil])
([nil nil ((#("std::" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t)) . -5033) (undo-tree-id2783 . -5) (undo-tree-id2784 . -5) (undo-tree-id2785 . -5) (undo-tree-id2786 . -5) (undo-tree-id2787 . -5) (undo-tree-id2788 . -5) (undo-tree-id2789 . -5) (undo-tree-id2790 . -5) (undo-tree-id2791 . -5) (undo-tree-id2792 . -5) (undo-tree-id2793 . -5) 5038) nil (26011 39733 441008 0) 0 nil])
([nil nil ((#("bytes" 0 5 (fontified t)) . -5299) (undo-tree-id2826 . -5) (undo-tree-id2827 . -5) (undo-tree-id2828 . -5) (undo-tree-id2829 . -5) (undo-tree-id2830 . -5) (undo-tree-id2831 . -5) (undo-tree-id2832 . -5) (undo-tree-id2833 . -5) (undo-tree-id2834 . -5) (undo-tree-id2835 . -5) (undo-tree-id2836 . -5) (undo-tree-id2837 . -5) (undo-tree-id2838 . -5) (undo-tree-id2839 . -5) (undo-tree-id2840 . -5) (undo-tree-id2841 . -5) 5304 (t 26011 39733 453938 691000)) nil (26011 39752 277615 0) 0 nil])
([nil nil ((#("diffuse_" 0 8 (fontified t)) . -5291) (undo-tree-id2809 . -8) (undo-tree-id2810 . -8) (undo-tree-id2811 . -8) (undo-tree-id2812 . -8) (undo-tree-id2813 . -8) (undo-tree-id2814 . -8) (undo-tree-id2815 . -8) (undo-tree-id2816 . -8) (undo-tree-id2817 . -8) (undo-tree-id2818 . -8) (undo-tree-id2819 . -8) (undo-tree-id2820 . -8) (undo-tree-id2821 . -8) (undo-tree-id2822 . -8) (undo-tree-id2823 . -8) (undo-tree-id2824 . -8) (undo-tree-id2825 . -8) 5299) nil (26011 39752 277598 0) 0 nil])
([nil nil ((5291 . 5292)) nil (26011 39752 277579 0) 0 nil])
([nil nil ((5291 . 5292) (5291 . 5297) (#("b" 0 1 (fontified nil)) . 5291) (5291 . 5292) (#("&buffer" 0 7 (fontified nil)) . -5291) (5291 . 5298) (#("b" 0 1 (fontified t)) . -5291) (undo-tree-id2804 . -1) (undo-tree-id2805 . -1) (undo-tree-id2806 . -1) (undo-tree-id2807 . -1) (undo-tree-id2808 . -1) 5292) nil (26011 39752 277575 0) 0 nil])
([nil nil ((#("file\")" 0 5 (face font-lock-string-face fontified t) 5 6 (face (rainbow-delimiters-depth-3-face) fontified t)) . -5082) (undo-tree-id2936 . -6) (undo-tree-id2937 . -6) (undo-tree-id2938 . -5) (undo-tree-id2939 . -5) (undo-tree-id2940 . -5) (undo-tree-id2941 . -5) (undo-tree-id2942 . -5) (undo-tree-id2943 . -6) (undo-tree-id2944 . -6) (undo-tree-id2945 . -6) (undo-tree-id2946 . -6) (undo-tree-id2947 . -6) (undo-tree-id2948 . -6) 5088 (t 26011 39752 290464 883000)) nil (26011 39788 770046 0) 0 nil])
([nil nil ((#("open " 0 5 (face font-lock-string-face fontified t)) . -5077) (undo-tree-id2922 . -5) (undo-tree-id2923 . -5) (undo-tree-id2924 . -5) (undo-tree-id2925 . -5) (undo-tree-id2926 . -5) (undo-tree-id2927 . -5) (undo-tree-id2928 . -5) (undo-tree-id2929 . -5) (undo-tree-id2930 . -5) (undo-tree-id2931 . -5) (undo-tree-id2932 . -5) (undo-tree-id2933 . -5) (undo-tree-id2934 . -5) (undo-tree-id2935 . -5) 5082) nil (26011 39788 770031 0) 0 nil])
([nil nil ((#("cannot " 0 7 (face font-lock-string-face fontified t)) . -5070) (undo-tree-id2907 . -7) (undo-tree-id2908 . -7) (undo-tree-id2909 . -7) (undo-tree-id2910 . -7) (undo-tree-id2911 . -7) (undo-tree-id2912 . -7) (undo-tree-id2913 . -7) (undo-tree-id2914 . -7) (undo-tree-id2915 . -7) (undo-tree-id2916 . -7) (undo-tree-id2917 . -7) (undo-tree-id2918 . -7) (undo-tree-id2919 . -7) (undo-tree-id2920 . -7) (undo-tree-id2921 . -7) 5077) nil (26011 39788 770017 0) 0 nil])
([nil nil ((#("expect(\"" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-3-face) fontified t) 7 8 (face font-lock-string-face fontified t)) . -5062) (undo-tree-id2890 . -8) (undo-tree-id2891 . -7) (undo-tree-id2892 . -8) (undo-tree-id2893 . -8) (undo-tree-id2894 . -8) (undo-tree-id2895 . -8) (undo-tree-id2896 . -8) (undo-tree-id2897 . -8) (undo-tree-id2898 . -8) (undo-tree-id2899 . -8) (undo-tree-id2900 . -8) (undo-tree-id2901 . -8) (undo-tree-id2902 . -8) (undo-tree-id2903 . -8) (undo-tree-id2904 . -8) (undo-tree-id2905 . -8) (undo-tree-id2906 . -8) 5070) nil (26011 39788 769999 0) 0 nil])
([nil nil ((5062 . 5063)) nil (26011 39788 769982 0) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -5062) (undo-tree-id2885 . -1) (undo-tree-id2886 . -1) (undo-tree-id2887 . -1) (undo-tree-id2888 . -1) (undo-tree-id2889 . -1) 5063) nil (26011 39788 769980 0) 0 nil])
([nil nil ((5062 . 5063)) nil (26011 39788 769974 0) 0 nil])
([nil nil ((apply yas--snippet-revive 5062 5070 #s(yas--snippet nil nil #s(yas--exit 5070 nil) 20 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 5070 nil) 20 nil nil nil nil)) (5062 . 5070) (#("unwrap()$0" 0 10 (fontified nil)) . 5062) (5062 . 5072) (#("u" 0 1 (fontified nil)) . 5062) (5062 . 5063) (#("unwrap()" 0 8 (fontified nil)) . -5062) (5062 . 5070) (#("u" 0 1 (fontified t)) . -5062) (undo-tree-id2880 . -1) (undo-tree-id2881 . -1) (undo-tree-id2882 . -1) (undo-tree-id2883 . -1) (undo-tree-id2884 . -1) 5063) nil (26011 39788 769973 0) 0 nil])
([nil nil ((#("error\")" 0 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t) 5 6 (face font-lock-string-face fontified t) 6 7 (face (rainbow-delimiters-depth-3-face) fontified t)) . -5188) (undo-tree-id2870 . -7) (undo-tree-id2871 . -7) (undo-tree-id2872 . -7) (undo-tree-id2873 . -7) (undo-tree-id2874 . -7) (undo-tree-id2875 . -7) (undo-tree-id2876 . -7) (undo-tree-id2877 . -7) (undo-tree-id2878 . -7) (undo-tree-id2879 . -7) 5195) nil (26011 39788 769964 0) 0 nil])
([nil nil ((#("read " 0 5 (face font-lock-string-face fontified t)) . -5183) (undo-tree-id2859 . -5) (undo-tree-id2860 . -5) (undo-tree-id2861 . -5) (undo-tree-id2862 . -5) (undo-tree-id2863 . -5) (undo-tree-id2864 . -5) (undo-tree-id2865 . -5) (undo-tree-id2866 . -5) (undo-tree-id2867 . -5) (undo-tree-id2868 . -5) (undo-tree-id2869 . -5) 5188) nil (26011 39788 769952 0) 0 nil])
([nil nil ((#("expect(\"" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-3-face) fontified t) 7 8 (face font-lock-string-face fontified t)) . -5175) (undo-tree-id2847 . -8) (undo-tree-id2848 . -8) (undo-tree-id2849 . -8) (undo-tree-id2850 . -8) (undo-tree-id2851 . -8) (undo-tree-id2852 . -8) (undo-tree-id2853 . -8) (undo-tree-id2854 . -8) (undo-tree-id2855 . -8) (undo-tree-id2856 . -8) (undo-tree-id2857 . -8) (undo-tree-id2858 . -8) 5183) nil (26011 39788 769939 0) 0 nil])
([nil nil ((5175 . 5176)) nil (26011 39788 769925 0) 0 nil])
([nil nil ((apply yas--snippet-revive 5175 5183 #s(yas--snippet nil nil #s(yas--exit 5183 nil) 21 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 5183 nil) 21 nil nil nil nil)) (5175 . 5183) (#("unwrap()$0" 0 10 (fontified nil)) . 5175) (5175 . 5185) (#("u" 0 1 (fontified nil)) . 5175) (5175 . 5176) (#("unwrap()" 0 8 (fontified nil)) . -5175) (5175 . 5183) (#("u" 0 1 (fontified t)) . -5175) (undo-tree-id2842 . -1) (undo-tree-id2843 . -1) (undo-tree-id2844 . -1) (undo-tree-id2845 . -1) (undo-tree-id2846 . -1) 5176) nil (26011 39788 769921 0) 0 nil])
([nil nil ((#("device.create_bind_group(
            &wgpu::BindGroupDescriptor {
                layout: &texture_bind_group_layout,
                entries: &[
                    wgpu::BindGroupEntry {
                        binding: 0,
                        resource: wgpu::BindingResource::TextureView(&diffuse_texture.view), // CHANGED!
                    },
                    wgpu::BindGroupEntry {
                        binding: 1,
                        resource: wgpu::BindingResource::Sampler(&diffuse_texture.sampler), // CHANGED!
                    }
                ],
                label: Some(\"diffuse_bind_group\"),
            }
        );" 0 23 (fontified t) 23 24 (fontified t) 24 25 (face (rainbow-delimiters-depth-3-face) fontified t) 25 26 (fontified t) 26 36 (fontified t) 36 38 (fontified t) 38 39 (face rust-ampersand-face fontified t) 39 43 (face font-lock-constant-face fontified t) 43 45 (fontified t) 45 54 (face font-lock-type-face fontified t) 54 64 (face font-lock-type-face fontified t) 64 65 (fontified t) 65 66 (face (rainbow-delimiters-depth-4-face) fontified t) 66 67 (fontified t) 67 73 (fontified t) 73 83 (fontified t) 83 89 (face font-lock-variable-name-face fontified t) 89 91 (fontified t) 91 92 (face rust-ampersand-face fontified t) 92 98 (fontified t) 98 110 (fontified t) 110 119 (fontified t) 119 135 (fontified t) 135 142 (face font-lock-variable-name-face fontified t) 142 144 (fontified t) 144 145 (face rust-ampersand-face fontified t) 145 146 (face (rainbow-delimiters-depth-5-face) fontified t) 146 147 (fontified t) 147 148 (fontified t) 148 155 (fontified t) 155 167 (fontified t) 167 171 (fontified t face font-lock-constant-face) 171 173 (fontified t) 173 187 (fontified t face font-lock-type-face) 187 188 (fontified t) 188 189 (fontified t face (rainbow-delimiters-depth-6-face)) 189 190 (fontified t) 190 214 (fontified t) 214 221 (face font-lock-variable-name-face fontified t) 221 250 (fontified t) 250 258 (face font-lock-variable-name-face fontified t) 258 260 (fontified t) 260 263 (face font-lock-constant-face fontified t) 263 264 (face font-lock-constant-face fontified t) 264 266 (fontified t) 266 273 (face font-lock-type-face fontified t) 273 281 (face font-lock-type-face fontified t) 281 283 (fontified t) 283 294 (face font-lock-type-face fontified t) 294 295 (face (rainbow-delimiters-depth-7-face) fontified t) 295 296 (face rust-ampersand-face fontified t) 296 316 (fontified t) 316 317 (face (rainbow-delimiters-depth-7-face) fontified t) 317 319 (fontified t) 319 322 (face font-lock-comment-delimiter-face fontified t) 322 331 (face font-lock-comment-face fontified t) 331 351 (fontified t) 351 352 (face (rainbow-delimiters-depth-6-face) fontified t) 352 374 (fontified t) 374 378 (face font-lock-constant-face fontified t) 378 380 (fontified t) 380 391 (face font-lock-type-face fontified t) 391 392 (face font-lock-type-face fontified t) 392 394 (face font-lock-type-face fontified t) 394 395 (fontified t) 395 396 (face (rainbow-delimiters-depth-6-face) fontified t) 396 397 (fontified t) 397 401 (fontified t) 401 421 (fontified t) 421 428 (face font-lock-variable-name-face fontified t) 428 433 (fontified t) 433 457 (fontified t) 457 465 (face font-lock-variable-name-face fontified t) 465 467 (fontified t) 467 471 (face font-lock-constant-face fontified t) 471 473 (fontified t) 473 488 (face font-lock-type-face fontified t) 488 490 (fontified t) 490 497 (face font-lock-type-face fontified t) 497 498 (face (rainbow-delimiters-depth-7-face) fontified t) 498 499 (face rust-ampersand-face fontified t) 499 522 (fontified t) 522 523 (face (rainbow-delimiters-depth-7-face) fontified t) 523 525 (fontified t) 525 528 (face font-lock-comment-delimiter-face fontified t) 528 537 (face font-lock-comment-face fontified t) 537 557 (fontified t) 557 558 (face (rainbow-delimiters-depth-6-face) fontified t) 558 575 (fontified t) 575 576 (face (rainbow-delimiters-depth-5-face) fontified t) 576 594 (fontified t) 594 599 (face font-lock-variable-name-face fontified t) 599 601 (fontified t) 601 605 (face font-lock-type-face fontified t) 605 606 (face (rainbow-delimiters-depth-5-face) fontified t) 606 626 (face font-lock-string-face fontified t) 626 627 (face (rainbow-delimiters-depth-5-face) fontified t) 627 641 (fontified t) 641 642 (face (rainbow-delimiters-depth-4-face) fontified t) 642 651 (fontified t) 651 652 (face (rainbow-delimiters-depth-3-face) fontified t) 652 653 (fontified t)) . -6537) (undo-tree-id2966 . -653) (undo-tree-id2967 . -653) (undo-tree-id2968 . -653) (undo-tree-id2969 . -653) (undo-tree-id2970 . -653) (undo-tree-id2971 . -642) (undo-tree-id2972 . -571) (undo-tree-id2973 . -444) (undo-tree-id2974 . -407) (undo-tree-id2975 . -340) (undo-tree-id2976 . -198) (undo-tree-id2977 . -126) (undo-tree-id2978 . -125) (undo-tree-id2979 . -31) (undo-tree-id2980 . -653) (undo-tree-id2981 . -1) (undo-tree-id2982 . -1) (undo-tree-id2983 . -1) (undo-tree-id2984 . -1) (undo-tree-id2985 . -1) (undo-tree-id2986 . -353) (undo-tree-id2987 . -430) (undo-tree-id2988 . -465) (undo-tree-id2989 . -558) (undo-tree-id2990 . -577) (undo-tree-id2991 . -609) (undo-tree-id2992 . -642) (undo-tree-id2993 . -653) (undo-tree-id2994 . -653) (undo-tree-id2995 . -643) (undo-tree-id2996 . -653) (undo-tree-id2997 . -653) 7190 (t 26011 39788 783137 593000)) nil (26011 52003 622761 0) 0 nil])
([nil nil ((6537 . 6541)) nil (26011 52003 622730 0) 0 nil])
([nil nil ((6537 . 6552) (#("diff" 0 4 (fontified nil)) . 6537) (6537 . 6541) (#("diffuse_texture" 0 15 (fontified nil)) . -6537) (6537 . 6552) (#("diff" 0 4 (fontified t)) . -6537) (undo-tree-id2953 . -4) (undo-tree-id2954 . -1) (undo-tree-id2955 . -2) (undo-tree-id2956 . -2) (undo-tree-id2957 . -2) (undo-tree-id2958 . -2) (undo-tree-id2959 . -3) (undo-tree-id2960 . -3) (undo-tree-id2961 . -3) (undo-tree-id2962 . -4) (undo-tree-id2963 . -4) (undo-tree-id2964 . -4) (undo-tree-id2965 . -4) 6541) nil (26011 52003 622728 0) 0 nil])
([nil nil ((6552 . 6554)) nil (26011 52003 622713 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6571 6578 nil nil nil nil #s(yas--field 2 6580 6605 nil nil nil nil #s(yas--exit 6606 nil))) #s(yas--field 2 6580 6605 nil nil nil nil #s(yas--exit 6606 nil))) #s(yas--exit 6606 nil) 32 nil #s(yas--field 1 6571 6578 nil nil nil nil #s(yas--field 2 6580 6605 nil nil nil nil #s(yas--exit 6606 nil))) nil nil)) (6553 . 6606) (#("create_bind_group(${1:&device}, ${2:texture_bind_group_layout})$0" 0 65 (fontified nil)) . 6553) (6553 . 6618) (#("c" 0 1 (fontified nil)) . 6553) (6553 . 6554) (#("create_bind_group(…)" 0 20 (fontified nil)) . -6553) (6553 . 6573) (#("c" 0 1 (fontified t)) . -6553) (undo-tree-id2949 . -1) (undo-tree-id2950 . -1) (undo-tree-id2951 . -1) (undo-tree-id2952 . -1) 6554) nil (26011 52003 622711 0) 0 nil])
([nil nil ((apply yas--snippet-revive 6553 6606 #s(yas--snippet nil (#s(yas--field 1 6571 6578 nil nil nil nil #s(yas--field 2 6580 6605 nil nil nil nil #s(yas--exit 6606 nil))) #s(yas--field 2 6580 6605 nil nil nil nil #s(yas--exit 6606 nil))) #s(yas--exit 6606 nil) 32 nil #s(yas--field 1 6571 6578 nil nil nil nil #s(yas--field 2 6580 6605 nil nil nil nil #s(yas--exit 6606 nil))) nil nil))) nil (26011 52003 622695 0) 0 nil])
([nil nil ((6606 . 6607)) nil (26011 52003 622692 0) 0 nil])
([nil nil ((6580 . 6581) (t 26011 52003 636466 427000)) nil (26011 52030 685426 0) 0 nil])
([nil nil ((#("        let mut f = File::open(\"happy-tree.png\").unwrap();
        let mut buffer = Vec::new();
        // read the whole file
        f.read_to_end(&mut buffer).unwrap();" 0 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 15 (face font-lock-keyword-face fontified t) 15 16 (fontified t) 16 17 (face font-lock-variable-name-face fontified t) 17 20 (fontified t) 20 24 (face font-lock-type-face fontified t) 24 30 (fontified t) 30 31 (face (rainbow-delimiters-depth-3-face) fontified t) 31 32 (face font-lock-string-face fontified t) 32 45 (face font-lock-string-face fontified t) 45 46 (face font-lock-string-face fontified t rear-nonsticky t) 46 47 (face font-lock-string-face fontified t) 47 48 (face (rainbow-delimiters-depth-3-face) fontified t) 48 49 (fontified t) 49 55 (fontified t) 55 56 (face (rainbow-delimiters-depth-3-face) fontified t) 56 57 (face (rainbow-delimiters-depth-3-face) fontified t) 57 59 (fontified t) 59 67 (fontified t) 67 70 (face font-lock-keyword-face fontified t) 70 71 (fontified t) 71 74 (face font-lock-keyword-face fontified t) 74 75 (fontified t) 75 81 (face font-lock-variable-name-face fontified t) 81 84 (fontified t) 84 87 (face font-lock-type-face fontified t) 87 91 (fontified t) 91 92 (fontified t) 92 93 (face (rainbow-delimiters-depth-3-face) fontified t) 93 94 (face (rainbow-delimiters-depth-3-face) fontified t) 94 95 (fontified t) 95 96 (fontified t) 96 104 (fontified t) 104 107 (face font-lock-comment-delimiter-face fontified t) 107 127 (face font-lock-comment-face fontified t) 127 135 (fontified t) 135 148 (fontified t) 148 149 (face (rainbow-delimiters-depth-3-face) fontified t) 149 150 (face rust-ampersand-face fontified t) 150 153 (face font-lock-keyword-face fontified t) 153 160 (fontified t) 160 161 (face (rainbow-delimiters-depth-3-face) fontified t) 161 162 (fontified t) 162 168 (fontified t) 168 169 (face (rainbow-delimiters-depth-3-face) fontified t) 169 170 (face (rainbow-delimiters-depth-3-face) fontified t) 170 171 (fontified t rear-nonsticky t)) . 5013) (undo-tree-id3419 . -171) (undo-tree-id3420 . -8) (undo-tree-id3421 . -32) (undo-tree-id3422 . -95) (undo-tree-id3423 . -171) (undo-tree-id3424 . -171) (undo-tree-id3425 . -171) (undo-tree-id3426 . -171) (undo-tree-id3427 . -171) (undo-tree-id3428 . -171) (undo-tree-id3429 . -171) (undo-tree-id3430 . -171) (undo-tree-id3431 . -126) (undo-tree-id3432 . -125) (undo-tree-id3433 . -115) (undo-tree-id3434 . -72) (undo-tree-id3435 . -67) (undo-tree-id3436 . -65) (undo-tree-id3437 . -5) (undo-tree-id3438 . -4) (undo-tree-id3439 . -3) (undo-tree-id3440 . -2) (undo-tree-id3441 . -1) (undo-tree-id3442 . -171) (t 26011 52030 699126 389000)) nil (26011 52355 24943 0) 0 nil])
([nil nil ((#("texture::Texture::from_bytes(&device, &queue, &buffer, \"happy-tree.png\").unwrap(); // CHANGED!" 0 7 (face font-lock-constant-face fontified t) 7 9 (fontified t) 9 16 (face font-lock-type-face fontified t) 16 28 (fontified t) 28 29 (face (rainbow-delimiters-depth-3-face) fontified t) 29 30 (face rust-ampersand-face fontified t) 30 38 (fontified t) 38 39 (face rust-ampersand-face fontified t) 39 46 (fontified t) 46 47 (face rust-ampersand-face fontified t) 47 53 (fontified t) 53 55 (fontified t) 55 56 (face font-lock-string-face fontified t) 56 71 (face font-lock-string-face fontified t) 71 72 (face (rainbow-delimiters-depth-3-face) fontified t) 72 79 (fontified t) 79 80 (face (rainbow-delimiters-depth-3-face) fontified t) 80 81 (face (rainbow-delimiters-depth-3-face) fontified t) 81 83 (fontified t) 83 86 (face font-lock-comment-delimiter-face fontified t) 86 93 (face font-lock-comment-face fontified t) 93 94 (face font-lock-comment-face fontified t rear-nonsticky t)) . 5044) (undo-tree-id3416 . -24) (undo-tree-id3417 . -94) (undo-tree-id3418 . -94)) nil (26011 52355 24918 0) 0 nil])
([nil nil ((5044 . 5045)) nil (26011 52355 24915 0) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -5044) (undo-tree-id3411 . -1) (undo-tree-id3412 . -1) (undo-tree-id3413 . -1) (undo-tree-id3414 . -1) (undo-tree-id3415 . -1) 5045) nil (26011 52355 24913 0) 0 nil])
([nil nil ((5044 . 5049)) nil (26011 52355 24907 0) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -5047) (undo-tree-id3386 . -1) (undo-tree-id3387 . -1) (undo-tree-id3388 . -1) (undo-tree-id3389 . -1) (undo-tree-id3390 . -1) (undo-tree-id3391 . -1) (undo-tree-id3392 . -1) (undo-tree-id3393 . -1) (undo-tree-id3394 . -1) (undo-tree-id3395 . -1) (undo-tree-id3396 . -1) (undo-tree-id3397 . -1) (undo-tree-id3398 . -1) (undo-tree-id3399 . -1) (undo-tree-id3400 . -1) (undo-tree-id3401 . -1) (undo-tree-id3402 . -1) (#("u" 0 1 (fontified t)) . -5048) (undo-tree-id3403 . -1) (undo-tree-id3404 . -1) (undo-tree-id3405 . -1) (undo-tree-id3406 . -1) (undo-tree-id3407 . -1) (undo-tree-id3408 . -1) (undo-tree-id3409 . -1) (undo-tree-id3410 . -1) 5049) nil (26011 52355 24905 0) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -5044) (undo-tree-id3312 . -1) (undo-tree-id3313 . -1) (undo-tree-id3314 . -1) (undo-tree-id3315 . -1) (undo-tree-id3316 . -1) (undo-tree-id3317 . -1) (undo-tree-id3318 . -1) (undo-tree-id3319 . -1) (undo-tree-id3320 . -1) (undo-tree-id3321 . -1) (undo-tree-id3322 . -1) (undo-tree-id3323 . -1) (undo-tree-id3324 . -1) (undo-tree-id3325 . -1) (undo-tree-id3326 . -1) (undo-tree-id3327 . -1) (undo-tree-id3328 . -1) (undo-tree-id3329 . -1) (undo-tree-id3330 . -1) (undo-tree-id3331 . -1) (undo-tree-id3332 . -1) (undo-tree-id3333 . -1) (undo-tree-id3334 . -1) (undo-tree-id3335 . -1) (undo-tree-id3336 . -1) (undo-tree-id3337 . -1) (undo-tree-id3338 . -1) (undo-tree-id3339 . -1) (#("e" 0 1 (fontified t)) . -5045) (undo-tree-id3340 . -1) (undo-tree-id3341 . -1) (undo-tree-id3342 . -1) (undo-tree-id3343 . -1) (undo-tree-id3344 . -1) (undo-tree-id3345 . -1) (undo-tree-id3346 . -1) (undo-tree-id3347 . -1) (undo-tree-id3348 . -1) (undo-tree-id3349 . -1) (undo-tree-id3350 . -1) (undo-tree-id3351 . -1) (undo-tree-id3352 . -1) (undo-tree-id3353 . -1) (undo-tree-id3354 . -1) (undo-tree-id3355 . -1) (undo-tree-id3356 . -1) (undo-tree-id3357 . -1) (undo-tree-id3358 . -1) (undo-tree-id3359 . -1) (undo-tree-id3360 . -1) (undo-tree-id3361 . -1) (undo-tree-id3362 . -1) (undo-tree-id3363 . -1) (undo-tree-id3364 . -1) (#("s" 0 1 (fontified t)) . -5046) (undo-tree-id3365 . -1) (undo-tree-id3366 . -1) (undo-tree-id3367 . -1) (undo-tree-id3368 . -1) (undo-tree-id3369 . -1) (undo-tree-id3370 . -1) (undo-tree-id3371 . -1) (undo-tree-id3372 . -1) (undo-tree-id3373 . -1) (undo-tree-id3374 . -1) (undo-tree-id3375 . -1) (undo-tree-id3376 . -1) (undo-tree-id3377 . -1) (undo-tree-id3378 . -1) (undo-tree-id3379 . -1) (undo-tree-id3380 . -1) (undo-tree-id3381 . -1) (undo-tree-id3382 . -1) (undo-tree-id3383 . -1) (undo-tree-id3384 . -1) (undo-tree-id3385 . -1) 5047) nil (26011 52355 24873 0) 0 nil])
([nil nil ((5044 . 5049)) nil (26011 52355 24802 0) 0 nil])
([nil nil ((1 . 23) (5044 . 5044) (5044 . 5051) (#("Textu" 0 5 (fontified nil)) . 5044) (5044 . 5049) (#("Texture (use texture::Texture)" 0 30 (fontified nil)) . -5044) (5044 . 5074) (#("Textu" 0 5 (face font-lock-type-face fontified t)) . -5044) (undo-tree-id3293 . -5) (undo-tree-id3294 . -1) (undo-tree-id3295 . -1) (undo-tree-id3296 . -1) (undo-tree-id3297 . -2) (undo-tree-id3298 . -2) (undo-tree-id3299 . -2) (undo-tree-id3300 . -2) (undo-tree-id3301 . -2) (undo-tree-id3302 . -2) (undo-tree-id3303 . -2) (undo-tree-id3304 . -3) (undo-tree-id3305 . -3) (undo-tree-id3306 . -3) (undo-tree-id3307 . -4) (undo-tree-id3308 . -4) (undo-tree-id3309 . -1) (undo-tree-id3310 . -5) (undo-tree-id3311 . -5) 5049) nil (26011 52355 24799 0) 0 nil])
([nil nil ((5073 . 5079)) nil (26011 52355 24777 0) 0 nil])
([nil nil ((5075 . 5084) (#("from" 0 4 (fontified nil)) . 5075) (5075 . 5079) (#("from_path" 0 9 (fontified nil)) . -5075) (5075 . 5084) (#("from" 0 4 (fontified t)) . -5075) (undo-tree-id3280 . -4) (undo-tree-id3281 . -1) (undo-tree-id3282 . -1) (undo-tree-id3283 . -1) (undo-tree-id3284 . -2) (undo-tree-id3285 . -2) (undo-tree-id3286 . -3) (undo-tree-id3287 . -3) (undo-tree-id3288 . -4) (undo-tree-id3289 . -4) (undo-tree-id3290 . -4) (undo-tree-id3291 . -4) (undo-tree-id3292 . -4) 5079) nil (26011 52355 24775 0) 0 nil])
([nil nil ((5084 . 5086)) nil (26011 52355 24759 0) 0 nil])
([nil nil ((#("h" 0 1 (fontified t)) . -5083) (undo-tree-id3223 . -1) (undo-tree-id3224 . -1) (undo-tree-id3225 . -1) (undo-tree-id3226 . -1) (undo-tree-id3227 . -1) (undo-tree-id3228 . -1) (undo-tree-id3229 . -1) (undo-tree-id3230 . -1) (undo-tree-id3231 . -1) (undo-tree-id3232 . -1) (undo-tree-id3233 . -1) (undo-tree-id3234 . -1) (undo-tree-id3235 . -1) (undo-tree-id3236 . -1) (undo-tree-id3237 . -1) (undo-tree-id3238 . -1) (undo-tree-id3239 . -1) (undo-tree-id3240 . -1) (undo-tree-id3241 . -1) (undo-tree-id3242 . -1) (undo-tree-id3243 . -1) (undo-tree-id3244 . -1) (undo-tree-id3245 . -1) (undo-tree-id3246 . -1) (undo-tree-id3247 . -1) (undo-tree-id3248 . -1) (undo-tree-id3249 . -1) (undo-tree-id3250 . -1) (undo-tree-id3251 . -1) (undo-tree-id3252 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -5084) (undo-tree-id3253 . -1) (undo-tree-id3254 . -1) (undo-tree-id3255 . -1) (undo-tree-id3256 . -1) (undo-tree-id3257 . -1) (undo-tree-id3258 . -1) (undo-tree-id3259 . -1) (undo-tree-id3260 . -1) (undo-tree-id3261 . -1) (undo-tree-id3262 . -1) (undo-tree-id3263 . -1) (undo-tree-id3264 . -1) (undo-tree-id3265 . -1) (undo-tree-id3266 . -1) (undo-tree-id3267 . -1) (undo-tree-id3268 . -1) (undo-tree-id3269 . -1) (undo-tree-id3270 . -1) (undo-tree-id3271 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -5085) (undo-tree-id3272 . -1) (undo-tree-id3273 . -1) (undo-tree-id3274 . -1) (undo-tree-id3275 . -1) (undo-tree-id3276 . -1) (undo-tree-id3277 . -1) (undo-tree-id3278 . -1) (undo-tree-id3279 . -1) 5086) nil (26011 52355 24756 0) 0 nil])
([nil nil ((#("pat" 0 3 (fontified t)) . -5080) (undo-tree-id3192 . -3) (undo-tree-id3193 . -3) (undo-tree-id3194 . -3) (undo-tree-id3195 . -3) (undo-tree-id3196 . -3) (undo-tree-id3197 . -3) (undo-tree-id3198 . -3) (undo-tree-id3199 . -3) (undo-tree-id3200 . -3) (undo-tree-id3201 . -3) (undo-tree-id3202 . -3) (undo-tree-id3203 . -3) (undo-tree-id3204 . -3) (undo-tree-id3205 . -3) (undo-tree-id3206 . -3) (undo-tree-id3207 . -3) (undo-tree-id3208 . -3) (undo-tree-id3209 . -3) (undo-tree-id3210 . -3) (undo-tree-id3211 . -3) (undo-tree-id3212 . -3) (undo-tree-id3213 . -3) (undo-tree-id3214 . -3) (undo-tree-id3215 . -3) (undo-tree-id3216 . -3) (undo-tree-id3217 . -3) (undo-tree-id3218 . -3) (undo-tree-id3219 . -3) (undo-tree-id3220 . -3) (undo-tree-id3221 . -3) (undo-tree-id3222 . -3) 5083) nil (26011 52355 24698 0) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -5077) (undo-tree-id3093 . -1) (undo-tree-id3094 . -1) (undo-tree-id3095 . -1) (undo-tree-id3096 . -1) (undo-tree-id3097 . -1) (undo-tree-id3098 . -1) (undo-tree-id3099 . -1) (undo-tree-id3100 . -1) (undo-tree-id3101 . -1) (undo-tree-id3102 . -1) (undo-tree-id3103 . -1) (undo-tree-id3104 . -1) (undo-tree-id3105 . -1) (undo-tree-id3106 . -1) (undo-tree-id3107 . -1) (undo-tree-id3108 . -1) (undo-tree-id3109 . -1) (undo-tree-id3110 . -1) (undo-tree-id3111 . -1) (undo-tree-id3112 . -1) (undo-tree-id3113 . -1) (undo-tree-id3114 . -1) (undo-tree-id3115 . -1) (undo-tree-id3116 . -1) (undo-tree-id3117 . -1) (undo-tree-id3118 . -1) (undo-tree-id3119 . -1) (undo-tree-id3120 . -1) (undo-tree-id3121 . -1) (undo-tree-id3122 . -1) (undo-tree-id3123 . -1) (undo-tree-id3124 . -1) (undo-tree-id3125 . -1) (undo-tree-id3126 . -1) (#("m" 0 1 (fontified t)) . -5078) (undo-tree-id3127 . -1) (undo-tree-id3128 . -1) (undo-tree-id3129 . -1) (undo-tree-id3130 . -1) (undo-tree-id3131 . -1) (undo-tree-id3132 . -1) (undo-tree-id3133 . -1) (undo-tree-id3134 . -1) (undo-tree-id3135 . -1) (undo-tree-id3136 . -1) (undo-tree-id3137 . -1) (undo-tree-id3138 . -1) (undo-tree-id3139 . -1) (undo-tree-id3140 . -1) (undo-tree-id3141 . -1) (undo-tree-id3142 . -1) (undo-tree-id3143 . -1) (undo-tree-id3144 . -1) (undo-tree-id3145 . -1) (undo-tree-id3146 . -1) (undo-tree-id3147 . -1) (undo-tree-id3148 . -1) (undo-tree-id3149 . -1) (undo-tree-id3150 . -1) (undo-tree-id3151 . -1) (undo-tree-id3152 . -1) (undo-tree-id3153 . -1) (undo-tree-id3154 . -1) (undo-tree-id3155 . -1) (undo-tree-id3156 . -1) (undo-tree-id3157 . -1) (undo-tree-id3158 . -1) (undo-tree-id3159 . -1) (#("_" 0 1 (fontified t)) . -5079) (undo-tree-id3160 . -1) (undo-tree-id3161 . -1) (undo-tree-id3162 . -1) (undo-tree-id3163 . -1) (undo-tree-id3164 . -1) (undo-tree-id3165 . -1) (undo-tree-id3166 . -1) (undo-tree-id3167 . -1) (undo-tree-id3168 . -1) (undo-tree-id3169 . -1) (undo-tree-id3170 . -1) (undo-tree-id3171 . -1) (undo-tree-id3172 . -1) (undo-tree-id3173 . -1) (undo-tree-id3174 . -1) (undo-tree-id3175 . -1) (undo-tree-id3176 . -1) (undo-tree-id3177 . -1) (undo-tree-id3178 . -1) (undo-tree-id3179 . -1) (undo-tree-id3180 . -1) (undo-tree-id3181 . -1) (undo-tree-id3182 . -1) (undo-tree-id3183 . -1) (undo-tree-id3184 . -1) (undo-tree-id3185 . -1) (undo-tree-id3186 . -1) (undo-tree-id3187 . -1) (undo-tree-id3188 . -1) (undo-tree-id3189 . -1) (undo-tree-id3190 . -1) (undo-tree-id3191 . -1) 5080) nil (26011 52355 24662 0) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -5075) (undo-tree-id3022 . -1) (undo-tree-id3023 . -1) (undo-tree-id3024 . -1) (undo-tree-id3025 . -1) (undo-tree-id3026 . -1) (undo-tree-id3027 . -1) (undo-tree-id3028 . -1) (undo-tree-id3029 . -1) (undo-tree-id3030 . -1) (undo-tree-id3031 . -1) (undo-tree-id3032 . -1) (undo-tree-id3033 . -1) (undo-tree-id3034 . -1) (undo-tree-id3035 . -1) (undo-tree-id3036 . -1) (undo-tree-id3037 . -1) (undo-tree-id3038 . -1) (undo-tree-id3039 . -1) (undo-tree-id3040 . -1) (undo-tree-id3041 . -1) (undo-tree-id3042 . -1) (undo-tree-id3043 . -1) (undo-tree-id3044 . -1) (undo-tree-id3045 . -1) (undo-tree-id3046 . -1) (undo-tree-id3047 . -1) (undo-tree-id3048 . -1) (undo-tree-id3049 . -1) (undo-tree-id3050 . -1) (undo-tree-id3051 . -1) (undo-tree-id3052 . -1) (undo-tree-id3053 . -1) (undo-tree-id3054 . -1) (undo-tree-id3055 . -1) (undo-tree-id3056 . -1) (undo-tree-id3057 . -1) (#("r" 0 1 (fontified t)) . -5076) (undo-tree-id3058 . -1) (undo-tree-id3059 . -1) (undo-tree-id3060 . -1) (undo-tree-id3061 . -1) (undo-tree-id3062 . -1) (undo-tree-id3063 . -1) (undo-tree-id3064 . -1) (undo-tree-id3065 . -1) (undo-tree-id3066 . -1) (undo-tree-id3067 . -1) (undo-tree-id3068 . -1) (undo-tree-id3069 . -1) (undo-tree-id3070 . -1) (undo-tree-id3071 . -1) (undo-tree-id3072 . -1) (undo-tree-id3073 . -1) (undo-tree-id3074 . -1) (undo-tree-id3075 . -1) (undo-tree-id3076 . -1) (undo-tree-id3077 . -1) (undo-tree-id3078 . -1) (undo-tree-id3079 . -1) (undo-tree-id3080 . -1) (undo-tree-id3081 . -1) (undo-tree-id3082 . -1) (undo-tree-id3083 . -1) (undo-tree-id3084 . -1) (undo-tree-id3085 . -1) (undo-tree-id3086 . -1) (undo-tree-id3087 . -1) (undo-tree-id3088 . -1) (undo-tree-id3089 . -1) (undo-tree-id3090 . -1) (undo-tree-id3091 . -1) (undo-tree-id3092 . -1) 5077) nil (26011 52355 24549 0) 0 nil])
([nil nil ((5075 . 5077)) nil (26011 52355 24477 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5085 5101 nil nil nil t #s(yas--field 2 5103 5110 nil nil nil nil #s(yas--field 3 5112 5118 nil nil nil nil #s(yas--field 4 5120 5125 nil nil nil nil #s(yas--exit 5126 nil))))) #s(yas--field 2 5103 5110 nil nil nil nil #s(yas--field 3 5112 5118 nil nil nil nil #s(yas--field 4 5120 5125 nil nil nil nil #s(yas--exit 5126 nil)))) #s(yas--field 3 5112 5118 nil nil nil nil #s(yas--field 4 5120 5125 nil nil nil nil #s(yas--exit 5126 nil))) #s(yas--field 4 5120 5125 nil nil nil nil #s(yas--exit 5126 nil))) #s(yas--exit 5126 nil) 34 nil #s(yas--field 1 5085 5101 nil nil nil t #s(yas--field 2 5103 5110 nil nil nil nil #s(yas--field 3 5112 5118 nil nil nil nil #s(yas--field 4 5120 5125 nil nil nil nil #s(yas--exit 5126 nil))))) nil nil)) (5075 . 5114) (#("from_path(${1:path}, ${2:&device}, ${3:&queue}, ${4:label})$0" 0 61 (fontified nil)) . 5075) (5075 . 5136) (#("fr" 0 2 (fontified nil)) . 5075) (5075 . 5077) (#("from_path(…)" 0 12 (fontified nil)) . -5075) (5075 . 5087) (#("fr" 0 2 (fontified t)) . -5075) (undo-tree-id3013 . -2) (undo-tree-id3014 . -1) (undo-tree-id3015 . -1) (undo-tree-id3016 . -2) (undo-tree-id3017 . -2) (undo-tree-id3018 . -2) (undo-tree-id3019 . -2) (undo-tree-id3020 . -2) (undo-tree-id3021 . -2) 5077) nil (26011 52355 24475 0) 0 nil])
([nil nil ((5086 . 5087) (#("path" 0 4 (fontified nil)) . 5086) (undo-tree-id3012 . -4) (5085 . 5086)) nil (26011 52355 24463 0) 0 nil])
([nil nil ((5086 . 5097)) nil (26011 52355 24460 0) 0 nil])
([nil nil ((5097 . 5100)) nil (26011 52355 24459 0) 0 nil])
([nil nil ((apply yas--snippet-revive 5075 5126 #s(yas--snippet nil (#s(yas--field 1 5085 5101 nil nil nil t #s(yas--field 2 5103 5110 nil nil nil nil #s(yas--field 3 5112 5118 nil nil nil nil #s(yas--field 4 5120 5125 nil nil nil nil #s(yas--exit 5126 nil))))) #s(yas--field 2 5103 5110 nil nil nil nil #s(yas--field 3 5112 5118 nil nil nil nil #s(yas--field 4 5120 5125 nil nil nil nil #s(yas--exit 5126 nil)))) #s(yas--field 3 5112 5118 nil nil nil nil #s(yas--field 4 5120 5125 nil nil nil nil #s(yas--exit 5126 nil))) #s(yas--field 4 5120 5125 nil nil nil nil #s(yas--exit 5126 nil))) #s(yas--exit 5126 nil) 34 nil #s(yas--field 1 5085 5101 nil nil nil t #s(yas--field 2 5103 5110 nil nil nil nil #s(yas--field 3 5112 5118 nil nil nil nil #s(yas--field 4 5120 5125 nil nil nil nil #s(yas--exit 5126 nil))))) nil nil))) nil (26011 52355 24458 0) 0 nil])
([nil nil ((5126 . 5127)) nil (26011 52355 24457 0) 0 nil])
([nil nil ((#("label" 0 5 (fontified t)) . -5120) (undo-tree-id3006 . -5) (undo-tree-id3007 . -5) (undo-tree-id3008 . -5) (undo-tree-id3009 . -5) (undo-tree-id3010 . -5) (undo-tree-id3011 . -5) 5125) nil (26011 52355 24456 0) 0 nil])
([nil nil ((5120 . 5122)) nil (26011 52355 24448 0) 0 nil])
([nil nil ((apply yas--snippet-revive 5120 5124 #s(yas--snippet nil nil #s(yas--exit 5124 nil) 35 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 5124 nil) 35 nil nil nil nil)) (5120 . 5124) (#("None$0" 0 6 (fontified nil)) . 5120) (5120 . 5126) (#("NO" 0 2 (fontified nil)) . 5120) (5120 . 5122) (#("None" 0 4 (fontified nil)) . -5120) (5120 . 5124) (#("NO" 0 2 (face font-lock-type-face fontified t)) . -5120) (undo-tree-id2998 . -2) (undo-tree-id2999 . -1) (undo-tree-id3000 . -2) (undo-tree-id3001 . -2) (undo-tree-id3002 . -2) (undo-tree-id3003 . -2) (undo-tree-id3004 . -2) (undo-tree-id3005 . -2) 5122) nil (26011 52355 24444 0) 0 nil])
([nil nil ((5085 . 5086) (t 26011 52355 39530 42000)) nil (26011 52403 859274 0) 0 nil])
([nil nil ((#("P" 0 1 (face font-lock-type-face fontified t)) . -5085) (undo-tree-id3612 . -1) (undo-tree-id3613 . -1) (undo-tree-id3614 . -1) (undo-tree-id3615 . -1) (undo-tree-id3616 . -1) (undo-tree-id3617 . -1) (undo-tree-id3618 . -1) (undo-tree-id3619 . -1) 5086) nil (26011 52403 859272 0) 0 nil])
([nil nil ((5085 . 5086)) nil (26011 52403 859262 0) 0 nil])
([nil nil ((5085 . 5091)) nil (26011 52403 859261 0) 0 nil])
([nil nil ((apply yas--snippet-revive 5090 5098 #s(yas--snippet nil nil #s(yas--exit 5097 nil) 36 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 5097 nil) 36 nil nil nil nil)) (5090 . 5098) (#("panic!($0)" 0 10 (fontified nil)) . 5090) (5090 . 5100) (#("P" 0 1 (fontified nil)) . 5090) (5090 . 5091) (#("panic!(…)" 0 9 (fontified nil)) . -5090) (5090 . 5099) (#("P" 0 1 (face font-lock-type-face fontified t)) . -5090) (undo-tree-id3603 . -1) (undo-tree-id3604 . -1) (undo-tree-id3605 . -1) (undo-tree-id3606 . -1) (undo-tree-id3607 . -1) (undo-tree-id3608 . -1) (undo-tree-id3609 . -1) (undo-tree-id3610 . -1) (undo-tree-id3611 . -1) 5091) nil (26011 52403 859259 0) 0 nil])
([nil nil ((5097 . 5098)) nil (26011 52403 859247 0) 0 nil])
([nil nil ((#("panic!(:)" 0 6 (face font-lock-preprocessor-face fontified t) 6 7 (face (rainbow-delimiters-depth-4-face) fontified t) 7 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-4-face) fontified t)) . -5090) (undo-tree-id3587 . -9) (undo-tree-id3588 . -7) (undo-tree-id3589 . -7) (undo-tree-id3590 . -7) (undo-tree-id3591 . -7) (undo-tree-id3592 . -7) (undo-tree-id3593 . -7) (undo-tree-id3594 . -7) (undo-tree-id3595 . -8) (undo-tree-id3596 . -8) (undo-tree-id3597 . -8) (undo-tree-id3598 . -8) (undo-tree-id3599 . 1) (undo-tree-id3600 . -9) (undo-tree-id3601 . -9) (undo-tree-id3602 . -9) 5099) nil (26011 52403 859245 0) 0 nil])
([nil nil ((#("std::" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t)) . -5085) (undo-tree-id3551 . -5) (undo-tree-id3552 . -1) (undo-tree-id3553 . -1) (undo-tree-id3554 . -1) (undo-tree-id3555 . -1) (undo-tree-id3556 . -2) (undo-tree-id3557 . -2) (undo-tree-id3558 . -2) (undo-tree-id3559 . -3) (undo-tree-id3560 . -3) (undo-tree-id3561 . -4) (undo-tree-id3562 . -4) (undo-tree-id3563 . -5) (undo-tree-id3564 . -5) (undo-tree-id3565 . -5) (undo-tree-id3566 . -5) (undo-tree-id3567 . -5) (undo-tree-id3568 . -5) (undo-tree-id3569 . -5) (undo-tree-id3570 . -5) (undo-tree-id3571 . -5) (undo-tree-id3572 . -5) (undo-tree-id3573 . -5) (undo-tree-id3574 . -5) (undo-tree-id3575 . -5) (undo-tree-id3576 . -5) (undo-tree-id3577 . -5) (undo-tree-id3578 . -5) (undo-tree-id3579 . -5) (undo-tree-id3580 . -5) (undo-tree-id3581 . -5) (undo-tree-id3582 . -5) (undo-tree-id3583 . -5) (undo-tree-id3584 . -5) (undo-tree-id3585 . -5) (undo-tree-id3586 . -5) 5090) nil (26011 52403 859226 0) 0 nil])
([nil nil ((5085 . 5091)) nil (26011 52403 859189 0) 0 nil])
([nil nil ((#("P" 0 1 (face font-lock-type-face fontified t)) . -5090) (undo-tree-id3520 . -1) (undo-tree-id3521 . -1) (undo-tree-id3522 . -1) (undo-tree-id3523 . -1) (undo-tree-id3524 . -1) (undo-tree-id3525 . -1) (undo-tree-id3526 . -1) (undo-tree-id3527 . -1) (undo-tree-id3528 . -1) (undo-tree-id3529 . -1) (undo-tree-id3530 . -1) (undo-tree-id3531 . -1) (undo-tree-id3532 . -1) (undo-tree-id3533 . -1) (undo-tree-id3534 . -1) (undo-tree-id3535 . -1) (undo-tree-id3536 . -1) (undo-tree-id3537 . -1) (undo-tree-id3538 . -1) (#(" " 0 1 (fontified t)) . -5091) (undo-tree-id3539 . -1) (undo-tree-id3540 . -1) (undo-tree-id3541 . -1) (undo-tree-id3542 . 1) (undo-tree-id3543 . -1) (undo-tree-id3544 . -1) (undo-tree-id3545 . -1) (undo-tree-id3546 . -1) (undo-tree-id3547 . -1) (undo-tree-id3548 . -1) (undo-tree-id3549 . -1) (undo-tree-id3550 . -1) 5092) nil (26011 52403 859186 0) 0 nil])
([nil nil ((5090 . 5092)) nil (26011 52403 859154 0) 0 nil])
([nil nil ((#("P" 0 1 (face font-lock-type-face fontified t)) . -5090) (undo-tree-id3515 . -1) (undo-tree-id3516 . -1) (undo-tree-id3517 . -1) (undo-tree-id3518 . -1) (undo-tree-id3519 . -1) 5091) nil (26011 52403 859153 0) 0 nil])
([nil nil ((5090 . 5091)) nil (26011 52403 859147 0) 0 nil])
([nil nil ((#("P" 0 1 (face font-lock-type-face fontified t)) . -5090) (undo-tree-id3513 . -1) (undo-tree-id3514 . -1) 5091) nil (26011 52403 859145 0) 0 nil])
([nil nil ((5090 . 5092)) nil (26011 52403 859142 0) 0 nil])
([nil nil ((5090 . 5094) (#("pa" 0 2 (fontified nil)) . 5090) (5090 . 5092) (#("path" 0 4 (fontified nil)) . -5090) (5090 . 5094) (#("pa" 0 2 (fontified t)) . -5090) (undo-tree-id3505 . -2) (undo-tree-id3506 . -1) (undo-tree-id3507 . -1) (undo-tree-id3508 . -2) (undo-tree-id3509 . -2) (undo-tree-id3510 . -2) (undo-tree-id3511 . -2) (undo-tree-id3512 . -2) 5092) nil (26011 52403 859140 0) 0 nil])
([nil nil ((5094 . 5097)) nil (26011 52403 859128 0) 0 nil])
([nil nil ((5096 . 5100) (#("P" 0 1 (fontified nil)) . 5096) (5096 . 5097) (#("Path" 0 4 (fontified nil)) . -5096) (5096 . 5100) (#("P" 0 1 (face font-lock-type-face fontified t)) . -5096) (undo-tree-id3499 . -1) (undo-tree-id3500 . -1) (undo-tree-id3501 . -1) (undo-tree-id3502 . -1) (undo-tree-id3503 . -1) (undo-tree-id3504 . -1) 5097) nil (26011 52403 859126 0) 0 nil])
([nil nil ((5100 . 5102)) nil (26011 52403 859117 0) 0 nil])
([nil nil ((5102 . 5104)) nil (26011 52403 859116 0) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -5102) (undo-tree-id3479 . -1) (undo-tree-id3480 . -1) (undo-tree-id3481 . -1) (undo-tree-id3482 . -1) (undo-tree-id3483 . -1) (undo-tree-id3484 . -1) (undo-tree-id3485 . -1) (undo-tree-id3486 . -1) (undo-tree-id3487 . -1) (undo-tree-id3488 . -1) (undo-tree-id3489 . -1) (undo-tree-id3490 . -1) (undo-tree-id3491 . -1) (undo-tree-id3492 . -1) (#("r" 0 1 (fontified t)) . -5103) (undo-tree-id3493 . -1) (undo-tree-id3494 . -1) (undo-tree-id3495 . -1) (undo-tree-id3496 . -1) (undo-tree-id3497 . -1) (undo-tree-id3498 . -1) 5104) nil (26011 52403 859114 0) 0 nil])
([nil nil ((5102 . 5103)) nil (26011 52403 859091 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5106 5107 nil nil nil nil #s(yas--exit 5108 nil))) #s(yas--exit 5108 nil) 37 nil #s(yas--field 1 5106 5107 nil nil nil nil #s(yas--exit 5108 nil)) nil nil)) (5102 . 5108) (#("new(${1:s})$0" 0 13 (fontified nil)) . 5102) (5102 . 5115) (#("n" 0 1 (fontified nil)) . 5102) (5102 . 5103) (#("new(…)" 0 6 (fontified nil)) . -5102) (5102 . 5108) (#("n" 0 1 (fontified t)) . -5102) (undo-tree-id3475 . -1) (undo-tree-id3476 . -1) (undo-tree-id3477 . -1) (undo-tree-id3478 . -1) 5103) nil (26011 52403 859089 0) 0 nil])
([nil nil ((apply yas--snippet-revive 5102 5108 #s(yas--snippet nil (#s(yas--field 1 5106 5107 nil nil nil nil #s(yas--exit 5108 nil))) #s(yas--exit 5108 nil) 37 nil #s(yas--field 1 5106 5107 nil nil nil nil #s(yas--exit 5108 nil)) nil nil))) nil (26011 52403 859081 0) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -5106) (undo-tree-id3443 . -1) (undo-tree-id3444 . -1) (undo-tree-id3445 . -1) (undo-tree-id3446 . -1) (undo-tree-id3447 . -1) (undo-tree-id3448 . -1) (undo-tree-id3449 . -1) (undo-tree-id3450 . -1) (undo-tree-id3451 . -1) (undo-tree-id3452 . -1) (undo-tree-id3453 . -1) (undo-tree-id3454 . -1) (undo-tree-id3455 . -1) (undo-tree-id3456 . -1) (undo-tree-id3457 . -1) (undo-tree-id3458 . -1) (undo-tree-id3459 . -1) (undo-tree-id3460 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -5107) (undo-tree-id3461 . -1) (undo-tree-id3462 . -1) (undo-tree-id3463 . -1) (undo-tree-id3464 . -1) (undo-tree-id3465 . -1) (undo-tree-id3466 . -1) (undo-tree-id3467 . -1) (undo-tree-id3468 . -1) (undo-tree-id3469 . -1) (undo-tree-id3470 . -1) (#(" " 0 1 (fontified t)) . -5108) (undo-tree-id3471 . -1) (undo-tree-id3472 . -1) (undo-tree-id3473 . -1) (undo-tree-id3474 . -1) 5109) nil (26011 52403 859078 0) 0 nil])
([nil nil ((5122 . 5123)) nil (26011 52403 859034 0) 0 nil])
([nil nil ((5147 . 5149) (t 26011 52403 873733 258000)) nil (26011 52423 602533 0) 0 nil])
([nil nil ((apply yas--snippet-revive 5148 5156 #s(yas--snippet nil nil #s(yas--exit 5156 nil) 38 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 5156 nil) 38 nil nil nil nil)) (5148 . 5156) (#("unwrap()$0" 0 10 (fontified nil)) . 5148) (5148 . 5158) (#("u" 0 1 (fontified nil)) . 5148) (5148 . 5149) (#("unwrap()" 0 8 (fontified nil)) . -5148) (5148 . 5156) (#("u" 0 1 (fontified t)) . -5148) (undo-tree-id3620 . -1) (undo-tree-id3621 . -1) (undo-tree-id3622 . -1) (undo-tree-id3623 . -1) (undo-tree-id3624 . -1) 5149) nil (26011 52423 602529 0) 0 nil])
([nil nil ((5066 . 5067) (t 26011 52423 617730 557000)) nil (26011 52501 56233 0) 0 nil])
([nil nil ((5066 . 5073) (#("tTexture" 0 1 (fontified nil) 1 8 (face font-lock-type-face fontified nil)) . 5066) (undo-tree-id3634 . 7) (5066 . 5067) (#("texture" 0 7 (fontified nil)) . -5066) (5066 . 5073) (#("t" 0 1 (fontified t)) . -5066) (undo-tree-id3635 . -1) (undo-tree-id3636 . -1) (undo-tree-id3637 . -1) (undo-tree-id3638 . -1) (undo-tree-id3639 . -1) (undo-tree-id3640 . -1) (undo-tree-id3641 . -1) 5067) nil (26011 52501 56231 0) 0 nil])
([nil nil ((5073 . 5076)) nil (26011 52501 56220 0) 0 nil])
([nil nil ((5075 . 5076)) nil (26011 52501 56219 0) 0 nil])
([nil nil ((5075 . 5082) (#("T" 0 1 (fontified nil)) . 5075) (5075 . 5076) (#("Texture" 0 7 (fontified nil)) . -5075) (5075 . 5082) (#("T" 0 1 (face font-lock-type-face fontified t)) . -5075) (undo-tree-id3631 . -1) (undo-tree-id3632 . -1) (undo-tree-id3633 . -1) 5076) nil (26011 52501 56217 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -5082) (undo-tree-id3625 . -1) (undo-tree-id3626 . -1) (undo-tree-id3627 . -1) (undo-tree-id3628 . -1) (undo-tree-id3629 . -1) (undo-tree-id3630 . -1) 5083) nil (26011 52501 56209 0) 0 nil])
([nil nil ((#("        let diffuse_texture = texture::Texture::from_path(std::path::Path::new(\"happy-tree.png\"), &device, &queue, None).unwrap();" 0 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 27 (face font-lock-variable-name-face fontified t) 27 30 (fontified t) 30 37 (face font-lock-constant-face fontified t) 37 39 (fontified t) 39 46 (face font-lock-type-face fontified t) 46 48 (fontified t) 48 57 (fontified t) 57 58 (face (rainbow-delimiters-depth-3-face) fontified t) 58 61 (face font-lock-constant-face fontified t) 61 63 (fontified t) 63 67 (face font-lock-constant-face fontified t) 67 69 (fontified t) 69 73 (face font-lock-type-face fontified t) 73 75 (fontified t) 75 78 (fontified t) 78 79 (face (rainbow-delimiters-depth-4-face) fontified t) 79 95 (face font-lock-string-face fontified t) 95 96 (face (rainbow-delimiters-depth-4-face) fontified t) 96 98 (fontified t) 98 99 (face rust-ampersand-face fontified t) 99 107 (fontified t) 107 108 (face rust-ampersand-face fontified t) 108 115 (fontified t) 115 119 (face font-lock-type-face fontified t) 119 120 (face (rainbow-delimiters-depth-3-face) fontified t) 120 121 (fontified t) 121 127 (fontified t) 127 128 (face (rainbow-delimiters-depth-3-face) fontified t) 128 129 (face (rainbow-delimiters-depth-3-face) fontified t) 129 130 (fontified t)) . 5036) (undo-tree-id3644 . -23) (undo-tree-id3645 . -30) (undo-tree-id3646 . -20) (undo-tree-id3647 . -30) (undo-tree-id3648 . -30) (undo-tree-id3649 . -120) (undo-tree-id3650 . -130) (undo-tree-id3651 . -58) (undo-tree-id3652 . -79) (undo-tree-id3653 . -30) (undo-tree-id3654 . -30) (undo-tree-id3655 . -30) (undo-tree-id3656 . -30) (undo-tree-id3657 . -30) (undo-tree-id3658 . -30) (undo-tree-id3659 . -46) (undo-tree-id3660 . -46) (undo-tree-id3661 . -39) (undo-tree-id3662 . -39) (undo-tree-id3663 . -46) (undo-tree-id3664 . -46) (undo-tree-id3665 . -46) (undo-tree-id3666 . -46) (undo-tree-id3667 . -46) (undo-tree-id3668 . -46) (undo-tree-id3669 . -46) (undo-tree-id3670 . -46) (undo-tree-id3671 . -46) (undo-tree-id3672 . -46) (undo-tree-id3673 . -46) (undo-tree-id3674 . -46) (undo-tree-id3675 . -46) (undo-tree-id3676 . -46) (undo-tree-id3677 . -46) (undo-tree-id3678 . -46) (undo-tree-id3679 . -46) (undo-tree-id3680 . -46) (undo-tree-id3681 . -46) (undo-tree-id3682 . -39) (undo-tree-id3683 . -39) (undo-tree-id3684 . -39) (undo-tree-id3685 . -39) (undo-tree-id3686 . -39) (undo-tree-id3687 . -39) (undo-tree-id3688 . -39) (undo-tree-id3689 . -39) (undo-tree-id3690 . -39) (undo-tree-id3691 . -39) (undo-tree-id3692 . -39) (undo-tree-id3693 . -39) (undo-tree-id3694 . -39) (undo-tree-id3695 . -39) (undo-tree-id3696 . -39) (undo-tree-id3697 . -39) (undo-tree-id3698 . -39) (undo-tree-id3699 . -39) (undo-tree-id3700 . -39) (undo-tree-id3701 . -39) (undo-tree-id3702 . -39) (undo-tree-id3703 . -39) (undo-tree-id3704 . -39) (undo-tree-id3705 . -39) (undo-tree-id3706 . -39) (undo-tree-id3707 . -39) (undo-tree-id3708 . -39) (undo-tree-id3709 . -39) (undo-tree-id3710 . -39) (undo-tree-id3711 . -39) (undo-tree-id3712 . -39) (undo-tree-id3713 . -39) (undo-tree-id3714 . -39) (undo-tree-id3715 . -130) (undo-tree-id3716 . -130) (undo-tree-id3717 . -130) (undo-tree-id3718 . -130) (undo-tree-id3719 . -130) (undo-tree-id3720 . -130) (undo-tree-id3721 . -130) (t 26011 52501 71377 1000)) nil (26011 52620 902628 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 5036) (undo-tree-id3643 . -1)) nil (26011 52620 902551 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 6359 . 6360) (nil fontified nil 6359 . 6360) (nil fontified nil 6358 . 6359) (nil fontified nil 6357 . 6358) (nil fontified nil 6356 . 6357) (nil fontified nil 6350 . 6356) (nil fontified nil 6349 . 6350) (nil fontified nil 6348 . 6349) (nil fontified nil 6344 . 6348) (nil fontified nil 6337 . 6344) (nil fontified nil 6336 . 6337) (nil fontified nil 6328 . 6336) (nil fontified nil 6327 . 6328) (nil fontified nil 6325 . 6327) (nil fontified nil 6324 . 6325) (nil fontified nil 6308 . 6324) (nil fontified nil 6307 . 6308) (nil fontified nil 6304 . 6307) (nil fontified nil 6302 . 6304) (nil fontified nil 6298 . 6302) (nil fontified nil 6296 . 6298) (nil fontified nil 6292 . 6296) (nil fontified nil 6290 . 6292) (nil fontified nil 6287 . 6290) (nil fontified nil 6286 . 6287) (nil fontified nil 6277 . 6286) (nil fontified nil 6275 . 6277) (nil fontified nil 6268 . 6275) (nil fontified nil 6266 . 6268) (nil fontified nil 6259 . 6266) (nil fontified nil 6256 . 6259) (nil fontified nil 6241 . 6256) (nil fontified nil 6240 . 6241) (nil fontified nil 6237 . 6240) (nil fontified nil 6229 . 6237) (6229 . 6360)) nil (26011 52620 902547 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 6360) (undo-tree-id3642 . -1)) nil (26011 52620 902537 0) 0 nil])
([nil nil ((#("        " 0 8 (fontified nil)) . 6229) (6229 . 6237) (6229 . 6230)) nil (26011 52620 902526 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 6709 . 6710) (nil fontified nil 6709 . 6710) (nil fontified nil 6708 . 6709) (nil fontified nil 6683 . 6708) (nil fontified nil 6682 . 6683) (nil fontified nil 6674 . 6682) (nil fontified nil 6673 . 6674) (nil fontified nil 6672 . 6673) (nil fontified nil 6655 . 6672) (nil fontified nil 6639 . 6655) (nil fontified nil 6636 . 6639) (nil fontified nil 6618 . 6636) (nil fontified nil 6617 . 6618) (nil fontified nil 6614 . 6617) (nil fontified nil 6606 . 6614) (nil fontified nil 6605 . 6606) (nil fontified nil 6604 . 6605) (nil fontified nil 6603 . 6604) (nil fontified nil 6602 . 6603) (nil fontified nil 6596 . 6602) (nil fontified nil 6595 . 6596) (nil fontified nil 6594 . 6595) (nil fontified nil 6590 . 6594) (nil fontified nil 6583 . 6590) (nil fontified nil 6582 . 6583) (nil fontified nil 6574 . 6582) (nil fontified nil 6573 . 6574) (nil fontified nil 6571 . 6573) (nil fontified nil 6570 . 6571) (nil fontified nil 6554 . 6570) (nil fontified nil 6553 . 6554) (nil fontified nil 6550 . 6553) (nil fontified nil 6548 . 6550) (nil fontified nil 6544 . 6548) (nil fontified nil 6542 . 6544) (nil fontified nil 6538 . 6542) (nil fontified nil 6536 . 6538) (nil fontified nil 6533 . 6536) (nil fontified nil 6532 . 6533) (nil fontified nil 6523 . 6532) (nil fontified nil 6521 . 6523) (nil fontified nil 6514 . 6521) (nil fontified nil 6512 . 6514) (nil fontified nil 6505 . 6512) (nil fontified nil 6502 . 6505) (nil fontified nil 6487 . 6502) (nil fontified nil 6486 . 6487) (nil fontified nil 6483 . 6486) (nil fontified nil 6475 . 6483) (6475 . 6710) (t 26011 52620 918045 199000)) nil (26011 52801 388730 0) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -6475) 6496) nil (26011 52801 388716 0) 0 nil])
([nil nil ((apply activate-cursor-for-undo 22) (6629 . 6630) (apply deactivate-cursor-after-undo 22) (apply activate-cursor-for-undo 21) (6504 . 6505) (apply deactivate-cursor-after-undo 21) (6752 . 6753)) nil (26011 52801 388714 0) 0 nil])
([nil nil ((apply activate-cursor-for-undo 22) (#("1" 0 1 (face font-lock-variable-name-face fontified t)) . -6628) (apply deactivate-cursor-after-undo 22) (apply activate-cursor-for-undo 21) (#("1" 0 1 (face font-lock-constant-face fontified t)) . -6504) (apply deactivate-cursor-after-undo 21) (#("1" 0 1 (face font-lock-comment-face fontified t)) . -6754) (undo-tree-id3756 . -1) (undo-tree-id3757 . -1) (undo-tree-id3758 . -1) (undo-tree-id3759 . -1) 6755) nil (26011 52801 389270 0) 0 nil])
([nil nil ((6494 . 6496)) nil (26011 52878 33265 0) 0 nil] [nil nil ((apply activate-cursor-for-undo 24) (#("    let" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t)) . 6471) (undo-tree-id3722 . -4) (undo-tree-id3723 . -4) (undo-tree-id3724 . -4) (undo-tree-id3725 . -4) (undo-tree-id3726 . -4) (undo-tree-id3727 . -4) (undo-tree-id3728 . -4) (undo-tree-id3729 . -4) (undo-tree-id3730 . -4) (undo-tree-id3731 . -4) (undo-tree-id3732 . -4) (undo-tree-id3733 . -4) (undo-tree-id3734 . -4) (undo-tree-id3735 . -4) (undo-tree-id3736 . -4) (undo-tree-id3737 . -4) (undo-tree-id3738 . -4) (undo-tree-id3739 . -4) (undo-tree-id3740 . -4) (undo-tree-id3741 . -4) (undo-tree-id3742 . -4) (undo-tree-id3743 . -4) (undo-tree-id3744 . -4) (undo-tree-id3745 . -3) (undo-tree-id3746 . -3) (undo-tree-id3747 . -3) (undo-tree-id3748 . -4) (undo-tree-id3749 . -5) (undo-tree-id3750 . -7) (undo-tree-id3751 . -3) (undo-tree-id3752 . -3) (undo-tree-id3753 . -3) (undo-tree-id3754 . -7) (apply deactivate-cursor-after-undo 24) (#("    let" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t)) . 6602) (undo-tree-id3755 . -7)) ((6602 . 6609) (6471 . 6478)) (26011 52801 388699 0) 0 nil])
([nil nil ((6630 . 6632)) nil (26011 52878 33264 0) 0 nil])
nil
([nil nil ((#("png" 0 3 (face font-lock-string-face fontified t)) . -6560) (undo-tree-id3777 . -3) (undo-tree-id3778 . -3) (undo-tree-id3779 . -3) (undo-tree-id3780 . -3) (undo-tree-id3781 . -3) (undo-tree-id3782 . -3) (undo-tree-id3783 . -3) 6563) nil (26011 52878 33262 0) 0 nil])
([nil nil ((#("tree." 0 5 (face font-lock-string-face fontified t)) . -6555) (undo-tree-id3769 . -5) (undo-tree-id3770 . -5) (undo-tree-id3771 . -5) (undo-tree-id3772 . -5) (undo-tree-id3773 . -5) (undo-tree-id3774 . -5) (undo-tree-id3775 . -5) (undo-tree-id3776 . -5) 6560) nil (26011 52878 33254 0) 0 nil])
([nil nil ((#("happy-" 0 6 (face font-lock-string-face fontified t)) . -6549) (undo-tree-id3760 . -6) (undo-tree-id3761 . -6) (undo-tree-id3762 . -6) (undo-tree-id3763 . -6) (undo-tree-id3764 . -6) (undo-tree-id3765 . -6) (undo-tree-id3766 . -6) (undo-tree-id3767 . -6) (undo-tree-id3768 . -6) 6555) nil (26011 52878 33243 0) 0 nil])
([nil nil ((6549 . 6555)) nil (26011 52878 33219 0) 0 nil])
([nil nil ((2518 . 2522) (#("    " 0 4 (fontified nil)) . 2517) (undo-tree-id3814 . -4) (undo-tree-id3815 . -4) (undo-tree-id3816 . -4) (2516 . 2522) (t 26011 52878 48963 174000)) nil (26011 52961 213318 0) 0 nil])
([nil nil ((2518 . 2522) (#("    " 0 4 (face font-lock-comment-face fontified nil)) . 2517) (2517 . 2521) (2517 . 2518)) nil (26011 52972 648892 0) 0 nil] [nil nil ((nil rear-nonsticky nil 2566 . 2567) (nil fontified nil 2564 . 2567) (nil fontified nil 2547 . 2564) (2544 . 2567) (nil rear-nonsticky nil 2541 . 2542) (nil fontified nil 2522 . 2542) (2522 . 2542)) ((#("diffuse_bind_group_1" 0 19 (fontified nil) 19 20 (rear-nonsticky nil fontified nil)) . 2522) (nil rear-nonsticky t 2541 . 2542) (#("   diffuse_texture_1 = " 0 3 (fontified nil) 3 20 (fontified nil) 20 21 (fontified nil) 21 22 (fontified nil) 22 23 (rear-nonsticky nil fontified nil)) . 2544) (undo-tree-id3817 . -23) (undo-tree-id3818 . -23) (undo-tree-id3819 . -23) (undo-tree-id3820 . -23) (undo-tree-id3821 . -23) (undo-tree-id3822 . -23) (undo-tree-id3823 . -23) (undo-tree-id3824 . -23) (undo-tree-id3825 . -22) (undo-tree-id3826 . -21) (undo-tree-id3827 . -23) (nil rear-nonsticky t 2566 . 2567)) (26011 52960 745561 0) 0 nil])
([nil nil ((nil fontified nil 2607 . 2608) (nil fontified nil 2605 . 2607) (nil fontified nil 2602 . 2605) (nil fontified nil 2600 . 2602) (nil fontified nil 2593 . 2600) (nil fontified nil 2591 . 2593) (nil fontified nil 2584 . 2591) (nil fontified nil 2582 . 2584) (nil fontified nil 2567 . 2582) (nil fontified nil 2563 . 2567) (nil fontified nil 2561 . 2563) (nil fontified nil 2552 . 2561) (nil fontified nil 2550 . 2552) (nil fontified nil 2546 . 2550) (nil fontified nil 2544 . 2546) (nil fontified nil 2526 . 2544) (nil fontified nil 2522 . 2526) (2522 . 2608)) nil (26011 52972 648890 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2564) (undo-tree-id3784 . -1) (undo-tree-id3785 . -1) (undo-tree-id3786 . -1) (undo-tree-id3787 . -1) (undo-tree-id3788 . -1) (undo-tree-id3789 . -1) (undo-tree-id3790 . -1) (undo-tree-id3791 . -1) (undo-tree-id3792 . -1) (undo-tree-id3793 . -1) (undo-tree-id3794 . -1) (#("=" 0 1 (fontified t)) . -2565) (undo-tree-id3795 . -1) (undo-tree-id3796 . -1) (undo-tree-id3797 . -1) (undo-tree-id3798 . -1) (undo-tree-id3799 . -1) (undo-tree-id3800 . -1) (undo-tree-id3801 . -1) (undo-tree-id3802 . -1) (undo-tree-id3803 . -1) (undo-tree-id3804 . -1) (#(" " 0 1 (rear-nonsticky t fontified t)) . -2566) (undo-tree-id3805 . -1) (undo-tree-id3806 . -1) (undo-tree-id3807 . -1) (undo-tree-id3808 . -1) (undo-tree-id3809 . -1) (undo-tree-id3810 . -1) (undo-tree-id3811 . -1) (undo-tree-id3812 . -1) (undo-tree-id3813 . -1) 2567) ((2564 . 2567)) (26011 52960 744969 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2522) 2531) nil (26011 52972 648883 0) 0 nil])
nil
([nil nil ((2540 . 2542)) nil (26011 52972 648881 0) 0 nil])
([nil nil ((2580 . 2582)) nil (26011 52972 648877 0) 0 nil])
([nil nil ((10120 . 10132) (#("            " 0 12 (fontified nil)) . 10119) (undo-tree-id3872 . -12) (undo-tree-id3873 . -12) (undo-tree-id3874 . -12) (10118 . 10132) (t 26011 52972 665165 745000)) nil (26011 52988 929172 0) 0 nil])
([nil nil ((10119 . 10131)) nil (26011 52988 929167 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 10183 . 10184) (nil fontified nil 10181 . 10184) (nil fontified nil 10164 . 10181) (10164 . 10184) (nil rear-nonsticky nil 10150 . 10151) (nil fontified nil 10131 . 10151) (10131 . 10151)) nil (26011 52988 929166 0) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -10182) (undo-tree-id3849 . -1) (undo-tree-id3850 . -1) (undo-tree-id3851 . -1) (undo-tree-id3852 . -1) (undo-tree-id3853 . -1) (undo-tree-id3854 . -1) (undo-tree-id3855 . -1) (undo-tree-id3856 . -1) (undo-tree-id3857 . -1) (undo-tree-id3858 . -1) (undo-tree-id3859 . -1) (undo-tree-id3860 . -1) (#(" " 0 1 (rear-nonsticky t fontified t)) . -10183) (undo-tree-id3861 . -1) (undo-tree-id3862 . -1) (undo-tree-id3863 . -1) (undo-tree-id3864 . -1) (undo-tree-id3865 . -1) (undo-tree-id3866 . -1) (undo-tree-id3867 . -1) (undo-tree-id3868 . -1) (undo-tree-id3869 . -1) (undo-tree-id3870 . -1) (undo-tree-id3871 . -1) 10184) nil (26011 52988 929162 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -10181) (undo-tree-id3836 . -1) (undo-tree-id3837 . -1) (undo-tree-id3838 . -1) (undo-tree-id3839 . -1) (undo-tree-id3840 . -1) (undo-tree-id3841 . -1) (undo-tree-id3842 . -1) (undo-tree-id3843 . -1) (undo-tree-id3844 . -1) (undo-tree-id3845 . -1) (undo-tree-id3846 . -1) (undo-tree-id3847 . -1) (undo-tree-id3848 . -1) 10182) nil (26011 52988 929138 0) 0 nil])
([nil nil ((10151 . 10152)) nil (26011 52988 929124 0) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -10151) (undo-tree-id3828 . -1) (undo-tree-id3829 . -1) (undo-tree-id3830 . -1) (undo-tree-id3831 . -1) (undo-tree-id3832 . -1) (undo-tree-id3833 . -1) (undo-tree-id3834 . -1) (undo-tree-id3835 . -1) 10152) nil (26011 52988 929123 0) 0 nil])
([nil nil ((10151 . 10152)) nil (26011 52988 929108 0) 0 nil])
([nil nil ((10182 . 10183)) nil (26011 52988 929104 0) 0 nil])
([nil nil ((11602 . 11615) (t 26011 52988 945109 615000)) nil (26011 53238 840467 0) 0 nil])
([nil nil ((11615 . 11618)) nil (26011 53238 840466 0) 0 nil])
([nil nil ((11615 . 11621) (#("Win" 0 3 (fontified nil)) . 11615) (11615 . 11618) (#("Window" 0 6 (fontified nil)) . -11615) (11615 . 11621) (#("Win" 0 3 (face font-lock-type-face fontified t)) . -11615) (undo-tree-id4085 . -3) 11618) nil (26011 53238 840464 0) 0 nil])
([nil nil ((11621 . 11622)) nil (26011 53238 840460 0) 0 nil])
([nil nil ((11615 . 11626) (#("WindowE" 0 7 (fontified nil)) . 11615) (11615 . 11622) (#("WindowEvent" 0 11 (fontified nil)) . -11615) (11615 . 11626) (#("WindowE" 0 7 (face font-lock-type-face fontified t)) . -11615) (undo-tree-id4084 . -7) 11622) nil (26011 53238 840458 0) 0 nil])
([nil nil ((11626 . 11629)) nil (26011 53238 840455 0) 0 nil])
([nil nil ((#("P" 0 1 (face font-lock-type-face fontified t)) . -11628) (undo-tree-id4083 . -1) 11629) nil (26011 53238 840453 0) 0 nil])
([nil nil ((11628 . 11629)) nil (26011 53238 840451 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 11650 11650 nil nil nil t #s(yas--field 2 11657 11657 nil nil nil nil #s(yas--field 3 11671 11671 nil nil nil nil #s(yas--exit 11673 nil)))) #s(yas--field 2 11657 11657 nil nil nil nil #s(yas--field 3 11671 11671 nil nil nil nil #s(yas--exit 11673 nil))) #s(yas--field 3 11671 11671 nil nil nil nil #s(yas--exit 11673 nil))) #s(yas--exit 11673 nil) 39 nil #s(yas--field 1 11650 11650 nil nil nil t #s(yas--field 2 11657 11657 nil nil nil nil #s(yas--field 3 11671 11671 nil nil nil nil #s(yas--exit 11673 nil)))) nil nil)) (11628 . 11676) (#("KeyboardInput { device_id$1, event$2, is_synthetic$3 }$0" 0 56 (fontified nil)) . 11628) (11628 . 11684) (#("K" 0 1 (fontified nil)) . 11628) (11628 . 11629) (#("KeyboardInput {…}" 0 17 (fontified nil)) . -11628) (11628 . 11645) (#("K" 0 1 (face font-lock-type-face fontified t)) . -11628) (undo-tree-id4082 . -1) 11629) nil (26011 53238 840449 0) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -11650) (undo-tree-id4076 . -1) (undo-tree-id4077 . -1) (#("i" 0 1 (fontified t)) . -11651) (undo-tree-id4078 . -1) (undo-tree-id4079 . -1) (#("d" 0 1 (fontified t)) . -11652) (undo-tree-id4080 . -1) (undo-tree-id4081 . -1) 11653) nil (26011 53238 840444 0) 0 nil])
([nil nil ((apply yas--snippet-revive 11628 11673 #s(yas--snippet nil (#s(yas--field 1 11650 11650 nil nil nil t #s(yas--field 2 11657 11657 nil nil nil nil #s(yas--field 3 11671 11671 nil nil nil nil #s(yas--exit 11673 nil)))) #s(yas--field 2 11657 11657 nil nil nil nil #s(yas--field 3 11671 11671 nil nil nil nil #s(yas--exit 11673 nil))) #s(yas--field 3 11671 11671 nil nil nil nil #s(yas--exit 11673 nil))) #s(yas--exit 11673 nil) 39 nil #s(yas--field 1 11650 11650 nil nil nil t #s(yas--field 2 11657 11657 nil nil nil nil #s(yas--field 3 11671 11671 nil nil nil nil #s(yas--exit 11673 nil)))) nil nil))) nil (26011 53238 840437 0) 0 nil])
([nil nil ((#("device, " 0 8 (fontified t)) . -11644) (undo-tree-id4074 . -8) (undo-tree-id4075 . -6) 11652) nil (26011 53238 840436 0) 0 nil])
([nil nil ((#("synthetic" 0 9 (fontified t)) . -11654) (undo-tree-id4072 . -9) (undo-tree-id4073 . -8) 11663) nil (26011 53238 840432 0) 0 nil])
([nil nil ((#("is_" 0 3 (fontified t)) . -11651) (undo-tree-id4070 . -3) (undo-tree-id4071 . -3) 11654) nil (26011 53238 840429 0) 0 nil])
([nil nil ((11651 . 11653)) nil (26011 53238 840426 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -11653) (undo-tree-id4069 . -1) 11654) nil (26011 53238 840424 0) 0 nil])
([nil nil ((11654 . 11657)) nil (26011 53238 840422 0) 0 nil])
([nil nil ((#("?" 0 1 (face rust-question-mark fontified t)) . -11656) (undo-tree-id4068 . -1) 11657) nil (26011 53238 840421 0) 0 nil])
([nil nil ((11656 . 11661)) nil (26011 53238 840418 0) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -11660) (undo-tree-id4067 . -1) 11661) nil (26011 53238 840417 0) 0 nil])
([nil nil ((11660 . 11661)) nil (26011 53238 840415 0) 0 nil])
([nil nil ((11649 . 11654)) nil (26011 53238 840414 0) 0 nil])
([nil nil ((11651 . 11659) (#("Key" 0 3 (fontified nil)) . 11651) (11651 . 11654) (#("KeyEvent" 0 8 (fontified nil)) . -11651) (11651 . 11659) (#("Key" 0 3 (face font-lock-type-face fontified t)) . -11651) (undo-tree-id4066 . -3) 11654) nil (26011 53238 840412 0) 0 nil])
([nil nil ((11659 . 11661)) nil (26011 53238 840409 0) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -11659) (undo-tree-id4064 . -1) (#(":" 0 1 (fontified t)) . -11660) (undo-tree-id4065 . -1) 11661) nil (26011 53238 840407 0) 0 nil])
([nil nil ((11659 . 11662)) nil (26011 53238 840404 0) 0 nil])
([nil nil ((11661 . 11662)) nil (26011 53238 840403 0) 0 nil])
([nil nil ((#("P" 0 1 (face font-lock-type-face fontified t)) . -11661) (undo-tree-id4062 . -1) (undo-tree-id4063 . -1) 11662) nil (26011 53238 840401 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -11659) (undo-tree-id4057 . -1) (undo-tree-id4058 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -11660) (undo-tree-id4059 . -1) (undo-tree-id4060 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -11661) (undo-tree-id4061 . -1) 11662) nil (26011 53238 840398 0) 0 nil])
([nil nil ((11659 . 11662)) nil (26011 53238 840391 0) 0 nil])
([nil nil ((11661 . 11662)) nil (26011 53238 840390 0) 0 nil])
([nil nil ((11661 . 11673) (#("p" 0 1 (fontified nil)) . 11661) (11661 . 11662) (#("physical_key" 0 12 (fontified nil)) . -11661) (11661 . 11673) (#("p" 0 1 (fontified t)) . -11661) (undo-tree-id4055 . -1) (undo-tree-id4056 . -1) 11662) nil (26011 53238 840389 0) 0 nil])
([nil nil ((11673 . 11675)) nil (26011 53238 840384 0) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -11674) (undo-tree-id4054 . -1) 11675) nil (26011 53238 840382 0) 0 nil])
([nil nil ((11674 . 11676)) nil (26011 53238 840380 0) 0 nil])
([nil nil ((#("K" 0 1 (face font-lock-type-face fontified t)) . -11675) (undo-tree-id4053 . -1) 11676) nil (26011 53238 840379 0) 0 nil])
([nil nil ((11675 . 11676)) nil (26011 53238 840377 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -11674) (undo-tree-id4049 . -1) (undo-tree-id4050 . -1) (#("s" 0 1 (fontified t)) . -11675) (undo-tree-id4051 . -1) (undo-tree-id4052 . -1) 11676) nil (26011 53238 840375 0) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -11673) (undo-tree-id4047 . -1) (undo-tree-id4048 . -1) 11674) nil (26011 53238 840370 0) 0 nil])
([nil nil ((11673 . 11675)) nil (26011 53238 840366 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -11673) (undo-tree-id4045 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-6-face) fontified t)) . -11674) (undo-tree-id4046 . -1) 11675) nil (26011 53238 840365 0) 0 nil])
([nil nil ((11673 . 11676)) nil (26011 53238 840362 0) 0 nil])
([nil nil ((11676 . 11679)) nil (26011 53238 840361 0) 0 nil])
([nil nil ((#("K" 0 1 (face font-lock-type-face fontified t)) . -11675) (undo-tree-id4038 . -1) (undo-tree-id4039 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -11676) (undo-tree-id4040 . -1) (undo-tree-id4041 . -1) (#("y" 0 1 (face font-lock-type-face fontified t)) . -11677) (undo-tree-id4042 . -1) (undo-tree-id4043 . -1) (#("b" 0 1 (face font-lock-type-face fontified t)) . -11678) (undo-tree-id4044 . -1) 11679) nil (26011 53238 840359 0) 0 nil])
([nil nil ((11675 . 11678)) nil (26011 53238 840351 0) 0 nil])
([nil nil ((#("Phy" 0 3 (face font-lock-type-face fontified t)) . -11675) (undo-tree-id4036 . -3) (undo-tree-id4037 . -3) 11678) nil (26011 53238 840349 0) 0 nil])
([nil nil ((11675 . 11677)) nil (26011 53238 840346 0) 0 nil])
([nil nil ((#("C" 0 1 (face font-lock-type-face fontified t)) . -11675) (undo-tree-id4032 . -1) (undo-tree-id4033 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -11676) (undo-tree-id4034 . -1) (undo-tree-id4035 . -1) 11677) nil (26011 53238 840345 0) 0 nil])
([nil nil ((11675 . 11678)) nil (26011 53238 840339 0) 0 nil])
([nil nil ((11678 . 11681)) nil (26011 53238 840338 0) 0 nil])
([nil nil ((#("Phycal" 0 6 (face font-lock-type-face fontified t)) . -11675) (undo-tree-id4030 . -6) (undo-tree-id4031 . -6) 11681) nil (26011 53238 840337 0) 0 nil])
([nil nil ((#("key:" 0 3 (face font-lock-variable-name-face fontified t) 3 4 (fontified t)) . -11670) (undo-tree-id4028 . -4) (undo-tree-id4029 . -4) 11674) nil (26011 53238 840334 0) 0 nil])
([nil nil ((#("physical_" 0 9 (fontified t)) . -11661) (undo-tree-id4024 . -6) (undo-tree-id4025 . -6) (undo-tree-id4026 . -9) (undo-tree-id4027 . -9) 11670) nil (26011 53238 840330 0) 0 nil])
([nil nil ((11661 . 11664)) nil (26011 53238 840325 0) 0 nil])
([nil nil ((11661 . 11666) (#("sta" 0 3 (fontified nil)) . 11661) (11661 . 11664) (#("state" 0 5 (fontified nil)) . -11661) (11661 . 11666) (#("sta" 0 3 (fontified t)) . -11661) (undo-tree-id4023 . -3) 11664) nil (26011 53238 840324 0) 0 nil])
([nil nil ((11666 . 11668)) nil (26011 53238 840320 0) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -11667) (undo-tree-id4022 . -1) 11668) nil (26011 53238 840319 0) 0 nil])
([nil nil ((11667 . 11676)) nil (26011 53238 840317 0) 0 nil])
([nil nil ((#("ElementS" 0 8 (face font-lock-type-face fontified t)) . -11668) (undo-tree-id4021 . -8) 11676) nil (26011 53238 840316 0) 0 nil])
([nil nil ((11668 . 11671)) nil (26011 53238 840314 0) 0 nil])
([nil nil ((#("m" 0 1 (face font-lock-type-face fontified t)) . -11669) (undo-tree-id4019 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -11670) (undo-tree-id4020 . -1) 11671) nil (26011 53238 840312 0) 0 nil])
([nil nil ((11669 . 11682)) nil (26011 53238 840309 0) 0 nil])
([nil nil ((apply yas--snippet-revive 11682 11689 #s(yas--snippet nil nil #s(yas--exit 11689 nil) 40 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 11689 nil) 40 nil nil nil nil)) (11682 . 11689) (#("Pressed$0" 0 9 (fontified nil)) . 11682) (11682 . 11691) (#("Pressed" 0 7 (fontified nil)) . -11682) (11682 . 11689)) nil (26011 53238 840308 0) 0 nil])
([nil nil ((11689 . 11691)) nil (26011 53238 840305 0) 0 nil])
([nil nil ((11644 . 11660) (#(" " 0 1 (fontified nil)) . 11643) (undo-tree-id4017 . -1) (undo-tree-id4018 . -1) (11644 . 11645)) nil (26011 53238 840304 0) 0 nil])
([nil nil ((11677 . 11698)) nil (26011 53238 840301 0) 0 nil])
([nil nil ((11729 . 11745) (#("                    " 0 20 (fontified nil)) . 11728) (undo-tree-id4015 . -16) (undo-tree-id4016 . -16) (11744 . 11748) (11728 . 11745) (#("  " 0 1 (fontified nil) 1 2 (fontified nil)) . 11728) (11727 . 11728)) nil (26011 53238 840299 0) 0 nil])
([nil nil ((11728 . 11748)) nil (26011 53238 840295 0) 0 nil])
([nil nil ((11748 . 11749)) nil (26011 53238 840294 0) 0 nil])
([nil nil ((11748 . 11760) (#("p" 0 1 (fontified nil)) . 11748) (11748 . 11749) (#("physical_key" 0 12 (fontified nil)) . -11748) (11748 . 11760) (#("p" 0 1 (fontified t)) . -11748) (undo-tree-id4013 . -1) (undo-tree-id4014 . -1) 11749) nil (26011 53238 840292 0) 0 nil])
([nil nil ((11760 . 11761)) nil (26011 53238 840288 0) 0 nil])
([nil nil ((11761 . 11766)) nil (26011 53238 840287 0) 0 nil])
([nil nil ((#("K" 0 1 (face font-lock-type-face fontified t)) . -11762) (undo-tree-id4005 . -1) (undo-tree-id4006 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -11763) (undo-tree-id4007 . -1) (undo-tree-id4008 . -1) (#("y" 0 1 (face font-lock-type-face fontified t)) . -11764) (undo-tree-id4009 . -1) (undo-tree-id4010 . -1) (#("b" 0 1 (face font-lock-type-face fontified t)) . -11765) (undo-tree-id4011 . -1) (undo-tree-id4012 . -1) 11766) nil (26011 53238 840285 0) 0 nil])
([nil nil ((11762 . 11766)) nil (26011 53238 840276 0) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-type-face fontified t)) . -11765) (undo-tree-id4003 . -1) (undo-tree-id4004 . -1) 11766) nil (26011 53238 840274 0) 0 nil])
([nil nil ((11765 . 11773)) nil (26011 53238 840271 0) 0 nil])
([nil nil ((#("K" 0 1 (face font-lock-type-face fontified t)) . -11770) (undo-tree-id3973 . -1) (undo-tree-id3974 . -1) (undo-tree-id3975 . -1) (undo-tree-id3976 . -1) (undo-tree-id3977 . -1) (undo-tree-id3978 . -1) (undo-tree-id3979 . -1) (undo-tree-id3980 . -1) (undo-tree-id3981 . -1) (undo-tree-id3982 . -1) (undo-tree-id3983 . -1) (undo-tree-id3984 . -1) (undo-tree-id3985 . -1) (undo-tree-id3986 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -11771) (undo-tree-id3987 . -1) (undo-tree-id3988 . -1) (undo-tree-id3989 . -1) (undo-tree-id3990 . -1) (undo-tree-id3991 . -1) (undo-tree-id3992 . -1) (undo-tree-id3993 . -1) (undo-tree-id3994 . -1) (undo-tree-id3995 . -1) (undo-tree-id3996 . -1) (#("y" 0 1 (face font-lock-type-face fontified t)) . -11772) (undo-tree-id3997 . -1) (undo-tree-id3998 . -1) (undo-tree-id3999 . -1) (undo-tree-id4000 . -1) (undo-tree-id4001 . -1) (undo-tree-id4002 . -1) 11773) nil (26011 53238 840269 0) 0 nil])
([nil nil ((11770 . 11773)) nil (26011 53238 840239 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 11783 . 11784) (nil fontified nil 11773 . 11784) (11773 . 11784)) nil (26011 53238 840238 0) 0 nil])
([nil nil ((#("PhysicalKey" 0 11 (face font-lock-type-face fontified t)) . -11762) (undo-tree-id3895 . -11) (undo-tree-id3896 . -3) (undo-tree-id3897 . -3) (undo-tree-id3898 . -4) (undo-tree-id3899 . -4) (undo-tree-id3900 . -4) (undo-tree-id3901 . -4) (undo-tree-id3902 . -4) (undo-tree-id3903 . -5) (undo-tree-id3904 . -5) (undo-tree-id3905 . -6) (undo-tree-id3906 . -6) (undo-tree-id3907 . -7) (undo-tree-id3908 . -7) (undo-tree-id3909 . -8) (undo-tree-id3910 . -8) (undo-tree-id3911 . -8) (undo-tree-id3912 . -8) (undo-tree-id3913 . -8) (undo-tree-id3914 . -8) (undo-tree-id3915 . -8) (undo-tree-id3916 . -8) (undo-tree-id3917 . -8) (undo-tree-id3918 . -8) (undo-tree-id3919 . -8) (undo-tree-id3920 . -8) (undo-tree-id3921 . -8) (undo-tree-id3922 . -8) (undo-tree-id3923 . -8) (undo-tree-id3924 . -8) (undo-tree-id3925 . -8) (undo-tree-id3926 . -8) (undo-tree-id3927 . -8) (undo-tree-id3928 . -8) (undo-tree-id3929 . -9) (undo-tree-id3930 . -9) (undo-tree-id3931 . -10) (undo-tree-id3932 . -10) (undo-tree-id3933 . -11) (undo-tree-id3934 . -11) (undo-tree-id3935 . -11) (undo-tree-id3936 . -11) (undo-tree-id3937 . -11) (undo-tree-id3938 . -11) (undo-tree-id3939 . -11) (undo-tree-id3940 . -11) (undo-tree-id3941 . -11) (undo-tree-id3942 . -11) (undo-tree-id3943 . -11) (undo-tree-id3944 . -11) (undo-tree-id3945 . -11) (undo-tree-id3946 . -11) (undo-tree-id3947 . -11) (undo-tree-id3948 . -11) (undo-tree-id3949 . -11) (undo-tree-id3950 . -11) (undo-tree-id3951 . -11) (undo-tree-id3952 . -11) (undo-tree-id3953 . -11) (undo-tree-id3954 . -11) (undo-tree-id3955 . -11) (undo-tree-id3956 . -11) (undo-tree-id3957 . -11) (undo-tree-id3958 . -11) (undo-tree-id3959 . -11) (undo-tree-id3960 . -11) (undo-tree-id3961 . -11) (undo-tree-id3962 . -11) (undo-tree-id3963 . -11) (undo-tree-id3964 . -11) (undo-tree-id3965 . -11) (undo-tree-id3966 . -11) (undo-tree-id3967 . -11) (undo-tree-id3968 . -11) (undo-tree-id3969 . -11) (undo-tree-id3970 . -11) (undo-tree-id3971 . -11) (undo-tree-id3972 . -11) 11773) nil (26011 53238 840233 0) 0 nil])
([nil nil ((11773 . 11775)) nil (26011 53238 840155 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 11780 11794 nil nil nil t #s(yas--exit 11795 nil))) #s(yas--exit 11795 nil) 41 nil #s(yas--field 1 11780 11794 nil nil nil t #s(yas--exit 11795 nil)) nil nil)) (11775 . 11781) (#("Code($1)$0" 0 10 (fontified nil)) . 11775) (11775 . 11785) (#("Code(…)" 0 7 (fontified nil)) . -11775) (11775 . 11782)) nil (26011 53238 840153 0) 0 nil])
([nil nil ((11780 . 11785)) nil (26011 53238 840151 0) 0 nil])
([nil nil ((11785 . 11790)) nil (26011 53238 840150 0) 0 nil])
([nil nil ((#("E" 0 1 (face font-lock-type-face fontified t)) . -11789) (undo-tree-id3887 . -1) (undo-tree-id3888 . -1) (undo-tree-id3889 . -1) (undo-tree-id3890 . -1) (undo-tree-id3891 . -1) (undo-tree-id3892 . -1) (undo-tree-id3893 . -1) (undo-tree-id3894 . -1) 11790) nil (26011 53238 840149 0) 0 nil])
([nil nil ((11789 . 11791)) nil (26011 53238 840140 0) 0 nil])
([nil nil ((apply yas--snippet-revive 11789 11794 #s(yas--snippet nil nil #s(yas--exit 11794 nil) 42 nil nil #s(yas--field 1 11780 11794 nil nil nil t #s(yas--exit 11795 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 11794 nil) 42 nil nil #s(yas--field 1 11780 11794 nil nil nil t #s(yas--exit 11795 nil)) nil)) (11789 . 11794) (#("Space$0" 0 7 (fontified nil)) . 11789) (undo-tree-id3875 . -7) (11789 . 11796) (#("Sp" 0 2 (fontified nil)) . 11789) (undo-tree-id3876 . -2) (11789 . 11791) (#("Space" 0 5 (fontified nil)) . -11789) (undo-tree-id3877 . -5) (11789 . 11794) (#("Sp" 0 2 (face font-lock-type-face fontified t)) . -11789) (undo-tree-id3878 . -2) (undo-tree-id3879 . -2) (undo-tree-id3880 . -1) (undo-tree-id3881 . -1) (undo-tree-id3882 . -2) (undo-tree-id3883 . -2) (undo-tree-id3884 . -2) (undo-tree-id3885 . -2) (undo-tree-id3886 . -2) 11791) nil (26011 53238 840136 0) 0 nil])
([nil nil ((apply yas--snippet-revive 11775 11795 #s(yas--snippet nil (#s(yas--field 1 11780 11794 nil nil nil t #s(yas--exit 11795 nil))) #s(yas--exit 11795 nil) 41 nil #s(yas--field 1 11780 11794 nil nil nil t #s(yas--exit 11795 nil)) nil nil))) nil (26011 53238 840113 0) 0 nil])
([nil nil ((11795 . 11796)) nil (26011 53238 840113 0) 0 nil])
([nil nil ((11796 . 11817)) nil (26011 53238 840111 0) 0 nil])
([nil nil ((11817 . 11819)) nil (26011 53238 840107 0) 0 nil])
([nil nil ((11839 . 11855) (#(" " 0 1 (fontified nil)) . 11838) (undo-tree-id4086 . -1) (undo-tree-id4087 . -1) (undo-tree-id4088 . -1) (undo-tree-id4089 . -1) (undo-tree-id4090 . -1) (undo-tree-id4091 . -1) (undo-tree-id4092 . -1) (undo-tree-id4093 . -1) (11839 . 11840) (t 26011 53238 858125 331000)) nil (26011 53243 54938 0) 0 nil])
([nil nil ((11865 . 11877) (#("                " 0 16 (fontified nil)) . 11864) (11864 . 11880) (#("            " 0 12 (fontified nil)) . 11864) (undo-tree-id4094 . -12) (undo-tree-id4095 . -12) (undo-tree-id4096 . -12) (11863 . 11877) (t 26011 53243 73206 608000)) nil (26011 53260 919762 0) 0 nil])
([nil nil ((11857 . 11870)) nil (26011 53260 919745 0) 0 nil])
([nil nil ((11877 . 11893) (t 26011 53260 936883 523000)) nil (26011 53264 399755 0) 0 nil])
([nil nil ((11878 . 11894) (#("                " 0 16 (fontified nil)) . 11877) (undo-tree-id4097 . -16) (undo-tree-id4098 . -16) (undo-tree-id4099 . -16) (undo-tree-id4100 . -16) (undo-tree-id4101 . -16) (undo-tree-id4102 . -16) (undo-tree-id4103 . -16) (undo-tree-id4104 . -16) (undo-tree-id4105 . -16) (undo-tree-id4106 . -16) (undo-tree-id4107 . -16) (undo-tree-id4108 . -16) (undo-tree-id4109 . -16) (undo-tree-id4110 . -16) (undo-tree-id4111 . -16) (undo-tree-id4112 . -16) (undo-tree-id4113 . -16) (undo-tree-id4114 . -16) (undo-tree-id4115 . -16) (undo-tree-id4116 . -16) (undo-tree-id4117 . -16) (undo-tree-id4118 . -16) (undo-tree-id4119 . -16) (undo-tree-id4120 . -16) (undo-tree-id4121 . -16) (undo-tree-id4122 . -16) (undo-tree-id4123 . -16) (undo-tree-id4124 . -16) (11893 . 11894) (t 26011 53264 417026 501000)) nil (26011 53274 639379 0) 0 nil])
([nil nil ((11894 . 11898)) nil (26011 53274 639341 0) 0 nil])
([nil nil ((11877 . 11893) (t 26011 53274 657288 337000)) nil (26011 53306 295025 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 12496 . 12497) (nil fontified nil 12496 . 12497) (nil fontified nil 12478 . 12496) (nil fontified nil 12477 . 12478) (nil fontified nil 12474 . 12477) (nil fontified nil 12468 . 12474) (nil fontified nil 12467 . 12468) (nil fontified nil 12461 . 12467) (nil fontified nil 12459 . 12461) (nil fontified nil 12452 . 12459) (nil fontified nil 12451 . 12452) (nil fontified nil 12450 . 12451) (nil fontified nil 12448 . 12450) (nil fontified nil 12447 . 12448) (nil fontified nil 12446 . 12447) (nil fontified nil 12445 . 12446) (nil fontified nil 12442 . 12445) (nil fontified nil 12422 . 12442) (nil fontified nil 12352 . 12422) (nil fontified nil 12348 . 12352) (nil fontified nil 12345 . 12348) (nil fontified nil 12344 . 12345) (nil fontified nil 12325 . 12344) (nil fontified nil 12323 . 12325) (nil fontified nil 12322 . 12323) (nil fontified nil 12307 . 12322) (nil fontified nil 12289 . 12307) (nil fontified nil 12288 . 12289) (nil fontified nil 12282 . 12288) (nil fontified nil 12280 . 12282) (nil fontified nil 12273 . 12280) (nil fontified nil 12272 . 12273) (nil fontified nil 12271 . 12272) (nil fontified nil 12269 . 12271) (nil fontified nil 12268 . 12269) (nil fontified nil 12257 . 12268) (nil fontified nil 12255 . 12257) (nil fontified nil 12243 . 12255) (nil fontified nil 12241 . 12243) (nil fontified nil 12240 . 12241) (nil fontified nil 12239 . 12240) (nil fontified nil 12237 . 12239) (nil fontified nil 12236 . 12237) (nil fontified nil 12233 . 12236) (nil fontified nil 12213 . 12233) (nil fontified nil 12184 . 12213) (nil fontified nil 12181 . 12184) (nil fontified nil 12160 . 12181) (nil fontified nil 12157 . 12160) (nil fontified nil 12137 . 12157) (nil fontified nil 12135 . 12137) (nil fontified nil 12134 . 12135) (nil fontified nil 12129 . 12134) (nil fontified nil 12125 . 12129) (nil fontified nil 12124 . 12125) (nil fontified nil 12117 . 12124) (nil fontified nil 12113 . 12117) (nil fontified nil 12112 . 12113) (nil fontified nil 12111 . 12112) (nil fontified nil 12109 . 12111) (nil fontified nil 12108 . 12109) (nil fontified nil 12104 . 12108) (nil fontified nil 12102 . 12104) (nil fontified nil 12090 . 12102) (nil fontified nil 12088 . 12090) (nil fontified nil 12084 . 12088) (nil fontified nil 12083 . 12084) (nil fontified nil 12080 . 12083) (nil fontified nil 12060 . 12080) (nil fontified nil 12028 . 12060) (nil fontified nil 12025 . 12028) (nil fontified nil 12004 . 12025) (nil fontified nil 12003 . 12004) (nil fontified nil 12002 . 12003) (nil fontified nil 12001 . 12002) (nil fontified nil 12000 . 12001) (nil fontified nil 11998 . 12000) (nil fontified nil 11997 . 11998) (nil fontified nil 11996 . 11997) (nil fontified nil 11995 . 11996) (nil fontified nil 11993 . 11995) (nil fontified nil 11972 . 11993) (nil fontified nil 11971 . 11972) (nil fontified nil 11970 . 11971) (nil fontified nil 11969 . 11970) (nil fontified nil 11968 . 11969) (nil fontified nil 11962 . 11968) (nil fontified nil 11961 . 11962) (nil fontified nil 11956 . 11961) (nil fontified nil 11955 . 11956) (nil fontified nil 11948 . 11955) (nil fontified nil 11947 . 11948) (nil fontified nil 11942 . 11947) (nil fontified nil 11941 . 11942) (nil fontified nil 11940 . 11941) (nil fontified nil 11939 . 11940) (nil fontified nil 11938 . 11939) (nil fontified nil 11933 . 11938) (nil fontified nil 11931 . 11933) (nil fontified nil 11927 . 11931) (nil fontified nil 11926 . 11927) (nil fontified nil 11919 . 11926) (nil fontified nil 11915 . 11919) (nil fontified nil 11914 . 11915) (nil fontified nil 11909 . 11914) (nil fontified nil 11893 . 11909) (11893 . 12497)) nil (26011 53306 295019 0) 0 nil])
([nil nil ((#("                " 0 16 (fontified t)) . -11893) 11872) nil (26011 53306 294990 0) 0 nil])
([nil nil ((#(" { r: x, g: 0.5, b: y, a: 1.0 }" 0 1 (fontified t) 1 2 (face (rainbow-delimiters-depth-6-face) fontified t) 2 3 (fontified t) 3 4 (face font-lock-variable-name-face fontified t) 4 9 (fontified t) 9 10 (face font-lock-variable-name-face fontified t) 10 17 (fontified t) 17 18 (face font-lock-variable-name-face fontified t) 18 23 (fontified t) 23 24 (face font-lock-variable-name-face fontified t) 24 30 (fontified t) 30 31 (face (rainbow-delimiters-depth-6-face) fontified t)) . -11922) (undo-tree-id4133 . -31) (undo-tree-id4134 . -31) (undo-tree-id4135 . -1) (undo-tree-id4136 . -3) (undo-tree-id4137 . -7) (undo-tree-id4138 . -9) (undo-tree-id4139 . -13) (undo-tree-id4140 . -14) (undo-tree-id4141 . -16) (undo-tree-id4142 . -17) (undo-tree-id4143 . -18) (undo-tree-id4144 . -19) (undo-tree-id4145 . -20) (undo-tree-id4146 . -21) (undo-tree-id4147 . -22) (undo-tree-id4148 . -23) (undo-tree-id4149 . -24) (undo-tree-id4150 . -25) (undo-tree-id4151 . -26) (undo-tree-id4152 . -27) (undo-tree-id4153 . -28) (undo-tree-id4154 . -29) (undo-tree-id4155 . -30) (undo-tree-id4156 . -31) (undo-tree-id4157 . -30) (undo-tree-id4158 . -31) (undo-tree-id4159 . -31) (undo-tree-id4160 . -31) 11953) nil (26011 53306 294988 0) 0 nil])
([nil nil ((11922 . 11925)) nil (26011 53306 294957 0) 0 nil])
([nil nil ((11924 . 11929) (#("B" 0 1 (fontified nil)) . 11924) (11924 . 11925) (#("BLACK" 0 5 (fontified nil)) . -11924) (11924 . 11929) (#("B" 0 1 (face font-lock-type-face fontified t)) . -11924) (undo-tree-id4125 . -1) (undo-tree-id4126 . -1) (undo-tree-id4127 . -1) (undo-tree-id4128 . -1) (undo-tree-id4129 . -1) (undo-tree-id4130 . -1) (undo-tree-id4131 . -1) (undo-tree-id4132 . -1) 11925) nil (26011 53306 294953 0) 0 nil])
([nil nil ((11878 . 11894) (#("                " 0 16 (fontified nil)) . 11877) (undo-tree-id4317 . -16) (undo-tree-id4318 . -16) (undo-tree-id4319 . -16) (undo-tree-id4320 . -16) (11876 . 11894) (t 26011 53306 313022 159000)) nil (26011 53443 261033 0) 0 nil])
([nil nil ((11877 . 11893)) nil (26011 53443 261027 0) 0 nil])
([nil nil ((11893 . 11896)) nil (26011 53443 261026 0) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -11895) (undo-tree-id4312 . -1) (undo-tree-id4313 . -1) (undo-tree-id4314 . -1) (undo-tree-id4315 . -1) (undo-tree-id4316 . -1) 11896) nil (26011 53443 261024 0) 0 nil])
([nil nil ((11895 . 11896)) nil (26011 53443 261019 0) 0 nil])
([nil nil ((11893 . 11897) (#("sel" 0 3 (fontified nil)) . 11893) (11893 . 11896) (#("self" 0 4 (fontified nil)) . -11893) (11893 . 11897) (#("sel" 0 3 (fontified t)) . -11893) (undo-tree-id4297 . -3) (undo-tree-id4298 . -1) (undo-tree-id4299 . -2) (undo-tree-id4300 . -2) (undo-tree-id4301 . -2) (undo-tree-id4302 . -2) (undo-tree-id4303 . -2) (undo-tree-id4304 . -2) (undo-tree-id4305 . -2) (undo-tree-id4306 . -2) (undo-tree-id4307 . -2) (undo-tree-id4308 . -3) (undo-tree-id4309 . -3) (undo-tree-id4310 . -3) (undo-tree-id4311 . -3) 11896) nil (26011 53443 261017 0) 0 nil])
([nil nil ((11897 . 11898)) nil (26011 53443 260996 0) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -11893) (undo-tree-id4250 . -1) (undo-tree-id4251 . -1) (undo-tree-id4252 . -1) (undo-tree-id4253 . -1) (undo-tree-id4254 . -1) (undo-tree-id4255 . -1) (undo-tree-id4256 . -1) (undo-tree-id4257 . -1) (undo-tree-id4258 . -1) (undo-tree-id4259 . -1) (undo-tree-id4260 . -1) (undo-tree-id4261 . -1) (#("e" 0 1 (fontified t)) . -11894) (undo-tree-id4262 . -1) (undo-tree-id4263 . -1) (undo-tree-id4264 . -1) (undo-tree-id4265 . -1) (undo-tree-id4266 . -1) (undo-tree-id4267 . -1) (undo-tree-id4268 . -1) (undo-tree-id4269 . -1) (undo-tree-id4270 . -1) (undo-tree-id4271 . -1) (undo-tree-id4272 . -1) (#("l" 0 1 (fontified t)) . -11895) (undo-tree-id4273 . -1) (undo-tree-id4274 . -1) (undo-tree-id4275 . -1) (undo-tree-id4276 . -1) (undo-tree-id4277 . -1) (undo-tree-id4278 . -1) (undo-tree-id4279 . -1) (undo-tree-id4280 . -1) (undo-tree-id4281 . -1) (undo-tree-id4282 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -11896) (undo-tree-id4283 . -1) (undo-tree-id4284 . -1) (undo-tree-id4285 . -1) (undo-tree-id4286 . -1) (undo-tree-id4287 . -1) (undo-tree-id4288 . -1) (undo-tree-id4289 . -1) (undo-tree-id4290 . -1) (undo-tree-id4291 . -1) (#("." 0 1 (fontified t)) . -11897) (undo-tree-id4292 . -1) (undo-tree-id4293 . -1) (undo-tree-id4294 . -1) (undo-tree-id4295 . -1) (undo-tree-id4296 . -1) 11898) nil (26011 53443 260992 0) 0 nil])
([nil nil ((11893 . 11895)) nil (26011 53443 260939 0) 0 nil])
([nil nil ((11893 . 11897) (#("se" 0 2 (fontified nil)) . 11893) (11893 . 11895) (#("self" 0 4 (fontified nil)) . -11893) (11893 . 11897) (#("se" 0 2 (fontified t)) . -11893) (undo-tree-id4241 . -2) (undo-tree-id4242 . -1) (undo-tree-id4243 . -1) (undo-tree-id4244 . -1) (undo-tree-id4245 . -2) (undo-tree-id4246 . -2) (undo-tree-id4247 . -2) (undo-tree-id4248 . -2) (undo-tree-id4249 . -2) 11895) nil (26011 53443 260938 0) 0 nil])
([nil nil ((11897 . 11898)) nil (26011 53443 260927 0) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -11893) (undo-tree-id4179 . -1) (undo-tree-id4180 . -1) (undo-tree-id4181 . -1) (undo-tree-id4182 . -1) (undo-tree-id4183 . -1) (undo-tree-id4184 . -1) (undo-tree-id4185 . -1) (undo-tree-id4186 . -1) (undo-tree-id4187 . -1) (undo-tree-id4188 . -1) (undo-tree-id4189 . -1) (undo-tree-id4190 . -1) (undo-tree-id4191 . -1) (undo-tree-id4192 . -1) (undo-tree-id4193 . -1) (#("e" 0 1 (fontified t)) . -11894) (undo-tree-id4194 . -1) (undo-tree-id4195 . -1) (undo-tree-id4196 . -1) (undo-tree-id4197 . -1) (undo-tree-id4198 . -1) (undo-tree-id4199 . -1) (undo-tree-id4200 . -1) (undo-tree-id4201 . -1) (undo-tree-id4202 . -1) (undo-tree-id4203 . -1) (undo-tree-id4204 . -1) (undo-tree-id4205 . -1) (undo-tree-id4206 . -1) (undo-tree-id4207 . -1) (#("l" 0 1 (fontified t)) . -11895) (undo-tree-id4208 . -1) (undo-tree-id4209 . -1) (undo-tree-id4210 . -1) (undo-tree-id4211 . -1) (undo-tree-id4212 . -1) (undo-tree-id4213 . -1) (undo-tree-id4214 . -1) (undo-tree-id4215 . -1) (undo-tree-id4216 . -1) (undo-tree-id4217 . -1) (undo-tree-id4218 . -1) (undo-tree-id4219 . -1) (undo-tree-id4220 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -11896) (undo-tree-id4221 . -1) (undo-tree-id4222 . -1) (undo-tree-id4223 . -1) (undo-tree-id4224 . -1) (undo-tree-id4225 . -1) (undo-tree-id4226 . -1) (undo-tree-id4227 . -1) (undo-tree-id4228 . -1) (undo-tree-id4229 . -1) (undo-tree-id4230 . -1) (undo-tree-id4231 . -1) (undo-tree-id4232 . -1) (#("." 0 1 (fontified t)) . -11897) (undo-tree-id4233 . -1) (undo-tree-id4234 . -1) (undo-tree-id4235 . -1) (undo-tree-id4236 . -1) (undo-tree-id4237 . -1) (undo-tree-id4238 . -1) (undo-tree-id4239 . -1) (undo-tree-id4240 . -1) 11898) nil (26011 53443 260923 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 11906 . 11907) (nil fontified nil 11893 . 11907) (11893 . 11907)) nil (26011 53443 260858 0) 0 nil])
([nil nil ((11907 . 11909)) nil (26011 53443 260856 0) 0 nil])
([nil nil ((11908 . 11909)) nil (26011 53443 260855 0) 0 nil])
([nil nil ((11908 . 11912) (#("s" 0 1 (fontified nil)) . 11908) (11908 . 11909) (#("self" 0 4 (fontified nil)) . -11908) (11908 . 11912) (#("s" 0 1 (fontified t)) . -11908) (undo-tree-id4174 . -1) (undo-tree-id4175 . -1) (undo-tree-id4176 . -1) (undo-tree-id4177 . -1) (undo-tree-id4178 . -1) 11909) nil (26011 53443 260854 0) 0 nil])
([nil nil ((11912 . 11913)) nil (26011 53443 260846 0) 0 nil])
([nil nil ((11913 . 11931) (#("diffuse_bind_group" 0 18 (fontified nil)) . -11913) (11913 . 11931)) nil (26011 53443 260845 0) 0 nil])
([nil nil ((11931 . 11937)) nil (26011 53443 260843 0) 0 nil])
([nil nil ((11937 . 11940)) nil (26011 53443 260842 0) 0 nil])
([nil nil ((11937 . 11957) (#("bin" 0 3 (fontified nil)) . 11937) (11937 . 11940) (#("diffuse_bind_group_1" 0 20 (fontified nil)) . -11937) (11937 . 11957) (#("bin" 0 3 (fontified t)) . -11937) (undo-tree-id4161 . -3) (undo-tree-id4162 . -1) (undo-tree-id4163 . -1) (undo-tree-id4164 . -1) (undo-tree-id4165 . -1) (undo-tree-id4166 . -2) (undo-tree-id4167 . -2) (undo-tree-id4168 . -2) (undo-tree-id4169 . -3) (undo-tree-id4170 . -3) (undo-tree-id4171 . -3) (undo-tree-id4172 . -3) (undo-tree-id4173 . -3) 11940) nil (26011 53443 260839 0) 0 nil])
([nil nil ((11958 . 11959)) nil (26011 53443 260816 0) 0 nil])
([nil nil ((11908 . 11913) (t 26011 53443 279274 770000)) nil (26011 53453 616923 0) 0 nil])
([nil nil ((11937 . 11943)) nil (26011 53453 616918 0) 0 nil])
([nil nil ((11876 . 11893) (t 26011 53453 635196 664000)) nil (26011 53505 75733 0) 0 nil])
([nil nil ((#("group" 0 5 (fontified t)) . -11948) (undo-tree-id4482 . -5) (undo-tree-id4483 . -5) (undo-tree-id4484 . -5) (undo-tree-id4485 . -5) (undo-tree-id4486 . -5) (undo-tree-id4487 . -5) (undo-tree-id4488 . -5) (undo-tree-id4489 . -5) (undo-tree-id4490 . -5) (undo-tree-id4491 . -5) 11953) nil (26011 53505 75731 0) 0 nil])
([nil nil ((#("bind_" 0 5 (fontified t)) . -11943) (undo-tree-id4441 . -3) (undo-tree-id4442 . -5) (undo-tree-id4443 . -3) (undo-tree-id4444 . -3) (undo-tree-id4445 . -3) (undo-tree-id4446 . -3) (undo-tree-id4447 . -3) (undo-tree-id4448 . -3) (undo-tree-id4449 . -3) (undo-tree-id4450 . -3) (undo-tree-id4451 . -3) (undo-tree-id4452 . -3) (undo-tree-id4453 . -3) (undo-tree-id4454 . -3) (undo-tree-id4455 . -3) (undo-tree-id4456 . -3) (undo-tree-id4457 . -3) (undo-tree-id4458 . -3) (undo-tree-id4459 . -3) (undo-tree-id4460 . -3) (undo-tree-id4461 . -3) (undo-tree-id4462 . -3) (undo-tree-id4463 . -3) (undo-tree-id4464 . -3) (undo-tree-id4465 . -3) (undo-tree-id4466 . -3) (undo-tree-id4467 . -3) (undo-tree-id4468 . -3) (undo-tree-id4469 . -3) (undo-tree-id4470 . -3) (undo-tree-id4471 . -3) (undo-tree-id4472 . -5) (undo-tree-id4473 . -5) (undo-tree-id4474 . -5) (undo-tree-id4475 . -5) (undo-tree-id4476 . -5) (undo-tree-id4477 . -5) (undo-tree-id4478 . -5) (undo-tree-id4479 . -5) (undo-tree-id4480 . -5) (undo-tree-id4481 . -5) 11948) nil (26011 53505 75719 0) 0 nil])
([nil nil ((#("diffuse_" 0 8 (fontified t)) . -11935) (undo-tree-id4399 . -8) (undo-tree-id4400 . -8) (undo-tree-id4401 . -8) (undo-tree-id4402 . -8) (undo-tree-id4403 . -8) (undo-tree-id4404 . -8) (undo-tree-id4405 . -8) (undo-tree-id4406 . -8) (undo-tree-id4407 . -8) (undo-tree-id4408 . -8) (undo-tree-id4409 . -8) (undo-tree-id4410 . -8) (undo-tree-id4411 . -8) (undo-tree-id4412 . -8) (undo-tree-id4413 . -8) (undo-tree-id4414 . -8) (undo-tree-id4415 . -8) (undo-tree-id4416 . -8) (undo-tree-id4417 . -8) (undo-tree-id4418 . -8) (undo-tree-id4419 . -8) (undo-tree-id4420 . -8) (undo-tree-id4421 . -8) (undo-tree-id4422 . -8) (undo-tree-id4423 . -8) (undo-tree-id4424 . -8) (undo-tree-id4425 . -8) (undo-tree-id4426 . -8) (undo-tree-id4427 . -8) (undo-tree-id4428 . -8) (undo-tree-id4429 . -8) (undo-tree-id4430 . -8) (undo-tree-id4431 . -8) (undo-tree-id4432 . -8) (undo-tree-id4433 . -8) (undo-tree-id4434 . -8) (undo-tree-id4435 . -8) (undo-tree-id4436 . -8) (undo-tree-id4437 . -8) (undo-tree-id4438 . -8) (undo-tree-id4439 . -8) (undo-tree-id4440 . -8) 11943) nil (26011 53505 75675 0) 0 nil])
([nil nil ((11935 . 11938)) nil (26011 53505 75633 0) 0 nil])
([nil nil ((11938 . 11939)) nil (26011 53505 75632 0) 0 nil])
([nil nil ((11935 . 11950) (#("text" 0 4 (fontified nil)) . 11935) (11935 . 11939) (#("diffuse_texture" 0 15 (fontified nil)) . -11935) (11935 . 11950) (#("text" 0 4 (fontified t)) . -11935) (undo-tree-id4381 . -4) (undo-tree-id4382 . -1) (undo-tree-id4383 . -1) (undo-tree-id4384 . -1) (undo-tree-id4385 . -2) (undo-tree-id4386 . -2) (undo-tree-id4387 . -2) (undo-tree-id4388 . -2) (undo-tree-id4389 . -3) (undo-tree-id4390 . -3) (undo-tree-id4391 . -3) (undo-tree-id4392 . -3) (undo-tree-id4393 . -3) (undo-tree-id4394 . -3) (undo-tree-id4395 . -3) (undo-tree-id4396 . -4) (undo-tree-id4397 . -4) (undo-tree-id4398 . -4) 11939) nil (26011 53505 75630 0) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . -11981) (undo-tree-id4371 . -1) (undo-tree-id4372 . -1) (undo-tree-id4373 . -1) (undo-tree-id4374 . -1) (undo-tree-id4375 . -1) (undo-tree-id4376 . -1) (undo-tree-id4377 . -1) (undo-tree-id4378 . -1) (undo-tree-id4379 . -1) (undo-tree-id4380 . -1) 11982) nil (26011 53505 75602 0) 0 nil])
([nil nil ((#("group_" 0 6 (fontified t)) . -11975) (undo-tree-id4360 . -6) (undo-tree-id4361 . -6) (undo-tree-id4362 . -6) (undo-tree-id4363 . -6) (undo-tree-id4364 . -6) (undo-tree-id4365 . -6) (undo-tree-id4366 . -6) (undo-tree-id4367 . -6) (undo-tree-id4368 . -6) (undo-tree-id4369 . -6) (undo-tree-id4370 . -6) 11981) nil (26011 53505 75591 0) 0 nil])
([nil nil ((#("bind_" 0 5 (fontified t)) . -11970) (undo-tree-id4348 . -5) (undo-tree-id4349 . -5) (undo-tree-id4350 . -5) (undo-tree-id4351 . -5) (undo-tree-id4352 . -5) (undo-tree-id4353 . -5) (undo-tree-id4354 . -5) (undo-tree-id4355 . -5) (undo-tree-id4356 . -5) (undo-tree-id4357 . -5) (undo-tree-id4358 . -5) (undo-tree-id4359 . -5) 11975) nil (26011 53505 75577 0) 0 nil])
([nil nil ((#("diffuse_" 0 8 (fontified t)) . -11962) (undo-tree-id4335 . -8) (undo-tree-id4336 . -8) (undo-tree-id4337 . -8) (undo-tree-id4338 . -8) (undo-tree-id4339 . -8) (undo-tree-id4340 . -8) (undo-tree-id4341 . -8) (undo-tree-id4342 . -8) (undo-tree-id4343 . -8) (undo-tree-id4344 . -8) (undo-tree-id4345 . -8) (undo-tree-id4346 . -8) (undo-tree-id4347 . -8) 11970) nil (26011 53505 76034 0) 0 nil])
([nil nil ((11962 . 11964)) nil (26011 53508 407877 0) 0 nil] [nil nil ((#("self." 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t)) . -11957) (undo-tree-id4321 . -5) (undo-tree-id4322 . -5) (undo-tree-id4323 . -5) (undo-tree-id4324 . -5) (undo-tree-id4325 . -5) (undo-tree-id4326 . -5) (undo-tree-id4327 . -5) (undo-tree-id4328 . -5) (undo-tree-id4329 . -5) (undo-tree-id4330 . -5) (undo-tree-id4331 . -5) (undo-tree-id4332 . -5) (undo-tree-id4333 . -5) (undo-tree-id4334 . -5) 11962) ((11957 . 11962)) (26011 53505 75542 0) 0 nil])
([nil nil ((11962 . 11979) (#("di" 0 2 (fontified nil)) . 11962) (11962 . 11964) (#("diffuse_texture_1" 0 17 (fontified nil)) . -11962) (11962 . 11979) (#("di" 0 2 (fontified t)) . -11962) (undo-tree-id4492 . -2) (undo-tree-id4493 . -1) (undo-tree-id4494 . -1) (undo-tree-id4495 . -2) (undo-tree-id4496 . -2) (undo-tree-id4497 . -2) (undo-tree-id4498 . -2) 11964) nil (26011 53508 407873 0) 0 nil])
nil
([nil nil ((11981 . 11998) (t 26011 53508 426117 759000)) nil (26011 53656 65766 0) 0 nil])
([nil nil ((11998 . 12010)) nil (26011 53656 65765 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 12013 12041 nil nil nil t #s(yas--field 2 12043 12044 nil nil nil nil #s(yas--exit 12045 nil))) #s(yas--field 2 12043 12044 nil nil nil nil #s(yas--exit 12045 nil))) #s(yas--exit 12045 nil) 43 nil #s(yas--field 1 12013 12041 nil nil nil t #s(yas--field 2 12043 12044 nil nil nil nil #s(yas--exit 12045 nil))) nil nil)) (12008 . 12018) (#("swap(${1:x}, ${2:y})$0" 0 22 (fontified nil)) . 12008) (12008 . 12030) (#("sw" 0 2 (fontified nil)) . 12008) (12008 . 12010) (#("swap(…)" 0 7 (fontified nil)) . -12008) (12008 . 12015) (#("sw" 0 2 (fontified t)) . -12008) (undo-tree-id4508 . -2) 12010) nil (26011 53656 65763 0) 0 nil])
([nil nil ((12014 . 12023) (#("x" 0 1 (fontified nil)) . 12014) (12013 . 12014)) nil (26011 53656 65758 0) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -12020) (undo-tree-id4502 . -1) (undo-tree-id4503 . -1) (#("f" 0 1 (fontified t)) . -12021) (undo-tree-id4504 . -1) (undo-tree-id4505 . -1) (#("." 0 1 (fontified t)) . -12022) (undo-tree-id4506 . -1) (undo-tree-id4507 . -1) 12023) nil (26011 53656 65756 0) 0 nil])
([nil nil ((12020 . 12023)) nil (26011 53656 65748 0) 0 nil])
([nil nil ((12023 . 12041) (#("diffuse_bind_group" 0 18 (fontified nil)) . -12023) (12023 . 12041)) nil (26011 53656 65746 0) 0 nil])
([nil nil ((apply yas--snippet-revive 12008 12045 #s(yas--snippet nil (#s(yas--field 1 12013 12041 nil nil nil t #s(yas--field 2 12043 12044 nil nil nil nil #s(yas--exit 12045 nil))) #s(yas--field 2 12043 12044 nil nil nil nil #s(yas--exit 12045 nil))) #s(yas--exit 12045 nil) 43 nil #s(yas--field 1 12013 12041 nil nil nil t #s(yas--field 2 12043 12044 nil nil nil nil #s(yas--exit 12045 nil))) nil nil))) nil (26011 53656 65745 0) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -12043) (undo-tree-id4499 . -1) (undo-tree-id4500 . -1) (undo-tree-id4501 . -1) 12044) nil (26011 53656 65743 0) 0 nil])
([nil nil ((12043 . 12053)) nil (26011 53656 65732 0) 0 nil])
([nil nil ((12053 . 12073) (#("diffuse_bind_group_1" 0 20 (fontified nil)) . -12053) (12053 . 12073)) nil (26011 53667 217115 0) 0 nil])
([nil nil ((11982 . 11984)) nil (26011 53671 363981 0) 0 nil] [nil nil ((12074 . 12075)) ((#(";" 0 1 (fontified t)) . 12074) (undo-tree-id4509 . -1) (undo-tree-id4510 . -1) (undo-tree-id4511 . -1) (undo-tree-id4512 . -1) (undo-tree-id4513 . -1) (undo-tree-id4514 . -1) (undo-tree-id4515 . -1) (undo-tree-id4516 . -1) (undo-tree-id4517 . -1) (undo-tree-id4518 . -1) (undo-tree-id4519 . -1) (undo-tree-id4520 . -1) (undo-tree-id4521 . -1) (undo-tree-id4522 . -1) (undo-tree-id4523 . -1) (undo-tree-id4524 . -1) (undo-tree-id4525 . -1) (undo-tree-id4526 . -1) (undo-tree-id4527 . -1) (t 26011 53656 85020 475000)) (26011 53656 65725 0) 0 nil])
([nil nil ((11896 . 11897)) nil (26011 53671 364245 0) 0 nil])
nil
([nil nil ((11897 . 11898)) nil (26011 53676 76942 0) 0 nil] [nil nil ((#("." 0 1 (fontified t)) . -11896) (undo-tree-id4528 . -1) (undo-tree-id4529 . -1) (undo-tree-id4530 . -1) (undo-tree-id4531 . -1) 11897) ((11896 . 11897)) (26011 53671 363976 0) 0 nil])
([nil nil ((11894 . 11896)) nil (26011 53676 76941 0) 0 nil])
nil
([nil nil ((#("." 0 1 (face font-lock-comment-face fontified t)) . -11898) (undo-tree-id4532 . -1) (undo-tree-id4533 . -1) (undo-tree-id4534 . -1) (undo-tree-id4535 . -1) (undo-tree-id4536 . -1) (undo-tree-id4537 . -1) (undo-tree-id4538 . -1) (undo-tree-id4539 . -1) (undo-tree-id4540 . -1) (#("/" 0 1 (face font-lock-comment-face fontified t)) . -11899) (undo-tree-id4541 . -1) (undo-tree-id4542 . -1) (undo-tree-id4543 . -1) 11900) nil (26011 53707 342952 0) 0 nil])
([nil nil ((13850 . 13859) (t 26011 53708 487787 533000)) nil (26011 53766 757270 0) 0 nil] [nil nil ((#("png" 0 3 (face font-lock-string-face fontified t)) . -6418) (undo-tree-id4587 . -3) (undo-tree-id4588 . -1) (undo-tree-id4589 . -2) (undo-tree-id4590 . -3) 6421 (t 26011 53676 95785 214000)) ((6418 . 6421)) (26011 53706 596915 0) 0 nil])
([nil nil ((13859 . 13872)) nil (26011 53766 757269 0) 0 nil])
([nil nil ((#("tree." 0 5 (face font-lock-string-face fontified t)) . -6413) (undo-tree-id4566 . -5) (undo-tree-id4567 . -4) (undo-tree-id4568 . -4) (undo-tree-id4569 . -4) (undo-tree-id4570 . -4) (undo-tree-id4571 . -4) (undo-tree-id4572 . -4) (undo-tree-id4573 . -4) (undo-tree-id4574 . -4) (undo-tree-id4575 . -4) (undo-tree-id4576 . -4) (undo-tree-id4577 . -5) (undo-tree-id4578 . -5) (undo-tree-id4579 . -5) (undo-tree-id4580 . -5) (undo-tree-id4581 . -5) (undo-tree-id4582 . -5) (undo-tree-id4583 . -5) (undo-tree-id4584 . -5) (undo-tree-id4585 . -5) (undo-tree-id4586 . -5) 6418) ((6413 . 6418)) (26011 53705 538762 0) 0 nil])
([nil nil ((13867 . 13881) (#("index" 0 5 (fontified nil)) . 13867) (13867 . 13872) (#("pipeline_index" 0 14 (fontified nil)) . -13867) (13867 . 13881) (#("index" 0 5 (fontified t)) . -13867) (undo-tree-id4634 . -5) (undo-tree-id4635 . -1) (undo-tree-id4636 . -1) (undo-tree-id4637 . -2) (undo-tree-id4638 . -2) (undo-tree-id4639 . -2) (undo-tree-id4640 . -2) (undo-tree-id4641 . -3) (undo-tree-id4642 . -3) (undo-tree-id4643 . -4) (undo-tree-id4644 . -4) (undo-tree-id4645 . -5) (undo-tree-id4646 . -5) (undo-tree-id4647 . -5) (undo-tree-id4648 . -5) (undo-tree-id4649 . -5) 13872) nil (26011 53766 757266 0) 0 nil])
([nil nil ((#("happy-" 0 6 (face font-lock-string-face fontified t)) . -6407) (undo-tree-id4544 . -6) (undo-tree-id4545 . -6) (undo-tree-id4546 . -6) (undo-tree-id4547 . -6) (undo-tree-id4548 . -6) (undo-tree-id4549 . -6) (undo-tree-id4550 . -6) (undo-tree-id4551 . -6) (undo-tree-id4552 . -6) (undo-tree-id4553 . -6) (undo-tree-id4554 . -6) (undo-tree-id4555 . -6) (undo-tree-id4556 . -6) (undo-tree-id4557 . -6) (undo-tree-id4558 . -6) (undo-tree-id4559 . -6) (undo-tree-id4560 . -6) (undo-tree-id4561 . -6) (undo-tree-id4562 . -6) (undo-tree-id4563 . -6) (undo-tree-id4564 . -6) (undo-tree-id4565 . -6) 6413) ((6407 . 6413)) (26011 53705 269803 0) 0 nil])
([nil nil ((13881 . 13883)) nil (26011 53766 757248 0) 0 nil])
([nil nil ((6407 . 6413)) ((#("1.jpeg" 0 6 (face font-lock-string-face fontified t)) . 6407) (undo-tree-id4591 . -6) (undo-tree-id4592 . -6) (undo-tree-id4593 . -6) (undo-tree-id4594 . -6) (undo-tree-id4595 . -6) (undo-tree-id4596 . -6) (undo-tree-id4597 . -6) (undo-tree-id4598 . -6) (undo-tree-id4599 . -6) (undo-tree-id4600 . -6) (undo-tree-id4601 . -6) (undo-tree-id4602 . -6) (undo-tree-id4603 . -6) (undo-tree-id4604 . -6) (undo-tree-id4605 . -6) (undo-tree-id4606 . -6) (undo-tree-id4607 . -6) (undo-tree-id4608 . -6) (undo-tree-id4609 . -6) (undo-tree-id4610 . -6) (undo-tree-id4611 . -6) (undo-tree-id4612 . -6) (t 26011 53696 144536 213000)) (26011 53696 125774 0) 0 nil])
([nil nil ((13883 . 13887)) nil (26011 53766 757247 0) 0 nil])
nil
([nil nil ((13888 . 13896) (#("            " 0 12 (fontified nil)) . 13887) (undo-tree-id4631 . -8) (undo-tree-id4632 . -8) (undo-tree-id4633 . -8) (13895 . 13899) (13886 . 13896)) nil (26011 53766 757246 0) 0 nil])
([nil nil ((#("render_pass.set_bind_group(0, &self.diffuse_bind_group, &[]); // NEW!" 0 26 (fontified t) 26 27 (face (rainbow-delimiters-depth-3-face) fontified t) 27 30 (fontified t) 30 31 (face rust-ampersand-face fontified t) 31 35 (face font-lock-keyword-face fontified t) 35 56 (fontified t) 56 57 (face rust-ampersand-face fontified t) 57 58 (face (rainbow-delimiters-depth-4-face) fontified t) 58 59 (face (rainbow-delimiters-depth-4-face) fontified t) 59 60 (face (rainbow-delimiters-depth-3-face) fontified t) 60 62 (fontified t) 62 65 (face font-lock-comment-delimiter-face fontified t) 65 69 (face font-lock-comment-face fontified t)) . 13906) (undo-tree-id4629 . -46) (undo-tree-id4630 . -69)) nil (26011 53766 757241 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 13955 . 13956) (nil fontified nil 13952 . 13956) (nil fontified nil 13949 . 13952) (nil fontified nil 13947 . 13949) (nil fontified nil 13946 . 13947) (nil fontified nil 13945 . 13946) (nil fontified nil 13944 . 13945) (nil fontified nil 13943 . 13944) (nil fontified nil 13922 . 13943) (nil fontified nil 13918 . 13922) (nil fontified nil 13917 . 13918) (nil fontified nil 13914 . 13917) (nil fontified nil 13913 . 13914) (nil fontified nil 13887 . 13913) (13887 . 13956)) nil (26011 53766 757237 0) 0 nil])
([nil nil ((13887 . 13899) 13956) nil (26011 53766 757233 0) 0 nil])
([nil nil ((13978 . 13986)) nil (26011 53766 757231 0) 0 nil])
([nil nil ((13987 . 13995) (#("            " 0 12 (fontified nil)) . 13986) (undo-tree-id4624 . -8) (undo-tree-id4625 . -8) (undo-tree-id4626 . -8) (undo-tree-id4627 . -8) (undo-tree-id4628 . -8) (13994 . 13998) (13985 . 13995)) nil (26011 53766 757230 0) 0 nil])
([nil nil ((13986 . 13998)) nil (26011 53766 757223 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 14066 . 14067) (nil fontified nil 14063 . 14067) (nil fontified nil 14060 . 14063) (nil fontified nil 14058 . 14060) (nil fontified nil 14057 . 14058) (nil fontified nil 14056 . 14057) (nil fontified nil 14055 . 14056) (nil fontified nil 14054 . 14055) (nil fontified nil 14033 . 14054) (nil fontified nil 14029 . 14033) (nil fontified nil 14028 . 14029) (nil fontified nil 14025 . 14028) (nil fontified nil 14024 . 14025) (nil fontified nil 13998 . 14024) (13998 . 14067)) nil (26011 53766 757221 0) 0 nil])
([nil nil ((14052 . 14053)) nil (26011 53766 757216 0) 0 nil])
([nil nil ((14034 . 14054) (#("diffuse_bind_group_" 0 19 (fontified nil)) . 14034) (14034 . 14053) (#("diffuse_bind_group_1" 0 20 (fontified nil)) . -14034) (14034 . 14054) (#("diffuse_bind_group_" 0 19 (fontified t)) . -14034) (undo-tree-id4613 . -19) (undo-tree-id4614 . -18) (undo-tree-id4615 . -18) (undo-tree-id4616 . -18) (undo-tree-id4617 . -18) (undo-tree-id4618 . -18) (undo-tree-id4619 . -18) (undo-tree-id4620 . -19) (undo-tree-id4621 . -18) (undo-tree-id4622 . -19) (undo-tree-id4623 . -19) 14053) nil (26011 53766 757212 0) 0 nil])
([nil nil ((12095 . 12111) (11984 . 12000) (12078 . 12079) (t 26011 53766 776264 102000)) nil (26011 53832 311058 0) 0 nil])
([nil nil ((12111 . 12118)) nil (26011 53832 311057 0) 0 nil])
([nil nil ((12118 . 12121)) nil (26011 53832 311056 0) 0 nil])
([nil nil ((12116 . 12130) (#("index" 0 5 (fontified nil)) . 12116) (12116 . 12121) (#("pipeline_index" 0 14 (fontified nil)) . -12116) (12116 . 12130) (#("index" 0 5 (fontified t)) . -12116) (undo-tree-id4752 . -5) (undo-tree-id4753 . -1) (undo-tree-id4754 . -1) (undo-tree-id4755 . -1) (undo-tree-id4756 . -2) (undo-tree-id4757 . -2) (undo-tree-id4758 . -2) (undo-tree-id4759 . -2) (undo-tree-id4760 . -3) (undo-tree-id4761 . -3) (undo-tree-id4762 . -3) (undo-tree-id4763 . -4) (undo-tree-id4764 . -4) (undo-tree-id4765 . -5) (undo-tree-id4766 . -5) (undo-tree-id4767 . -5) (undo-tree-id4768 . -5) 12121) nil (26011 53832 311053 0) 0 nil])
([nil nil ((12130 . 12131)) nil (26011 53832 311035 0) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -12130) (undo-tree-id4747 . -1) (undo-tree-id4748 . -1) (undo-tree-id4749 . -1) (undo-tree-id4750 . -1) (undo-tree-id4751 . -1) 12131) nil (26011 53832 311033 0) 0 nil])
([nil nil ((12130 . 12133)) nil (26011 53832 311026 0) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -12131) (undo-tree-id4741 . -1) (undo-tree-id4742 . -1) (undo-tree-id4743 . -1) (undo-tree-id4744 . -1) (#(" " 0 1 (fontified t)) . -12132) (undo-tree-id4745 . -1) (undo-tree-id4746 . -1) 12133) nil (26011 53832 311024 0) 0 nil])
([nil nil ((12131 . 12133)) nil (26011 53832 311017 0) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . -12132) (undo-tree-id4736 . -1) (undo-tree-id4737 . -1) (undo-tree-id4738 . -1) (undo-tree-id4739 . -1) (undo-tree-id4740 . -1) 12133) nil (26011 53832 311016 0) 0 nil])
([nil nil ((12132 . 12134)) nil (26011 53832 311010 0) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -12133) (undo-tree-id4732 . -1) (undo-tree-id4733 . -1) (undo-tree-id4734 . -1) (undo-tree-id4735 . -1) 12134) nil (26011 53832 311008 0) 0 nil])
([nil nil ((12133 . 12135)) nil (26011 53832 311003 0) 0 nil])
([nil nil ((12095 . 12096)) nil (26011 53832 311002 0) 0 nil])
([nil nil ((12095 . 12111)) nil (26011 53832 311001 0) 0 nil])
([nil nil ((12111 . 12117)) nil (26011 53832 311000 0) 0 nil])
([nil nil ((12114 . 12118) (#("sel" 0 3 (fontified nil)) . 12114) (12114 . 12117) (#("self" 0 4 (fontified nil)) . -12114) (12114 . 12118) (#("sel" 0 3 (fontified t)) . -12114) (undo-tree-id4720 . -3) (undo-tree-id4721 . -1) (undo-tree-id4722 . -1) (undo-tree-id4723 . -1) (undo-tree-id4724 . -1) (undo-tree-id4725 . -2) (undo-tree-id4726 . -2) (undo-tree-id4727 . -2) (undo-tree-id4728 . -3) (undo-tree-id4729 . -3) (undo-tree-id4730 . -3) (undo-tree-id4731 . -3) 12117) nil (26011 53832 310999 0) 0 nil])
([nil nil ((12118 . 12120)) nil (26011 53832 310983 0) 0 nil])
([nil nil ((12119 . 12133) (#("p" 0 1 (fontified nil)) . 12119) (12119 . 12120) (#("pipeline_index" 0 14 (fontified nil)) . -12119) (12119 . 12133) (#("p" 0 1 (fontified t)) . -12119) (undo-tree-id4714 . -1) (undo-tree-id4715 . -1) (undo-tree-id4716 . -1) (undo-tree-id4717 . -1) (undo-tree-id4718 . -1) (undo-tree-id4719 . -1) 12120) nil (26011 53832 310982 0) 0 nil])
([nil nil ((12133 . 12134)) nil (26011 53832 310973 0) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -12133) (undo-tree-id4711 . -1) (undo-tree-id4712 . -1) (undo-tree-id4713 . -1) 12134) nil (26011 53832 310972 0) 0 nil])
([nil nil ((12133 . 12138)) nil (26011 53832 310968 0) 0 nil])
([nil nil ((12095 . 12096)) nil (26011 53832 310967 0) 0 nil])
([nil nil ((#("{" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -12095) (undo-tree-id4702 . -1) (undo-tree-id4703 . -1) (undo-tree-id4704 . -1) (undo-tree-id4705 . -1) (undo-tree-id4706 . -1) (undo-tree-id4707 . -1) (undo-tree-id4708 . -1) (undo-tree-id4709 . -1) (undo-tree-id4710 . -1) 12096) nil (26011 53832 310965 0) 0 nil])
([nil nil ((12139 . 12140)) nil (26011 53832 310950 0) 0 nil])
([nil nil ((12139 . 12155) (12180 . 12181)) nil (26011 53832 310949 0) 0 nil])
([nil nil ((12157 . 12177) (#("                " 0 16 (fontified nil)) . 12156) (undo-tree-id4698 . -16) (undo-tree-id4699 . -16) (undo-tree-id4700 . -16) (undo-tree-id4701 . -16) (12172 . 12173)) nil (26011 53832 310947 0) 0 nil])
([nil nil ((12201 . 12218)) nil (26011 53832 310942 0) 0 nil])
([nil nil ((12219 . 12220)) nil (26011 53832 310941 0) 0 nil])
([nil nil ((#("0
                " 0 1 (fontified t) 1 2 (fontified t) 2 18 (fontified t)) . -12137) (undo-tree-id4673 . -18) (undo-tree-id4674 . -2) (undo-tree-id4675 . -2) (undo-tree-id4676 . -1) (undo-tree-id4677 . 17) (undo-tree-id4678 . -1) (undo-tree-id4679 . -1) (undo-tree-id4680 . -2) (undo-tree-id4681 . -2) (undo-tree-id4682 . -2) (undo-tree-id4683 . -2) (undo-tree-id4684 . -2) (undo-tree-id4685 . -2) (undo-tree-id4686 . -2) (undo-tree-id4687 . -2) (undo-tree-id4688 . -18) (undo-tree-id4689 . -2) (undo-tree-id4690 . -2) (undo-tree-id4691 . -2) (undo-tree-id4692 . -2) (undo-tree-id4693 . -2) (undo-tree-id4694 . -2) (undo-tree-id4695 . -2) (undo-tree-id4696 . -2) (undo-tree-id4697 . -18) 12155) nil (26011 53832 310939 0) 0 nil])
([nil nil ((12137 . 12138)) nil (26011 53832 310913 0) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -12137) (undo-tree-id4669 . -1) (undo-tree-id4670 . -1) (undo-tree-id4671 . -1) (undo-tree-id4672 . -1) 12138) nil (26011 53832 310912 0) 0 nil])
([nil nil ((12137 . 12139)) nil (26011 53832 310907 0) 0 nil])
([nil nil ((12204 . 12211)) nil (26011 53832 310906 0) 0 nil])
([nil nil ((12212 . 12228) (#("                    " 0 20 (fontified nil)) . 12211) (undo-tree-id4666 . -16) (undo-tree-id4667 . -16) (undo-tree-id4668 . -16) (12227 . 12231) (12210 . 12228)) nil (26011 53832 310905 0) 0 nil])
([nil nil ((12211 . 12231)) nil (26011 53832 310900 0) 0 nil])
([nil nil ((12231 . 12234)) nil (26011 53832 310899 0) 0 nil])
([nil nil ((12231 . 12235) (#("sel" 0 3 (fontified nil)) . 12231) (12231 . 12234) (#("self" 0 4 (fontified nil)) . -12231) (12231 . 12235) (#("sel" 0 3 (fontified t)) . -12231) (undo-tree-id4660 . -3) (undo-tree-id4661 . -1) (undo-tree-id4662 . -2) (undo-tree-id4663 . -2) (undo-tree-id4664 . -3) (undo-tree-id4665 . -3) 12234) nil (26011 53832 310897 0) 0 nil])
([nil nil ((12235 . 12237)) nil (26011 53832 310889 0) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -12236) (undo-tree-id4657 . -1) (undo-tree-id4658 . -1) (undo-tree-id4659 . -1) 12237) nil (26011 53832 310888 0) 0 nil])
([nil nil ((12236 . 12237)) nil (26011 53832 310883 0) 0 nil])
([nil nil ((12236 . 12250) (#("p" 0 1 (fontified nil)) . 12236) (12236 . 12237) (#("pipeline_index" 0 14 (fontified nil)) . -12236) (12236 . 12250) (#("p" 0 1 (fontified t)) . -12236) (undo-tree-id4652 . -1) (undo-tree-id4653 . -1) (undo-tree-id4654 . -1) (undo-tree-id4655 . -1) (undo-tree-id4656 . -1) 12237) nil (26011 53832 310882 0) 0 nil])
([nil nil ((12250 . 12251)) nil (26011 53832 310874 0) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -12250) (undo-tree-id4650 . -1) (undo-tree-id4651 . -1) 12251) nil (26011 53832 310872 0) 0 nil])
([nil nil ((12250 . 12255)) nil (26011 53832 310857 0) 0 nil])
([nil nil ((#("index" 0 5 (fontified t)) . -14031) (undo-tree-id4784 . -5) (undo-tree-id4785 . -5) (undo-tree-id4786 . -5) (undo-tree-id4787 . -5) (undo-tree-id4788 . -5) (undo-tree-id4789 . -5) 14036 (t 26011 53832 330313 182000)) nil (26011 53884 976584 0) 0 nil])
([nil nil ((#("pipeline_" 0 9 (fontified t)) . -14022) (undo-tree-id4777 . -9) (undo-tree-id4778 . -9) (undo-tree-id4779 . -9) (undo-tree-id4780 . -9) (undo-tree-id4781 . -9) (undo-tree-id4782 . -9) (undo-tree-id4783 . -9) 14031) nil (26011 53884 976576 0) 0 nil])
([nil nil ((#("self." 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t)) . -14017) (undo-tree-id4769 . -5) (undo-tree-id4770 . -5) (undo-tree-id4771 . -5) (undo-tree-id4772 . -5) (undo-tree-id4773 . -5) (undo-tree-id4774 . -5) (undo-tree-id4775 . -5) (undo-tree-id4776 . -5) 14022) nil (26011 53884 976567 0) 0 nil])
([nil nil ((14017 . 14018)) nil (26011 53884 976544 0) 0 nil])
([nil nil ((14145 . 14158) (t 26011 53884 996718 605000)) nil (26011 54406 23655 0) 0 nil])
([nil nil ((14158 . 14160)) nil (26011 54406 23654 0) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -14158) (undo-tree-id4813 . -1) (#("n" 0 1 (fontified t)) . -14159) (undo-tree-id4814 . -1) 14160) nil (26011 54406 23653 0) 0 nil])
([nil nil ((14158 . 14160)) nil (26011 54406 23649 0) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -14159) (undo-tree-id4812 . -1) 14160) nil (26011 54406 23648 0) 0 nil])
([nil nil ((14158 . 14168) (#("q" 0 1 (fontified nil)) . 14158) (14158 . 14159) (#("self.queue" 0 10 (fontified nil)) . -14158) (14158 . 14168) (#("q" 0 1 (fontified t)) . -14158) (undo-tree-id4811 . -1) 14159) nil (26011 54406 23645 0) 0 nil])
([nil nil ((14168 . 14171)) nil (26011 54406 23641 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 14183 14190 nil nil nil nil #s(yas--field 2 14192 14196 nil nil nil nil #s(yas--field 3 14198 14209 nil nil nil nil #s(yas--field 4 14211 14215 nil nil nil nil #s(yas--exit 14216 nil))))) #s(yas--field 2 14192 14196 nil nil nil nil #s(yas--field 3 14198 14209 nil nil nil nil #s(yas--field 4 14211 14215 nil nil nil nil #s(yas--exit 14216 nil)))) #s(yas--field 3 14198 14209 nil nil nil nil #s(yas--field 4 14211 14215 nil nil nil nil #s(yas--exit 14216 nil))) #s(yas--field 4 14211 14215 nil nil nil nil #s(yas--exit 14216 nil))) #s(yas--exit 14216 nil) 44 nil #s(yas--field 1 14183 14190 nil nil nil nil #s(yas--field 2 14192 14196 nil nil nil nil #s(yas--field 3 14198 14209 nil nil nil nil #s(yas--field 4 14211 14215 nil nil nil nil #s(yas--exit 14216 nil))))) nil nil)) (14169 . 14216) (#("write_texture(${1:texture}, ${2:data}, ${3:data_layout}, ${4:size})$0" 0 69 (fontified nil)) . 14169) (14169 . 14238) (#("wr" 0 2 (fontified nil)) . 14169) (14169 . 14171) (#("write_texture(…)" 0 16 (fontified nil)) . -14169) (14169 . 14185) (#("wr" 0 2 (fontified t)) . -14169) (undo-tree-id4810 . -2) 14171) nil (26011 54406 23640 0) 0 nil])
([nil nil ((apply yas--snippet-revive 14169 14216 #s(yas--snippet nil (#s(yas--field 1 14183 14190 nil nil nil nil #s(yas--field 2 14192 14196 nil nil nil nil #s(yas--field 3 14198 14209 nil nil nil nil #s(yas--field 4 14211 14215 nil nil nil nil #s(yas--exit 14216 nil))))) #s(yas--field 2 14192 14196 nil nil nil nil #s(yas--field 3 14198 14209 nil nil nil nil #s(yas--field 4 14211 14215 nil nil nil nil #s(yas--exit 14216 nil)))) #s(yas--field 3 14198 14209 nil nil nil nil #s(yas--field 4 14211 14215 nil nil nil nil #s(yas--exit 14216 nil))) #s(yas--field 4 14211 14215 nil nil nil nil #s(yas--exit 14216 nil))) #s(yas--exit 14216 nil) 44 nil #s(yas--field 1 14183 14190 nil nil nil nil #s(yas--field 2 14192 14196 nil nil nil nil #s(yas--field 3 14198 14209 nil nil nil nil #s(yas--field 4 14211 14215 nil nil nil nil #s(yas--exit 14216 nil))))) nil nil))) nil (26011 54406 23635 0) 0 nil])
([nil nil ((#("            self.queue.write_texture(texture, data, data_layout, size)" 0 12 (fontified t) 12 16 (face font-lock-keyword-face fontified t) 16 23 (fontified t) 23 36 (fontified t) 36 37 (face (rainbow-delimiters-depth-4-face) fontified t) 37 69 (fontified t) 69 70 (face (rainbow-delimiters-depth-4-face) fontified t)) . 14146) (undo-tree-id4807 . -37) (undo-tree-id4808 . -65) (undo-tree-id4809 . -65)) nil (26011 54406 23634 0) 0 nil])
([nil nil ((14146 . 14158)) nil (26011 54406 23630 0) 0 nil])
([nil nil ((#("
" 0 1 (face font-lock-comment-face fontified t)) . -14145) (undo-tree-id4790 . -1) (undo-tree-id4791 . -1) (undo-tree-id4792 . -1) (undo-tree-id4793 . -1) (undo-tree-id4794 . -1) (#(" " 0 1 (fontified t)) . -14146) (undo-tree-id4795 . -1) (#(" " 0 1 (fontified t)) . -14147) (undo-tree-id4796 . -1) (#(" " 0 1 (fontified t)) . -14148) (undo-tree-id4797 . -1) (#(" " 0 1 (fontified t)) . -14149) (undo-tree-id4798 . -1) (#(" " 0 1 (fontified t)) . -14150) (undo-tree-id4799 . -1) (#(" " 0 1 (fontified t)) . -14151) (undo-tree-id4800 . -1) (#(" " 0 1 (fontified t)) . -14152) (undo-tree-id4801 . -1) (#(" " 0 1 (fontified t)) . -14153) (undo-tree-id4802 . -1) (#(" " 0 1 (fontified t)) . -14154) (undo-tree-id4803 . -1) (#(" " 0 1 (fontified t)) . -14155) (undo-tree-id4804 . -1) (#(" " 0 1 (fontified t)) . -14156) (undo-tree-id4805 . -1) (#(" " 0 1 (fontified t)) . -14157) (undo-tree-id4806 . -1) 14158) nil (26011 54406 23624 0) 0 nil])
([nil nil ((#("        } else {" 0 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-3-face) fontified t) 9 10 (fontified t) 10 14 (face font-lock-keyword-face fontified t) 14 15 (fontified t) 15 16 (face (rainbow-delimiters-depth-3-face) fontified t)) . 14146) (undo-tree-id4844 . -16) (undo-tree-id4845 . -4) (undo-tree-id4846 . -9) (undo-tree-id4847 . -9) (undo-tree-id4848 . -9) (undo-tree-id4849 . -16) (undo-tree-id4850 . -16) (undo-tree-id4851 . -16) (undo-tree-id4852 . -16) (undo-tree-id4853 . -16) (undo-tree-id4854 . -16) (undo-tree-id4855 . -16) (undo-tree-id4856 . -16) (undo-tree-id4857 . -16) (undo-tree-id4858 . -16) (undo-tree-id4859 . -16) (undo-tree-id4860 . -16) (undo-tree-id4861 . -16) (undo-tree-id4862 . -14) (undo-tree-id4863 . -13) (undo-tree-id4864 . -12) (undo-tree-id4865 . -11) (undo-tree-id4866 . -10) (undo-tree-id4867 . -9) (undo-tree-id4868 . -8) (undo-tree-id4869 . -7) (undo-tree-id4870 . -6) (undo-tree-id4871 . -5) (undo-tree-id4872 . -16) (undo-tree-id4873 . -4) (undo-tree-id4874 . -4) (undo-tree-id4875 . -4) (undo-tree-id4876 . -4) (undo-tree-id4877 . -4) (undo-tree-id4878 . -4) (undo-tree-id4879 . -16) (t 26011 54406 43609 279000)) nil (26011 54421 377073 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 14146) (undo-tree-id4843 . -1)) nil (26011 54421 377037 0) 0 nil])
([nil nil ((#("        }" 0 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-3-face) fontified t)) . 14230) (undo-tree-id4835 . -9) (undo-tree-id4836 . -9) (undo-tree-id4837 . -9) (undo-tree-id4838 . -9) (undo-tree-id4839 . -9) (undo-tree-id4840 . -9) (undo-tree-id4841 . -9) (undo-tree-id4842 . -9)) nil (26011 54421 377034 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 14230) (undo-tree-id4834 . -1)) nil (26011 54421 377024 0) 0 nil])
([nil nil ((#("    if self.pipeline_index==0 {" 0 4 (fontified t) 4 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 30 (fontified t) 30 31 (face (rainbow-delimiters-depth-3-face) fontified t)) . 14032) (undo-tree-id4833 . -31)) nil (26011 54421 377022 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 14032) (undo-tree-id4831 . -1) (undo-tree-id4832 . -1)) nil (26011 54421 377020 0) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -14036) 14032) nil (26011 54421 377017 0) 0 nil])
([nil nil ((#("    render_pass.set_bind_group(0, &self.diffuse_bind_group_1, &[]); // NEW!" 0 4 (fontified t) 4 30 (fontified t) 30 31 (face (rainbow-delimiters-depth-3-face) fontified t) 31 34 (fontified t) 34 35 (face rust-ampersand-face fontified t) 35 39 (face font-lock-keyword-face fontified t) 39 40 (fontified t) 40 60 (fontified t) 60 62 (fontified t) 62 63 (face rust-ampersand-face fontified t) 63 64 (face (rainbow-delimiters-depth-4-face) fontified t) 64 65 (face (rainbow-delimiters-depth-4-face) fontified t) 65 66 (face (rainbow-delimiters-depth-3-face) fontified t) 66 68 (fontified t) 68 71 (face font-lock-comment-delimiter-face fontified t) 71 74 (face font-lock-comment-face fontified t) 74 75 (face font-lock-comment-face fontified t rear-nonsticky t)) . 14114) (undo-tree-id4827 . -75) (undo-tree-id4828 . -5) (undo-tree-id4829 . -3) (undo-tree-id4830 . -75)) nil (26011 54421 377015 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 14114) (undo-tree-id4815 . -1) (undo-tree-id4816 . -1) (undo-tree-id4817 . -1) (undo-tree-id4818 . -1) (undo-tree-id4819 . -1) (undo-tree-id4820 . -1) (undo-tree-id4821 . -1) (undo-tree-id4822 . -1) (undo-tree-id4823 . -1) (undo-tree-id4824 . -1) (undo-tree-id4825 . -1) (undo-tree-id4826 . -1)) nil (26011 54421 377007 0) 0 nil])
([nil nil ((12185 . 12206) (t 26011 54421 397419 491000)) nil (26011 54452 468166 0) 0 nil])
([nil nil ((12187 . 12207) (#("                    " 0 20 (fontified nil)) . 12186) (undo-tree-id5075 . -20) (undo-tree-id5076 . -20) (undo-tree-id5077 . -20) (12206 . 12207)) nil (26011 54452 468164 0) 0 nil])
([nil nil ((12186 . 12206)) nil (26011 54452 468160 0) 0 nil])
([nil nil ((12206 . 12208)) nil (26011 54452 468159 0) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -12206) (undo-tree-id5062 . -1) (undo-tree-id5063 . -1) (undo-tree-id5064 . -1) (undo-tree-id5065 . -1) (undo-tree-id5066 . -1) (undo-tree-id5067 . -1) (undo-tree-id5068 . -1) (undo-tree-id5069 . -1) (#("e" 0 1 (fontified t)) . -12207) (undo-tree-id5070 . -1) (undo-tree-id5071 . -1) (undo-tree-id5072 . -1) (undo-tree-id5073 . -1) (undo-tree-id5074 . -1) 12208) nil (26011 54452 468157 0) 0 nil])
([nil nil ((#("           diffuse_bind_group_1,
            diffuse_texture_1," 0 11 (fontified t) 11 30 (fontified t) 30 31 (fontified t rear-nonsticky t) 31 32 (fontified t) 32 33 (fontified t) 33 45 (fontified t) 45 63 (fontified t)) . 10120) (undo-tree-id5041 . -63) (undo-tree-id5042 . -63) (undo-tree-id5043 . -63) (undo-tree-id5044 . -63) (undo-tree-id5045 . -62) (undo-tree-id5046 . -58) (undo-tree-id5047 . -56) (undo-tree-id5048 . -54) (undo-tree-id5049 . -53) (undo-tree-id5050 . -18) (undo-tree-id5051 . -17) (undo-tree-id5052 . -15) (undo-tree-id5053 . -14) (undo-tree-id5054 . -13) (undo-tree-id5055 . -12) (undo-tree-id5056 . -11) (undo-tree-id5057 . -10) (undo-tree-id5058 . -9) (undo-tree-id5059 . -8) (undo-tree-id5060 . -1) (undo-tree-id5061 . -63)) nil (26011 54452 468142 0) 0 nil])
([nil nil ((#("
" 0 1 (face font-lock-comment-face fontified t)) . -10118) (undo-tree-id4973 . -1) (undo-tree-id4974 . -1) (undo-tree-id4975 . -1) (undo-tree-id4976 . -1) (undo-tree-id4977 . -1) (undo-tree-id4978 . -1) (undo-tree-id4979 . -1) (undo-tree-id4980 . -1) (undo-tree-id4981 . -1) (undo-tree-id4982 . -1) (undo-tree-id4983 . -1) (undo-tree-id4984 . -1) (undo-tree-id4985 . -1) (undo-tree-id4986 . -1) (undo-tree-id4987 . -1) (undo-tree-id4988 . -1) (undo-tree-id4989 . -1) (undo-tree-id4990 . -1) (undo-tree-id4991 . -1) (undo-tree-id4992 . -1) (undo-tree-id4993 . -1) (undo-tree-id4994 . -1) (undo-tree-id4995 . -1) (undo-tree-id4996 . -1) (undo-tree-id4997 . -1) (undo-tree-id4998 . -1) (undo-tree-id4999 . -1) (undo-tree-id5000 . -1) (undo-tree-id5001 . -1) (undo-tree-id5002 . -1) (undo-tree-id5003 . -1) (undo-tree-id5004 . -1) (undo-tree-id5005 . -1) (undo-tree-id5006 . -1) (undo-tree-id5007 . -1) (undo-tree-id5008 . -1) (#(" " 0 1 (fontified t)) . -10119) (undo-tree-id5009 . -1) (undo-tree-id5010 . -1) (undo-tree-id5011 . -1) (undo-tree-id5012 . -1) (undo-tree-id5013 . -1) (undo-tree-id5014 . -1) (undo-tree-id5015 . -1) (undo-tree-id5016 . -1) (undo-tree-id5017 . -1) (undo-tree-id5018 . -1) (undo-tree-id5019 . -1) (undo-tree-id5020 . -1) (undo-tree-id5021 . -1) (undo-tree-id5022 . -1) (undo-tree-id5023 . -1) (undo-tree-id5024 . -1) (undo-tree-id5025 . -1) (undo-tree-id5026 . -1) (undo-tree-id5027 . -1) (undo-tree-id5028 . -1) (undo-tree-id5029 . -1) (undo-tree-id5030 . -1) (undo-tree-id5031 . -1) (undo-tree-id5032 . -1) (undo-tree-id5033 . -1) (undo-tree-id5034 . -1) (undo-tree-id5035 . -1) (undo-tree-id5036 . -1) (undo-tree-id5037 . -1) (undo-tree-id5038 . -1) (undo-tree-id5039 . -1) (undo-tree-id5040 . -1) 10120) nil (26011 54452 468117 0) 0 nil])
([nil nil ((#("
        let diffuse_texture_1 = texture::Texture::from_path(std::path::Path::new(\"1.jpeg\"), &device, &queue, None).unwrap();
        let diffuse_bind_group_1 = diffuse_texture.create_bind_group(&device, &texture_bind_group_layout);" 0 1 (fontified t) 1 5 (fontified t) 5 9 (fontified t) 9 12 (face font-lock-keyword-face fontified t) 12 13 (fontified t) 13 30 (face font-lock-variable-name-face fontified t) 30 33 (fontified t) 33 40 (face font-lock-constant-face fontified t) 40 42 (fontified t) 42 49 (face font-lock-type-face fontified t) 49 51 (fontified t) 51 60 (fontified t) 60 61 (face (rainbow-delimiters-depth-3-face) fontified t) 61 64 (face font-lock-constant-face fontified t) 64 66 (fontified t) 66 70 (face font-lock-constant-face fontified t) 70 72 (fontified t) 72 76 (face font-lock-type-face fontified t) 76 78 (fontified t) 78 81 (fontified t) 81 82 (face (rainbow-delimiters-depth-4-face) fontified t) 82 90 (face font-lock-string-face fontified t) 90 91 (face (rainbow-delimiters-depth-4-face) fontified t) 91 93 (fontified t) 93 94 (face rust-ampersand-face fontified t) 94 102 (fontified t) 102 103 (face rust-ampersand-face fontified t) 103 110 (fontified t) 110 114 (face font-lock-type-face fontified t) 114 115 (face (rainbow-delimiters-depth-3-face) fontified t) 115 116 (fontified t) 116 122 (fontified t) 122 123 (face (rainbow-delimiters-depth-3-face) fontified t) 123 124 (face (rainbow-delimiters-depth-3-face) fontified t) 124 125 (fontified t) 125 126 (fontified t rear-nonsticky t) 126 130 (fontified t) 130 134 (fontified t) 134 137 (face font-lock-keyword-face fontified t) 137 138 (fontified t) 138 158 (face font-lock-variable-name-face fontified t) 158 161 (fontified t) 161 177 (fontified t) 177 194 (fontified t) 194 195 (face (rainbow-delimiters-depth-3-face) fontified t) 195 196 (face rust-ampersand-face fontified t) 196 204 (fontified t) 204 205 (face rust-ampersand-face fontified t) 205 230 (fontified t) 230 231 (face (rainbow-delimiters-depth-3-face) fontified t) 231 232 (fontified t rear-nonsticky t)) . 6563) (undo-tree-id4943 . -232) (undo-tree-id4944 . -232) (undo-tree-id4945 . -232) (undo-tree-id4946 . -232) (undo-tree-id4947 . -230) (undo-tree-id4948 . -225) (undo-tree-id4949 . -221) (undo-tree-id4950 . -216) (undo-tree-id4951 . -212) (undo-tree-id4952 . -209) (undo-tree-id4953 . -202) (undo-tree-id4954 . -198) (undo-tree-id4955 . -65) (undo-tree-id4956 . -60) (undo-tree-id4957 . -51) (undo-tree-id4958 . -46) (undo-tree-id4959 . -40) (undo-tree-id4960 . -34) (undo-tree-id4961 . -31) (undo-tree-id4962 . -16) (undo-tree-id4963 . -13) (undo-tree-id4964 . -11) (undo-tree-id4965 . -10) (undo-tree-id4966 . -8) (undo-tree-id4967 . -6) (undo-tree-id4968 . -5) (undo-tree-id4969 . -4) (undo-tree-id4970 . -2) (undo-tree-id4971 . -1) (undo-tree-id4972 . -232)) nil (26011 54452 468048 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t rear-nonsticky t)) . -6562) (undo-tree-id4905 . -1) (undo-tree-id4906 . -1) (undo-tree-id4907 . -1) (undo-tree-id4908 . -1) (undo-tree-id4909 . -1) (undo-tree-id4910 . -1) (undo-tree-id4911 . -1) (undo-tree-id4912 . -1) (undo-tree-id4913 . -1) (undo-tree-id4914 . -1) (undo-tree-id4915 . -1) (undo-tree-id4916 . -1) (undo-tree-id4917 . -1) (undo-tree-id4918 . -1) (undo-tree-id4919 . -1) (undo-tree-id4920 . -1) (undo-tree-id4921 . -1) (undo-tree-id4922 . -1) (undo-tree-id4923 . -1) (undo-tree-id4924 . -1) (undo-tree-id4925 . -1) (undo-tree-id4926 . -1) (undo-tree-id4927 . -1) (undo-tree-id4928 . -1) (undo-tree-id4929 . -1) (undo-tree-id4930 . -1) (undo-tree-id4931 . -1) (undo-tree-id4932 . -1) (undo-tree-id4933 . -1) (undo-tree-id4934 . -1) (undo-tree-id4935 . -1) (undo-tree-id4936 . -1) (undo-tree-id4937 . -1) (undo-tree-id4938 . -1) (undo-tree-id4939 . -1) (undo-tree-id4940 . -1) (undo-tree-id4941 . -1) (undo-tree-id4942 . -1) 6563) nil (26011 54452 468016 0) 0 nil])
([nil nil ((#("
    diffuse_bind_group_1: wgpu::BindGroup,
    diffuse_texture_1: texture::Texture, // NEW" 0 1 (fontified t) 1 5 (fontified t) 5 25 (face font-lock-variable-name-face fontified t) 25 27 (fontified t) 27 31 (face font-lock-constant-face fontified t) 31 33 (fontified t) 33 42 (face font-lock-type-face fontified t) 42 44 (fontified t) 44 48 (fontified t) 48 65 (face font-lock-variable-name-face fontified t) 65 67 (fontified t) 67 74 (face font-lock-constant-face fontified t) 74 76 (fontified t) 76 83 (face font-lock-type-face fontified t) 83 85 (fontified t) 85 88 (face font-lock-comment-delimiter-face fontified t) 88 90 (face font-lock-comment-face fontified t) 90 91 (face font-lock-comment-face fontified t rear-nonsticky t)) . 2517) (undo-tree-id4880 . -91) (undo-tree-id4881 . -91) (undo-tree-id4882 . -91) (undo-tree-id4883 . -91) (undo-tree-id4884 . -90) (undo-tree-id4885 . -85) (undo-tree-id4886 . -81) (undo-tree-id4887 . -77) (undo-tree-id4888 . -75) (undo-tree-id4889 . -72) (undo-tree-id4890 . -70) (undo-tree-id4891 . -68) (undo-tree-id4892 . -67) (undo-tree-id4893 . -65) (undo-tree-id4894 . -62) (undo-tree-id4895 . -17) (undo-tree-id4896 . -14) (undo-tree-id4897 . -13) (undo-tree-id4898 . -11) (undo-tree-id4899 . -9) (undo-tree-id4900 . -8) (undo-tree-id4901 . -7) (undo-tree-id4902 . -6) (undo-tree-id4903 . -5) (undo-tree-id4904 . -91)) nil (26011 54452 467973 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 12051 . 12052) (nil fontified nil 12051 . 12052) (nil fontified nil 12050 . 12051) (nil fontified nil 12025 . 12050) (nil fontified nil 12024 . 12025) (nil fontified nil 12016 . 12024) (nil fontified nil 12015 . 12016) (nil fontified nil 12014 . 12015) (nil fontified nil 11997 . 12014) (nil fontified nil 11981 . 11997) (nil fontified nil 11978 . 11981) (nil fontified nil 11960 . 11978) (nil fontified nil 11959 . 11960) (nil fontified nil 11956 . 11959) (nil fontified nil 11948 . 11956) (nil fontified nil 11947 . 11948) (nil fontified nil 11946 . 11947) (nil fontified nil 11945 . 11946) (nil fontified nil 11944 . 11945) (nil fontified nil 11938 . 11944) (nil fontified nil 11937 . 11938) (nil fontified nil 11936 . 11937) (nil fontified nil 11932 . 11936) (nil fontified nil 11925 . 11932) (nil fontified nil 11924 . 11925) (nil fontified nil 11916 . 11924) (nil fontified nil 11915 . 11916) (nil fontified nil 11913 . 11915) (nil fontified nil 11912 . 11913) (nil fontified nil 11911 . 11912) (nil fontified nil 11908 . 11911) (nil fontified nil 11903 . 11908) (nil fontified nil 11897 . 11903) (nil fontified nil 11896 . 11897) (nil fontified nil 11895 . 11896) (nil fontified nil 11892 . 11895) (nil fontified nil 11890 . 11892) (nil fontified nil 11886 . 11890) (nil fontified nil 11884 . 11886) (nil fontified nil 11880 . 11884) (nil fontified nil 11878 . 11880) (nil fontified nil 11875 . 11878) (nil fontified nil 11874 . 11875) (nil fontified nil 11865 . 11874) (nil fontified nil 11863 . 11865) (nil fontified nil 11856 . 11863) (nil fontified nil 11854 . 11856) (nil fontified nil 11847 . 11854) (nil fontified nil 11844 . 11847) (nil fontified nil 11829 . 11844) (nil fontified nil 11828 . 11829) (nil fontified nil 11825 . 11828) (nil fontified nil 11817 . 11825) (11817 . 12052) (t 26011 54452 488892 745000)) nil (26011 54486 931714 0) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -11817) 11839) nil (26011 54486 931699 0) 0 nil])
([nil nil ((11940 . 11960) (#("        " 0 8 (fontified t)) . 11940) 11980) nil (26011 54486 931698 0) 0 nil])
([nil nil ((#("let " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -11817) (undo-tree-id5096 . -4) (undo-tree-id5097 . -4) (undo-tree-id5098 . -4) (undo-tree-id5099 . -4) (undo-tree-id5100 . -4) (undo-tree-id5101 . -4) (undo-tree-id5102 . -4) (undo-tree-id5103 . -4) (undo-tree-id5104 . -4) (undo-tree-id5105 . -4) 11821) nil (26011 54486 931696 0) 0 nil])
([nil nil ((11817 . 11818)) nil (26011 54487 665730 0) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -11817) (undo-tree-id5128 . -1) (undo-tree-id5129 . -1) (undo-tree-id5130 . -1) (undo-tree-id5131 . -1) (undo-tree-id5132 . -1) (undo-tree-id5133 . -1) (undo-tree-id5134 . -1) (undo-tree-id5135 . -1) (undo-tree-id5136 . -1) (undo-tree-id5137 . -1) 11818) nil (26011 54499 209469 0) 0 nil] [nil nil ((11817 . 11821) (#("sdiffuse_texture" 0 1 (fontified nil) 1 16 (fontified nil)) . 11817) (undo-tree-id5082 . -11) (undo-tree-id5083 . -11) (undo-tree-id5084 . -11) (undo-tree-id5085 . -11) (undo-tree-id5086 . -11) (undo-tree-id5087 . -11) (undo-tree-id5088 . 15) (11817 . 11818) (#("self" 0 4 (fontified nil)) . -11817) (11817 . 11821) (#("s" 0 1 (fontified t)) . -11817) (undo-tree-id5089 . -1) (undo-tree-id5090 . -1) (undo-tree-id5091 . -1) (undo-tree-id5092 . -1) (undo-tree-id5093 . -1) (undo-tree-id5094 . -1) (undo-tree-id5095 . -1) 11818) ((11817 . 11818) (#("self" 0 4 (fontified nil)) . 11817) (11817 . 11821) (#("s" 0 1 (fontified nil)) . 11817) (11817 . 11833) (#("self" 0 4 (face font-lock-keyword-face fontified t)) . 11817) (undo-tree-id5113 . -4) (undo-tree-id5114 . -4) (undo-tree-id5115 . -4) (undo-tree-id5116 . -4) (undo-tree-id5117 . -4) (undo-tree-id5118 . -4) (undo-tree-id5119 . -4) (undo-tree-id5120 . -4)) (26011 54487 305967 0) 0 nil])
([nil nil ((#("let " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -11956) (undo-tree-id5121 . -4) (undo-tree-id5122 . -4) (undo-tree-id5123 . -4) (undo-tree-id5124 . -4) (undo-tree-id5125 . -4) (undo-tree-id5126 . -4) (undo-tree-id5127 . -4) 11960) nil (26011 54499 209456 0) 0 nil])
([nil nil ((11821 . 11822)) ((#("." 0 1 (fontified t)) . 11821) (undo-tree-id5106 . -1) (undo-tree-id5107 . -1) (undo-tree-id5108 . -1) (undo-tree-id5109 . -1) (undo-tree-id5110 . -1) (undo-tree-id5111 . -1) (undo-tree-id5112 . -1)) (26011 54486 931980 0) 0 nil])
([nil nil ((apply activate-cursor-for-undo 30) (11821 . 11822) (apply deactivate-cursor-after-undo 30) (11964 . 11965) (apply activate-cursor-for-undo 30) (11820 . 11821) (apply deactivate-cursor-after-undo 30) (11962 . 11963) (apply activate-cursor-for-undo 30) (11819 . 11820) (apply deactivate-cursor-after-undo 30) (11960 . 11961) (apply activate-cursor-for-undo 30) (11818 . 11819) (apply deactivate-cursor-after-undo 30) (11958 . 11959) (apply activate-cursor-for-undo 30) (11817 . 11818) (apply deactivate-cursor-after-undo 30) (11956 . 11957)) nil (26011 54499 209435 0) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -11821) (undo-tree-id5078 . -1) (undo-tree-id5079 . -1) (undo-tree-id5080 . -1) (undo-tree-id5081 . -1) 11822) ((11821 . 11822)) (26011 54486 931659 0) 0 nil])
([nil nil ((11987 . 11992) (t 26011 54499 230528 109000)) nil (26011 54516 369984 0) 0 nil])
nil
([nil nil ((12027 . 12032)) nil (26011 54516 369982 0) 0 nil])
([nil nil ((11909 . 11914)) nil (26011 54516 369981 0) 0 nil])
([nil nil ((11923 . 11928)) nil (26011 54516 369972 0) 0 nil])
([nil nil ((2430 . 2434) (#("    " 0 4 (fontified nil)) . 2429) (2429 . 2433) (2429 . 2430) (t 26011 54516 391040 940000)) nil (26011 54569 972076 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 2458 . 2459) (nil fontified nil 2434 . 2459) (2434 . 2459)) nil (26011 54569 972074 0) 0 nil])
([nil nil ((2459 . 2463)) nil (26011 54569 972072 0) 0 nil])
([nil nil ((2461 . 2465) (#("wp" 0 2 (fontified nil)) . 2461) (2461 . 2463) (#("wgpu" 0 4 (fontified nil)) . -2461) (2461 . 2465) (#("wp" 0 2 (fontified t)) . -2461) (undo-tree-id5364 . -2) (undo-tree-id5365 . -1) (undo-tree-id5366 . -2) (undo-tree-id5367 . -2) 2463) nil (26011 54569 972071 0) 0 nil])
([nil nil ((2465 . 2475)) nil (26011 54569 972065 0) 0 nil])
([nil nil ((#("B" 0 1 (face font-lock-type-face fontified t)) . -2474) (undo-tree-id5358 . -1) (undo-tree-id5359 . -1) (undo-tree-id5360 . -1) (undo-tree-id5361 . -1) (undo-tree-id5362 . -1) (undo-tree-id5363 . -1) 2475) nil (26011 54569 972063 0) 0 nil])
([nil nil ((#("T" 0 1 (face font-lock-type-face fontified t)) . -2467) (undo-tree-id5146 . -1) (undo-tree-id5147 . -1) (undo-tree-id5148 . -1) (undo-tree-id5149 . -1) (undo-tree-id5150 . -1) (undo-tree-id5151 . -1) (undo-tree-id5152 . -1) (undo-tree-id5153 . -1) (undo-tree-id5154 . -1) (undo-tree-id5155 . -1) (undo-tree-id5156 . -1) (undo-tree-id5157 . -1) (undo-tree-id5158 . -1) (undo-tree-id5159 . -1) (undo-tree-id5160 . -1) (undo-tree-id5161 . -1) (undo-tree-id5162 . -1) (undo-tree-id5163 . -1) (undo-tree-id5164 . -1) (undo-tree-id5165 . -1) (undo-tree-id5166 . -1) (undo-tree-id5167 . -1) (undo-tree-id5168 . -1) (undo-tree-id5169 . -1) (undo-tree-id5170 . -1) (undo-tree-id5171 . -1) (undo-tree-id5172 . -1) (undo-tree-id5173 . -1) (undo-tree-id5174 . -1) (undo-tree-id5175 . -1) (undo-tree-id5176 . -1) (undo-tree-id5177 . -1) (undo-tree-id5178 . -1) (undo-tree-id5179 . -1) (undo-tree-id5180 . -1) (undo-tree-id5181 . -1) (undo-tree-id5182 . -1) (undo-tree-id5183 . -1) (undo-tree-id5184 . -1) (undo-tree-id5185 . -1) (undo-tree-id5186 . -1) (undo-tree-id5187 . -1) (undo-tree-id5188 . -1) (undo-tree-id5189 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -2468) (undo-tree-id5190 . -1) (undo-tree-id5191 . -1) (undo-tree-id5192 . -1) (undo-tree-id5193 . -1) (undo-tree-id5194 . -1) (undo-tree-id5195 . -1) (undo-tree-id5196 . -1) (undo-tree-id5197 . -1) (undo-tree-id5198 . -1) (undo-tree-id5199 . -1) (undo-tree-id5200 . -1) (undo-tree-id5201 . -1) (undo-tree-id5202 . -1) (undo-tree-id5203 . -1) (undo-tree-id5204 . -1) (undo-tree-id5205 . -1) (undo-tree-id5206 . -1) (undo-tree-id5207 . -1) (undo-tree-id5208 . -1) (undo-tree-id5209 . -1) (undo-tree-id5210 . -1) (undo-tree-id5211 . -1) (undo-tree-id5212 . -1) (undo-tree-id5213 . -1) (undo-tree-id5214 . -1) (undo-tree-id5215 . -1) (undo-tree-id5216 . -1) (undo-tree-id5217 . -1) (undo-tree-id5218 . -1) (undo-tree-id5219 . -1) (undo-tree-id5220 . -1) (undo-tree-id5221 . -1) (undo-tree-id5222 . -1) (undo-tree-id5223 . -1) (undo-tree-id5224 . -1) (undo-tree-id5225 . -1) (undo-tree-id5226 . -1) (undo-tree-id5227 . -1) (undo-tree-id5228 . -1) (undo-tree-id5229 . -1) (#("x" 0 1 (face font-lock-type-face fontified t)) . -2469) (undo-tree-id5230 . -1) (undo-tree-id5231 . -1) (undo-tree-id5232 . -1) (undo-tree-id5233 . -1) (undo-tree-id5234 . -1) (undo-tree-id5235 . -1) (undo-tree-id5236 . -1) (undo-tree-id5237 . -1) (undo-tree-id5238 . -1) (undo-tree-id5239 . -1) (undo-tree-id5240 . -1) (undo-tree-id5241 . -1) (undo-tree-id5242 . -1) (undo-tree-id5243 . -1) (undo-tree-id5244 . -1) (undo-tree-id5245 . -1) (undo-tree-id5246 . -1) (undo-tree-id5247 . -1) (undo-tree-id5248 . -1) (undo-tree-id5249 . -1) (undo-tree-id5250 . -1) (undo-tree-id5251 . -1) (undo-tree-id5252 . -1) (undo-tree-id5253 . -1) (undo-tree-id5254 . -1) (undo-tree-id5255 . -1) (undo-tree-id5256 . -1) (undo-tree-id5257 . -1) (undo-tree-id5258 . -1) (undo-tree-id5259 . -1) (undo-tree-id5260 . -1) (undo-tree-id5261 . -1) (undo-tree-id5262 . -1) (undo-tree-id5263 . -1) (undo-tree-id5264 . -1) (undo-tree-id5265 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -2470) (undo-tree-id5266 . -1) (undo-tree-id5267 . -1) (undo-tree-id5268 . -1) (undo-tree-id5269 . -1) (undo-tree-id5270 . -1) (undo-tree-id5271 . -1) (undo-tree-id5272 . -1) (undo-tree-id5273 . -1) (undo-tree-id5274 . -1) (undo-tree-id5275 . -1) (undo-tree-id5276 . -1) (undo-tree-id5277 . -1) (undo-tree-id5278 . -1) (undo-tree-id5279 . -1) (undo-tree-id5280 . -1) (undo-tree-id5281 . -1) (undo-tree-id5282 . -1) (undo-tree-id5283 . -1) (undo-tree-id5284 . -1) (undo-tree-id5285 . -1) (undo-tree-id5286 . -1) (undo-tree-id5287 . -1) (undo-tree-id5288 . -1) (undo-tree-id5289 . -1) (undo-tree-id5290 . -1) (undo-tree-id5291 . -1) (undo-tree-id5292 . -1) (undo-tree-id5293 . -1) (undo-tree-id5294 . -1) (undo-tree-id5295 . -1) (undo-tree-id5296 . -1) (undo-tree-id5297 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -2471) (undo-tree-id5298 . -1) (undo-tree-id5299 . -1) (undo-tree-id5300 . -1) (undo-tree-id5301 . -1) (undo-tree-id5302 . -1) (undo-tree-id5303 . -1) (undo-tree-id5304 . -1) (undo-tree-id5305 . -1) (undo-tree-id5306 . -1) (undo-tree-id5307 . -1) (undo-tree-id5308 . -1) (undo-tree-id5309 . -1) (undo-tree-id5310 . -1) (undo-tree-id5311 . -1) (undo-tree-id5312 . -1) (undo-tree-id5313 . -1) (undo-tree-id5314 . -1) (undo-tree-id5315 . -1) (undo-tree-id5316 . -1) (undo-tree-id5317 . -1) (undo-tree-id5318 . -1) (undo-tree-id5319 . -1) (undo-tree-id5320 . -1) (undo-tree-id5321 . -1) (undo-tree-id5322 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -2472) (undo-tree-id5323 . -1) (undo-tree-id5324 . -1) (undo-tree-id5325 . -1) (undo-tree-id5326 . -1) (undo-tree-id5327 . -1) (undo-tree-id5328 . -1) (undo-tree-id5329 . -1) (undo-tree-id5330 . -1) (undo-tree-id5331 . -1) (undo-tree-id5332 . -1) (undo-tree-id5333 . -1) (undo-tree-id5334 . -1) (undo-tree-id5335 . -1) (undo-tree-id5336 . -1) (undo-tree-id5337 . -1) (undo-tree-id5338 . -1) (undo-tree-id5339 . -1) (undo-tree-id5340 . -1) (undo-tree-id5341 . -1) (undo-tree-id5342 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -2473) (undo-tree-id5343 . -1) (undo-tree-id5344 . -1) (undo-tree-id5345 . -1) (undo-tree-id5346 . -1) (undo-tree-id5347 . -1) (undo-tree-id5348 . -1) (undo-tree-id5349 . -1) (undo-tree-id5350 . -1) (undo-tree-id5351 . -1) (undo-tree-id5352 . -1) (undo-tree-id5353 . -1) (undo-tree-id5354 . -1) (undo-tree-id5355 . -1) (undo-tree-id5356 . -1) (undo-tree-id5357 . -1) 2474) nil (26011 54569 972045 0) 0 nil])
([nil nil ((2467 . 2469)) nil (26011 54569 971841 0) 0 nil])
([nil nil ((2467 . 2482) (#("Bi" 0 2 (fontified nil)) . 2467) (2467 . 2469) (#("BindGroupLayout" 0 15 (fontified nil)) . -2467) (2467 . 2482) (#("Bi" 0 2 (face font-lock-type-face fontified t)) . -2467) (undo-tree-id5138 . -2) (undo-tree-id5139 . -1) (undo-tree-id5140 . -1) (undo-tree-id5141 . -2) (undo-tree-id5142 . -2) (undo-tree-id5143 . -2) (undo-tree-id5144 . -2) (undo-tree-id5145 . -2) 2469) nil (26011 54569 971838 0) 0 nil])
([nil nil ((2482 . 2483)) nil (26011 54569 971814 0) 0 nil])
([nil nil ((9782 . 9794) (#("            " 0 12 (fontified nil)) . 9781) (undo-tree-id5372 . -12) (undo-tree-id5373 . -12) (undo-tree-id5374 . -12) (9780 . 9794) (t 26011 54569 993776 303000)) nil (26011 54576 227099 0) 0 nil])
([nil nil ((9794 . 9795)) nil (26011 54576 227095 0) 0 nil])
([nil nil ((9794 . 9819) (#("t" 0 1 (fontified nil)) . 9794) (9794 . 9795) (#("texture_bind_group_layout" 0 25 (fontified nil)) . -9794) (9794 . 9819) (#("t" 0 1 (fontified t)) . -9794) (undo-tree-id5368 . -1) (undo-tree-id5369 . -1) (undo-tree-id5370 . -1) (undo-tree-id5371 . -1) 9795) nil (26011 54576 227092 0) 0 nil])
([nil nil ((9819 . 9820)) nil (26011 54576 227075 0) 0 nil])
([nil nil ((12145 . 12150) (t 26011 54576 248877 700000)) nil (26011 54585 662900 0) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -12149) (undo-tree-id5375 . -1) (undo-tree-id5376 . -1) (undo-tree-id5377 . -1) (undo-tree-id5378 . -1) (undo-tree-id5379 . -1) (undo-tree-id5380 . -1) (undo-tree-id5381 . -1) (undo-tree-id5382 . -1) (undo-tree-id5383 . -1) (undo-tree-id5384 . -1) (undo-tree-id5385 . -1) (undo-tree-id5386 . -1) (undo-tree-id5387 . -1) (undo-tree-id5388 . -1) (undo-tree-id5389 . -1) (undo-tree-id5390 . -1) (undo-tree-id5391 . -1) 12150) nil (26011 54585 662897 0) 0 nil])
([nil nil ((12149 . 12150)) nil (26011 54585 662867 0) 0 nil])
([nil nil ((#("png" 0 3 (face font-lock-string-face fontified t)) . -11995) (undo-tree-id5420 . -3) (undo-tree-id5421 . -3) (undo-tree-id5422 . -3) (undo-tree-id5423 . -3) (undo-tree-id5424 . -3) (undo-tree-id5425 . -3) (undo-tree-id5426 . -3) (undo-tree-id5427 . -3) 11998 (t 26011 54585 684294 650000)) nil (26011 54595 927312 0) 0 nil])
([nil nil ((#("tree." 0 5 (face font-lock-string-face fontified t)) . -11990) (undo-tree-id5411 . -5) (undo-tree-id5412 . -5) (undo-tree-id5413 . -5) (undo-tree-id5414 . -5) (undo-tree-id5415 . -5) (undo-tree-id5416 . -5) (undo-tree-id5417 . -5) (undo-tree-id5418 . -5) (undo-tree-id5419 . -5) 11995) nil (26011 54595 927302 0) 0 nil])
([nil nil ((#("happy-" 0 6 (face font-lock-string-face fontified t)) . -11984) (undo-tree-id5401 . -6) (undo-tree-id5402 . -6) (undo-tree-id5403 . -6) (undo-tree-id5404 . -6) (undo-tree-id5405 . -6) (undo-tree-id5406 . -6) (undo-tree-id5407 . -6) (undo-tree-id5408 . -6) (undo-tree-id5409 . -6) (undo-tree-id5410 . -6) 11990) nil (26011 54595 927292 0) 0 nil])
([nil nil ((11984 . 11986)) nil (26011 54595 927281 0) 0 nil])
([nil nil ((#("," 0 1 (face font-lock-string-face fontified t)) . -11985) (undo-tree-id5392 . -1) (undo-tree-id5393 . -1) (undo-tree-id5394 . -1) (undo-tree-id5395 . -1) (undo-tree-id5396 . -1) (undo-tree-id5397 . -1) (undo-tree-id5398 . -1) (undo-tree-id5399 . -1) (undo-tree-id5400 . -1) 11986) nil (26011 54595 927279 0) 0 nil])
([nil nil ((11985 . 11989)) nil (26011 54595 927260 0) 0 nil])
([nil nil ((11989 . 11990)) nil (26011 54595 927257 0) 0 nil])
([nil nil ((12260 . 12281) (t 26011 54595 949384 337000)) nil (26011 55118 313231 0) 0 nil])
([nil nil ((nil fontified nil 12557 . 12558) (nil fontified nil 12556 . 12557) (nil fontified nil 12531 . 12556) (nil fontified nil 12530 . 12531) (nil fontified nil 12526 . 12530) (nil fontified nil 12525 . 12526) (nil fontified nil 12517 . 12525) (nil fontified nil 12516 . 12517) (nil fontified nil 12512 . 12516) (nil fontified nil 12511 . 12512) (nil fontified nil 12510 . 12511) (nil fontified nil 12493 . 12510) (nil fontified nil 12477 . 12493) (nil fontified nil 12476 . 12477) (nil fontified nil 12472 . 12476) (nil fontified nil 12469 . 12472) (nil fontified nil 12451 . 12469) (nil fontified nil 12450 . 12451) (nil fontified nil 12446 . 12450) (nil fontified nil 12426 . 12446) (nil fontified nil 12425 . 12426) (nil fontified nil 12424 . 12425) (nil fontified nil 12423 . 12424) (nil fontified nil 12422 . 12423) (nil fontified nil 12416 . 12422) (nil fontified nil 12415 . 12416) (nil fontified nil 12414 . 12415) (nil fontified nil 12410 . 12414) (nil fontified nil 12403 . 12410) (nil fontified nil 12402 . 12403) (nil fontified nil 12398 . 12402) (nil fontified nil 12397 . 12398) (nil fontified nil 12389 . 12397) (nil fontified nil 12388 . 12389) (nil fontified nil 12384 . 12388) (nil fontified nil 12383 . 12384) (nil fontified nil 12381 . 12383) (nil fontified nil 12380 . 12381) (nil fontified nil 12379 . 12380) (nil fontified nil 12372 . 12379) (nil fontified nil 12371 . 12372) (nil fontified nil 12368 . 12371) (nil fontified nil 12366 . 12368) (nil fontified nil 12362 . 12366) (nil fontified nil 12360 . 12362) (nil fontified nil 12356 . 12360) (nil fontified nil 12354 . 12356) (nil fontified nil 12351 . 12354) (nil fontified nil 12350 . 12351) (nil fontified nil 12341 . 12350) (nil fontified nil 12339 . 12341) (nil fontified nil 12332 . 12339) (nil fontified nil 12330 . 12332) (nil fontified nil 12323 . 12330) (nil fontified nil 12320 . 12323) (nil fontified nil 12305 . 12320) (nil fontified nil 12304 . 12305) (nil fontified nil 12300 . 12304) (nil fontified nil 12281 . 12300) (12281 . 12558)) nil (26011 55118 313228 0) 0 nil])
([nil nil ((#("                   " 0 19 (fontified t)) . -12281) 12316) nil (26011 55118 313211 0) 0 nil])
([nil nil ((#("jpeg" 0 4 (face font-lock-string-face fontified t)) . -12356) (undo-tree-id5447 . -4) (undo-tree-id5448 . -4) (undo-tree-id5449 . -4) (undo-tree-id5450 . -4) (undo-tree-id5451 . -4) (undo-tree-id5452 . -4) (undo-tree-id5453 . -4) 12360) nil (26011 55118 313209 0) 0 nil])
([nil nil ((#("1" 0 1 (face font-lock-string-face fontified t)) . -12354) (undo-tree-id5428 . -1) (undo-tree-id5429 . -1) (undo-tree-id5430 . -1) (undo-tree-id5431 . -1) (undo-tree-id5432 . -1) (undo-tree-id5433 . -1) (undo-tree-id5434 . -1) (undo-tree-id5435 . -1) (undo-tree-id5436 . -1) (undo-tree-id5437 . -1) (#("." 0 1 (face font-lock-string-face fontified t)) . -12355) (undo-tree-id5438 . -1) (undo-tree-id5439 . -1) (undo-tree-id5440 . -1) (undo-tree-id5441 . -1) (undo-tree-id5442 . -1) (undo-tree-id5443 . -1) (undo-tree-id5444 . -1) (undo-tree-id5445 . -1) (undo-tree-id5446 . -1) 12356) nil (26011 55118 313200 0) 0 nil])
([nil nil ((12354 . 12365)) nil (26011 55118 313166 0) 0 nil])
([nil nil ((12365 . 12368)) nil (26011 55118 313162 0) 0 nil])
([nil nil ((258 . 259) (t 26011 55118 335417 286000)) nil (26013 8675 808480 0) 0 nil])
([nil nil ((259 . 265)) nil (26013 8675 808478 0) 0 nil])
([nil nil ((263 . 270) (#("ca" 0 2 (fontified nil)) . 263) (263 . 265) (#("camera;" 0 7 (fontified nil)) . -263) (263 . 270) (#("ca" 0 2 (face font-lock-constant-face fontified t)) . -263) (undo-tree-id5454 . -2) (undo-tree-id5455 . -1) (undo-tree-id5456 . -1) (undo-tree-id5457 . -2) (undo-tree-id5458 . -2) 265) nil (26013 8675 808474 0) 0 nil])
([nil nil ((2584 . 2588) (#("    " 0 4 (face font-lock-comment-face fontified nil)) . 2583) (2583 . 2587) (2583 . 2584) (t 26013 8675 834055 139000)) nil (26013 8722 651380 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 2607 . 2608) (nil fontified nil 2588 . 2608) (2588 . 2608)) nil (26013 8722 651378 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2588) 2584) nil (26013 8722 651373 0) 0 nil])
([nil nil ((307 . 309) (t 26013 8722 673027 131000)) nil (26013 8761 122615 0) 0 nil])
([nil nil ((309 . 315)) nil (26013 8761 122613 0) 0 nil])
([nil nil ((313 . 319) (#("ca" 0 2 (fontified nil)) . 313) (313 . 315) (#("camera" 0 6 (fontified nil)) . -313) (313 . 319) (#("ca" 0 2 (face font-lock-constant-face fontified t)) . -313) (undo-tree-id5475 . -2) 315) nil (26013 8761 122612 0) 0 nil])
([nil nil ((319 . 322)) nil (26013 8761 122608 0) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -321) (undo-tree-id5474 . -1) 322) nil (26013 8761 122607 0) 0 nil])
([nil nil ((321 . 322)) nil (26013 8761 122605 0) 0 nil])
([nil nil ((#("C" 0 1 (face font-lock-type-face fontified t)) . -321) (undo-tree-id5473 . -1) 322) nil (26013 8761 122604 0) 0 nil])
([nil nil ((321 . 322)) nil (26013 8761 122602 0) 0 nil])
([nil nil ((321 . 327) (#("C" 0 1 (fontified nil)) . 321) (321 . 322) (#("Camera" 0 6 (fontified nil)) . -321) (321 . 327) (#("C" 0 1 (face font-lock-type-face fontified t)) . -321) (undo-tree-id5459 . -1) (undo-tree-id5460 . -1) (undo-tree-id5461 . -1) (undo-tree-id5462 . -1) (undo-tree-id5463 . -1) (undo-tree-id5464 . -1) (undo-tree-id5465 . -1) (undo-tree-id5466 . -1) (undo-tree-id5467 . -1) (undo-tree-id5468 . -1) (undo-tree-id5469 . -1) (undo-tree-id5470 . -1) (undo-tree-id5471 . -1) (undo-tree-id5472 . -1) 322) nil (26013 8761 122599 0) 0 nil])
([nil nil ((327 . 328)) nil (26013 8761 122574 0) 0 nil])
([nil nil ((9529 . 9537) (#("        " 0 8 (fontified nil)) . 9528) (undo-tree-id5480 . -8) (undo-tree-id5481 . -8) (undo-tree-id5482 . -8) (9527 . 9537) (t 26013 8761 144564 521000)) nil (26013 8783 94546 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 9965 . 9966) (nil fontified nil 9537 . 9966) (9537 . 9966)) nil (26013 8783 94541 0) 0 nil])
([nil nil ((10000 . 10008) (#("    " 0 4 (fontified t)) . 10000) (9983 . 9987) (9959 . 9963) (9935 . 9939) (9871 . 9875) (9828 . 9832) (9795 . 9799) (9751 . 9755) (9709 . 9713) (9668 . 9672) (9629 . 9633) (9567 . 9571) (#("    " 0 4 (fontified t)) . -9537) 9535) nil (26013 8783 94539 0) 0 nil])
([nil nil ((10425 . 10438)) nil (26013 8783 94534 0) 0 nil])
([nil nil ((10438 . 10439)) nil (26013 8783 94533 0) 0 nil])
([nil nil ((10438 . 10444) (#("c" 0 1 (fontified nil)) . 10438) (10438 . 10439) (#("camera" 0 6 (fontified nil)) . -10438) (10438 . 10444) (#("c" 0 1 (fontified t)) . -10438) (undo-tree-id5476 . -1) (undo-tree-id5477 . -1) (undo-tree-id5478 . -1) (undo-tree-id5479 . -1) 10439) nil (26013 8783 94531 0) 0 nil])
([nil nil ((10444 . 10445)) nil (26013 8783 94512 0) 0 nil])
([nil nil ((10012 . 10020) (#("        " 0 8 (fontified nil)) . 10011) (undo-tree-id5483 . -8) (undo-tree-id5484 . -8) (undo-tree-id5485 . -8) (10010 . 10020) (t 26013 8783 116733 574000)) nil (26013 9913 393296 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 10107 . 10108) (nil fontified nil 10020 . 10108) (10020 . 10108)) nil (26013 9913 393278 0) 0 nil])
([nil nil ((10067 . 10075) 10108) nil (26013 9913 393276 0) 0 nil])
([nil nil ((10116 . 10125)) nil (26013 9913 393272 0) 0 nil])
([nil nil ((#("Camera" 0 6 (face font-lock-type-face fontified t)) . -321) (undo-tree-id5486 . -6) (undo-tree-id5487 . -6) (undo-tree-id5488 . -6) (undo-tree-id5489 . -6) (undo-tree-id5490 . -6) (undo-tree-id5491 . -6) (undo-tree-id5492 . -6) (undo-tree-id5493 . -6) 327 (t 26013 9913 415542 510000)) nil (26013 9923 973438 0) 0 nil])
([nil nil ((321 . 322)) nil (26013 9923 973417 0) 0 nil])
([nil nil ((10120 . 10122) (t 26013 9923 995568 503000)) nil (26013 9950 133187 0) 0 nil])
([nil nil ((10120 . 10134) (#("ca" 0 2 (fontified nil)) . 10120) (10120 . 10122) (#("camera_uniform" 0 14 (fontified nil)) . -10120) (10120 . 10134) (#("ca" 0 2 (fontified t)) . -10120) (undo-tree-id5518 . -2) (undo-tree-id5519 . -1) (undo-tree-id5520 . -2) (undo-tree-id5521 . -2) (undo-tree-id5522 . -2) (undo-tree-id5523 . -2) 10122) nil (26013 9950 133184 0) 0 nil])
([nil nil ((10134 . 10139)) nil (26013 9950 133176 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 10156 10163 nil nil nil t #s(yas--exit 10164 nil))) #s(yas--exit 10164 nil) 45 nil #s(yas--field 1 10156 10163 nil nil nil t #s(yas--exit 10164 nil)) nil nil)) (10135 . 10163) (#("create_camera_buffer(${1:device})$0" 0 35 (fontified nil)) . 10135) (10135 . 10170) (#("crea" 0 4 (fontified nil)) . 10135) (10135 . 10139) (#("create_camera_buffer(…)" 0 23 (fontified nil)) . -10135) (10135 . 10158) (#("crea" 0 4 (fontified t)) . -10135) (undo-tree-id5503 . -4) (undo-tree-id5504 . -1) (undo-tree-id5505 . -1) (undo-tree-id5506 . -1) (undo-tree-id5507 . -1) (undo-tree-id5508 . -1) (undo-tree-id5509 . -2) (undo-tree-id5510 . -2) (undo-tree-id5511 . -2) (undo-tree-id5512 . -3) (undo-tree-id5513 . -3) (undo-tree-id5514 . -4) (undo-tree-id5515 . -4) (undo-tree-id5516 . -4) (undo-tree-id5517 . -4) 10139) nil (26013 9950 133174 0) 0 nil])
([nil nil ((10157 . 10159) (#("device" 0 6 (fontified nil)) . 10157) (undo-tree-id5502 . -6) (10156 . 10157)) nil (26013 9950 133156 0) 0 nil])
([nil nil ((10157 . 10163) (#("de" 0 2 (fontified nil)) . 10157) (undo-tree-id5494 . -2) (10157 . 10159) (#("device" 0 6 (fontified nil)) . -10157) (undo-tree-id5495 . -6) (10157 . 10163) (#("de" 0 2 (fontified t)) . -10157) (undo-tree-id5496 . -2) (undo-tree-id5497 . -2) (undo-tree-id5498 . -1) (undo-tree-id5499 . -2) (undo-tree-id5500 . -2) (undo-tree-id5501 . -2) 10159) nil (26013 9950 133152 0) 0 nil])
([nil nil ((apply yas--snippet-revive 10135 10164 #s(yas--snippet nil (#s(yas--field 1 10156 10163 nil nil nil t #s(yas--exit 10164 nil))) #s(yas--exit 10164 nil) 45 nil #s(yas--field 1 10156 10163 nil nil nil t #s(yas--exit 10164 nil)) nil nil))) nil (26013 9950 133135 0) 0 nil])
([nil nil ((10164 . 10165)) nil (26013 9950 133134 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 10136 . 10137) (nil fontified nil 10120 . 10137) (10120 . 10137)) nil (26013 9950 133133 0) 0 nil])
([nil nil ((10137 . 10140)) nil (26013 9950 133128 0) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . -10176) (undo-tree-id5524 . -1) (undo-tree-id5525 . -1) (undo-tree-id5526 . -1) (undo-tree-id5527 . -1) (undo-tree-id5528 . -1) (undo-tree-id5529 . -1) (undo-tree-id5530 . -1) (undo-tree-id5531 . -1) (undo-tree-id5532 . -1) (undo-tree-id5533 . -1) (undo-tree-id5534 . -1) (undo-tree-id5535 . -1) (undo-tree-id5536 . -1) (undo-tree-id5537 . -1) (undo-tree-id5538 . -1) (undo-tree-id5539 . -1) (undo-tree-id5540 . -1) (undo-tree-id5541 . -1) (undo-tree-id5542 . -1) (undo-tree-id5543 . -1) (undo-tree-id5544 . -1) 10177 (t 26013 9950 155283 413000)) nil (26013 9989 635197 0) 0 nil])
([nil nil ((10176 . 10177) (t 26013 9989 657781 656000)) nil (26013 9994 355646 0) 0 nil])
([nil nil ((10188 . 10196) (#("        " 0 8 (fontified nil)) . 10187) (undo-tree-id5546 . -8) (undo-tree-id5547 . -8) (undo-tree-id5548 . -8) (10187 . 10196) (#("        " 0 8 (fontified nil)) . 10186) (undo-tree-id5549 . -8) (undo-tree-id5550 . -8) (undo-tree-id5551 . -8) (10185 . 10195) (t 26013 9994 378524 507000)) nil (26013 10065 834338 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 10709 . 10710) (nil fontified nil 10196 . 10710) (10196 . 10710)) nil (26013 10065 834328 0) 0 nil])
([nil nil ((10810 . 10818) (10757 . 10769) (#("    " 0 4 (fontified t)) . 10757) (10742 . 10754) (#("    " 0 4 (fontified t)) . 10742) (10724 . 10740) (#("        " 0 8 (fontified t)) . 10724) (10691 . 10711) (#("            " 0 12 (fontified t)) . 10691) (10668 . 10688) (#("            " 0 12 (fontified t)) . 10668) (10620 . 10644) (#("                " 0 16 (fontified t)) . 10620) (10569 . 10593) (#("                " 0 16 (fontified t)) . 10569) (10507 . 10531) (#("                " 0 16 (fontified t)) . 10507) (10455 . 10475) (#("            " 0 12 (fontified t)) . 10455) (10395 . 10415) (#("            " 0 12 (fontified t)) . 10395) (undo-tree-id5545 . -12) (10363 . 10383) (#("            " 0 12 (fontified t)) . 10363) (10318 . 10334) (#("        " 0 8 (fontified t)) . 10318) (10294 . 10306) (#("    " 0 4 (fontified t)) . 10294) 10197) nil (26013 10065 834322 0) 0 nil])
([nil nil ((10823 . 10831) (#("        " 0 8 (fontified nil)) . 10822) (undo-tree-id5670 . -8) (undo-tree-id5671 . -8) (undo-tree-id5672 . -8) (10821 . 10831) (t 26013 10065 857375 671000)) nil (26013 10097 288214 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 11134 . 11135) (nil fontified nil 10831 . 11135) (10831 . 11135)) nil (26013 10097 288209 0) 0 nil])
([nil nil ((11195 . 11203) (11149 . 11161) (#("    " 0 4 (fontified t)) . 11149) (11134 . 11146) (#("    " 0 4 (fontified t)) . 11134) (11116 . 11132) (#("        " 0 8 (fontified t)) . 11116) (undo-tree-id5667 . -8) (11051 . 11071) (#("            " 0 12 (fontified t)) . 11051) (undo-tree-id5668 . -7) (11019 . 11039) (#("            " 0 12 (fontified t)) . 11019) (10980 . 10996) (#("        " 0 8 (fontified t)) . 10980) (undo-tree-id5669 . -6) (10956 . 10968) (#("    " 0 4 (fontified t)) . 10956) (10909 . 10921) (#("    " 0 4 (fontified t)) . 10909) 10822) nil (26013 10097 288886 0) 0 nil])
([nil nil ((#("        let camera = Camera {
            // position the camera 1 unit up and 2 units back
            // +z is out of the screen
            eye: (0.0, 1.0, 2.0).into(),
            // have it look at the origin
            target: (0.0, 0.0, 0.0).into(),
            // which way is \"up\"
            up: cgmath::Vector3::unit_y(),
            aspect: config.width as f32 / config.height as f32,
            fovy: 45.0,
            znear: 0.1,
            zfar: 100.0,
        };

        let mut camera_uniform = CameraUniform::new();
        camera_uniform.update_view_proj(&camera);
        let camera_buffer = camera_uniform.create_camera_buffer(&device);


        let camera_bind_group_layout = device.create_bind_group_layout(&wgpu::BindGroupLayoutDescriptor {
            entries: &[
                wgpu::BindGroupLayoutEntry {
                    binding: 0,
                    visibility: wgpu::ShaderStages::VERTEX,
                    ty: wgpu::BindingType::Buffer {
                        ty: wgpu::BufferBindingType::Uniform,
                        has_dynamic_offset: false,
                        min_binding_size: None,
                    },
                    count: None,
                }
            ],
            label: Some(\"camera_bind_group_layout\"),
        });

        let camera_bind_group = device.create_bind_group(&wgpu::BindGroupDescriptor {
            layout: &camera_bind_group_layout,
            entries: &[
                wgpu::BindGroupEntry {
                    binding: 0,
                    resource: camera_buffer.as_entire_binding(),
                }
            ],
            label: Some(\"camera_bind_group\"),
        });" 0 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 18 (face font-lock-variable-name-face fontified t) 18 21 (fontified t) 21 27 (face font-lock-type-face fontified t) 27 28 (fontified t) 28 29 (face (rainbow-delimiters-depth-3-face) fontified t) 29 30 (fontified t) 30 42 (fontified t) 42 45 (face font-lock-comment-delimiter-face fontified t) 45 92 (face font-lock-comment-face fontified t) 92 104 (fontified t) 104 107 (face font-lock-comment-delimiter-face fontified t) 107 131 (face font-lock-comment-face fontified t) 131 143 (fontified t) 143 146 (face font-lock-variable-name-face fontified t) 146 148 (fontified t) 148 149 (face (rainbow-delimiters-depth-4-face) fontified t) 149 162 (fontified t) 162 163 (face (rainbow-delimiters-depth-4-face) fontified t) 163 168 (fontified t) 168 169 (face (rainbow-delimiters-depth-4-face) fontified t) 169 170 (face (rainbow-delimiters-depth-4-face) fontified t) 170 172 (fontified t) 172 184 (fontified t) 184 187 (face font-lock-comment-delimiter-face fontified t) 187 214 (face font-lock-comment-face fontified t) 214 226 (fontified t) 226 232 (face font-lock-variable-name-face fontified t) 232 234 (fontified t) 234 235 (face (rainbow-delimiters-depth-4-face) fontified t) 235 248 (fontified t) 248 249 (face (rainbow-delimiters-depth-4-face) fontified t) 249 254 (fontified t) 254 255 (face (rainbow-delimiters-depth-4-face) fontified t) 255 256 (face (rainbow-delimiters-depth-4-face) fontified t) 256 258 (fontified t) 258 270 (fontified t) 270 273 (face font-lock-comment-delimiter-face fontified t) 273 291 (face font-lock-comment-face fontified t) 291 303 (fontified t) 303 305 (face font-lock-variable-name-face fontified t) 305 307 (fontified t) 307 313 (face font-lock-constant-face fontified t) 313 315 (fontified t) 315 322 (face font-lock-type-face fontified t) 322 330 (fontified t) 330 331 (face (rainbow-delimiters-depth-4-face) fontified t) 331 332 (face (rainbow-delimiters-depth-4-face) fontified t) 332 334 (fontified t) 334 346 (fontified t) 346 352 (face font-lock-variable-name-face fontified t) 352 367 (fontified t) 367 369 (face font-lock-keyword-face fontified t) 369 370 (fontified t) 370 373 (face font-lock-type-face fontified t) 373 390 (fontified t) 390 392 (face font-lock-keyword-face fontified t) 392 393 (fontified t) 393 396 (face font-lock-type-face fontified t) 396 398 (fontified t) 398 410 (fontified t) 410 414 (face font-lock-variable-name-face fontified t) 414 422 (fontified t) 422 434 (fontified t) 434 439 (face font-lock-variable-name-face fontified t) 439 446 (fontified t) 446 458 (fontified t) 458 462 (face font-lock-variable-name-face fontified t) 462 471 (fontified t) 471 479 (fontified t) 479 480 (face (rainbow-delimiters-depth-3-face) fontified t) 480 481 (fontified t rear-nonsticky t) 481 482 (fontified t) 482 483 (fontified t) 483 491 (fontified t) 491 494 (face font-lock-keyword-face fontified t) 494 495 (fontified t) 495 498 (face font-lock-keyword-face fontified t) 498 499 (fontified t) 499 513 (face font-lock-variable-name-face fontified t) 513 516 (fontified t) 516 529 (face font-lock-type-face fontified t) 529 534 (fontified t) 534 535 (face (rainbow-delimiters-depth-3-face) fontified t) 535 536 (face (rainbow-delimiters-depth-3-face) fontified t) 536 538 (fontified t) 538 577 (fontified t) 577 578 (face (rainbow-delimiters-depth-3-face) fontified t) 578 579 (face rust-ampersand-face fontified t) 579 585 (fontified t) 585 586 (face (rainbow-delimiters-depth-3-face) fontified t) 586 587 (fontified t rear-nonsticky t) 587 588 (fontified t) 588 596 (fontified t) 596 599 (face font-lock-keyword-face fontified t) 599 600 (fontified t) 600 612 (face font-lock-variable-name-face fontified t) 612 613 (face font-lock-variable-name-face rear-nonsticky t fontified t) 613 616 (fontified t) 616 630 (fontified t) 630 631 (fontified t) 631 651 (fontified t) 651 652 (face (rainbow-delimiters-depth-3-face) fontified t) 652 653 (face rust-ampersand-face fontified t) 653 659 (fontified t) 659 660 (face (rainbow-delimiters-depth-3-face) fontified t) 660 662 (fontified t) 662 663 (fontified t) 663 664 (fontified t) 664 672 (fontified t) 672 675 (face font-lock-keyword-face fontified t) 675 676 (fontified t) 676 700 (face font-lock-variable-name-face fontified t) 700 734 (fontified t) 734 735 (face (rainbow-delimiters-depth-3-face) fontified t) 735 736 (face rust-ampersand-face fontified t) 736 740 (face font-lock-constant-face fontified t) 740 742 (fontified t) 742 767 (face font-lock-type-face fontified t) 767 768 (fontified t) 768 769 (face (rainbow-delimiters-depth-4-face) fontified t) 769 770 (fontified t) 770 782 (fontified t) 782 789 (face font-lock-variable-name-face fontified t) 789 791 (fontified t) 791 792 (face rust-ampersand-face fontified t) 792 793 (face (rainbow-delimiters-depth-5-face) fontified t) 793 810 (fontified t) 810 814 (face font-lock-constant-face fontified t) 814 816 (fontified t) 816 836 (face font-lock-type-face fontified t) 836 837 (fontified t) 837 838 (face (rainbow-delimiters-depth-6-face) fontified t) 838 859 (fontified t) 859 866 (face font-lock-variable-name-face fontified t) 866 891 (fontified t) 891 901 (face font-lock-variable-name-face fontified t) 901 903 (fontified t) 903 907 (face font-lock-constant-face fontified t) 907 909 (fontified t) 909 921 (face font-lock-type-face fontified t) 921 923 (fontified t) 923 929 (face font-lock-type-face fontified t) 929 951 (fontified t) 951 953 (face font-lock-variable-name-face fontified t) 953 955 (fontified t) 955 959 (face font-lock-constant-face fontified t) 959 961 (fontified t) 961 972 (face font-lock-type-face fontified t) 972 974 (fontified t) 974 980 (face font-lock-type-face fontified t) 980 981 (fontified t) 981 982 (face (rainbow-delimiters-depth-7-face) fontified t) 982 1007 (fontified t) 1007 1009 (face font-lock-variable-name-face fontified t) 1009 1011 (fontified t) 1011 1015 (face font-lock-constant-face fontified t) 1015 1017 (fontified t) 1017 1034 (face font-lock-type-face fontified t) 1034 1036 (fontified t) 1036 1043 (face font-lock-type-face fontified t) 1043 1069 (fontified t) 1069 1087 (face font-lock-variable-name-face fontified t) 1087 1089 (fontified t) 1089 1094 (face font-lock-keyword-face fontified t) 1094 1120 (fontified t) 1120 1136 (face font-lock-variable-name-face fontified t) 1136 1138 (fontified t) 1138 1142 (face font-lock-type-face fontified t) 1142 1164 (fontified t) 1164 1165 (face (rainbow-delimiters-depth-7-face) fontified t) 1165 1187 (fontified t) 1187 1192 (face font-lock-variable-name-face fontified t) 1192 1194 (fontified t) 1194 1198 (face font-lock-type-face fontified t) 1198 1216 (fontified t) 1216 1217 (face (rainbow-delimiters-depth-6-face) fontified t) 1217 1230 (fontified t) 1230 1231 (face (rainbow-delimiters-depth-5-face) fontified t) 1231 1245 (fontified t) 1245 1250 (face font-lock-variable-name-face fontified t) 1250 1252 (fontified t) 1252 1256 (face font-lock-type-face fontified t) 1256 1257 (face (rainbow-delimiters-depth-5-face) fontified t) 1257 1283 (face font-lock-string-face fontified t) 1283 1284 (face (rainbow-delimiters-depth-5-face) fontified t) 1284 1286 (fontified t) 1286 1294 (fontified t) 1294 1295 (face (rainbow-delimiters-depth-4-face) fontified t) 1295 1296 (face (rainbow-delimiters-depth-3-face) fontified t) 1296 1298 (fontified t) 1298 1299 (fontified t) 1299 1307 (fontified t) 1307 1310 (face font-lock-keyword-face fontified t) 1310 1311 (fontified t) 1311 1328 (face font-lock-variable-name-face fontified t) 1328 1355 (fontified t) 1355 1356 (face (rainbow-delimiters-depth-3-face) fontified t) 1356 1357 (face rust-ampersand-face fontified t) 1357 1361 (face font-lock-constant-face fontified t) 1361 1363 (fontified t) 1363 1382 (face font-lock-type-face fontified t) 1382 1383 (fontified t) 1383 1384 (face (rainbow-delimiters-depth-4-face) fontified t) 1384 1385 (fontified t) 1385 1397 (fontified t) 1397 1403 (face font-lock-variable-name-face fontified t) 1403 1405 (fontified t) 1405 1406 (face rust-ampersand-face fontified t) 1406 1444 (fontified t) 1444 1451 (face font-lock-variable-name-face fontified t) 1451 1453 (fontified t) 1453 1454 (face rust-ampersand-face fontified t) 1454 1455 (face (rainbow-delimiters-depth-5-face) fontified t) 1455 1472 (fontified t) 1472 1476 (face font-lock-constant-face fontified t) 1476 1478 (fontified t) 1478 1492 (face font-lock-type-face fontified t) 1492 1493 (fontified t) 1493 1494 (face (rainbow-delimiters-depth-6-face) fontified t) 1494 1515 (fontified t) 1515 1522 (face font-lock-variable-name-face fontified t) 1522 1547 (fontified t) 1547 1555 (face font-lock-variable-name-face fontified t) 1555 1588 (fontified t) 1588 1589 (face (rainbow-delimiters-depth-7-face) fontified t) 1589 1590 (face (rainbow-delimiters-depth-7-face) fontified t) 1590 1608 (fontified t) 1608 1609 (face (rainbow-delimiters-depth-6-face) fontified t) 1609 1622 (fontified t) 1622 1623 (face (rainbow-delimiters-depth-5-face) fontified t) 1623 1637 (fontified t) 1637 1642 (face font-lock-variable-name-face fontified t) 1642 1644 (fontified t) 1644 1648 (face font-lock-type-face fontified t) 1648 1649 (face (rainbow-delimiters-depth-5-face) fontified t) 1649 1668 (face font-lock-string-face fontified t) 1668 1669 (face (rainbow-delimiters-depth-5-face) fontified t) 1669 1679 (fontified t) 1679 1680 (face (rainbow-delimiters-depth-4-face) fontified t) 1680 1681 (face (rainbow-delimiters-depth-3-face) fontified t) 1681 1682 (fontified t)) . 9524) (undo-tree-id5711 . -1682) (undo-tree-id5712 . -8) (undo-tree-id5713 . -481) (undo-tree-id5714 . -652) (undo-tree-id5715 . -491) (undo-tree-id5716 . 1066) (undo-tree-id5717 . -596) (undo-tree-id5718 . -647) (undo-tree-id5719 . -647) (undo-tree-id5720 . -642) (undo-tree-id5721 . -642) (undo-tree-id5722 . -662) (undo-tree-id5723 . -662) (undo-tree-id5724 . -663) (undo-tree-id5725 . -663) (undo-tree-id5726 . -642) (undo-tree-id5727 . -871) (undo-tree-id5728 . -672) (undo-tree-id5729 . -1297) (undo-tree-id5730 . -673) (undo-tree-id5731 . -673) (undo-tree-id5732 . -673) (undo-tree-id5733 . -673) (undo-tree-id5734 . -673) (undo-tree-id5735 . -673) (undo-tree-id5736 . -673) (undo-tree-id5737 . -673) (undo-tree-id5738 . -673) (undo-tree-id5739 . -673) (undo-tree-id5740 . -673) (undo-tree-id5741 . -673) (undo-tree-id5742 . -673) (undo-tree-id5743 . -673) (undo-tree-id5744 . -673) (undo-tree-id5745 . -673) (undo-tree-id5746 . -673) (undo-tree-id5747 . -673) (undo-tree-id5748 . -673) (undo-tree-id5749 . -673) (undo-tree-id5750 . -673) (undo-tree-id5751 . -673) (undo-tree-id5752 . -673) (undo-tree-id5753 . -673) (undo-tree-id5754 . -673) (undo-tree-id5755 . -673) (undo-tree-id5756 . -1297) (undo-tree-id5757 . -1297) (undo-tree-id5758 . -1297) (undo-tree-id5759 . -1297) (undo-tree-id5760 . -1297) (undo-tree-id5761 . -1297) (undo-tree-id5762 . 385) (undo-tree-id5763 . -1298) (undo-tree-id5764 . -1298) (undo-tree-id5765 . 384) (undo-tree-id5766 . -1307) (undo-tree-id5767 . -1307) (undo-tree-id5768 . -1297) (undo-tree-id5769 . -1307) (undo-tree-id5770 . -1682) (undo-tree-id5771 . -1682) (undo-tree-id5772 . -1682) (undo-tree-id5773 . -1644) (undo-tree-id5774 . -1592) (undo-tree-id5775 . -1527) (undo-tree-id5776 . -1456) (undo-tree-id5777 . -1398) (undo-tree-id5778 . -1298) (undo-tree-id5779 . -1307) (undo-tree-id5780 . -1682) (undo-tree-id5781 . -1298) (undo-tree-id5782 . -1298) (undo-tree-id5783 . -1298) (undo-tree-id5784 . -1298) (undo-tree-id5785 . -1298) (undo-tree-id5786 . -1298) (undo-tree-id5787 . -1298) (undo-tree-id5788 . -1298) (undo-tree-id5789 . -1298) (undo-tree-id5790 . -1298) (undo-tree-id5791 . -1298) (undo-tree-id5792 . -1298) (undo-tree-id5793 . -1298) (undo-tree-id5794 . -1298) (undo-tree-id5795 . -1298) (undo-tree-id5796 . -1298) (undo-tree-id5797 . -1298) (undo-tree-id5798 . -1298) (undo-tree-id5799 . -1682) (undo-tree-id5800 . -1682) (undo-tree-id5801 . -1682) (undo-tree-id5802 . -1640) (undo-tree-id5803 . -1605) (undo-tree-id5804 . -1539) (undo-tree-id5805 . -1505) (undo-tree-id5806 . -1441) (undo-tree-id5807 . -1393) (undo-tree-id5808 . -1392) (undo-tree-id5809 . -1392) (undo-tree-id5810 . -1298) (undo-tree-id5811 . -1292) (undo-tree-id5812 . -1238) (undo-tree-id5813 . -1222) (undo-tree-id5814 . -662) (undo-tree-id5815 . -592) (undo-tree-id5816 . -487) (undo-tree-id5817 . -487) (undo-tree-id5818 . -487) (undo-tree-id5819 . -487) (undo-tree-id5820 . -487) (undo-tree-id5821 . -487) (undo-tree-id5822 . -486) (undo-tree-id5823 . -485) (undo-tree-id5824 . -484) (undo-tree-id5825 . -1682) (undo-tree-id5826 . -1682) (undo-tree-id5827 . -1682) (undo-tree-id5828 . -483) (undo-tree-id5829 . -483) (undo-tree-id5830 . -1639) (undo-tree-id5831 . -1298) (undo-tree-id5832 . -1230) (undo-tree-id5833 . -675) (undo-tree-id5834 . -663) (undo-tree-id5835 . -599) (undo-tree-id5836 . -482) (undo-tree-id5837 . -457) (undo-tree-id5838 . -182) (undo-tree-id5839 . -140) (undo-tree-id5840 . -99) (undo-tree-id5841 . -99) (undo-tree-id5842 . -99) (undo-tree-id5843 . -99) (undo-tree-id5844 . -99) (undo-tree-id5845 . -99) (undo-tree-id5846 . -99) (undo-tree-id5847 . -1682) (undo-tree-id5848 . -99) (undo-tree-id5849 . -99) (undo-tree-id5850 . -1682) (undo-tree-id5851 . -1682) (undo-tree-id5852 . -1682) (undo-tree-id5853 . -1682) (undo-tree-id5854 . -1682) (undo-tree-id5855 . -1682) (undo-tree-id5856 . -1637) (undo-tree-id5857 . -1527) (undo-tree-id5858 . -1444) (undo-tree-id5859 . -1297) (undo-tree-id5860 . -1232) (undo-tree-id5861 . -1200) (undo-tree-id5862 . -782) (undo-tree-id5863 . -661) (undo-tree-id5864 . -600) (undo-tree-id5865 . -546) (undo-tree-id5866 . -495) (undo-tree-id5867 . -481) (undo-tree-id5868 . -458) (undo-tree-id5869 . -305) (undo-tree-id5870 . -272) (undo-tree-id5871 . -272) (undo-tree-id5872 . -1682) (undo-tree-id5873 . -1682) (undo-tree-id5874 . -1682) (undo-tree-id5875 . -1682) (undo-tree-id5876 . -1682) (undo-tree-id5877 . -1682) (undo-tree-id5878 . -1682) (undo-tree-id5879 . -1682) (undo-tree-id5880 . -1682) (undo-tree-id5881 . -1682) (undo-tree-id5882 . -1682) (undo-tree-id5883 . -1682) (undo-tree-id5884 . -1682) (undo-tree-id5885 . -1682) (undo-tree-id5886 . -1298) (undo-tree-id5887 . -1297) (undo-tree-id5888 . -663) (undo-tree-id5889 . -599) (undo-tree-id5890 . -482) (undo-tree-id5891 . -481) (undo-tree-id5892 . -457) (undo-tree-id5893 . -11)) nil (26013 10149 450276 0) 0 nil] [nil nil ((#("        let mut camera_uniform = CameraUniform::new();
        camera_uniform.update_view_proj(&camera);
        let camera_buffer = camera_uniform.create_camera_buffer(&device);


        let camera_bind_group_layout = device.create_bind_group_layout(&wgpu::BindGroupLayoutDescriptor {
            entries: &[
                wgpu::BindGroupLayoutEntry {
                    binding: 0,
                    visibility: wgpu::ShaderStages::VERTEX,
                    ty: wgpu::BindingType::Buffer {
                        ty: wgpu::BufferBindingType::Uniform,
                        has_dynamic_offset: false,
                        min_binding_size: None,
                    },
                    count: None,
                }
            ],
            label: Some(\"camera_bind_group_layout\"),
        });

        let camera_bind_group = device.create_bind_group(&wgpu::BindGroupDescriptor {
            layout: &camera_bind_group_layout,
            entries: &[
                wgpu::BindGroupEntry {
                    binding: 0,
                    resource: camera_buffer.as_entire_binding(),
                }
            ],
            label: Some(\"camera_bind_group\"),
        });" 0 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 15 (face font-lock-keyword-face fontified t) 15 16 (fontified t) 16 30 (face font-lock-variable-name-face fontified t) 30 33 (fontified t) 33 46 (face font-lock-type-face fontified t) 46 51 (fontified t) 51 52 (face (rainbow-delimiters-depth-3-face) fontified t) 52 53 (face (rainbow-delimiters-depth-3-face) fontified t) 53 55 (fontified t) 55 94 (fontified t) 94 95 (face (rainbow-delimiters-depth-3-face) fontified t) 95 96 (face rust-ampersand-face fontified t) 96 102 (fontified t) 102 103 (face (rainbow-delimiters-depth-3-face) fontified t) 103 104 (fontified t rear-nonsticky t) 104 105 (fontified t) 105 113 (fontified t) 113 116 (face font-lock-keyword-face fontified t) 116 117 (fontified t) 117 129 (face font-lock-variable-name-face fontified t) 129 130 (face font-lock-variable-name-face rear-nonsticky t fontified t) 130 133 (fontified t) 133 147 (fontified t) 147 148 (fontified t) 148 168 (fontified t) 168 169 (face (rainbow-delimiters-depth-3-face) fontified t) 169 170 (face rust-ampersand-face fontified t) 170 176 (fontified t) 176 177 (face (rainbow-delimiters-depth-3-face) fontified t) 177 179 (fontified t) 179 180 (fontified t) 180 181 (fontified t) 181 189 (fontified t) 189 192 (face font-lock-keyword-face fontified t) 192 193 (fontified t) 193 217 (face font-lock-variable-name-face fontified t) 217 251 (fontified t) 251 252 (face (rainbow-delimiters-depth-3-face) fontified t) 252 253 (face rust-ampersand-face fontified t) 253 257 (face font-lock-constant-face fontified t) 257 259 (fontified t) 259 284 (face font-lock-type-face fontified t) 284 285 (fontified t) 285 286 (face (rainbow-delimiters-depth-4-face) fontified t) 286 287 (fontified t) 287 299 (fontified t) 299 306 (face font-lock-variable-name-face fontified t) 306 308 (fontified t) 308 309 (face rust-ampersand-face fontified t) 309 310 (face (rainbow-delimiters-depth-5-face) fontified t) 310 327 (fontified t) 327 331 (face font-lock-constant-face fontified t) 331 333 (fontified t) 333 353 (face font-lock-type-face fontified t) 353 354 (fontified t) 354 355 (face (rainbow-delimiters-depth-6-face) fontified t) 355 376 (fontified t) 376 383 (face font-lock-variable-name-face fontified t) 383 408 (fontified t) 408 418 (face font-lock-variable-name-face fontified t) 418 420 (fontified t) 420 424 (face font-lock-constant-face fontified t) 424 426 (fontified t) 426 438 (face font-lock-type-face fontified t) 438 440 (fontified t) 440 446 (face font-lock-type-face fontified t) 446 468 (fontified t) 468 470 (face font-lock-variable-name-face fontified t) 470 472 (fontified t) 472 476 (face font-lock-constant-face fontified t) 476 478 (fontified t) 478 489 (face font-lock-type-face fontified t) 489 491 (fontified t) 491 497 (face font-lock-type-face fontified t) 497 498 (fontified t) 498 499 (face (rainbow-delimiters-depth-7-face) fontified t) 499 524 (fontified t) 524 526 (face font-lock-variable-name-face fontified t) 526 528 (fontified t) 528 532 (face font-lock-constant-face fontified t) 532 534 (fontified t) 534 551 (face font-lock-type-face fontified t) 551 553 (fontified t) 553 560 (face font-lock-type-face fontified t) 560 586 (fontified t) 586 604 (face font-lock-variable-name-face fontified t) 604 606 (fontified t) 606 611 (face font-lock-keyword-face fontified t) 611 637 (fontified t) 637 653 (face font-lock-variable-name-face fontified t) 653 655 (fontified t) 655 659 (face font-lock-type-face fontified t) 659 681 (fontified t) 681 682 (face (rainbow-delimiters-depth-7-face) fontified t) 682 704 (fontified t) 704 709 (face font-lock-variable-name-face fontified t) 709 711 (fontified t) 711 715 (face font-lock-type-face fontified t) 715 733 (fontified t) 733 734 (face (rainbow-delimiters-depth-6-face) fontified t) 734 747 (fontified t) 747 748 (face (rainbow-delimiters-depth-5-face) fontified t) 748 762 (fontified t) 762 767 (face font-lock-variable-name-face fontified t) 767 769 (fontified t) 769 773 (face font-lock-type-face fontified t) 773 774 (face (rainbow-delimiters-depth-5-face) fontified t) 774 800 (face font-lock-string-face fontified t) 800 801 (face (rainbow-delimiters-depth-5-face) fontified t) 801 803 (fontified t) 803 811 (fontified t) 811 812 (face (rainbow-delimiters-depth-4-face) fontified t) 812 813 (face (rainbow-delimiters-depth-3-face) fontified t) 813 815 (fontified t) 815 816 (fontified t) 816 824 (fontified t) 824 827 (face font-lock-keyword-face fontified t) 827 828 (fontified t) 828 845 (face font-lock-variable-name-face fontified t) 845 872 (fontified t) 872 873 (face (rainbow-delimiters-depth-3-face) fontified t) 873 874 (face rust-ampersand-face fontified t) 874 878 (face font-lock-constant-face fontified t) 878 880 (fontified t) 880 899 (face font-lock-type-face fontified t) 899 900 (fontified t) 900 901 (face (rainbow-delimiters-depth-4-face) fontified t) 901 902 (fontified t) 902 914 (fontified t) 914 920 (face font-lock-variable-name-face fontified t) 920 922 (fontified t) 922 923 (face rust-ampersand-face fontified t) 923 961 (fontified t) 961 968 (face font-lock-variable-name-face fontified t) 968 970 (fontified t) 970 971 (face rust-ampersand-face fontified t) 971 972 (face (rainbow-delimiters-depth-5-face) fontified t) 972 989 (fontified t) 989 993 (face font-lock-constant-face fontified t) 993 995 (fontified t) 995 1009 (face font-lock-type-face fontified t) 1009 1010 (fontified t) 1010 1011 (face (rainbow-delimiters-depth-6-face) fontified t) 1011 1032 (fontified t) 1032 1039 (face font-lock-variable-name-face fontified t) 1039 1064 (fontified t) 1064 1072 (face font-lock-variable-name-face fontified t) 1072 1105 (fontified t) 1105 1106 (face (rainbow-delimiters-depth-7-face) fontified t) 1106 1107 (face (rainbow-delimiters-depth-7-face) fontified t) 1107 1125 (fontified t) 1125 1126 (face (rainbow-delimiters-depth-6-face) fontified t) 1126 1139 (fontified t) 1139 1140 (face (rainbow-delimiters-depth-5-face) fontified t) 1140 1154 (fontified t) 1154 1159 (face font-lock-variable-name-face fontified t) 1159 1161 (fontified t) 1161 1165 (face font-lock-type-face fontified t) 1165 1166 (face (rainbow-delimiters-depth-5-face) fontified t) 1166 1185 (face font-lock-string-face fontified t) 1185 1186 (face (rainbow-delimiters-depth-5-face) fontified t) 1186 1196 (fontified t) 1196 1197 (face (rainbow-delimiters-depth-4-face) fontified t) 1197 1198 (face (rainbow-delimiters-depth-3-face) fontified t) 1198 1199 (fontified t)) . 10007) (undo-tree-id5552 . -1199) (undo-tree-id5553 . -169) (undo-tree-id5554 . -8) (undo-tree-id5555 . 1066) (undo-tree-id5556 . -113) (undo-tree-id5557 . -164) (undo-tree-id5558 . -164) (undo-tree-id5559 . -159) (undo-tree-id5560 . -159) (undo-tree-id5561 . -179) (undo-tree-id5562 . -179) (undo-tree-id5563 . -180) (undo-tree-id5564 . -180) (undo-tree-id5565 . -159) (undo-tree-id5566 . -388) (undo-tree-id5567 . -189) (undo-tree-id5568 . -814) (undo-tree-id5569 . -190) (undo-tree-id5570 . -190) (undo-tree-id5571 . -190) (undo-tree-id5572 . -190) (undo-tree-id5573 . -190) (undo-tree-id5574 . -190) (undo-tree-id5575 . -190) (undo-tree-id5576 . -190) (undo-tree-id5577 . -190) (undo-tree-id5578 . -190) (undo-tree-id5579 . -190) (undo-tree-id5580 . -190) (undo-tree-id5581 . -190) (undo-tree-id5582 . -190) (undo-tree-id5583 . -190) (undo-tree-id5584 . -190) (undo-tree-id5585 . -190) (undo-tree-id5586 . -190) (undo-tree-id5587 . -190) (undo-tree-id5588 . -190) (undo-tree-id5589 . -190) (undo-tree-id5590 . -190) (undo-tree-id5591 . -190) (undo-tree-id5592 . -190) (undo-tree-id5593 . -190) (undo-tree-id5594 . -190) (undo-tree-id5595 . -814) (undo-tree-id5596 . -814) (undo-tree-id5597 . -814) (undo-tree-id5598 . -814) (undo-tree-id5599 . -814) (undo-tree-id5600 . -814) (undo-tree-id5601 . 385) (undo-tree-id5602 . -815) (undo-tree-id5603 . -815) (undo-tree-id5604 . 384) (undo-tree-id5605 . -824) (undo-tree-id5606 . -824) (undo-tree-id5607 . -814) (undo-tree-id5608 . -824) (undo-tree-id5609 . -1199) (undo-tree-id5610 . -1199) (undo-tree-id5611 . -1199) (undo-tree-id5612 . -1161) (undo-tree-id5613 . -1109) (undo-tree-id5614 . -1044) (undo-tree-id5615 . -973) (undo-tree-id5616 . -915) (undo-tree-id5617 . -815) (undo-tree-id5618 . -824) (undo-tree-id5619 . -1199) (undo-tree-id5620 . -815) (undo-tree-id5621 . -815) (undo-tree-id5622 . -815) (undo-tree-id5623 . -815) (undo-tree-id5624 . -815) (undo-tree-id5625 . -815) (undo-tree-id5626 . -815) (undo-tree-id5627 . -815) (undo-tree-id5628 . -815) (undo-tree-id5629 . -815) (undo-tree-id5630 . -815) (undo-tree-id5631 . -815) (undo-tree-id5632 . -815) (undo-tree-id5633 . -815) (undo-tree-id5634 . -815) (undo-tree-id5635 . -815) (undo-tree-id5636 . -815) (undo-tree-id5637 . -815) (undo-tree-id5638 . -1199) (undo-tree-id5639 . -1199) (undo-tree-id5640 . -1199) (undo-tree-id5641 . -1157) (undo-tree-id5642 . -1122) (undo-tree-id5643 . -1056) (undo-tree-id5644 . -1022) (undo-tree-id5645 . -958) (undo-tree-id5646 . -910) (undo-tree-id5647 . -909) (undo-tree-id5648 . -909) (undo-tree-id5649 . -815) (undo-tree-id5650 . -809) (undo-tree-id5651 . -755) (undo-tree-id5652 . -739) (undo-tree-id5653 . -179) (undo-tree-id5654 . -109) (undo-tree-id5655 . -4) (undo-tree-id5656 . -4) (undo-tree-id5657 . -4) (undo-tree-id5658 . -4) (undo-tree-id5659 . -4) (undo-tree-id5660 . -4) (undo-tree-id5661 . -3) (undo-tree-id5662 . -2) (undo-tree-id5663 . -1) (undo-tree-id5664 . -1199) (undo-tree-id5665 . -1199) (undo-tree-id5666 . -1199)) ((10007 . 11206)) (26013 10097 288191 0) 0 nil])
([nil nil ((6577 . 6585) (#("        " 0 8 (fontified nil)) . 6576) (undo-tree-id5705 . -8) (undo-tree-id5706 . -8) (undo-tree-id5707 . -8) (6576 . 6585) (#("        " 0 8 (fontified nil)) . 6575) (undo-tree-id5708 . -8) (undo-tree-id5709 . -8) (undo-tree-id5710 . -8) (6574 . 6584)) nil (26013 10149 450093 0) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 8266 . 8267) (nil fontified nil 8266 . 8267) (nil fontified nil 8265 . 8266) (nil fontified nil 8264 . 8265) (nil fontified nil 8254 . 8264) (nil fontified nil 8253 . 8254) (nil fontified nil 8234 . 8253) (nil fontified nil 8233 . 8234) (nil fontified nil 8229 . 8233) (nil fontified nil 8227 . 8229) (nil fontified nil 8222 . 8227) (nil fontified nil 8208 . 8222) (nil fontified nil 8207 . 8208) (nil fontified nil 8194 . 8207) (nil fontified nil 8193 . 8194) (nil fontified nil 8175 . 8193) (nil fontified nil 8174 . 8175) (nil fontified nil 8173 . 8174) (nil fontified nil 8140 . 8173) (nil fontified nil 8132 . 8140) (nil fontified nil 8107 . 8132) (nil fontified nil 8100 . 8107) (nil fontified nil 8079 . 8100) (nil fontified nil 8078 . 8079) (nil fontified nil 8077 . 8078) (nil fontified nil 8063 . 8077) (nil fontified nil 8061 . 8063) (nil fontified nil 8057 . 8061) (nil fontified nil 8040 . 8057) (nil fontified nil 8039 . 8040) (nil fontified nil 8038 . 8039) (nil fontified nil 8036 . 8038) (nil fontified nil 8029 . 8036) (nil fontified nil 7991 . 8029) (nil fontified nil 7990 . 7991) (nil fontified nil 7988 . 7990) (nil fontified nil 7982 . 7988) (nil fontified nil 7970 . 7982) (nil fontified nil 7969 . 7970) (nil fontified nil 7968 . 7969) (nil fontified nil 7967 . 7968) (nil fontified nil 7948 . 7967) (nil fontified nil 7946 . 7948) (nil fontified nil 7942 . 7946) (nil fontified nil 7941 . 7942) (nil fontified nil 7940 . 7941) (nil fontified nil 7913 . 7940) (nil fontified nil 7896 . 7913) (nil fontified nil 7895 . 7896) (nil fontified nil 7892 . 7895) (nil fontified nil 7884 . 7892) (nil fontified nil 7883 . 7884) (nil fontified nil 7881 . 7883) (nil fontified nil 7880 . 7881) (nil fontified nil 7879 . 7880) (nil fontified nil 7871 . 7879) (nil fontified nil 7869 . 7871) (nil fontified nil 7868 . 7869) (nil fontified nil 7842 . 7868) (nil fontified nil 7841 . 7842) (nil fontified nil 7837 . 7841) (nil fontified nil 7835 . 7837) (nil fontified nil 7830 . 7835) (nil fontified nil 7816 . 7830) (nil fontified nil 7815 . 7816) (nil fontified nil 7802 . 7815) (nil fontified nil 7801 . 7802) (nil fontified nil 7783 . 7801) (nil fontified nil 7779 . 7783) (nil fontified nil 7777 . 7779) (nil fontified nil 7772 . 7777) (nil fontified nil 7750 . 7772) (nil fontified nil 7749 . 7750) (nil fontified nil 7727 . 7749) (nil fontified nil 7723 . 7727) (nil fontified nil 7721 . 7723) (nil fontified nil 7705 . 7721) (nil fontified nil 7679 . 7705) (nil fontified nil 7674 . 7679) (nil fontified nil 7672 . 7674) (nil fontified nil 7654 . 7672) (nil fontified nil 7628 . 7654) (nil fontified nil 7621 . 7628) (nil fontified nil 7619 . 7621) (nil fontified nil 7602 . 7619) (nil fontified nil 7600 . 7602) (nil fontified nil 7596 . 7600) (nil fontified nil 7594 . 7596) (nil fontified nil 7592 . 7594) (nil fontified nil 7567 . 7592) (nil fontified nil 7566 . 7567) (nil fontified nil 7565 . 7566) (nil fontified nil 7559 . 7565) (nil fontified nil 7557 . 7559) (nil fontified nil 7546 . 7557) (nil fontified nil 7544 . 7546) (nil fontified nil 7540 . 7544) (nil fontified nil 7538 . 7540) (nil fontified nil 7536 . 7538) (nil fontified nil 7514 . 7536) (nil fontified nil 7508 . 7514) (nil fontified nil 7506 . 7508) (nil fontified nil 7494 . 7506) (nil fontified nil 7492 . 7494) (nil fontified nil 7488 . 7492) (nil fontified nil 7486 . 7488) (nil fontified nil 7476 . 7486) (nil fontified nil 7451 . 7476) (nil fontified nil 7444 . 7451) (nil fontified nil 7423 . 7444) (nil fontified nil 7422 . 7423) (nil fontified nil 7421 . 7422) (nil fontified nil 7401 . 7421) (nil fontified nil 7399 . 7401) (nil fontified nil 7395 . 7399) (nil fontified nil 7378 . 7395) (nil fontified nil 7377 . 7378) (nil fontified nil 7376 . 7377) (nil fontified nil 7374 . 7376) (nil fontified nil 7367 . 7374) (nil fontified nil 7355 . 7367) (nil fontified nil 7354 . 7355) (nil fontified nil 7353 . 7354) (nil fontified nil 7352 . 7353) (nil fontified nil 7327 . 7352) (nil fontified nil 7325 . 7327) (nil fontified nil 7321 . 7325) (nil fontified nil 7320 . 7321) (nil fontified nil 7319 . 7320) (nil fontified nil 7285 . 7319) (nil fontified nil 7261 . 7285) (nil fontified nil 7260 . 7261) (nil fontified nil 7257 . 7260) (nil fontified nil 7249 . 7257) (nil fontified nil 7248 . 7249) (nil fontified nil 7247 . 7248) (nil fontified nil 7245 . 7247) (nil fontified nil 7244 . 7245) (nil fontified nil 7238 . 7244) (nil fontified nil 7237 . 7238) (nil fontified nil 7236 . 7237) (nil fontified nil 7216 . 7236) (nil fontified nil 7215 . 7216) (nil fontified nil 7201 . 7215) (nil fontified nil 7198 . 7201) (nil fontified nil 7197 . 7198) (nil fontified nil 7185 . 7197) (nil fontified nil 7184 . 7185) (nil fontified nil 7181 . 7184) (nil fontified nil 7173 . 7181) (nil fontified nil 7172 . 7173) (nil fontified nil 7171 . 7172) (nil fontified nil 7170 . 7171) (nil fontified nil 7164 . 7170) (nil fontified nil 7163 . 7164) (nil fontified nil 7162 . 7163) (nil fontified nil 7123 . 7162) (nil fontified nil 7121 . 7123) (nil fontified nil 7120 . 7121) (nil fontified nil 7119 . 7120) (nil fontified nil 7114 . 7119) (nil fontified nil 7101 . 7114) (nil fontified nil 7098 . 7101) (nil fontified nil 7084 . 7098) (nil fontified nil 7083 . 7084) (nil fontified nil 7080 . 7083) (nil fontified nil 7079 . 7080) (nil fontified nil 7076 . 7079) (nil fontified nil 7068 . 7076) (nil fontified nil 7067 . 7068) (nil fontified nil 7066 . 7067) (nil fontified nil 7065 . 7066) (nil fontified nil 7064 . 7065) (nil fontified nil 7056 . 7064) (nil fontified nil 7047 . 7056) (nil fontified nil 7043 . 7047) (nil fontified nil 7031 . 7043) (nil fontified nil 7024 . 7031) (nil fontified nil 7019 . 7024) (nil fontified nil 7007 . 7019) (nil fontified nil 6999 . 7007) (nil fontified nil 6995 . 6999) (nil fontified nil 6983 . 6995) (nil fontified nil 6981 . 6983) (nil fontified nil 6978 . 6981) (nil fontified nil 6977 . 6978) (nil fontified nil 6975 . 6977) (nil fontified nil 6958 . 6975) (nil fontified nil 6955 . 6958) (nil fontified nil 6954 . 6955) (nil fontified nil 6952 . 6954) (nil fontified nil 6937 . 6952) (nil fontified nil 6931 . 6937) (nil fontified nil 6919 . 6931) (nil fontified nil 6917 . 6919) (nil fontified nil 6916 . 6917) (nil fontified nil 6915 . 6916) (nil fontified nil 6907 . 6915) (nil fontified nil 6900 . 6907) (nil fontified nil 6898 . 6900) (nil fontified nil 6892 . 6898) (nil fontified nil 6890 . 6892) (nil fontified nil 6888 . 6890) (nil fontified nil 6876 . 6888) (nil fontified nil 6858 . 6876) (nil fontified nil 6855 . 6858) (nil fontified nil 6843 . 6855) (nil fontified nil 6841 . 6843) (nil fontified nil 6840 . 6841) (nil fontified nil 6839 . 6840) (nil fontified nil 6834 . 6839) (nil fontified nil 6833 . 6834) (nil fontified nil 6820 . 6833) (nil fontified nil 6819 . 6820) (nil fontified nil 6817 . 6819) (nil fontified nil 6811 . 6817) (nil fontified nil 6799 . 6811) (nil fontified nil 6772 . 6799) (nil fontified nil 6769 . 6772) (nil fontified nil 6757 . 6769) (nil fontified nil 6755 . 6757) (nil fontified nil 6754 . 6755) (nil fontified nil 6753 . 6754) (nil fontified nil 6748 . 6753) (nil fontified nil 6747 . 6748) (nil fontified nil 6734 . 6747) (nil fontified nil 6733 . 6734) (nil fontified nil 6731 . 6733) (nil fontified nil 6728 . 6731) (nil fontified nil 6716 . 6728) (nil fontified nil 6692 . 6716) (nil fontified nil 6689 . 6692) (nil fontified nil 6677 . 6689) (nil fontified nil 6630 . 6677) (nil fontified nil 6627 . 6630) (nil fontified nil 6615 . 6627) (nil fontified nil 6614 . 6615) (nil fontified nil 6613 . 6614) (nil fontified nil 6612 . 6613) (nil fontified nil 6606 . 6612) (nil fontified nil 6603 . 6606) (nil fontified nil 6597 . 6603) (nil fontified nil 6596 . 6597) (nil fontified nil 6593 . 6596) (nil fontified nil 6585 . 6593) (6585 . 8267)) nil (26013 10149 450075 0) 0 nil])
([nil nil ((8636 . 8639)) nil (26013 10149 450010 0) 0 nil])
([nil nil ((8639 . 8645)) nil (26013 10149 450009 0) 0 nil])
([nil nil ((8639 . 8663) (#("camera" 0 6 (fontified nil)) . 8639) (8639 . 8645) (#("camera_bind_group_layout" 0 24 (fontified nil)) . -8639) (8639 . 8663) (#("camera" 0 6 (fontified t)) . -8639) (undo-tree-id5685 . -6) (undo-tree-id5686 . -1) (undo-tree-id5687 . -1) (undo-tree-id5688 . -1) (undo-tree-id5689 . -2) (undo-tree-id5690 . -2) (undo-tree-id5691 . -2) (undo-tree-id5692 . -2) (undo-tree-id5693 . -3) (undo-tree-id5694 . -3) (undo-tree-id5695 . -4) (undo-tree-id5696 . -4) (undo-tree-id5697 . -5) (undo-tree-id5698 . -5) (undo-tree-id5699 . -6) (undo-tree-id5700 . -6) (undo-tree-id5701 . -6) (undo-tree-id5702 . -6) (undo-tree-id5703 . -6) (undo-tree-id5704 . -6) 8645) nil (26013 10149 450007 0) 0 nil])
([nil nil ((8610 . 8631)) nil (26013 10149 449985 0) 0 nil])
([nil nil ((8659 . 8679) (#(" " 0 1 (fontified nil)) . 8658) (undo-tree-id5673 . -1) (undo-tree-id5674 . -1) (undo-tree-id5675 . -1) (undo-tree-id5676 . -1) (undo-tree-id5677 . -1) (undo-tree-id5678 . -1) (undo-tree-id5679 . -1) (undo-tree-id5680 . -1) (undo-tree-id5681 . -1) (undo-tree-id5682 . -1) (undo-tree-id5683 . -1) (undo-tree-id5684 . -1) (8659 . 8660)) nil (26013 10149 449983 0) 0 nil])
([nil nil ((8704 . 8721)) nil (26013 10149 449957 0) 0 nil])
([nil nil ((#("    camera: Camera,

" 0 4 (fontified t) 4 10 (face font-lock-variable-name-face fontified t) 10 12 (fontified t) 12 18 (face font-lock-type-face fontified t) 18 19 (fontified t) 19 20 (fontified t rear-nonsticky t) 20 21 (fontified t)) . 2600) (undo-tree-id5894 . -21) (undo-tree-id5895 . -4) (undo-tree-id5896 . -19) (undo-tree-id5897 . -4) (undo-tree-id5898 . -19) (undo-tree-id5899 . -19) (undo-tree-id5900 . -19) (undo-tree-id5901 . -19) (undo-tree-id5902 . -19) (undo-tree-id5903 . -19) (undo-tree-id5904 . -19) (undo-tree-id5905 . -19) (undo-tree-id5906 . -19) (undo-tree-id5907 . -21) (undo-tree-id5908 . -21) (undo-tree-id5909 . -18) (undo-tree-id5910 . -12) (undo-tree-id5911 . -10) (undo-tree-id5912 . -4) (undo-tree-id5913 . -21) (undo-tree-id5914 . -21) (t 26013 10149 474914 870000)) nil (26013 10169 314176 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 2726 . 2727) (nil fontified nil 2600 . 2727) (2600 . 2727)) nil (26013 10169 314140 0) 0 nil])
([nil nil ((11845 . 11858) (t 26013 10169 338734 761000)) nil (26013 10183 616117 0) 0 nil])
([nil nil ((11858 . 11860)) nil (26013 10183 616115 0) 0 nil])
([nil nil ((11858 . 11872) (#("ca" 0 2 (fontified nil)) . 11858) (11858 . 11860) (#("camera_uniform" 0 14 (fontified nil)) . -11858) (11858 . 11872) (#("ca" 0 2 (fontified t)) . -11858) (undo-tree-id5932 . -2) (undo-tree-id5933 . -1) (undo-tree-id5934 . -2) (undo-tree-id5935 . -2) (undo-tree-id5936 . -2) 11860) nil (26013 10183 616114 0) 0 nil])
([nil nil ((11872 . 11873)) nil (26013 10183 616106 0) 0 nil])
([nil nil ((11873 . 11886)) nil (26013 10183 616105 0) 0 nil])
([nil nil ((11886 . 11888)) nil (26013 10183 616104 0) 0 nil])
([nil nil ((11886 . 11899) (#("ca" 0 2 (fontified nil)) . 11886) (11886 . 11888) (#("camera_buffer" 0 13 (fontified nil)) . -11886) (11886 . 11899) (#("ca" 0 2 (fontified t)) . -11886) (undo-tree-id5924 . -2) (undo-tree-id5925 . -1) (undo-tree-id5926 . -2) (undo-tree-id5927 . -2) (undo-tree-id5928 . -2) (undo-tree-id5929 . -2) (undo-tree-id5930 . -2) (undo-tree-id5931 . -2) 11888) nil (26013 10183 616102 0) 0 nil])
([nil nil ((11899 . 11900)) nil (26013 10183 616092 0) 0 nil])
([nil nil ((11900 . 11913)) nil (26013 10183 616091 0) 0 nil])
([nil nil ((11913 . 11915)) nil (26013 10183 616090 0) 0 nil])
([nil nil ((11913 . 11930) (#("ca" 0 2 (fontified nil)) . 11913) (11913 . 11915) (#("camera_bind_group" 0 17 (fontified nil)) . -11913) (11913 . 11930) (#("ca" 0 2 (fontified t)) . -11913) (undo-tree-id5915 . -2) (undo-tree-id5916 . -1) (undo-tree-id5917 . -1) (undo-tree-id5918 . -1) (undo-tree-id5919 . -2) (undo-tree-id5920 . -2) (undo-tree-id5921 . -2) (undo-tree-id5922 . -2) (undo-tree-id5923 . -2) 11915) nil (26013 10183 616087 0) 0 nil])
([nil nil ((11930 . 11931)) nil (26013 10183 616063 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 16517 . 16518) (nil fontified nil 16457 . 16518) (16457 . 16518) (t 26013 10183 640965 970000)) nil (26013 10202 977545 0) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -16449) (undo-tree-id5937 . -8) (undo-tree-id5938 . -8) (undo-tree-id5939 . -8) (undo-tree-id5940 . -8) (undo-tree-id5941 . -8) (undo-tree-id5942 . -8) (undo-tree-id5943 . -8) (undo-tree-id5944 . -8) (undo-tree-id5945 . -8) 16506) nil (26013 10202 977540 0) 0 nil])
([nil nil ((2619 . 2624) (t 26013 10203 2707 759000)) nil (26013 10980 854912 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 2664 . 2665) (nil fontified nil 2624 . 2665) (2624 . 2665)) nil (26013 10980 854911 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2624) 2620) nil (26013 10980 854909 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 11510 . 11511) (nil fontified nil 11451 . 11511) (11451 . 11511)) nil (26013 10980 854908 0) 0 nil])
([nil nil ((11947 . 11960)) nil (26013 10980 854906 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 11990 . 11991) (nil fontified nil 11960 . 11991) (11960 . 11991)) nil (26013 10980 854904 0) 0 nil])
([nil nil ((#("            " 0 12 (fontified t)) . -11960) 11948) nil (26013 10980 854899 0) 0 nil])
([nil nil ((12540 . 12549) (t 26013 10980 879690 900000)) nil (26013 10999 93156 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 12597 . 12598) (nil fontified nil 12549 . 12598) (12549 . 12598)) nil (26013 10999 93154 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -12549) 12541) nil (26013 10999 93152 0) 0 nil])
([nil nil ((12593 . 12594)) nil (26013 10999 93148 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 15709 . 15710) (nil fontified nil 15500 . 15710) (15500 . 15710) (t 26013 10999 118589 917000)) nil (26013 11028 510614 0) 0 nil])
([nil nil ((15624 . 15632) (#("    " 0 4 (fontified t)) . 15624) (15564 . 15572) (#("    " 0 4 (fontified t)) . 15564) (15500 . 15508) 15667) nil (26013 11152 335330 0) 0 nil])
([nil nil ((apply -150 12597 15616 undo--wrap-and-run-primitive-undo 12597 15616 ((" " . 12599) (15603 . 15606) (15577 . 15580) (15559 . 15562) (15535 . 15538) (15514 . 15517) (15453 . 15456) (15353 . 15356) (15238 . 15241) (15159 . 15162) (15079 . 15082) (15021 . 15024) (14986 . 14989) (14927 . 14930) (14889 . 14892) (14753 . 14756) (14596 . 14599) (14548 . 14551) (14520 . 14523) (14363 . 14366) (14214 . 14217) (14166 . 14169) (14117 . 14120) (14003 . 14006) (13910 . 13913) (13871 . 13874) (13849 . 13852) (13827 . 13830) (13801 . 13804) (13729 . 13732) (13676 . 13679) (13639 . 13642) (13595 . 13598) (13577 . 13580) (13553 . 13556) (13532 . 13535) (13471 . 13474) (13371 . 13374) (13256 . 13259) (13177 . 13180) (13097 . 13100) (13039 . 13042) (13004 . 13007) (12921 . 12924) (12856 . 12859) (12791 . 12794) (12727 . 12730) (12705 . 12708) (12663 . 12666) (12622 . 12625) (12597 . 12600) (12597 . 12598) 15465))) nil (26013 11162 550729 0) 0 nil] [nil nil ((apply -51 12618 13591 undo--wrap-and-run-primitive-undo 12618 13591 ((13573 . 13576) (13549 . 13552) (13528 . 13531) (13467 . 13470) (13367 . 13370) (13252 . 13255) (13173 . 13176) (13093 . 13096) (13035 . 13038) (13000 . 13003) (12917 . 12920) (12852 . 12855) (12787 . 12790) (12723 . 12726) (12701 . 12704) (12659 . 12662) (12618 . 12621)))) ((apply 51 12618 13540 undo--wrap-and-run-primitive-undo 12618 13540 ((#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 12618) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 12659) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 12701) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 12723) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 12787) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 12852) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 12917) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 13000) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 13035) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 13093) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 13173) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 13252) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 13367) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 13467) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 13528) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 13549) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 13573) 12917))) (26013 11106 619332 0) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -12593) (undo-tree-id5946 . -1) (undo-tree-id5947 . -1) (undo-tree-id5948 . -1) (undo-tree-id5949 . -1) (undo-tree-id5950 . -1) (undo-tree-id5951 . -1) (undo-tree-id5952 . -1) (undo-tree-id5953 . -1) (undo-tree-id5954 . -1) (undo-tree-id5955 . -1) 12594 (t 26013 11162 575702 971000)) nil (26013 11314 48667 0) 0 nil])
nil
([nil nil ((15648 . 15657) (t 26013 11316 665308 102000)) nil (26013 11698 165428 0) 0 nil] [nil nil ((#("]" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -15871) (undo-tree-id5966 . -1) (undo-tree-id5967 . -1) (undo-tree-id5968 . -1) (undo-tree-id5969 . -1) (undo-tree-id5970 . -1) (undo-tree-id5971 . -1) 15872 (t 26013 11167 197572 344000)) ((15871 . 15872)) (26013 11313 766811 0) 0 nil])
([nil nil ((15657 . 15658)) nil (26013 11698 165427 0) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -15851) (undo-tree-id5956 . -1) (undo-tree-id5957 . -1) (undo-tree-id5958 . -1) (undo-tree-id5959 . -1) (undo-tree-id5960 . -1) (undo-tree-id5961 . -1) (undo-tree-id5962 . -1) (undo-tree-id5963 . -1) (undo-tree-id5964 . -1) (undo-tree-id5965 . -1) 15852) ((15851 . 15852)) (26013 11313 478716 0) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -15657) (undo-tree-id6024 . -1) (undo-tree-id6025 . -1) 15658) nil (26013 11698 165426 0) 0 nil])
([nil nil ((15870 . 15871)) ((#("." 0 1 (fontified t)) . 15870) (undo-tree-id5990 . -1) (undo-tree-id5991 . -1) (undo-tree-id5992 . -1) (undo-tree-id5993 . -1) (undo-tree-id5994 . -1) (undo-tree-id5995 . -1) (undo-tree-id5996 . -1) (undo-tree-id5997 . -1) (undo-tree-id5998 . -1) (undo-tree-id5999 . -1) (undo-tree-id6000 . -1) (undo-tree-id6001 . -1) (undo-tree-id6002 . -1) (undo-tree-id6003 . -1) (undo-tree-id6004 . -1) (undo-tree-id6005 . -1) (undo-tree-id6006 . -1) (undo-tree-id6007 . -1) (undo-tree-id6008 . -1) (undo-tree-id6009 . -1)) (26013 11312 992069 0) 0 nil])
([nil nil ((15657 . 15661)) nil (26013 11698 165422 0) 0 nil])
([nil nil ((15871 . 15880) (#("view_proj" 0 9 (fontified nil)) . -15871) (15871 . 15880)) ((#("view_proj" 0 9 (fontified nil)) . 15871) (15871 . 15880) (#("view_proj" 0 9 (fontified t)) . 15871) (undo-tree-id5972 . -9) (undo-tree-id5973 . -9) (undo-tree-id5974 . -9) (undo-tree-id5975 . -9) (undo-tree-id5976 . -9) (undo-tree-id5977 . -9) (undo-tree-id5978 . -9) (undo-tree-id5979 . -9) (undo-tree-id5980 . -9) (undo-tree-id5981 . -9) (undo-tree-id5982 . -9) (undo-tree-id5983 . -9) (undo-tree-id5984 . -9) (undo-tree-id5985 . -9) (undo-tree-id5986 . -9) (undo-tree-id5987 . -9) (undo-tree-id5988 . -9) (undo-tree-id5989 . -9) (t 26013 11254 209656 91000)) (26013 11254 183551 0) 0 nil])
([nil nil ((apply yas--snippet-revive 15657 15664 #s(yas--snippet nil nil #s(yas--exit 15663 nil) 52 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 15663 nil) 52 nil nil nil nil)) (15657 . 15664) (#("info!($0)" 0 9 (fontified nil)) . 15657) (15657 . 15666) (#("info" 0 4 (fontified nil)) . 15657) (15657 . 15661) (#("info!(…)" 0 8 (fontified nil)) . -15657) (15657 . 15665) (#("info" 0 4 (fontified t)) . -15657) (undo-tree-id6014 . -4) (undo-tree-id6015 . -1) (undo-tree-id6016 . -2) (undo-tree-id6017 . -2) (undo-tree-id6018 . -3) (undo-tree-id6019 . -3) (undo-tree-id6020 . -4) (undo-tree-id6021 . -4) (undo-tree-id6022 . -4) (undo-tree-id6023 . -4) 15661) nil (26013 11698 165420 0) 0 nil])
nil
([nil nil ((15663 . 15665)) nil (26013 11698 165406 0) 0 nil])
([nil nil ((15664 . 15670)) nil (26013 11698 165405 0) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-string-face fontified t)) . -15669) (undo-tree-id6010 . -1) (undo-tree-id6011 . -1) (undo-tree-id6012 . -1) (undo-tree-id6013 . -1) 15670) nil (26013 11698 165403 0) 0 nil])
([nil nil ((15669 . 15672)) nil (26013 11698 165389 0) 0 nil])
([nil nil ((15674 . 15675)) nil (26013 11698 165385 0) 0 nil])
([nil nil ((#(" //        match event {
//             WindowEvent::CursorMoved{
//                 device_id: _, position
//             } => {
//                 let x = position.x/(self.size.width as f64);
//                 let y = position.y/(self.size.height as f64);
// //                info!(\"mouse position x: {}, y: {}\", x, y);
//                 match self.render(wgpu::Color { r: x, g: 0.5, b: y, a: 1.0 }) {
//                     Ok(_) => {}
//                     // Reconfigure the surface if lost
//                     Err(wgpu::SurfaceError::Lost) => self.resize(self.size),
//                     // The system is out of memory, we should probably quit
//                     Err(wgpu::SurfaceError::OutOfMemory) => tracing::error!(\"wgpu::SurfaceError::OutOfMemory\"),
//                     // All other errors (Outdated, Timeout) should be resolved by the next frame
//                     Err(e) => tracing::error!(\"{:?}\", e),
//                 }
//                 true
//             },
//             WindowEvent::KeyboardInput {
//                 event: KeyEvent {
//                     state: ElementState::Pressed,
//                     physical_key: PhysicalKey::Code(KeyCode::Space),
//                     ..
//                 },
//                 ..
//             } => {
                
// //                std::mem::swap(&mut self.diffuse_texture, &mut self.diffuse_texture_1);
//                 //                std::mem::swap(&mut self.diffuse_bind_group, &mut self.diffuse_bind_group_1)
//                 if self.pipeline_index == 0 {
//                     self.pipeline_index = 1;
//                     self.diffuse_texture = texture::Texture::from_path(std::path::Path::new(\"1.jpeg\"), &self.device, &self.queue, None).unwrap();
//                     self.diffuse_bind_group = self.diffuse_texture.create_bind_group(&self.device, &self.texture_bind_group_layout);
                    
//                 } else {
//                     self.pipeline_index = 0;
//                     self.dif" 0 1 (fontified t) 1 3 (face font-lock-comment-delimiter-face fontified t) 3 4 (face font-lock-comment-delimiter-face fontified t) 4 8 (face font-lock-comment-delimiter-face fontified t) 8 11 (face font-lock-comment-delimiter-face fontified t) 11 16 (face font-lock-comment-face fontified t) 16 23 (face font-lock-comment-face fontified t) 23 24 (face font-lock-comment-face fontified t) 24 25 (face font-lock-comment-face fontified t) 25 28 (face font-lock-comment-delimiter-face fontified t) 28 40 (face font-lock-comment-delimiter-face fontified t) 40 44 (face font-lock-comment-face fontified t) 44 51 (face font-lock-comment-face fontified t) 51 53 (face font-lock-comment-face fontified t) 53 64 (face font-lock-comment-face fontified t) 64 65 (face font-lock-comment-face fontified t) 65 66 (face font-lock-comment-face fontified t) 66 69 (face font-lock-comment-delimiter-face fontified t) 69 85 (face font-lock-comment-delimiter-face fontified t) 85 94 (face font-lock-comment-face fontified t) 94 108 (face font-lock-comment-face fontified t) 108 111 (face font-lock-comment-delimiter-face fontified t) 111 123 (face font-lock-comment-delimiter-face fontified t) 123 124 (face font-lock-comment-face fontified t) 124 126 (face font-lock-comment-face fontified t) 126 127 (face font-lock-comment-face fontified t syntax-table (1)) 127 128 (face font-lock-comment-face fontified t) 128 129 (face font-lock-comment-face fontified t) 129 130 (face font-lock-comment-face fontified t) 130 133 (face font-lock-comment-delimiter-face fontified t) 133 149 (face font-lock-comment-delimiter-face fontified t) 149 152 (face font-lock-comment-face fontified t) 152 153 (face font-lock-comment-face fontified t) 153 154 (face font-lock-comment-face fontified t) 154 168 (face font-lock-comment-face fontified t) 168 169 (face font-lock-comment-face fontified t) 169 173 (face font-lock-comment-face fontified t) 173 183 (face font-lock-comment-face fontified t) 183 185 (face font-lock-comment-face fontified t) 185 187 (face font-lock-comment-face fontified t) 187 188 (face font-lock-comment-face fontified t) 188 191 (face font-lock-comment-face fontified t) 191 192 (face font-lock-comment-face fontified t) 192 194 (face font-lock-comment-face fontified t) 194 197 (face font-lock-comment-delimiter-face fontified t) 197 213 (face font-lock-comment-delimiter-face fontified t) 213 216 (face font-lock-comment-face fontified t) 216 217 (face font-lock-comment-face fontified t) 217 218 (face font-lock-comment-face fontified t) 218 232 (face font-lock-comment-face fontified t) 232 233 (face font-lock-comment-face fontified t) 233 237 (face font-lock-comment-face fontified t) 237 250 (face font-lock-comment-face fontified t) 250 252 (face font-lock-comment-face fontified t) 252 253 (face font-lock-comment-face fontified t) 253 254 (face font-lock-comment-face fontified t) 254 256 (face font-lock-comment-face fontified t) 256 257 (face font-lock-comment-face fontified t) 257 259 (face font-lock-comment-face fontified t) 259 262 (face font-lock-comment-delimiter-face fontified t) 262 266 (face font-lock-comment-face fontified t) 266 267 (face font-lock-comment-face fontified t) 267 280 (face font-lock-comment-face fontified t) 280 324 (face font-lock-comment-face fontified t) 324 327 (face font-lock-comment-delimiter-face fontified t) 327 343 (face font-lock-comment-delimiter-face fontified t) 343 348 (face font-lock-comment-face fontified t) 348 349 (face font-lock-comment-face fontified t) 349 353 (face font-lock-comment-face fontified t) 353 360 (face font-lock-comment-face fontified t) 360 361 (face font-lock-comment-face fontified t) 361 365 (face font-lock-comment-face fontified t) 365 367 (face font-lock-comment-face fontified t) 367 372 (face font-lock-comment-face fontified t) 372 373 (face font-lock-comment-face fontified t) 373 374 (face font-lock-comment-face fontified t) 374 375 (face font-lock-comment-face fontified t) 375 376 (face font-lock-comment-face fontified t) 376 381 (face font-lock-comment-face fontified t) 381 382 (face font-lock-comment-face fontified t) 382 384 (face font-lock-comment-face fontified t) 384 389 (face font-lock-comment-face fontified t) 389 390 (face font-lock-comment-face fontified t) 390 395 (face font-lock-comment-face fontified t) 395 396 (face font-lock-comment-face fontified t) 396 402 (face font-lock-comment-face fontified t) 402 403 (face font-lock-comment-face fontified t) 403 404 (face font-lock-comment-face fontified t) 404 405 (face font-lock-comment-face fontified t) 405 406 (face font-lock-comment-face fontified t) 406 407 (face font-lock-comment-face fontified t) 407 410 (face font-lock-comment-delimiter-face fontified t) 410 430 (face font-lock-comment-delimiter-face fontified t) 430 432 (face font-lock-comment-face fontified t) 432 433 (face font-lock-comment-face fontified t) 433 434 (face font-lock-comment-face fontified t) 434 435 (face font-lock-comment-face fontified t) 435 437 (face font-lock-comment-face fontified t) 437 438 (face font-lock-comment-face fontified t syntax-table (1)) 438 439 (face font-lock-comment-face fontified t) 439 440 (face font-lock-comment-face fontified t) 440 441 (face font-lock-comment-face fontified t) 441 442 (face font-lock-comment-face fontified t) 442 445 (face font-lock-comment-delimiter-face fontified t) 445 465 (face font-lock-comment-delimiter-face fontified t) 465 468 (face font-lock-comment-face fontified t) 468 500 (face font-lock-comment-face fontified t) 500 503 (face font-lock-comment-delimiter-face fontified t) 503 523 (face font-lock-comment-delimiter-face fontified t) 523 526 (face font-lock-comment-face fontified t) 526 527 (face font-lock-comment-face fontified t) 527 531 (face font-lock-comment-face fontified t) 531 533 (face font-lock-comment-face fontified t) 533 536 (face font-lock-comment-face fontified t) 536 545 (face font-lock-comment-face fontified t) 545 547 (face font-lock-comment-face fontified t) 547 551 (face font-lock-comment-face fontified t) 551 552 (face font-lock-comment-face fontified t) 552 554 (face font-lock-comment-face fontified t) 554 555 (face font-lock-comment-face syntax-table (1) fontified t) 555 556 (face font-lock-comment-face fontified t) 556 560 (face font-lock-comment-face fontified t) 560 567 (face font-lock-comment-face fontified t) 567 568 (face font-lock-comment-face fontified t) 568 572 (face font-lock-comment-face fontified t) 572 577 (face font-lock-comment-face fontified t) 577 578 (face font-lock-comment-face fontified t) 578 580 (face font-lock-comment-face fontified t) 580 583 (face font-lock-comment-delimiter-face fontified t) 583 603 (face font-lock-comment-delimiter-face fontified t) 603 606 (face font-lock-comment-face fontified t) 606 624 (face font-lock-comment-face fontified t) 624 625 (face font-lock-comment-face fontified t) 625 626 (face font-lock-comment-face fontified t) 626 627 (face font-lock-comment-face fontified t) 627 630 (face font-lock-comment-face fontified t) 630 632 (face font-lock-comment-face fontified t) 632 646 (face font-lock-comment-face fontified t) 646 659 (face font-lock-comment-face fontified t) 659 662 (face font-lock-comment-delimiter-face fontified t) 662 682 (face font-lock-comment-delimiter-face fontified t) 682 685 (face font-lock-comment-face fontified t) 685 686 (face font-lock-comment-face fontified t) 686 688 (face font-lock-comment-face fontified t) 688 689 (face font-lock-comment-face fontified t) 689 690 (face font-lock-comment-face fontified t) 690 692 (face font-lock-comment-face fontified t) 692 704 (face font-lock-comment-face fontified t) 704 706 (face font-lock-comment-face fontified t) 706 717 (face font-lock-comment-face fontified t) 717 718 (face font-lock-comment-face fontified t) 718 720 (face font-lock-comment-face fontified t) 720 721 (face font-lock-comment-face syntax-table (1) fontified t) 721 722 (face font-lock-comment-face fontified t) 722 729 (face font-lock-comment-face fontified t) 729 731 (face font-lock-comment-face fontified t) 731 737 (face font-lock-comment-face fontified t) 737 738 (face font-lock-comment-face fontified t) 738 756 (face font-lock-comment-face fontified t) 756 771 (face font-lock-comment-face fontified t) 771 772 (face font-lock-comment-face fontified t) 772 774 (face font-lock-comment-face fontified t) 774 777 (face font-lock-comment-delimiter-face fontified t) 777 796 (face font-lock-comment-delimiter-face fontified t) 796 797 (face font-lock-comment-delimiter-face fontified t) 797 800 (face font-lock-comment-face fontified t) 800 804 (face font-lock-comment-face fontified t) 804 853 (face font-lock-comment-face fontified t) 853 874 (face font-lock-comment-face fontified t) 874 877 (face font-lock-comment-delimiter-face fontified t) 877 897 (face font-lock-comment-delimiter-face fontified t) 897 900 (face font-lock-comment-face fontified t) 900 901 (face font-lock-comment-face fontified t) 901 902 (face font-lock-comment-face fontified t) 902 903 (face font-lock-comment-face fontified t) 903 905 (face font-lock-comment-face fontified t) 905 906 (face font-lock-comment-face syntax-table (1) fontified t) 906 907 (face font-lock-comment-face fontified t) 907 914 (face font-lock-comment-face fontified t) 914 916 (face font-lock-comment-face fontified t) 916 922 (face font-lock-comment-face fontified t) 922 923 (face font-lock-comment-face fontified t) 923 929 (face font-lock-comment-face fontified t) 929 932 (face font-lock-comment-face fontified t) 932 933 (face font-lock-comment-face fontified t) 933 935 (face font-lock-comment-face fontified t) 935 938 (face font-lock-comment-delimiter-face fontified t) 938 954 (face font-lock-comment-delimiter-face fontified t) 954 955 (face font-lock-comment-face fontified t) 955 956 (face font-lock-comment-face fontified t) 956 959 (face font-lock-comment-delimiter-face fontified t) 959 975 (face font-lock-comment-delimiter-face fontified t) 975 979 (face font-lock-comment-face fontified t) 979 980 (face font-lock-comment-face fontified t) 980 983 (face font-lock-comment-delimiter-face fontified t) 983 992 (face font-lock-comment-delimiter-face fontified t) 992 993 (face font-lock-comment-delimiter-face fontified t) 993 995 (face font-lock-comment-delimiter-face fontified t) 995 996 (face font-lock-comment-face fontified t) 996 998 (face font-lock-comment-face fontified t) 998 1001 (face font-lock-comment-delimiter-face fontified t) 1001 1013 (face font-lock-comment-delimiter-face fontified t) 1013 1014 (face font-lock-comment-face fontified t) 1014 1024 (face font-lock-comment-face fontified t) 1024 1026 (face font-lock-comment-face fontified t) 1026 1033 (face font-lock-comment-face fontified t) 1033 1039 (face font-lock-comment-face fontified t) 1039 1040 (face font-lock-comment-face fontified t) 1040 1041 (face font-lock-comment-face fontified t) 1041 1042 (face font-lock-comment-face fontified t) 1042 1045 (face font-lock-comment-delimiter-face fontified t) 1045 1052 (face font-lock-comment-delimiter-face fontified t) 1052 1061 (face font-lock-comment-delimiter-face fontified t) 1061 1066 (face font-lock-comment-face fontified t) 1066 1068 (face font-lock-comment-face fontified t) 1068 1071 (face font-lock-comment-face fontified t) 1071 1076 (face font-lock-comment-face fontified t) 1076 1077 (face font-lock-comment-face fontified t) 1077 1078 (face font-lock-comment-face fontified t) 1078 1079 (face font-lock-comment-face fontified t) 1079 1082 (face font-lock-comment-delimiter-face fontified t) 1082 1088 (face font-lock-comment-delimiter-face fontified t) 1088 1102 (face font-lock-comment-delimiter-face fontified t) 1102 1107 (face font-lock-comment-face fontified t) 1107 1109 (face font-lock-comment-face fontified t) 1109 1121 (face font-lock-comment-face fontified t) 1121 1123 (face font-lock-comment-face fontified t) 1123 1130 (face font-lock-comment-face fontified t) 1130 1132 (face font-lock-comment-face fontified t) 1132 1135 (face font-lock-comment-delimiter-face fontified t) 1135 1147 (face font-lock-comment-delimiter-face fontified t) 1147 1155 (face font-lock-comment-delimiter-face fontified t) 1155 1167 (face font-lock-comment-face fontified t) 1167 1169 (face font-lock-comment-face fontified t) 1169 1179 (face font-lock-comment-face fontified t) 1179 1180 (face font-lock-comment-face fontified t rear-nonsticky t) 1180 1182 (face font-lock-comment-face fontified t) 1182 1186 (face font-lock-comment-face fontified t) 1186 1187 (face font-lock-comment-face fontified t) 1187 1194 (face font-lock-comment-face fontified t) 1194 1196 (face font-lock-comment-face fontified t) 1196 1201 (face font-lock-comment-face fontified t) 1201 1202 (face font-lock-comment-face fontified t) 1202 1204 (face font-lock-comment-face fontified t) 1204 1207 (face font-lock-comment-delimiter-face fontified t) 1207 1227 (face font-lock-comment-delimiter-face fontified t) 1227 1229 (face font-lock-comment-face fontified t) 1229 1230 (face font-lock-comment-face fontified t) 1230 1233 (face font-lock-comment-delimiter-face fontified t) 1233 1249 (face font-lock-comment-delimiter-face fontified t) 1249 1250 (face font-lock-comment-face fontified t) 1250 1252 (face font-lock-comment-face fontified t) 1252 1255 (face font-lock-comment-delimiter-face fontified t) 1255 1271 (face font-lock-comment-delimiter-face fontified t) 1271 1274 (face font-lock-comment-face fontified t) 1274 1277 (face font-lock-comment-delimiter-face fontified t) 1277 1289 (face font-lock-comment-delimiter-face fontified t) 1289 1290 (face font-lock-comment-face fontified t) 1290 1292 (face font-lock-comment-face fontified t) 1292 1293 (face font-lock-comment-face syntax-table (1) fontified t) 1293 1294 (face font-lock-comment-face fontified t) 1294 1295 (face font-lock-comment-face fontified t) 1295 1296 (face font-lock-comment-face fontified t) 1296 1312 (fontified t) 1312 1313 (fontified t) 1313 1316 (face font-lock-comment-delimiter-face fontified t) 1316 1318 (face font-lock-comment-face fontified t) 1318 1320 (face font-lock-comment-face fontified t) 1320 1334 (face font-lock-comment-face fontified t) 1334 1337 (face font-lock-comment-face fontified t) 1337 1339 (face font-lock-comment-face fontified t) 1339 1342 (face font-lock-comment-face fontified t) 1342 1347 (face font-lock-comment-face fontified t) 1347 1348 (face font-lock-comment-face fontified t rear-nonsticky t) 1348 1349 (face font-lock-comment-face fontified t) 1349 1350 (face font-lock-comment-face fontified t) 1350 1353 (face font-lock-comment-face fontified t) 1353 1354 (face font-lock-comment-face fontified t) 1354 1358 (face font-lock-comment-face fontified t) 1358 1359 (face font-lock-comment-face fontified t) 1359 1374 (face font-lock-comment-face fontified t) 1374 1376 (face font-lock-comment-face fontified t) 1376 1377 (face font-lock-comment-face fontified t) 1377 1380 (face font-lock-comment-face fontified t) 1380 1381 (face font-lock-comment-face fontified t) 1381 1385 (face font-lock-comment-face fontified t) 1385 1386 (face font-lock-comment-face fontified t) 1386 1403 (face font-lock-comment-face fontified t) 1403 1404 (face font-lock-comment-face fontified t) 1404 1406 (face font-lock-comment-face fontified t) 1406 1409 (face font-lock-comment-delimiter-face fontified t) 1409 1425 (face font-lock-comment-delimiter-face fontified t) 1425 1427 (face font-lock-comment-face fontified t) 1427 1443 (face font-lock-comment-face fontified t) 1443 1446 (face font-lock-comment-face fontified t) 1446 1448 (face font-lock-comment-face fontified t) 1448 1451 (face font-lock-comment-face fontified t) 1451 1453 (face font-lock-comment-face fontified t) 1453 1457 (face font-lock-comment-face fontified t) 1457 1458 (face font-lock-comment-face fontified t) 1458 1459 (face font-lock-comment-face fontified t) 1459 1462 (face font-lock-comment-face fontified t) 1462 1463 (face font-lock-comment-face fontified t) 1463 1467 (face font-lock-comment-face fontified t) 1467 1468 (face font-lock-comment-face fontified t) 1468 1486 (face font-lock-comment-face fontified t) 1486 1488 (face font-lock-comment-face fontified t) 1488 1489 (face font-lock-comment-face fontified t) 1489 1492 (face font-lock-comment-face fontified t) 1492 1493 (face font-lock-comment-face fontified t) 1493 1497 (face font-lock-comment-face fontified t) 1497 1498 (face font-lock-comment-face fontified t) 1498 1499 (face font-lock-comment-face fontified t) 1499 1512 (fontified t face font-lock-comment-face) 1512 1518 (fontified t face font-lock-comment-face) 1518 1520 (fontified t face font-lock-comment-face) 1520 1523 (face font-lock-comment-delimiter-face fontified t) 1523 1539 (face font-lock-comment-delimiter-face fontified t) 1539 1541 (face font-lock-comment-face fontified t) 1541 1542 (face font-lock-comment-face fontified t) 1542 1546 (face font-lock-comment-face fontified t) 1546 1547 (face font-lock-comment-face fontified t) 1547 1567 (face font-lock-comment-face fontified t) 1567 1568 (face font-lock-comment-face fontified t) 1568 1569 (face font-lock-comment-face fontified t) 1569 1572 (face font-lock-comment-delimiter-face fontified t) 1572 1589 (face font-lock-comment-delimiter-face fontified t) 1589 1590 (face font-lock-comment-delimiter-face fontified t) 1590 1592 (face font-lock-comment-delimiter-face fontified t) 1592 1596 (face font-lock-comment-face fontified t) 1596 1597 (face font-lock-comment-face fontified t) 1597 1617 (face font-lock-comment-face fontified t) 1617 1620 (face font-lock-comment-delimiter-face fontified t) 1620 1640 (face font-lock-comment-delimiter-face fontified t) 1640 1644 (face font-lock-comment-face fontified t) 1644 1645 (face font-lock-comment-face fontified t) 1645 1660 (face font-lock-comment-face fontified t) 1660 1663 (face font-lock-comment-face fontified t) 1663 1670 (face font-lock-comment-face fontified t) 1670 1672 (face font-lock-comment-face fontified t) 1672 1679 (face font-lock-comment-face fontified t) 1679 1681 (face font-lock-comment-face fontified t) 1681 1690 (face font-lock-comment-face fontified t) 1690 1691 (face font-lock-comment-face fontified t) 1691 1694 (face font-lock-comment-face fontified t) 1694 1696 (face font-lock-comment-face fontified t) 1696 1700 (face font-lock-comment-face fontified t) 1700 1702 (face font-lock-comment-face fontified t) 1702 1706 (face font-lock-comment-face fontified t) 1706 1708 (face font-lock-comment-face fontified t) 1708 1711 (face font-lock-comment-face fontified t) 1711 1712 (face font-lock-comment-face fontified t) 1712 1719 (face font-lock-comment-face fontified t) 1719 1720 (face font-lock-comment-face fontified t) 1720 1721 (face font-lock-comment-face fontified t) 1721 1723 (face font-lock-comment-face fontified t) 1723 1724 (face font-lock-comment-face fontified t) 1724 1728 (face font-lock-comment-face fontified t) 1728 1729 (face font-lock-comment-face fontified t) 1729 1737 (face font-lock-comment-face fontified t) 1737 1738 (face font-lock-comment-face fontified t) 1738 1742 (face font-lock-comment-face fontified t) 1742 1743 (face font-lock-comment-face fontified t) 1743 1750 (face font-lock-comment-face fontified t) 1750 1754 (face font-lock-comment-face fontified t) 1754 1755 (face font-lock-comment-face fontified t) 1755 1756 (face font-lock-comment-face fontified t) 1756 1762 (face font-lock-comment-face fontified t) 1762 1763 (face font-lock-comment-face fontified t) 1763 1764 (face font-lock-comment-face fontified t) 1764 1765 (face font-lock-comment-face fontified t) 1765 1766 (face font-lock-comment-face fontified t rear-nonsticky t) 1766 1769 (face font-lock-comment-delimiter-face fontified t) 1769 1789 (face font-lock-comment-delimiter-face fontified t) 1789 1793 (face font-lock-comment-face fontified t) 1793 1794 (face font-lock-comment-face fontified t) 1794 1812 (face font-lock-comment-face fontified t) 1812 1815 (face font-lock-comment-face fontified t) 1815 1819 (face font-lock-comment-face fontified t) 1819 1820 (face font-lock-comment-face fontified t) 1820 1836 (face font-lock-comment-face fontified t) 1836 1853 (face font-lock-comment-face fontified t) 1853 1854 (face font-lock-comment-face fontified t) 1854 1855 (face font-lock-comment-face fontified t) 1855 1859 (face font-lock-comment-face fontified t) 1859 1860 (face font-lock-comment-face fontified t) 1860 1868 (face font-lock-comment-face fontified t) 1868 1869 (face font-lock-comment-face fontified t) 1869 1873 (face font-lock-comment-face fontified t) 1873 1874 (face font-lock-comment-face fontified t) 1874 1899 (face font-lock-comment-face fontified t) 1899 1900 (face font-lock-comment-face fontified t) 1900 1901 (face font-lock-comment-face fontified t rear-nonsticky t) 1901 1902 (face font-lock-comment-face fontified t) 1902 1923 (fontified t) 1923 1926 (face font-lock-comment-delimiter-face fontified t) 1926 1942 (face font-lock-comment-delimiter-face fontified t) 1942 1943 (face font-lock-comment-face fontified t) 1943 1944 (face font-lock-comment-face fontified t) 1944 1948 (face font-lock-comment-face fontified t) 1948 1949 (face font-lock-comment-face fontified t) 1949 1950 (face font-lock-comment-face fontified t) 1950 1951 (face font-lock-comment-face fontified t) 1951 1954 (face font-lock-comment-delimiter-face fontified t) 1954 1974 (face font-lock-comment-delimiter-face fontified t) 1974 1978 (face font-lock-comment-face fontified t) 1978 1979 (face font-lock-comment-face fontified t) 1979 1999 (face font-lock-comment-face fontified t) 1999 2002 (face font-lock-comment-delimiter-face fontified t) 2002 2022 (face font-lock-comment-delimiter-face fontified t) 2022 2026 (face font-lock-comment-face fontified t) 2026 2027 (face font-lock-comment-face fontified t) 2027 2030 (face font-lock-comment-face fontified t)) . -12595) (undo-tree-id6279 . -1071) (undo-tree-id6280 . -1070) (undo-tree-id6281 . -1677) (undo-tree-id6282 . -997) (undo-tree-id6283 . -1) (undo-tree-id6284 . -2030) (undo-tree-id6285 . -2030) (undo-tree-id6286 . -2003) (undo-tree-id6287 . -1520) (undo-tree-id6288 . -25) (undo-tree-id6289 . -67) (undo-tree-id6290 . -111) (undo-tree-id6291 . -199) (undo-tree-id6292 . -332) (undo-tree-id6293 . -417) (undo-tree-id6294 . -512) (undo-tree-id6295 . -594) (undo-tree-id6296 . -674) (undo-tree-id6297 . -790) (undo-tree-id6298 . -891) (undo-tree-id6299 . -953) (undo-tree-id6300 . -975) (undo-tree-id6301 . -997) (undo-tree-id6302 . -1018) (undo-tree-id6303 . -1063) (undo-tree-id6304 . -1101) (undo-tree-id6305 . -1227) (undo-tree-id6306 . -1251) (undo-tree-id6307 . -1312) (undo-tree-id6308 . -1339) (undo-tree-id6309 . -1547) (undo-tree-id6310 . -1597) (undo-tree-id6311 . -1646) (undo-tree-id6312 . -1922) (undo-tree-id6313 . -1950) (undo-tree-id6314 . -1981) (undo-tree-id6315 . -2030) (undo-tree-id6316 . -2030) (undo-tree-id6317 . -2030) (undo-tree-id6318 . -2030) (undo-tree-id6319 . -2030) (undo-tree-id6320 . -2030) (undo-tree-id6321 . -2030) (undo-tree-id6322 . -1999) (undo-tree-id6323 . -2030) (undo-tree-id6324 . -2030) (undo-tree-id6325 . -2030) (undo-tree-id6326 . -2030) (undo-tree-id6327 . -2030) (undo-tree-id6328 . -2030) 14625 (t 26013 11698 192977 675000)) nil (26013 11797 643526 0) 0 nil])
([nil nil ((#("fuse_texture = texture::Texture::from_path(std::path::Path::new(\"happy-tree.png\"), &self.device, &self.queue, None).unwrap();
//                     self.diffuse_bind_group = self.diffuse_texture.create_bind_group(&self.device, &self.texture_bind_group_layout);
//                 }
                
//                 match self.render(wgpu::Color::BLACK) {
//                     Ok(_) => {}
//                     // Reconfigure the surface if lost
//                     Err(wgpu::SurfaceError::Lost) => self.resize(self.size),
//                     // The system is out of memory, we should probably quit
//                     Err(wgpu::SurfaceError::OutOfMemory) => tracing::error!(\"wgpu::SurfaceError::OutOfMemory\"),
//                     // All other errors (Outdated, Timeout) should be resolved by the next frame
//                     Err(e) => tracing::error!(\"{:?}\", e),
//                 }
//                 true
//             },
//             _ => false
//         } " 0 12 (fontified t) 12 15 (fontified t) 15 22 (face font-lock-constant-face fontified t) 22 24 (fontified t) 24 31 (face font-lock-type-face fontified t) 31 33 (fontified t) 33 42 (fontified t) 42 43 (face (rainbow-delimiters-depth-3-face) fontified t) 43 46 (face font-lock-constant-face fontified t) 46 48 (fontified t) 48 52 (face font-lock-constant-face fontified t) 52 54 (fontified t) 54 58 (face font-lock-type-face fontified t) 58 60 (fontified t) 60 63 (fontified t) 63 64 (face (rainbow-delimiters-depth-4-face) fontified t) 64 79 (face font-lock-string-face fontified t) 79 80 (face font-lock-string-face fontified t) 80 81 (face (rainbow-delimiters-depth-4-face) fontified t) 81 83 (fontified t) 83 84 (face rust-ampersand-face fontified t) 84 88 (face font-lock-keyword-face fontified t) 88 89 (fontified t) 89 97 (fontified t) 97 98 (face rust-ampersand-face fontified t) 98 102 (face font-lock-keyword-face fontified t) 102 103 (fontified t) 103 110 (fontified t) 110 114 (face font-lock-type-face fontified t) 114 115 (face (rainbow-delimiters-depth-3-face) fontified t) 115 116 (fontified t) 116 122 (fontified t) 122 123 (face (rainbow-delimiters-depth-3-face) fontified t) 123 124 (face (rainbow-delimiters-depth-3-face) fontified t) 124 125 (fontified t) 125 126 (fontified t rear-nonsticky t) 126 129 (face font-lock-comment-delimiter-face fontified t) 129 149 (face font-lock-comment-delimiter-face fontified t) 149 153 (face font-lock-comment-face fontified t) 153 154 (face font-lock-comment-face fontified t) 154 172 (face font-lock-comment-face fontified t) 172 175 (face font-lock-comment-face fontified t) 175 179 (face font-lock-comment-face fontified t) 179 180 (face font-lock-comment-face fontified t) 180 196 (face font-lock-comment-face fontified t) 196 213 (face font-lock-comment-face fontified t) 213 214 (face font-lock-comment-face fontified t) 214 215 (face font-lock-comment-face fontified t) 215 219 (face font-lock-comment-face fontified t) 219 220 (face font-lock-comment-face fontified t) 220 228 (face font-lock-comment-face fontified t) 228 229 (face font-lock-comment-face fontified t) 229 233 (face font-lock-comment-face fontified t) 233 234 (face font-lock-comment-face fontified t) 234 259 (face font-lock-comment-face fontified t) 259 260 (face font-lock-comment-face fontified t) 260 261 (face font-lock-comment-face fontified t rear-nonsticky t) 261 262 (face font-lock-comment-face fontified t) 262 265 (face font-lock-comment-delimiter-face fontified t) 265 281 (face font-lock-comment-delimiter-face fontified t) 281 282 (face font-lock-comment-face fontified t) 282 283 (face font-lock-comment-face fontified t) 283 299 (fontified t) 299 300 (fontified t) 300 303 (face font-lock-comment-delimiter-face fontified t) 303 319 (face font-lock-comment-delimiter-face fontified t) 319 324 (face font-lock-comment-face fontified t) 324 325 (face font-lock-comment-face fontified t) 325 329 (face font-lock-comment-face fontified t) 329 336 (face font-lock-comment-face fontified t) 336 337 (face font-lock-comment-face fontified t) 337 341 (face font-lock-comment-face fontified t) 341 343 (face font-lock-comment-face fontified t) 343 348 (face font-lock-comment-face fontified t) 348 350 (face font-lock-comment-face fontified t) 350 355 (face font-lock-comment-face fontified t) 355 356 (face font-lock-comment-face fontified t) 356 357 (face font-lock-comment-face fontified t) 357 358 (face font-lock-comment-face fontified t) 358 359 (face font-lock-comment-face fontified t) 359 362 (face font-lock-comment-delimiter-face fontified t) 362 382 (face font-lock-comment-delimiter-face fontified t) 382 384 (face font-lock-comment-face fontified t) 384 385 (face font-lock-comment-face fontified t) 385 386 (face font-lock-comment-face fontified t) 386 387 (face font-lock-comment-face fontified t) 387 389 (face font-lock-comment-face fontified t) 389 390 (face font-lock-comment-face fontified t syntax-table (1)) 390 391 (face font-lock-comment-face fontified t) 391 392 (face font-lock-comment-face fontified t) 392 393 (face font-lock-comment-face fontified t) 393 394 (face font-lock-comment-face fontified t) 394 397 (face font-lock-comment-delimiter-face fontified t) 397 417 (face font-lock-comment-delimiter-face fontified t) 417 420 (face font-lock-comment-face fontified t) 420 422 (face font-lock-comment-face fontified t) 422 452 (face font-lock-comment-face fontified t) 452 455 (face font-lock-comment-delimiter-face fontified t) 455 475 (face font-lock-comment-delimiter-face fontified t) 475 478 (face font-lock-comment-face fontified t) 478 479 (face font-lock-comment-face fontified t) 479 483 (face font-lock-comment-face fontified t) 483 485 (face font-lock-comment-face fontified t) 485 497 (face font-lock-comment-face fontified t) 497 499 (face font-lock-comment-face fontified t) 499 503 (face font-lock-comment-face fontified t) 503 504 (face font-lock-comment-face fontified t) 504 506 (face font-lock-comment-face fontified t) 506 507 (face font-lock-comment-face fontified t syntax-table (1)) 507 508 (face font-lock-comment-face fontified t) 508 512 (face font-lock-comment-face fontified t) 512 519 (face font-lock-comment-face fontified t) 519 520 (face font-lock-comment-face fontified t) 520 524 (face font-lock-comment-face fontified t) 524 529 (face font-lock-comment-face fontified t) 529 530 (face font-lock-comment-face fontified t) 530 532 (face font-lock-comment-face fontified t) 532 535 (face font-lock-comment-delimiter-face fontified t) 535 540 (face font-lock-comment-delimiter-face fontified t) 540 549 (face font-lock-comment-delimiter-face fontified t) 549 555 (face font-lock-comment-delimiter-face fontified t) 555 558 (face font-lock-comment-face fontified t) 558 579 (face font-lock-comment-face fontified t) 579 581 (face font-lock-comment-face fontified t) 581 582 (face font-lock-comment-face fontified t) 582 611 (face font-lock-comment-face fontified t) 611 614 (face font-lock-comment-delimiter-face fontified t) 614 634 (face font-lock-comment-delimiter-face fontified t) 634 637 (face font-lock-comment-face fontified t) 637 638 (face font-lock-comment-face fontified t) 638 640 (face font-lock-comment-face fontified t) 640 641 (face font-lock-comment-face fontified t) 641 642 (face font-lock-comment-face fontified t) 642 644 (face font-lock-comment-face fontified t) 644 656 (face font-lock-comment-face fontified t) 656 658 (face font-lock-comment-face fontified t) 658 668 (face font-lock-comment-face fontified t) 668 669 (face font-lock-comment-face fontified t) 669 670 (face font-lock-comment-face fontified t) 670 672 (face font-lock-comment-face fontified t) 672 673 (face font-lock-comment-face fontified t syntax-table (1)) 673 674 (face font-lock-comment-face fontified t) 674 681 (face font-lock-comment-face fontified t) 681 683 (face font-lock-comment-face fontified t) 683 689 (face font-lock-comment-face fontified t) 689 690 (face font-lock-comment-face fontified t) 690 700 (face font-lock-comment-face fontified t) 700 708 (face font-lock-comment-face fontified t) 708 723 (face font-lock-comment-face fontified t) 723 724 (face font-lock-comment-face fontified t) 724 726 (face font-lock-comment-face fontified t) 726 729 (face font-lock-comment-delimiter-face fontified t) 729 748 (face font-lock-comment-delimiter-face fontified t) 748 749 (face font-lock-comment-delimiter-face fontified t) 749 752 (face font-lock-comment-face fontified t) 752 756 (face font-lock-comment-face fontified t) 756 767 (face font-lock-comment-face fontified t) 767 826 (face font-lock-comment-face fontified t) 826 829 (face font-lock-comment-delimiter-face fontified t) 829 849 (face font-lock-comment-delimiter-face fontified t) 849 852 (face font-lock-comment-face fontified t) 852 853 (face font-lock-comment-face fontified t) 853 854 (face font-lock-comment-face fontified t) 854 855 (face font-lock-comment-face fontified t) 855 857 (face font-lock-comment-face fontified t) 857 858 (face font-lock-comment-face fontified t syntax-table (1)) 858 859 (face font-lock-comment-face fontified t) 859 866 (face font-lock-comment-face fontified t) 866 868 (face font-lock-comment-face fontified t) 868 874 (face font-lock-comment-face fontified t) 874 875 (face font-lock-comment-face fontified t) 875 881 (face font-lock-comment-face fontified t) 881 884 (face font-lock-comment-face fontified t) 884 885 (face font-lock-comment-face fontified t) 885 887 (face font-lock-comment-face fontified t) 887 890 (face font-lock-comment-delimiter-face fontified t) 890 906 (face font-lock-comment-delimiter-face fontified t) 906 907 (face font-lock-comment-face fontified t rear-nonsticky t) 907 908 (face font-lock-comment-face fontified t) 908 911 (face font-lock-comment-delimiter-face fontified t) 911 927 (face font-lock-comment-delimiter-face fontified t) 927 931 (face font-lock-comment-face fontified t) 931 932 (face font-lock-comment-face fontified t) 932 935 (face font-lock-comment-delimiter-face fontified t) 935 947 (face font-lock-comment-delimiter-face fontified t) 947 948 (face font-lock-comment-face fontified t) 948 949 (face font-lock-comment-face fontified t) 949 950 (face font-lock-comment-face fontified t) 950 953 (face font-lock-comment-delimiter-face fontified t) 953 965 (face font-lock-comment-delimiter-face fontified t) 965 968 (face font-lock-comment-face fontified t) 968 969 (face font-lock-comment-face fontified t syntax-table (1)) 969 970 (face font-lock-comment-face fontified t) 970 975 (face font-lock-comment-face fontified t) 975 976 (face font-lock-comment-face fontified t) 976 979 (face font-lock-comment-delimiter-face fontified t) 979 987 (face font-lock-comment-delimiter-face fontified t) 987 988 (face font-lock-comment-face fontified t) 988 989 (face font-lock-comment-face fontified t)) . -12595) (undo-tree-id6246 . -300) (undo-tree-id6247 . -989) (undo-tree-id6248 . -989) (undo-tree-id6249 . -989) (undo-tree-id6250 . -989) (undo-tree-id6251 . -989) (undo-tree-id6252 . -965) (undo-tree-id6253 . -899) (undo-tree-id6254 . -401) (undo-tree-id6255 . -989) (undo-tree-id6256 . -989) (undo-tree-id6257 . -127) (undo-tree-id6258 . -287) (undo-tree-id6259 . -365) (undo-tree-id6260 . -401) (undo-tree-id6261 . -541) (undo-tree-id6262 . -621) (undo-tree-id6263 . -622) (undo-tree-id6264 . -738) (undo-tree-id6265 . -739) (undo-tree-id6266 . -840) (undo-tree-id6267 . -841) (undo-tree-id6268 . -903) (undo-tree-id6269 . -904) (undo-tree-id6270 . -926) (undo-tree-id6271 . -927) (undo-tree-id6272 . -949) (undo-tree-id6273 . -971) (undo-tree-id6274 . -972) (undo-tree-id6275 . -989) (undo-tree-id6276 . -976) (undo-tree-id6277 . -989) (undo-tree-id6278 . -989) 13584) nil (26013 11797 643476 0) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . -12593) (undo-tree-id6026 . -1) (undo-tree-id6027 . -1) (undo-tree-id6028 . -1) (undo-tree-id6029 . -1) (undo-tree-id6030 . -1) (undo-tree-id6031 . -1) (undo-tree-id6032 . -1) (undo-tree-id6033 . -1) (undo-tree-id6034 . -1) (undo-tree-id6035 . -1) (undo-tree-id6036 . -1) (undo-tree-id6037 . -1) (undo-tree-id6038 . -1) (undo-tree-id6039 . -1) (undo-tree-id6040 . -1) (undo-tree-id6041 . -1) (undo-tree-id6042 . -1) (undo-tree-id6043 . -1) (undo-tree-id6044 . -1) (undo-tree-id6045 . -1) (undo-tree-id6046 . -1) (undo-tree-id6047 . -1) (undo-tree-id6048 . -1) (undo-tree-id6049 . -1) (undo-tree-id6050 . -1) (undo-tree-id6051 . -1) (undo-tree-id6052 . -1) (undo-tree-id6053 . -1) (undo-tree-id6054 . -1) (undo-tree-id6055 . -1) (undo-tree-id6056 . -1) (undo-tree-id6057 . -1) (undo-tree-id6058 . -1) (undo-tree-id6059 . -1) (undo-tree-id6060 . -1) (undo-tree-id6061 . -1) (undo-tree-id6062 . -1) (undo-tree-id6063 . -1) (undo-tree-id6064 . -1) (undo-tree-id6065 . -1) (undo-tree-id6066 . -1) (undo-tree-id6067 . -1) (undo-tree-id6068 . -1) (undo-tree-id6069 . -1) (undo-tree-id6070 . -1) (undo-tree-id6071 . -1) (undo-tree-id6072 . -1) (undo-tree-id6073 . -1) (undo-tree-id6074 . -1) (undo-tree-id6075 . -1) (undo-tree-id6076 . -1) (undo-tree-id6077 . -1) (undo-tree-id6078 . -1) (undo-tree-id6079 . -1) (undo-tree-id6080 . -1) (undo-tree-id6081 . -1) (undo-tree-id6082 . -1) (undo-tree-id6083 . -1) (undo-tree-id6084 . -1) (undo-tree-id6085 . -1) (undo-tree-id6086 . -1) (undo-tree-id6087 . -1) (undo-tree-id6088 . -1) (undo-tree-id6089 . -1) (undo-tree-id6090 . -1) (undo-tree-id6091 . -1) (undo-tree-id6092 . -1) (undo-tree-id6093 . -1) (undo-tree-id6094 . -1) (undo-tree-id6095 . -1) (undo-tree-id6096 . -1) (undo-tree-id6097 . -1) (undo-tree-id6098 . -1) (undo-tree-id6099 . -1) (undo-tree-id6100 . -1) (undo-tree-id6101 . -1) (undo-tree-id6102 . -1) (undo-tree-id6103 . -1) (undo-tree-id6104 . -1) (undo-tree-id6105 . -1) (undo-tree-id6106 . -1) (undo-tree-id6107 . -1) (undo-tree-id6108 . -1) (undo-tree-id6109 . -1) (undo-tree-id6110 . -1) (undo-tree-id6111 . -1) (undo-tree-id6112 . -1) (undo-tree-id6113 . -1) (undo-tree-id6114 . -1) (undo-tree-id6115 . -1) (undo-tree-id6116 . -1) (undo-tree-id6117 . -1) (undo-tree-id6118 . -1) (undo-tree-id6119 . -1) (undo-tree-id6120 . -1) (undo-tree-id6121 . -1) (undo-tree-id6122 . -1) (undo-tree-id6123 . -1) (undo-tree-id6124 . -1) (undo-tree-id6125 . -1) (undo-tree-id6126 . -1) (undo-tree-id6127 . -1) (undo-tree-id6128 . -1) (undo-tree-id6129 . -1) (undo-tree-id6130 . -1) (undo-tree-id6131 . -1) (undo-tree-id6132 . -1) (undo-tree-id6133 . -1) (undo-tree-id6134 . -1) (undo-tree-id6135 . -1) (#("
" 0 1 (fontified t)) . -12594) (undo-tree-id6136 . -1) (undo-tree-id6137 . -1) (undo-tree-id6138 . -1) (undo-tree-id6139 . -1) (undo-tree-id6140 . -1) (undo-tree-id6141 . -1) (undo-tree-id6142 . -1) (undo-tree-id6143 . -1) (undo-tree-id6144 . -1) (undo-tree-id6145 . -1) (undo-tree-id6146 . -1) (undo-tree-id6147 . -1) (undo-tree-id6148 . -1) (undo-tree-id6149 . -1) (undo-tree-id6150 . -1) (undo-tree-id6151 . -1) (undo-tree-id6152 . -1) (undo-tree-id6153 . -1) (undo-tree-id6154 . -1) (undo-tree-id6155 . -1) (undo-tree-id6156 . -1) (undo-tree-id6157 . -1) (undo-tree-id6158 . -1) (undo-tree-id6159 . -1) (undo-tree-id6160 . -1) (undo-tree-id6161 . -1) (undo-tree-id6162 . -1) (undo-tree-id6163 . -1) (undo-tree-id6164 . -1) (undo-tree-id6165 . -1) (undo-tree-id6166 . -1) (undo-tree-id6167 . -1) (undo-tree-id6168 . -1) (undo-tree-id6169 . -1) (undo-tree-id6170 . -1) (undo-tree-id6171 . -1) (undo-tree-id6172 . -1) (undo-tree-id6173 . -1) (undo-tree-id6174 . -1) (undo-tree-id6175 . -1) (undo-tree-id6176 . -1) (undo-tree-id6177 . -1) (undo-tree-id6178 . -1) (undo-tree-id6179 . -1) (undo-tree-id6180 . -1) (undo-tree-id6181 . -1) (undo-tree-id6182 . -1) (undo-tree-id6183 . -1) (undo-tree-id6184 . -1) (undo-tree-id6185 . -1) (undo-tree-id6186 . -1) (undo-tree-id6187 . -1) (undo-tree-id6188 . -1) (undo-tree-id6189 . -1) (undo-tree-id6190 . -1) (undo-tree-id6191 . -1) (undo-tree-id6192 . -1) (undo-tree-id6193 . -1) (undo-tree-id6194 . -1) (undo-tree-id6195 . -1) (undo-tree-id6196 . -1) (undo-tree-id6197 . -1) (undo-tree-id6198 . -1) (undo-tree-id6199 . -1) (undo-tree-id6200 . -1) (undo-tree-id6201 . -1) (undo-tree-id6202 . -1) (undo-tree-id6203 . -1) (undo-tree-id6204 . -1) (undo-tree-id6205 . -1) (undo-tree-id6206 . -1) (undo-tree-id6207 . -1) (undo-tree-id6208 . -1) (undo-tree-id6209 . -1) (undo-tree-id6210 . -1) (undo-tree-id6211 . -1) (undo-tree-id6212 . -1) (undo-tree-id6213 . -1) (undo-tree-id6214 . -1) (undo-tree-id6215 . -1) (undo-tree-id6216 . -1) (undo-tree-id6217 . -1) (undo-tree-id6218 . -1) (undo-tree-id6219 . -1) (undo-tree-id6220 . -1) (undo-tree-id6221 . -1) (undo-tree-id6222 . -1) (undo-tree-id6223 . -1) (undo-tree-id6224 . -1) (undo-tree-id6225 . -1) (undo-tree-id6226 . -1) (undo-tree-id6227 . -1) (undo-tree-id6228 . -1) (undo-tree-id6229 . -1) (undo-tree-id6230 . -1) (undo-tree-id6231 . -1) (undo-tree-id6232 . -1) (undo-tree-id6233 . -1) (undo-tree-id6234 . -1) (undo-tree-id6235 . -1) (undo-tree-id6236 . -1) (undo-tree-id6237 . -1) (undo-tree-id6238 . -1) (undo-tree-id6239 . -1) (undo-tree-id6240 . -1) (undo-tree-id6241 . -1) (undo-tree-id6242 . -1) (undo-tree-id6243 . -1) (undo-tree-id6244 . -1) (undo-tree-id6245 . -1) 12595) nil (26013 11797 643431 0) 0 nil])
([nil nil ((#("                    WindowEvent::RedrawRequested => {
                        state.update();
                        match state.render(wgpu::Color::BLACK) {
                            Ok(_) => {}
                            // Reconfigure the surface if lost
                            Err(wgpu::SurfaceError::Lost) => state.resize(state.size),
                            // The system is out of memory, we should probably quit
                            Err(wgpu::SurfaceError::OutOfMemory) => elwh.exit(),
                            // All other errors (Outdated, Timeout) should be resolved by the next frame
                            Err(e) => tracing::error!(\"{:?}\", e),
                        }
                    }," 0 20 (fontified t) 20 31 (face font-lock-type-face fontified t) 31 33 (fontified t) 33 36 (face font-lock-type-face fontified t) 36 48 (face font-lock-type-face fontified t) 48 50 (fontified t) 50 51 (fontified t syntax-table (1)) 51 52 (fontified t) 52 53 (face (rainbow-delimiters-depth-7-face) fontified t) 53 54 (fontified t) 54 90 (fontified t) 90 91 (face (rainbow-delimiters-depth-8-face) fontified t) 91 92 (face (rainbow-delimiters-depth-8-face) fontified t) 92 101 (fontified t) 101 118 (fontified t) 118 123 (face font-lock-keyword-face fontified t) 123 136 (fontified t) 136 137 (face (rainbow-delimiters-depth-8-face) fontified t) 137 141 (face font-lock-constant-face fontified t) 141 143 (fontified t) 143 148 (face font-lock-type-face fontified t) 148 150 (fontified t) 150 155 (face font-lock-type-face fontified t) 155 156 (face (rainbow-delimiters-depth-8-face) fontified t) 156 157 (fontified t) 157 158 (face (rainbow-delimiters-depth-8-face) fontified t) 158 159 (fontified t) 159 187 (fontified t) 187 189 (face font-lock-type-face fontified t) 189 190 (face (rainbow-delimiters-depth-9-face) fontified t) 190 191 (fontified t) 191 192 (face (rainbow-delimiters-depth-9-face) fontified t) 192 194 (fontified t) 194 195 (fontified t syntax-table (1)) 195 196 (fontified t) 196 197 (face (rainbow-delimiters-depth-9-face) fontified t) 197 198 (face (rainbow-delimiters-depth-9-face) fontified t) 198 227 (fontified t) 227 230 (face font-lock-comment-delimiter-face fontified t) 230 262 (face font-lock-comment-face fontified t) 262 290 (fontified t) 290 293 (face font-lock-type-face fontified t) 293 294 (face (rainbow-delimiters-depth-9-face) fontified t) 294 298 (face font-lock-constant-face fontified t) 298 300 (fontified t) 300 312 (face font-lock-type-face fontified t) 312 314 (fontified t) 314 318 (face font-lock-type-face fontified t) 318 319 (face (rainbow-delimiters-depth-9-face) fontified t) 319 321 (fontified t) 321 322 (fontified t syntax-table (1)) 322 335 (fontified t) 335 336 (face (rainbow-delimiters-depth-9-face) fontified t) 336 346 (fontified t) 346 347 (face (rainbow-delimiters-depth-9-face) fontified t) 347 357 (fontified t) 357 377 (fontified t) 377 380 (face font-lock-comment-delimiter-face fontified t) 380 433 (face font-lock-comment-face fontified t) 433 461 (fontified t) 461 464 (face font-lock-type-face fontified t) 464 465 (face (rainbow-delimiters-depth-9-face) fontified t) 465 469 (face font-lock-constant-face fontified t) 469 471 (fontified t) 471 483 (face font-lock-type-face fontified t) 483 485 (fontified t) 485 496 (face font-lock-type-face fontified t) 496 497 (face (rainbow-delimiters-depth-9-face) fontified t) 497 499 (fontified t) 499 500 (syntax-table (1) fontified t) 500 510 (fontified t) 510 511 (face (rainbow-delimiters-depth-9-face) fontified t) 511 512 (face (rainbow-delimiters-depth-9-face) fontified t) 512 542 (fontified t) 542 545 (face font-lock-comment-delimiter-face fontified t) 545 619 (face font-lock-comment-face fontified t) 619 647 (fontified t) 647 650 (face font-lock-type-face fontified t) 650 651 (face (rainbow-delimiters-depth-9-face) fontified t) 651 652 (fontified t) 652 653 (face (rainbow-delimiters-depth-9-face) fontified t) 653 655 (fontified t) 655 656 (syntax-table (1) fontified t) 656 657 (fontified t) 657 664 (face font-lock-constant-face fontified t) 664 666 (fontified t) 666 672 (face font-lock-preprocessor-face fontified t) 672 673 (face (rainbow-delimiters-depth-9-face) fontified t) 673 679 (face font-lock-string-face fontified t) 679 682 (fontified t) 682 683 (face (rainbow-delimiters-depth-9-face) fontified t) 683 709 (fontified t) 709 710 (face (rainbow-delimiters-depth-8-face) fontified t) 710 728 (fontified t) 728 731 (fontified t) 731 732 (face (rainbow-delimiters-depth-7-face) fontified t) 732 733 (fontified t)) . 15814) (undo-tree-id6377 . -733) (undo-tree-id6378 . -20) (undo-tree-id6379 . -20) (undo-tree-id6380 . -20) (undo-tree-id6381 . -20) (undo-tree-id6382 . -20) (undo-tree-id6383 . -20) (undo-tree-id6384 . -20) (undo-tree-id6385 . -52) (undo-tree-id6386 . -52) (undo-tree-id6387 . -52) (undo-tree-id6388 . -52) (undo-tree-id6389 . -52) (undo-tree-id6390 . -733) (undo-tree-id6391 . -733) (undo-tree-id6392 . -733) (undo-tree-id6393 . -639) (undo-tree-id6394 . -637) (undo-tree-id6395 . -531) (undo-tree-id6396 . -449) (undo-tree-id6397 . -364) (undo-tree-id6398 . -363) (undo-tree-id6399 . -275) (undo-tree-id6400 . -211) (undo-tree-id6401 . -210) (undo-tree-id6402 . -169) (undo-tree-id6403 . -103) (undo-tree-id6404 . -61) (undo-tree-id6405 . -6) (undo-tree-id6406 . -4) (undo-tree-id6407 . -3) (undo-tree-id6408 . -2) (undo-tree-id6409 . -1) (undo-tree-id6410 . -733) (t 26013 11797 671134 275000)) nil (26013 11947 793421 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -15813) (undo-tree-id6330 . -1) (undo-tree-id6331 . -1) (undo-tree-id6332 . -1) (undo-tree-id6333 . -1) (undo-tree-id6334 . -1) (undo-tree-id6335 . -1) (undo-tree-id6336 . -1) (undo-tree-id6337 . -1) (undo-tree-id6338 . -1) (undo-tree-id6339 . -1) (undo-tree-id6340 . -1) (undo-tree-id6341 . -1) (undo-tree-id6342 . -1) (undo-tree-id6343 . -1) (undo-tree-id6344 . -1) (undo-tree-id6345 . -1) (undo-tree-id6346 . -1) (undo-tree-id6347 . -1) (undo-tree-id6348 . -1) (undo-tree-id6349 . -1) (undo-tree-id6350 . -1) (undo-tree-id6351 . -1) (undo-tree-id6352 . -1) (undo-tree-id6353 . -1) (undo-tree-id6354 . -1) (undo-tree-id6355 . -1) (undo-tree-id6356 . -1) (undo-tree-id6357 . -1) (undo-tree-id6358 . -1) (undo-tree-id6359 . -1) (undo-tree-id6360 . -1) (undo-tree-id6361 . -1) (undo-tree-id6362 . -1) (undo-tree-id6363 . -1) (undo-tree-id6364 . -1) (undo-tree-id6365 . -1) (undo-tree-id6366 . -1) (undo-tree-id6367 . -1) (undo-tree-id6368 . -1) (undo-tree-id6369 . -1) (undo-tree-id6370 . -1) (undo-tree-id6371 . -1) (undo-tree-id6372 . -1) (undo-tree-id6373 . -1) (undo-tree-id6374 . -1) (undo-tree-id6375 . -1) (undo-tree-id6376 . -1) 15814) nil (26013 11947 793381 0) 0 nil])
([nil nil ((15873 . 15874)) nil (26013 11947 793332 0) 0 nil])
([nil nil ((15874 . 15887)) nil (26013 11947 793331 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 16619 . 16620) (nil fontified nil 16619 . 16620) (nil fontified nil 16618 . 16619) (nil fontified nil 16615 . 16618) (nil fontified nil 16597 . 16615) (nil fontified nil 16596 . 16597) (nil fontified nil 16570 . 16596) (nil fontified nil 16569 . 16570) (nil fontified nil 16566 . 16569) (nil fontified nil 16560 . 16566) (nil fontified nil 16559 . 16560) (nil fontified nil 16553 . 16559) (nil fontified nil 16551 . 16553) (nil fontified nil 16544 . 16551) (nil fontified nil 16543 . 16544) (nil fontified nil 16542 . 16543) (nil fontified nil 16540 . 16542) (nil fontified nil 16539 . 16540) (nil fontified nil 16538 . 16539) (nil fontified nil 16537 . 16538) (nil fontified nil 16534 . 16537) (nil fontified nil 16506 . 16534) (nil fontified nil 16432 . 16506) (nil fontified nil 16429 . 16432) (nil fontified nil 16399 . 16429) (nil fontified nil 16398 . 16399) (nil fontified nil 16397 . 16398) (nil fontified nil 16387 . 16397) (nil fontified nil 16386 . 16387) (nil fontified nil 16384 . 16386) (nil fontified nil 16383 . 16384) (nil fontified nil 16372 . 16383) (nil fontified nil 16370 . 16372) (nil fontified nil 16358 . 16370) (nil fontified nil 16356 . 16358) (nil fontified nil 16352 . 16356) (nil fontified nil 16351 . 16352) (nil fontified nil 16348 . 16351) (nil fontified nil 16320 . 16348) (nil fontified nil 16267 . 16320) (nil fontified nil 16264 . 16267) (nil fontified nil 16244 . 16264) (nil fontified nil 16234 . 16244) (nil fontified nil 16233 . 16234) (nil fontified nil 16223 . 16233) (nil fontified nil 16222 . 16223) (nil fontified nil 16209 . 16222) (nil fontified nil 16208 . 16209) (nil fontified nil 16206 . 16208) (nil fontified nil 16205 . 16206) (nil fontified nil 16201 . 16205) (nil fontified nil 16199 . 16201) (nil fontified nil 16187 . 16199) (nil fontified nil 16185 . 16187) (nil fontified nil 16181 . 16185) (nil fontified nil 16180 . 16181) (nil fontified nil 16177 . 16180) (nil fontified nil 16149 . 16177) (nil fontified nil 16117 . 16149) (nil fontified nil 16114 . 16117) (nil fontified nil 16085 . 16114) (nil fontified nil 16084 . 16085) (nil fontified nil 16083 . 16084) (nil fontified nil 16082 . 16083) (nil fontified nil 16081 . 16082) (nil fontified nil 16079 . 16081) (nil fontified nil 16078 . 16079) (nil fontified nil 16077 . 16078) (nil fontified nil 16076 . 16077) (nil fontified nil 16074 . 16076) (nil fontified nil 16046 . 16074) (nil fontified nil 16045 . 16046) (nil fontified nil 16044 . 16045) (nil fontified nil 16043 . 16044) (nil fontified nil 16042 . 16043) (nil fontified nil 16037 . 16042) (nil fontified nil 16035 . 16037) (nil fontified nil 16030 . 16035) (nil fontified nil 16028 . 16030) (nil fontified nil 16024 . 16028) (nil fontified nil 16023 . 16024) (nil fontified nil 16010 . 16023) (nil fontified nil 16005 . 16010) (nil fontified nil 15988 . 16005) (nil fontified nil 15979 . 15988) (nil fontified nil 15978 . 15979) (nil fontified nil 15977 . 15978) (nil fontified nil 15941 . 15977) (nil fontified nil 15940 . 15941) (nil fontified nil 15939 . 15940) (nil fontified nil 15938 . 15939) (nil fontified nil 15937 . 15938) (nil fontified nil 15935 . 15937) (nil fontified nil 15923 . 15935) (nil fontified nil 15920 . 15923) (nil fontified nil 15918 . 15920) (nil fontified nil 15907 . 15918) (nil fontified nil 15887 . 15907) (15887 . 16620)) nil (26013 11947 793326 0) 0 nil])
([nil nil ((#("        " 0 5 (fontified t) 5 8 (fontified t)) . -16510) (#("        " 0 8 (fontified t)) . -16496) (undo-tree-id6329 . -7) (#("        " 0 8 (fontified t)) . -16442) (#("        " 0 8 (fontified t)) . -16345) (#("        " 0 8 (fontified t)) . -16272) (#("        " 0 8 (fontified t)) . -16196) (#("        " 0 8 (fontified t)) . -16117) (#("        " 0 8 (fontified t)) . -16062) (#("        " 0 8 (fontified t)) . -16030) (#("        " 0 8 (fontified t)) . -15969) (#("        " 0 8 (fontified t)) . -15937) (#("                    " 0 20 (fontified t)) . -15887) 15868) nil (26013 11947 793296 0) 0 nil])
([nil nil ((#("Window" 0 6 (face font-lock-type-face fontified t)) . -15887) (undo-tree-id6411 . -6) (undo-tree-id6412 . -6) (undo-tree-id6413 . -6) (undo-tree-id6414 . -6) (undo-tree-id6415 . -6) (undo-tree-id6416 . -6) (undo-tree-id6417 . -6) (undo-tree-id6418 . -6) (undo-tree-id6419 . -6) (undo-tree-id6420 . -6) 15893 (t 26013 11947 821642 845000)) nil (26013 11957 656437 0) 0 nil])
([nil nil ((15887 . 15888) (t 26013 11957 684937 92000)) nil (26013 11980 412298 0) 0 nil])
([nil nil ((#("W" 0 1 (face font-lock-type-face fontified t)) . -15887) (undo-tree-id6437 . -1) (undo-tree-id6438 . -1) (undo-tree-id6439 . -1) (undo-tree-id6440 . -1) (undo-tree-id6441 . -1) (undo-tree-id6442 . -1) (undo-tree-id6443 . -1) 15888) nil (26013 11980 412296 0) 0 nil])
([nil nil ((#("Event::" 0 5 (face font-lock-type-face fontified t) 5 7 (fontified t)) . -15887) (undo-tree-id6421 . -7) (undo-tree-id6422 . 7) (undo-tree-id6423 . -7) (undo-tree-id6424 . -1) (undo-tree-id6425 . -2) (undo-tree-id6426 . -3) (undo-tree-id6427 . -4) (undo-tree-id6428 . -5) (undo-tree-id6429 . -6) (undo-tree-id6430 . -7) (undo-tree-id6431 . -7) (undo-tree-id6432 . -7) (undo-tree-id6433 . -7) (undo-tree-id6434 . -7) (undo-tree-id6435 . -7) (undo-tree-id6436 . -7) 15894) nil (26013 11980 412284 0) 0 nil])
([nil nil ((#("RedrawRequested" 0 3 (face font-lock-type-face fontified t) 3 15 (face font-lock-type-face fontified t)) . 15887) (undo-tree-id6463 . -12) (undo-tree-id6464 . 15) (undo-tree-id6465 . -12) (undo-tree-id6466 . -12) (undo-tree-id6467 . -1) (undo-tree-id6468 . -1) (undo-tree-id6469 . -1) (undo-tree-id6470 . -1) (undo-tree-id6471 . -1) (undo-tree-id6472 . -15) (t 26013 11980 440556 206000)) nil (26013 12121 528232 0) 0 nil])
([nil nil ((15887 . 15890)) nil (26013 12121 528221 0) 0 nil])
([nil nil ((15887 . 15898) (#("Win" 0 3 (fontified nil)) . 15887) (15887 . 15890) (#("WindowEvent" 0 11 (fontified nil)) . -15887) (15887 . 15898) (#("Win" 0 3 (face font-lock-type-face fontified t)) . -15887) (undo-tree-id6450 . -3) (undo-tree-id6451 . -1) (undo-tree-id6452 . -1) (undo-tree-id6453 . -1) (undo-tree-id6454 . -1) (undo-tree-id6455 . -2) (undo-tree-id6456 . -2) (undo-tree-id6457 . -2) (undo-tree-id6458 . -3) (undo-tree-id6459 . -3) (undo-tree-id6460 . -3) (undo-tree-id6461 . -3) (undo-tree-id6462 . -3) 15890) nil (26013 12121 528219 0) 0 nil])
([nil nil ((15898 . 15902)) nil (26013 12121 528199 0) 0 nil])
([nil nil ((apply yas--snippet-revive 15900 15915 #s(yas--snippet nil nil #s(yas--exit 15915 nil) 53 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 15915 nil) 53 nil nil nil nil)) (15900 . 15915) (#("RedrawRequested$0" 0 17 (fontified nil)) . 15900) (15900 . 15917) (#("Re" 0 2 (fontified nil)) . 15900) (15900 . 15902) (#("RedrawRequested" 0 15 (fontified nil)) . -15900) (15900 . 15915) (#("Re" 0 2 (face font-lock-type-face fontified t)) . -15900) (undo-tree-id6444 . -2) (undo-tree-id6445 . -1) (undo-tree-id6446 . -1) (undo-tree-id6447 . -1) (undo-tree-id6448 . -2) (undo-tree-id6449 . -2) 15902) nil (26013 12121 528195 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 15962 . 15963) (nil fontified nil 15915 . 15963) (15915 . 15963) (t 26013 12121 556032 241000)) nil (26013 12135 607589 0) 0 nil])
([nil nil ((#(" " 0 1 (rear-nonsticky t fontified t)) . -15962) (undo-tree-id6473 . -1) (undo-tree-id6474 . -1) (undo-tree-id6475 . -1) (undo-tree-id6476 . -1) (undo-tree-id6477 . -1) (undo-tree-id6478 . -1) (undo-tree-id6479 . -1) (undo-tree-id6480 . -1) (undo-tree-id6481 . -1) (undo-tree-id6482 . -1) (undo-tree-id6483 . -1) (undo-tree-id6484 . -1) (undo-tree-id6485 . -1) (undo-tree-id6486 . -1) (undo-tree-id6487 . -1) (undo-tree-id6488 . -1) (undo-tree-id6489 . -1) (undo-tree-id6490 . -1) (undo-tree-id6491 . -1) (undo-tree-id6492 . -1) (undo-tree-id6493 . -1) (undo-tree-id6494 . -1) (undo-tree-id6495 . -1) (undo-tree-id6496 . -1) (undo-tree-id6497 . -1) (undo-tree-id6498 . -1) 15963 (t 26013 12135 635931 684000)) nil (26013 12138 802234 0) 0 nil])
([nil nil ((15962 . 15963)) nil (26013 12138 802197 0) 0 nil])
([nil nil ((#("id() " 0 2 (fontified t) 2 3 (face (rainbow-delimiters-depth-5-face) fontified t) 3 4 (face (rainbow-delimiters-depth-5-face) fontified t) 4 5 (fontified t)) . -15958) (undo-tree-id6586 . -4) (undo-tree-id6587 . -5) 15963 (t 26013 12138 831605 661000)) nil (26013 12259 983082 0) 0 nil])
([nil nil ((#("window()." 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-5-face) fontified t) 7 8 (face (rainbow-delimiters-depth-5-face) fontified t) 8 9 (fontified t)) . -15949) (undo-tree-id6584 . -9) (undo-tree-id6585 . -9) 15958) nil (26013 12259 983078 0) 0 nil])
([nil nil ((#("state." 0 6 (fontified t)) . -15943) (undo-tree-id6582 . -6) (undo-tree-id6583 . -6) 15949) nil (26013 12259 983075 0) 0 nil])
([nil nil ((#("id == " 0 6 (fontified t)) . -15937) (undo-tree-id6580 . -6) (undo-tree-id6581 . -6) 15943) nil (26013 12259 983071 0) 0 nil])
([nil nil ((#("window_" 0 7 (fontified t)) . -15930) (undo-tree-id6578 . -7) (undo-tree-id6579 . -7) 15937) nil (26013 12259 983068 0) 0 nil])
([nil nil ((#("if " 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t)) . -15927) (undo-tree-id6576 . -3) (undo-tree-id6577 . -3) 15930) nil (26013 12259 983065 0) 0 nil])
([nil nil ((#("id) " 0 2 (fontified t) 2 3 (face (rainbow-delimiters-depth-5-face) fontified t) 3 4 (fontified t)) . -15923) (undo-tree-id6574 . -4) (undo-tree-id6575 . -4) 15927) nil (26013 12259 983061 0) 0 nil])
([nil nil ((#("window_" 0 7 (fontified t)) . -15916) (undo-tree-id6572 . -7) (undo-tree-id6573 . -7) 15923) nil (26013 12259 983058 0) 0 nil])
([nil nil ((#("RedrawRequested(" 0 15 (face font-lock-type-face fontified t) 15 16 (face (rainbow-delimiters-depth-5-face) fontified t)) . -15900) (undo-tree-id6569 . -15) (undo-tree-id6570 . -16) (undo-tree-id6571 . -16) 15916) nil (26013 12259 983054 0) 0 nil])
([nil nil ((#("WindowEvent::" 0 11 (face font-lock-type-face fontified t) 11 13 (fontified t)) . -15887) (undo-tree-id6566 . -13) (undo-tree-id6567 . -13) (undo-tree-id6568 . -13) 15900) nil (26013 12259 983050 0) 0 nil])
([nil nil ((15887 . 15888)) nil (26013 12259 983046 0) 0 nil])
([nil nil ((15888 . 15891)) nil (26013 12259 983045 0) 0 nil])
([nil nil ((15891 . 15892)) nil (26013 12259 983044 0) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-type-face fontified t)) . -15889) (undo-tree-id6563 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -15890) (undo-tree-id6564 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -15891) (undo-tree-id6565 . -1) 15892) nil (26013 12259 983042 0) 0 nil])
([nil nil ((15889 . 15890)) nil (26013 12259 983038 0) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-type-face fontified t)) . -15888) (undo-tree-id6561 . -1) (#("v" 0 1 (face font-lock-type-face fontified t)) . -15889) (undo-tree-id6562 . -1) 15890) nil (26013 12259 983036 0) 0 nil])
([nil nil ((15888 . 15895)) nil (26013 12259 983033 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 15917 15917 nil nil nil nil #s(yas--field 2 15924 15924 nil nil nil nil #s(yas--exit 15926 nil))) #s(yas--field 2 15924 15924 nil nil nil nil #s(yas--exit 15926 nil))) #s(yas--exit 15926 nil) 54 nil #s(yas--field 1 15917 15917 nil nil nil nil #s(yas--field 2 15924 15924 nil nil nil nil #s(yas--exit 15926 nil))) nil nil)) (15894 . 15926) (#("WindowEvent { window_id$1, event$2 }$0" 0 38 (fontified nil)) . 15894) (15894 . 15932) (#("W" 0 1 (fontified nil)) . 15894) (15894 . 15895) (#("WindowEvent {…}" 0 15 (fontified nil)) . -15894) (15894 . 15909) (#("W" 0 1 (face font-lock-type-face fontified t)) . -15894) (undo-tree-id6560 . -1) 15895) nil (26013 12259 983031 0) 0 nil])
([nil nil ((apply yas--snippet-revive 15894 15926 #s(yas--snippet nil (#s(yas--field 1 15917 15917 nil nil nil nil #s(yas--field 2 15924 15924 nil nil nil nil #s(yas--exit 15926 nil))) #s(yas--field 2 15924 15924 nil nil nil nil #s(yas--exit 15926 nil))) #s(yas--exit 15926 nil) 54 nil #s(yas--field 1 15917 15917 nil nil nil nil #s(yas--field 2 15924 15924 nil nil nil nil #s(yas--exit 15926 nil))) nil nil))) nil (26013 12259 983027 0) 0 nil])
([nil nil ((#("event" 0 5 (fontified t)) . -15919) (undo-tree-id6559 . -5) 15924) nil (26013 12259 983026 0) 0 nil])
([nil nil ((15919 . 15920)) nil (26013 12259 983024 0) 0 nil])
([nil nil ((15919 . 15924) (#("e" 0 1 (fontified nil)) . 15919) (15919 . 15920) (#("event" 0 5 (fontified nil)) . -15919) (15919 . 15924) (#("e" 0 1 (fontified t)) . -15919) (undo-tree-id6558 . -1) 15920) nil (26013 12259 983022 0) 0 nil])
([nil nil ((15924 . 15933)) nil (26013 12259 983018 0) 0 nil])
([nil nil ((#("w" 0 1 (face font-lock-type-face fontified t)) . -15931) (undo-tree-id6556 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -15932) (undo-tree-id6557 . -1) 15933) nil (26013 12259 983017 0) 0 nil])
([nil nil ((#("Windo" 0 5 (face font-lock-type-face fontified t)) . -15926) (undo-tree-id6555 . -5) 15931) nil (26013 12259 983013 0) 0 nil])
([nil nil ((15926 . 15930)) nil (26013 12259 983011 0) 0 nil])
([nil nil ((#("Wind" 0 4 (face font-lock-type-face fontified t)) . -15926) (undo-tree-id6554 . -4) 15930) nil (26013 12259 983010 0) 0 nil])
([nil nil ((15926 . 15929)) nil (26013 12259 983008 0) 0 nil])
([nil nil ((15929 . 15937)) nil (26013 12259 983007 0) 0 nil])
([nil nil ((#("WindowEvent" 0 11 (face font-lock-type-face fontified t)) . -15926) (undo-tree-id6524 . -11) (undo-tree-id6525 . -1) (undo-tree-id6526 . -2) (undo-tree-id6527 . -2) (undo-tree-id6528 . -2) (undo-tree-id6529 . -3) (undo-tree-id6530 . -3) (undo-tree-id6531 . -3) (undo-tree-id6532 . -3) (undo-tree-id6533 . -4) (undo-tree-id6534 . -4) (undo-tree-id6535 . -4) (undo-tree-id6536 . -5) (undo-tree-id6537 . -5) (undo-tree-id6538 . -6) (undo-tree-id6539 . -6) (undo-tree-id6540 . -6) (undo-tree-id6541 . -6) (undo-tree-id6542 . -7) (undo-tree-id6543 . -7) (undo-tree-id6544 . -7) (undo-tree-id6545 . -8) (undo-tree-id6546 . -8) (undo-tree-id6547 . -8) (undo-tree-id6548 . -8) (undo-tree-id6549 . -9) (undo-tree-id6550 . -10) (undo-tree-id6551 . -11) (undo-tree-id6552 . -11) (undo-tree-id6553 . -11) 15937) nil (26013 12259 983004 0) 0 nil])
([nil nil ((15926 . 15928)) nil (26013 12259 982975 0) 0 nil])
([nil nil ((#("R" 0 1 (face font-lock-type-face fontified t)) . -15926) (undo-tree-id6505 . -1) (undo-tree-id6506 . -1) (undo-tree-id6507 . -1) (undo-tree-id6508 . -1) (undo-tree-id6509 . -1) (undo-tree-id6510 . -1) (undo-tree-id6511 . -1) (undo-tree-id6512 . -1) (undo-tree-id6513 . -1) (undo-tree-id6514 . -1) (undo-tree-id6515 . -1) (undo-tree-id6516 . -1) (undo-tree-id6517 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -15927) (undo-tree-id6518 . -1) (undo-tree-id6519 . -1) (undo-tree-id6520 . -1) (undo-tree-id6521 . -1) (undo-tree-id6522 . -1) (undo-tree-id6523 . -1) 15928) nil (26013 12259 982973 0) 0 nil])
([nil nil ((15926 . 15935)) nil (26013 12259 982951 0) 0 nil])
([nil nil ((15935 . 15940)) nil (26013 12259 982950 0) 0 nil])
([nil nil ((apply yas--snippet-revive 15939 15954 #s(yas--snippet nil nil #s(yas--exit 15954 nil) 55 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 15954 nil) 55 nil nil nil nil)) (15939 . 15954) (#("RedrawRequested$0" 0 17 (fontified nil)) . 15939) (15939 . 15956) (#("R" 0 1 (fontified nil)) . 15939) (15939 . 15940) (#("RedrawRequested" 0 15 (fontified nil)) . -15939) (15939 . 15954) (#("R" 0 1 (face font-lock-type-face fontified t)) . -15939) (undo-tree-id6499 . -1) (undo-tree-id6500 . -1) (undo-tree-id6501 . -1) (undo-tree-id6502 . -1) (undo-tree-id6503 . -1) (undo-tree-id6504 . -1) 15940) nil (26013 12259 982945 0) 0 nil])
([nil nil ((15956 . 15960) (t 26013 12260 12085 713000)) nil (26013 12278 559437 0) 0 nil])
([nil nil ((15960 . 15963)) nil (26013 12278 559436 0) 0 nil])
([nil nil ((15960 . 15969) (#("win" 0 3 (fontified nil)) . 15960) (15960 . 15963) (#("window_id" 0 9 (fontified nil)) . -15960) (15960 . 15969) (#("win" 0 3 (fontified t)) . -15960) (undo-tree-id6611 . -3) (undo-tree-id6612 . -1) (undo-tree-id6613 . -2) (undo-tree-id6614 . -2) (undo-tree-id6615 . -3) (undo-tree-id6616 . -3) (undo-tree-id6617 . -3) (undo-tree-id6618 . -3) (undo-tree-id6619 . -3) 15963) nil (26013 12278 559434 0) 0 nil])
([nil nil ((15969 . 15976)) nil (26013 12278 559423 0) 0 nil])
([nil nil ((15973 . 15978) (#("sta" 0 3 (fontified nil)) . 15973) (15973 . 15976) (#("state" 0 5 (fontified nil)) . -15973) (15973 . 15978) (#("sta" 0 3 (fontified t)) . -15973) (undo-tree-id6600 . -3) (undo-tree-id6601 . -1) (undo-tree-id6602 . -1) (undo-tree-id6603 . -2) (undo-tree-id6604 . -2) (undo-tree-id6605 . -2) (undo-tree-id6606 . -2) (undo-tree-id6607 . -2) (undo-tree-id6608 . -3) (undo-tree-id6609 . -3) (undo-tree-id6610 . -3) 15976) nil (26013 12278 559421 0) 0 nil])
([nil nil ((15978 . 15980)) nil (26013 12278 559407 0) 0 nil])
([nil nil ((15979 . 15985) (#("w" 0 1 (fontified nil)) . 15979) (15979 . 15980) (#("window" 0 6 (fontified nil)) . -15979) (15979 . 15985) (#("w" 0 1 (fontified t)) . -15979) (undo-tree-id6594 . -1) (undo-tree-id6595 . -1) (undo-tree-id6596 . -1) (undo-tree-id6597 . -1) (undo-tree-id6598 . -1) (undo-tree-id6599 . -1) 15980) nil (26013 12278 559405 0) 0 nil])
([nil nil ((15985 . 15987)) nil (26013 12278 559397 0) 0 nil])
([nil nil ((apply yas--snippet-revive 15986 15990 #s(yas--snippet nil nil #s(yas--exit 15990 nil) 56 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 15990 nil) 56 nil nil nil nil)) (15986 . 15990) (#("id()$0" 0 6 (fontified nil)) . 15986) (15986 . 15992) (#("i" 0 1 (fontified nil)) . 15986) (15986 . 15987) (#("id()" 0 4 (fontified nil)) . -15986) (15986 . 15990) (#("i" 0 1 (fontified t)) . -15986) (undo-tree-id6588 . -1) (undo-tree-id6589 . -1) (undo-tree-id6590 . -1) (undo-tree-id6591 . -1) (undo-tree-id6592 . -1) (undo-tree-id6593 . -1) 15987) nil (26013 12278 559392 0) 0 nil])
([nil nil ((#("RedrawRequested" 0 15 (face font-lock-type-face fontified t)) . -15939) (undo-tree-id6691 . -15) (undo-tree-id6692 . -15) (undo-tree-id6693 . -15) (undo-tree-id6694 . -15) (undo-tree-id6695 . -15) (undo-tree-id6696 . -15) (undo-tree-id6697 . -15) (undo-tree-id6698 . -15) (undo-tree-id6699 . -15) (undo-tree-id6700 . -15) (undo-tree-id6701 . -15) (undo-tree-id6702 . -15) 15954 (t 26013 12278 588376 447000)) nil (26013 12341 589890 0) 0 nil])
([nil nil ((#("WindowEvent::" 0 11 (face font-lock-type-face fontified t) 11 13 (fontified t)) . -15926) (undo-tree-id6678 . -13) (undo-tree-id6679 . -13) (undo-tree-id6680 . -13) (undo-tree-id6681 . -13) (undo-tree-id6682 . -13) (undo-tree-id6683 . -13) (undo-tree-id6684 . -13) (undo-tree-id6685 . -13) (undo-tree-id6686 . -13) (undo-tree-id6687 . -13) (undo-tree-id6688 . -13) (undo-tree-id6689 . -13) (undo-tree-id6690 . -13) 15939) nil (26013 12341 589877 0) 0 nil])
([nil nil ((#("event: " 0 5 (face font-lock-variable-name-face fontified t) 5 7 (fontified t)) . -15919) (undo-tree-id6625 . -7) (undo-tree-id6626 . -4) (undo-tree-id6627 . -4) (undo-tree-id6628 . -4) (undo-tree-id6629 . -4) (undo-tree-id6630 . -4) (undo-tree-id6631 . -4) (undo-tree-id6632 . -4) (undo-tree-id6633 . -4) (undo-tree-id6634 . -4) (undo-tree-id6635 . -4) (undo-tree-id6636 . -4) (undo-tree-id6637 . -4) (undo-tree-id6638 . -4) (undo-tree-id6639 . -4) (undo-tree-id6640 . -4) (undo-tree-id6641 . -4) (undo-tree-id6642 . -4) (undo-tree-id6643 . -4) (undo-tree-id6644 . -4) (undo-tree-id6645 . -4) (undo-tree-id6646 . -4) (undo-tree-id6647 . -4) (undo-tree-id6648 . -4) (undo-tree-id6649 . -4) (undo-tree-id6650 . -4) (undo-tree-id6651 . -4) (undo-tree-id6652 . -4) (undo-tree-id6653 . -4) (undo-tree-id6654 . -4) (undo-tree-id6655 . -4) (undo-tree-id6656 . -4) (undo-tree-id6657 . -4) (undo-tree-id6658 . -4) (undo-tree-id6659 . -4) (undo-tree-id6660 . -4) (undo-tree-id6661 . -4) (undo-tree-id6662 . -4) (undo-tree-id6663 . -4) (undo-tree-id6664 . -4) (undo-tree-id6665 . -7) (undo-tree-id6666 . -7) (undo-tree-id6667 . -7) (undo-tree-id6668 . -7) (undo-tree-id6669 . -7) (undo-tree-id6670 . -7) (undo-tree-id6671 . -7) (undo-tree-id6672 . -7) (undo-tree-id6673 . -7) (undo-tree-id6674 . -7) (undo-tree-id6675 . -7) (undo-tree-id6676 . -7) (undo-tree-id6677 . -7) 15926) nil (26013 12341 589860 0) 0 nil])
([nil nil ((15919 . 15920)) nil (26013 12341 589803 0) 0 nil])
([nil nil ((15919 . 15924) (#("e" 0 1 (fontified nil)) . 15919) (15919 . 15920) (#("event" 0 5 (fontified nil)) . -15919) (15919 . 15924) (#("e" 0 1 (fontified t)) . -15919) (undo-tree-id6620 . -1) (undo-tree-id6621 . -1) (undo-tree-id6622 . -1) (undo-tree-id6623 . -1) (undo-tree-id6624 . -1) 15920) nil (26013 12341 589800 0) 0 nil])
([nil nil ((15919 . 15923)) nil (26013 12341 589782 0) 0 nil])
([nil nil ((15964 . 15972) (t 26013 12341 620820 524000)) nil (26013 12359 235301 0) 0 nil])
([nil nil ((15972 . 15980)) nil (26013 12359 235300 0) 0 nil])
([nil nil ((15977 . 15988) (#("Win" 0 3 (fontified nil)) . 15977) (15977 . 15980) (#("WindowEvent" 0 11 (fontified nil)) . -15977) (15977 . 15988) (#("Win" 0 3 (face font-lock-type-face fontified t)) . -15977) (undo-tree-id6709 . -3) (undo-tree-id6710 . -1) (undo-tree-id6711 . -1) (undo-tree-id6712 . -2) (undo-tree-id6713 . -2) (undo-tree-id6714 . -2) (undo-tree-id6715 . -3) (undo-tree-id6716 . -3) (undo-tree-id6717 . -3) (undo-tree-id6718 . -3) (undo-tree-id6719 . -3) 15980) nil (26013 12359 235298 0) 0 nil])
([nil nil ((15988 . 15989)) nil (26013 12359 235285 0) 0 nil])
([nil nil ((15989 . 15991)) nil (26013 12359 235284 0) 0 nil])
([nil nil ((apply yas--snippet-revive 15990 16005 #s(yas--snippet nil nil #s(yas--exit 16005 nil) 57 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 16005 nil) 57 nil nil nil nil)) (15990 . 16005) (#("RedrawRequested$0" 0 17 (fontified nil)) . 15990) (15990 . 16007) (#("R" 0 1 (fontified nil)) . 15990) (15990 . 15991) (#("RedrawRequested" 0 15 (fontified nil)) . -15990) (15990 . 16005) (#("R" 0 1 (face font-lock-type-face fontified t)) . -15990) (undo-tree-id6703 . -1) (undo-tree-id6704 . -1) (undo-tree-id6705 . -1) (undo-tree-id6706 . -1) (undo-tree-id6707 . -1) (undo-tree-id6708 . -1) 15991) nil (26013 12359 235279 0) 0 nil])
([nil nil ((15968 . 15969) (t 26013 12359 264614 371000)) nil (26013 12369 446894 0) 0 nil])
([nil nil ((#("ref " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -15919) (undo-tree-id6750 . -4) (undo-tree-id6751 . -4) (undo-tree-id6752 . -4) (undo-tree-id6753 . -4) (undo-tree-id6754 . -4) (undo-tree-id6755 . -4) (undo-tree-id6756 . -4) (undo-tree-id6757 . -4) (undo-tree-id6758 . -4) (undo-tree-id6759 . -4) (undo-tree-id6760 . -4) (undo-tree-id6761 . -4) (undo-tree-id6762 . -4) (undo-tree-id6763 . -4) (undo-tree-id6764 . -4) (undo-tree-id6765 . -4) 15923 (t 26013 12369 476440 681000)) nil (26013 12375 587218 0) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . -15964) (undo-tree-id6720 . -1) (undo-tree-id6721 . -1) (undo-tree-id6722 . -1) (undo-tree-id6723 . -1) (undo-tree-id6724 . -1) (undo-tree-id6725 . -1) (undo-tree-id6726 . -1) (undo-tree-id6727 . -1) (undo-tree-id6728 . -1) (undo-tree-id6729 . -1) (undo-tree-id6730 . -1) (undo-tree-id6731 . -1) (undo-tree-id6732 . -1) (undo-tree-id6733 . -1) (undo-tree-id6734 . -1) (undo-tree-id6735 . -1) (undo-tree-id6736 . -1) (undo-tree-id6737 . -1) (undo-tree-id6738 . -1) (undo-tree-id6739 . -1) (undo-tree-id6740 . -1) (undo-tree-id6741 . -1) (undo-tree-id6742 . -1) (undo-tree-id6743 . -1) (undo-tree-id6744 . -1) (undo-tree-id6745 . -1) (undo-tree-id6746 . -1) (undo-tree-id6747 . -1) (undo-tree-id6748 . -1) (undo-tree-id6749 . -1) 15965) nil (26013 12375 587194 0) 0 nil])
([nil nil ((15149 . 15165) (#(" " 0 1 (fontified nil)) . 15148) (undo-tree-id7183 . -1) (undo-tree-id7184 . -1) (undo-tree-id7185 . -1) (undo-tree-id7186 . -1) (undo-tree-id7187 . -1) (undo-tree-id7188 . -1) (undo-tree-id7189 . -1) (undo-tree-id7190 . -1) (undo-tree-id7191 . -1) (undo-tree-id7192 . -1) (undo-tree-id7193 . -1) (undo-tree-id7194 . -1) (undo-tree-id7195 . -1) (undo-tree-id7196 . -1) (15149 . 15150) (t 26013 12375 618162 151000)) nil (26013 12479 225314 0) 0 nil])
([nil nil ((15940 . 15956) (#("            " 0 12 (fontified t)) . 15940) (15934 . 15938) (15886 . 15910) (#("                    " 0 20 (fontified t)) . 15886) (15859 . 15883) (#("                    " 0 20 (fontified t)) . 15859) (15825 . 15829) (15736 . 15760) (#("                    " 0 20 (fontified t)) . 15736) (15714 . 15718) (15655 . 15687) (#("                            " 0 28 (fontified t)) . 15655) (undo-tree-id7177 . -19) (15620 . 15652) (#("                            " 0 8 (fontified t) 8 9 (fontified t) 9 28 (fontified t)) . 15620) (undo-tree-id7178 . -18) (undo-tree-id7179 . -17) (15613 . 15617) (15527 . 15531) (15461 . 15465) (15386 . 15418) (#("                            " 0 12 (fontified t) 12 28 (fontified t)) . 15386) (undo-tree-id7180 . -14) (15347 . 15379) (#("                            " 0 24 (fontified t) 24 28 (fontified t)) . 15347) (undo-tree-id7181 . -13) (15312 . 15316) (15236 . 15260) (#("                    " 0 19 (fontified t) 19 20 (fontified t)) . 15236) (undo-tree-id7182 . -12) (15218 . 15222) 15081) nil (26013 12479 225296 0) 0 nil])
([nil nil ((15148 . 15149)) nil (26013 12479 225282 0) 0 nil])
([nil nil ((15149 . 15150)) nil (26013 12479 225281 0) 0 nil])
([nil nil ((15959 . 15960)) nil (26013 12479 225281 0) 0 nil])
([nil nil ((15959 . 15972)) nil (26013 12479 225280 0) 0 nil])
([nil nil ((#("            Event::WindowEvent { window_id, event } if window_id == state.window.id() && event == WindowEvent::RedrawRequested => {
                state.update();
                match state.render(wgpu::Color::BLACK) {
                    Ok(_) => {}
                    // Reconfigure the surface if lost
                    Err(wgpu::SurfaceError::Lost) => state.resize(state.size),
                    // The system is out of memory, we should probably quit
                    Err(wgpu::SurfaceError::OutOfMemory) => elwh.exit(),
                    // All other errors (Outdated, Timeout) should be resolved by the next frame
                    Err(e) => tracing::error!(\"{:?}\", e),
                }
            }," 0 12 (fontified t) 12 17 (face font-lock-type-face fontified t) 17 19 (fontified t) 19 30 (face font-lock-type-face fontified t) 30 31 (fontified t) 31 32 (face (rainbow-delimiters-depth-5-face) fontified t) 32 44 (fontified t) 44 49 (fontified t) 49 50 (fontified t) 50 51 (face (rainbow-delimiters-depth-5-face) fontified t) 51 52 (fontified t) 52 54 (face font-lock-keyword-face fontified t) 54 55 (fontified t) 55 68 (fontified t) 68 74 (fontified t) 74 81 (fontified t) 81 83 (fontified t) 83 84 (face (rainbow-delimiters-depth-5-face) fontified t) 84 85 (face (rainbow-delimiters-depth-5-face) fontified t) 85 98 (fontified t) 98 109 (face font-lock-type-face fontified t) 109 111 (fontified t) 111 126 (face font-lock-type-face fontified t) 126 128 (fontified t) 128 129 (fontified t syntax-table (1)) 129 130 (fontified t) 130 131 (face (rainbow-delimiters-depth-5-face) fontified t) 131 132 (fontified t) 132 160 (fontified t) 160 161 (face (rainbow-delimiters-depth-6-face) fontified t) 161 162 (face (rainbow-delimiters-depth-6-face) fontified t) 162 164 (fontified t) 164 171 (fontified t) 171 180 (fontified t) 180 185 (face font-lock-keyword-face fontified t) 185 198 (fontified t) 198 199 (face (rainbow-delimiters-depth-6-face) fontified t) 199 203 (face font-lock-constant-face fontified t) 203 205 (fontified t) 205 210 (face font-lock-type-face fontified t) 210 212 (fontified t) 212 217 (face font-lock-type-face fontified t) 217 218 (face (rainbow-delimiters-depth-6-face) fontified t) 218 219 (fontified t) 219 220 (face (rainbow-delimiters-depth-6-face) fontified t) 220 221 (fontified t) 221 241 (fontified t) 241 243 (face font-lock-type-face fontified t) 243 244 (face (rainbow-delimiters-depth-7-face) fontified t) 244 245 (fontified t) 245 246 (face (rainbow-delimiters-depth-7-face) fontified t) 246 248 (fontified t) 248 249 (fontified t syntax-table (1)) 249 250 (fontified t) 250 251 (face (rainbow-delimiters-depth-7-face) fontified t) 251 252 (face (rainbow-delimiters-depth-7-face) fontified t) 252 253 (fontified t) 253 273 (fontified t) 273 276 (face font-lock-comment-delimiter-face fontified t) 276 308 (face font-lock-comment-face fontified t) 308 328 (fontified t) 328 331 (face font-lock-type-face fontified t) 331 332 (face (rainbow-delimiters-depth-7-face) fontified t) 332 336 (face font-lock-constant-face fontified t) 336 338 (fontified t) 338 350 (face font-lock-type-face fontified t) 350 352 (fontified t) 352 356 (face font-lock-type-face fontified t) 356 357 (face (rainbow-delimiters-depth-7-face) fontified t) 357 359 (fontified t) 359 360 (fontified t syntax-table (1)) 360 373 (fontified t) 373 374 (face (rainbow-delimiters-depth-7-face) fontified t) 374 384 (fontified t) 384 385 (face (rainbow-delimiters-depth-7-face) fontified t) 385 387 (fontified t) 387 395 (fontified t) 395 407 (fontified t) 407 410 (face font-lock-comment-delimiter-face fontified t) 410 463 (face font-lock-comment-face fontified t) 463 483 (fontified t) 483 486 (face font-lock-type-face fontified t) 486 487 (face (rainbow-delimiters-depth-7-face) fontified t) 487 491 (face font-lock-constant-face fontified t) 491 493 (fontified t) 493 505 (face font-lock-type-face fontified t) 505 507 (fontified t) 507 518 (face font-lock-type-face fontified t) 518 519 (face (rainbow-delimiters-depth-7-face) fontified t) 519 521 (fontified t) 521 522 (fontified t syntax-table (1)) 522 532 (fontified t) 532 533 (face (rainbow-delimiters-depth-7-face) fontified t) 533 534 (face (rainbow-delimiters-depth-7-face) fontified t) 534 536 (fontified t) 536 556 (fontified t) 556 559 (face font-lock-comment-delimiter-face fontified t) 559 633 (face font-lock-comment-face fontified t) 633 653 (fontified t) 653 656 (face font-lock-type-face fontified t) 656 657 (face (rainbow-delimiters-depth-7-face) fontified t) 657 658 (fontified t) 658 659 (face (rainbow-delimiters-depth-7-face) fontified t) 659 661 (fontified t) 661 662 (syntax-table (1) fontified t) 662 663 (fontified t) 663 670 (face font-lock-constant-face fontified t) 670 672 (fontified t) 672 678 (face font-lock-preprocessor-face fontified t) 678 679 (face (rainbow-delimiters-depth-7-face) fontified t) 679 685 (face font-lock-string-face fontified t) 685 688 (fontified t) 688 689 (face (rainbow-delimiters-depth-7-face) fontified t) 689 690 (fontified t) 690 691 (fontified t) 691 707 (fontified t) 707 708 (face (rainbow-delimiters-depth-6-face) fontified t) 708 709 (fontified t) 709 721 (fontified t) 721 722 (face (rainbow-delimiters-depth-5-face) fontified t) 722 723 (fontified t rear-nonsticky t)) . 15975) (undo-tree-id7067 . -723) (undo-tree-id7068 . -723) (undo-tree-id7069 . -12) (undo-tree-id7070 . -12) (undo-tree-id7071 . -12) (undo-tree-id7072 . -12) (undo-tree-id7073 . -27) (undo-tree-id7074 . -89) (undo-tree-id7075 . -89) (undo-tree-id7076 . -89) (undo-tree-id7077 . -89) (undo-tree-id7078 . -89) (undo-tree-id7079 . -89) (undo-tree-id7080 . -89) (undo-tree-id7081 . -89) (undo-tree-id7082 . -89) (undo-tree-id7083 . -89) (undo-tree-id7084 . -89) (undo-tree-id7085 . -89) (undo-tree-id7086 . -89) (undo-tree-id7087 . -89) (undo-tree-id7088 . -89) (undo-tree-id7089 . -89) (undo-tree-id7090 . -89) (undo-tree-id7091 . -89) (undo-tree-id7092 . -89) (undo-tree-id7093 . -89) (undo-tree-id7094 . -44) (undo-tree-id7095 . -44) (undo-tree-id7096 . -44) (undo-tree-id7097 . -44) (undo-tree-id7098 . -44) (undo-tree-id7099 . -44) (undo-tree-id7100 . -44) (undo-tree-id7101 . -44) (undo-tree-id7102 . -44) (undo-tree-id7103 . -44) (undo-tree-id7104 . -44) (undo-tree-id7105 . -44) (undo-tree-id7106 . -44) (undo-tree-id7107 . -89) (undo-tree-id7108 . -89) (undo-tree-id7109 . -89) (undo-tree-id7110 . -89) (undo-tree-id7111 . -89) (undo-tree-id7112 . -89) (undo-tree-id7113 . -89) (undo-tree-id7114 . -89) (undo-tree-id7115 . -89) (undo-tree-id7116 . -89) (undo-tree-id7117 . -89) (undo-tree-id7118 . -89) (undo-tree-id7119 . -89) (undo-tree-id7120 . -89) (undo-tree-id7121 . -89) (undo-tree-id7122 . -89) (undo-tree-id7123 . -89) (undo-tree-id7124 . -89) (undo-tree-id7125 . -89) (undo-tree-id7126 . -89) (undo-tree-id7127 . -89) (undo-tree-id7128 . -89) (undo-tree-id7129 . -89) (undo-tree-id7130 . -89) (undo-tree-id7131 . -89) (undo-tree-id7132 . -89) (undo-tree-id7133 . -89) (undo-tree-id7134 . -89) (undo-tree-id7135 . -89) (undo-tree-id7136 . -89) (undo-tree-id7137 . -89) (undo-tree-id7138 . -89) (undo-tree-id7139 . -89) (undo-tree-id7140 . -89) (undo-tree-id7141 . -89) (undo-tree-id7142 . -89) (undo-tree-id7143 . -89) (undo-tree-id7144 . -89) (undo-tree-id7145 . -89) (undo-tree-id7146 . -89) (undo-tree-id7147 . -89) (undo-tree-id7148 . -89) (undo-tree-id7149 . -89) (undo-tree-id7150 . -89) (undo-tree-id7151 . -89) (undo-tree-id7152 . -89) (undo-tree-id7153 . -89) (undo-tree-id7154 . -89) (undo-tree-id7155 . -89) (undo-tree-id7156 . -89) (undo-tree-id7157 . -89) (undo-tree-id7158 . -89) (undo-tree-id7159 . -89) (undo-tree-id7160 . -89) (undo-tree-id7161 . -89) (undo-tree-id7162 . -27) (undo-tree-id7163 . -723) (undo-tree-id7164 . -723) (undo-tree-id7165 . -723) (undo-tree-id7166 . -645) (undo-tree-id7167 . -472) (undo-tree-id7168 . -395) (undo-tree-id7169 . -315) (undo-tree-id7170 . -259) (undo-tree-id7171 . -258) (undo-tree-id7172 . -225) (undo-tree-id7173 . -167) (undo-tree-id7174 . -166) (undo-tree-id7175 . -132) (undo-tree-id7176 . -723)) nil (26013 12479 225274 0) 0 nil])
([nil nil ((15961 . 15977) (#("                " 0 16 (fontified nil)) . 15960) (undo-tree-id7064 . -16) (undo-tree-id7065 . -16) (undo-tree-id7066 . -16) (15959 . 15977)) nil (26013 12479 225132 0) 0 nil])
([nil nil ((nil fontified nil 16699 . 16700) (nil fontified nil 16698 . 16699) (nil fontified nil 16686 . 16698) (nil fontified nil 16685 . 16686) (nil fontified nil 16684 . 16685) (nil fontified nil 16668 . 16684) (nil fontified nil 16667 . 16668) (nil fontified nil 16666 . 16667) (nil fontified nil 16665 . 16666) (nil fontified nil 16662 . 16665) (nil fontified nil 16656 . 16662) (nil fontified nil 16655 . 16656) (nil fontified nil 16649 . 16655) (nil fontified nil 16647 . 16649) (nil fontified nil 16640 . 16647) (nil fontified nil 16639 . 16640) (nil fontified nil 16638 . 16639) (nil fontified nil 16636 . 16638) (nil fontified nil 16635 . 16636) (nil fontified nil 16634 . 16635) (nil fontified nil 16633 . 16634) (nil fontified nil 16630 . 16633) (nil fontified nil 16610 . 16630) (nil fontified nil 16536 . 16610) (nil fontified nil 16533 . 16536) (nil fontified nil 16513 . 16533) (nil fontified nil 16511 . 16513) (nil fontified nil 16510 . 16511) (nil fontified nil 16509 . 16510) (nil fontified nil 16499 . 16509) (nil fontified nil 16498 . 16499) (nil fontified nil 16496 . 16498) (nil fontified nil 16495 . 16496) (nil fontified nil 16484 . 16495) (nil fontified nil 16482 . 16484) (nil fontified nil 16470 . 16482) (nil fontified nil 16468 . 16470) (nil fontified nil 16464 . 16468) (nil fontified nil 16463 . 16464) (nil fontified nil 16460 . 16463) (nil fontified nil 16440 . 16460) (nil fontified nil 16387 . 16440) (nil fontified nil 16384 . 16387) (nil fontified nil 16372 . 16384) (nil fontified nil 16364 . 16372) (nil fontified nil 16362 . 16364) (nil fontified nil 16361 . 16362) (nil fontified nil 16351 . 16361) (nil fontified nil 16350 . 16351) (nil fontified nil 16337 . 16350) (nil fontified nil 16336 . 16337) (nil fontified nil 16334 . 16336) (nil fontified nil 16333 . 16334) (nil fontified nil 16329 . 16333) (nil fontified nil 16327 . 16329) (nil fontified nil 16315 . 16327) (nil fontified nil 16313 . 16315) (nil fontified nil 16309 . 16313) (nil fontified nil 16308 . 16309) (nil fontified nil 16305 . 16308) (nil fontified nil 16285 . 16305) (nil fontified nil 16253 . 16285) (nil fontified nil 16250 . 16253) (nil fontified nil 16230 . 16250) (nil fontified nil 16229 . 16230) (nil fontified nil 16228 . 16229) (nil fontified nil 16227 . 16228) (nil fontified nil 16226 . 16227) (nil fontified nil 16225 . 16226) (nil fontified nil 16223 . 16225) (nil fontified nil 16222 . 16223) (nil fontified nil 16221 . 16222) (nil fontified nil 16220 . 16221) (nil fontified nil 16218 . 16220) (nil fontified nil 16198 . 16218) (nil fontified nil 16197 . 16198) (nil fontified nil 16196 . 16197) (nil fontified nil 16195 . 16196) (nil fontified nil 16194 . 16195) (nil fontified nil 16189 . 16194) (nil fontified nil 16187 . 16189) (nil fontified nil 16182 . 16187) (nil fontified nil 16180 . 16182) (nil fontified nil 16176 . 16180) (nil fontified nil 16175 . 16176) (nil fontified nil 16162 . 16175) (nil fontified nil 16157 . 16162) (nil fontified nil 16148 . 16157) (nil fontified nil 16141 . 16148) (nil fontified nil 16139 . 16141) (nil fontified nil 16138 . 16139) (nil fontified nil 16137 . 16138) (nil fontified nil 16109 . 16137) (nil fontified nil 16108 . 16109) (nil fontified nil 16107 . 16108) (nil fontified nil 16106 . 16107) (nil fontified nil 16105 . 16106) (nil fontified nil 16103 . 16105) (nil fontified nil 16088 . 16103) (nil fontified nil 16086 . 16088) (nil fontified nil 16075 . 16086) (nil fontified nil 16062 . 16075) (nil fontified nil 16061 . 16062) (nil fontified nil 16060 . 16061) (nil fontified nil 16058 . 16060) (nil fontified nil 16051 . 16058) (nil fontified nil 16045 . 16051) (nil fontified nil 16032 . 16045) (nil fontified nil 16031 . 16032) (nil fontified nil 16029 . 16031) (nil fontified nil 16028 . 16029) (nil fontified nil 16027 . 16028) (nil fontified nil 16026 . 16027) (nil fontified nil 16021 . 16026) (nil fontified nil 16009 . 16021) (nil fontified nil 16008 . 16009) (nil fontified nil 16007 . 16008) (nil fontified nil 15996 . 16007) (nil fontified nil 15994 . 15996) (nil fontified nil 15989 . 15994) (nil fontified nil 15977 . 15989) (15977 . 16700)) nil (26013 12479 225123 0) 0 nil])
([nil nil ((16714 . 16730) (#("            " 0 12 (fontified t)) . 16714) (16708 . 16712) (16630 . 16654) (#("                    " 0 20 (fontified t)) . 16630) (undo-tree-id7059 . -16) (16529 . 16553) (#("                    " 0 20 (fontified t)) . 16529) (16452 . 16476) (#("                    " 0 20 (fontified t)) . 16452) (16372 . 16396) (#("                    " 0 8 (fontified t) 8 20 (fontified t)) . 16372) (undo-tree-id7060 . -14) (16289 . 16313) (#("                    " 0 20 (fontified t)) . 16289) (undo-tree-id7061 . -13) (16230 . 16254) (#("                    " 0 20 (fontified t)) . 16230) (undo-tree-id7062 . -12) (16194 . 16218) (#("                    " 0 20 (fontified t)) . 16194) (undo-tree-id7063 . -11) (16149 . 16153) (16113 . 16117) (#("            " 0 12 (fontified t)) . -15977) 15969) nil (26013 12479 225088 0) 0 nil])
([nil nil ((#("event == " 0 9 (fontified t)) . -16054) (undo-tree-id7043 . -9) (undo-tree-id7044 . -9) (undo-tree-id7045 . -9) (undo-tree-id7046 . -9) (undo-tree-id7047 . -9) (undo-tree-id7048 . -9) (undo-tree-id7049 . -9) (undo-tree-id7050 . -9) (undo-tree-id7051 . -9) (undo-tree-id7052 . -9) (undo-tree-id7053 . -9) (undo-tree-id7054 . -9) (undo-tree-id7055 . -9) (undo-tree-id7056 . -9) (undo-tree-id7057 . -9) (undo-tree-id7058 . -9) 16063) nil (26013 12479 225076 0) 0 nil])
([nil nil ((#("id() && " 0 2 (fontified t) 2 3 (face (rainbow-delimiters-depth-6-face) fontified t) 3 4 (face (rainbow-delimiters-depth-6-face) fontified t) 4 8 (fontified t)) . -16046) (undo-tree-id7026 . -8) (undo-tree-id7027 . -8) (undo-tree-id7028 . -8) (undo-tree-id7029 . -8) (undo-tree-id7030 . -8) (undo-tree-id7031 . -8) (undo-tree-id7032 . -8) (undo-tree-id7033 . -8) (undo-tree-id7034 . -8) (undo-tree-id7035 . -8) (undo-tree-id7036 . -8) (undo-tree-id7037 . -8) (undo-tree-id7038 . -8) (undo-tree-id7039 . -8) (undo-tree-id7040 . -8) (undo-tree-id7041 . -8) (undo-tree-id7042 . -8) 16054) nil (26013 12479 225059 0) 0 nil])
([nil nil ((#("window." 0 7 (fontified t)) . -16039) (undo-tree-id7008 . -7) (undo-tree-id7009 . -7) (undo-tree-id7010 . -7) (undo-tree-id7011 . -7) (undo-tree-id7012 . -7) (undo-tree-id7013 . -7) (undo-tree-id7014 . -7) (undo-tree-id7015 . -7) (undo-tree-id7016 . -7) (undo-tree-id7017 . -7) (undo-tree-id7018 . -7) (undo-tree-id7019 . -7) (undo-tree-id7020 . -7) (undo-tree-id7021 . -7) (undo-tree-id7022 . -7) (undo-tree-id7023 . -7) (undo-tree-id7024 . -7) (undo-tree-id7025 . -7) 16046) nil (26013 12479 225041 0) 0 nil])
([nil nil ((#("state." 0 6 (fontified t)) . -16033) (undo-tree-id6989 . -6) (undo-tree-id6990 . -6) (undo-tree-id6991 . -6) (undo-tree-id6992 . -6) (undo-tree-id6993 . -6) (undo-tree-id6994 . -6) (undo-tree-id6995 . -6) (undo-tree-id6996 . -6) (undo-tree-id6997 . -6) (undo-tree-id6998 . -6) (undo-tree-id6999 . -6) (undo-tree-id7000 . -6) (undo-tree-id7001 . -6) (undo-tree-id7002 . -6) (undo-tree-id7003 . -6) (undo-tree-id7004 . -6) (undo-tree-id7005 . -6) (undo-tree-id7006 . -6) (undo-tree-id7007 . -6) 16039) nil (26013 12479 225022 0) 0 nil])
([nil nil ((#("id == " 0 6 (fontified t)) . -16027) (undo-tree-id6969 . -6) (undo-tree-id6970 . -6) (undo-tree-id6971 . -6) (undo-tree-id6972 . -6) (undo-tree-id6973 . -6) (undo-tree-id6974 . -6) (undo-tree-id6975 . -6) (undo-tree-id6976 . -6) (undo-tree-id6977 . -6) (undo-tree-id6978 . -6) (undo-tree-id6979 . -6) (undo-tree-id6980 . -6) (undo-tree-id6981 . -6) (undo-tree-id6982 . -6) (undo-tree-id6983 . -6) (undo-tree-id6984 . -6) (undo-tree-id6985 . -6) (undo-tree-id6986 . -6) (undo-tree-id6987 . -6) (undo-tree-id6988 . -6) 16033) nil (26013 12479 225002 0) 0 nil])
([nil nil ((#("window_" 0 7 (fontified t)) . -16020) (undo-tree-id6948 . -7) (undo-tree-id6949 . -7) (undo-tree-id6950 . -7) (undo-tree-id6951 . -7) (undo-tree-id6952 . -7) (undo-tree-id6953 . -7) (undo-tree-id6954 . -7) (undo-tree-id6955 . -7) (undo-tree-id6956 . -7) (undo-tree-id6957 . -7) (undo-tree-id6958 . -7) (undo-tree-id6959 . -7) (undo-tree-id6960 . -7) (undo-tree-id6961 . -7) (undo-tree-id6962 . -7) (undo-tree-id6963 . -7) (undo-tree-id6964 . -7) (undo-tree-id6965 . -7) (undo-tree-id6966 . -7) (undo-tree-id6967 . -7) (undo-tree-id6968 . -7) 16027) nil (26013 12479 224981 0) 0 nil])
([nil nil ((#("if " 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t)) . -16017) (undo-tree-id6926 . -3) (undo-tree-id6927 . -3) (undo-tree-id6928 . -3) (undo-tree-id6929 . -3) (undo-tree-id6930 . -3) (undo-tree-id6931 . -3) (undo-tree-id6932 . -3) (undo-tree-id6933 . -3) (undo-tree-id6934 . -3) (undo-tree-id6935 . -3) (undo-tree-id6936 . -3) (undo-tree-id6937 . -3) (undo-tree-id6938 . -3) (undo-tree-id6939 . -3) (undo-tree-id6940 . -3) (undo-tree-id6941 . -3) (undo-tree-id6942 . -3) (undo-tree-id6943 . -3) (undo-tree-id6944 . -3) (undo-tree-id6945 . -3) (undo-tree-id6946 . -3) (undo-tree-id6947 . -3) 16020) nil (26013 12479 224959 0) 0 nil])
([nil nil ((#("event } " 0 5 (fontified t) 5 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-6-face) fontified t) 7 8 (fontified t)) . -16009) (undo-tree-id6903 . -8) (undo-tree-id6904 . -8) (undo-tree-id6905 . -8) (undo-tree-id6906 . -8) (undo-tree-id6907 . -8) (undo-tree-id6908 . -8) (undo-tree-id6909 . -8) (undo-tree-id6910 . -8) (undo-tree-id6911 . -8) (undo-tree-id6912 . -8) (undo-tree-id6913 . -8) (undo-tree-id6914 . -8) (undo-tree-id6915 . -8) (undo-tree-id6916 . -8) (undo-tree-id6917 . -8) (undo-tree-id6918 . -8) (undo-tree-id6919 . -8) (undo-tree-id6920 . -8) (undo-tree-id6921 . -8) (undo-tree-id6922 . -8) (undo-tree-id6923 . -8) (undo-tree-id6924 . -8) (undo-tree-id6925 . -8) 16017) nil (26013 12479 224936 0) 0 nil])
([nil nil ((#("id, " 0 4 (fontified t)) . -16005) (undo-tree-id6879 . -4) (undo-tree-id6880 . -4) (undo-tree-id6881 . -4) (undo-tree-id6882 . -4) (undo-tree-id6883 . -4) (undo-tree-id6884 . -4) (undo-tree-id6885 . -4) (undo-tree-id6886 . -4) (undo-tree-id6887 . -4) (undo-tree-id6888 . -4) (undo-tree-id6889 . -4) (undo-tree-id6890 . -4) (undo-tree-id6891 . -4) (undo-tree-id6892 . -4) (undo-tree-id6893 . -4) (undo-tree-id6894 . -4) (undo-tree-id6895 . -4) (undo-tree-id6896 . -4) (undo-tree-id6897 . -4) (undo-tree-id6898 . -4) (undo-tree-id6899 . -4) (undo-tree-id6900 . -4) (undo-tree-id6901 . -4) (undo-tree-id6902 . -4) 16009) nil (26013 12479 224912 0) 0 nil])
([nil nil ((#("window_" 0 7 (fontified t)) . -15998) (undo-tree-id6854 . -7) (undo-tree-id6855 . -7) (undo-tree-id6856 . -7) (undo-tree-id6857 . -7) (undo-tree-id6858 . -7) (undo-tree-id6859 . -7) (undo-tree-id6860 . -7) (undo-tree-id6861 . -7) (undo-tree-id6862 . -7) (undo-tree-id6863 . -7) (undo-tree-id6864 . -7) (undo-tree-id6865 . -7) (undo-tree-id6866 . -7) (undo-tree-id6867 . -7) (undo-tree-id6868 . -7) (undo-tree-id6869 . -7) (undo-tree-id6870 . -7) (undo-tree-id6871 . -7) (undo-tree-id6872 . -7) (undo-tree-id6873 . -7) (undo-tree-id6874 . -7) (undo-tree-id6875 . -7) (undo-tree-id6876 . -7) (undo-tree-id6877 . -7) (undo-tree-id6878 . -7) 16005) nil (26013 12479 224887 0) 0 nil])
([nil nil ((#("WindowEvent { " 0 11 (face font-lock-type-face fontified t) 11 12 (fontified t) 12 13 (face (rainbow-delimiters-depth-6-face) fontified t) 13 14 (fontified t)) . -15984) (undo-tree-id6828 . -14) (undo-tree-id6829 . -14) (undo-tree-id6830 . -14) (undo-tree-id6831 . -14) (undo-tree-id6832 . -14) (undo-tree-id6833 . -14) (undo-tree-id6834 . -14) (undo-tree-id6835 . -14) (undo-tree-id6836 . -14) (undo-tree-id6837 . -14) (undo-tree-id6838 . -14) (undo-tree-id6839 . -14) (undo-tree-id6840 . -14) (undo-tree-id6841 . -14) (undo-tree-id6842 . -14) (undo-tree-id6843 . -14) (undo-tree-id6844 . -14) (undo-tree-id6845 . -14) (undo-tree-id6846 . -14) (undo-tree-id6847 . -14) (undo-tree-id6848 . -14) (undo-tree-id6849 . -14) (undo-tree-id6850 . -14) (undo-tree-id6851 . -14) (undo-tree-id6852 . -14) (undo-tree-id6853 . -14) 15998) nil (26013 12479 224860 0) 0 nil])
([nil nil ((#("Event::" 0 5 (face font-lock-type-face fontified t) 5 7 (fontified t)) . -15977) (undo-tree-id6801 . -7) (undo-tree-id6802 . -7) (undo-tree-id6803 . -7) (undo-tree-id6804 . -7) (undo-tree-id6805 . -7) (undo-tree-id6806 . -7) (undo-tree-id6807 . -7) (undo-tree-id6808 . -7) (undo-tree-id6809 . -7) (undo-tree-id6810 . -7) (undo-tree-id6811 . -7) (undo-tree-id6812 . -7) (undo-tree-id6813 . -7) (undo-tree-id6814 . -7) (undo-tree-id6815 . -7) (undo-tree-id6816 . -7) (undo-tree-id6817 . -7) (undo-tree-id6818 . -7) (undo-tree-id6819 . -7) (undo-tree-id6820 . -7) (undo-tree-id6821 . -7) (undo-tree-id6822 . -7) (undo-tree-id6823 . -7) (undo-tree-id6824 . -7) (undo-tree-id6825 . -7) (undo-tree-id6826 . -7) (undo-tree-id6827 . -7) 15984) nil (26013 12479 224833 0) 0 nil])
([nil nil ((15977 . 15989)) nil (26013 12479 224804 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -16017) (undo-tree-id6766 . -1) (undo-tree-id6767 . -1) (undo-tree-id6768 . -1) (undo-tree-id6769 . -1) (undo-tree-id6770 . -1) (undo-tree-id6771 . -1) (undo-tree-id6772 . -1) (undo-tree-id6773 . -1) (undo-tree-id6774 . -1) (undo-tree-id6775 . -1) (undo-tree-id6776 . -1) (undo-tree-id6777 . -1) (undo-tree-id6778 . -1) (undo-tree-id6779 . -1) (#("=" 0 1 (fontified t)) . -16018) (undo-tree-id6780 . -1) (undo-tree-id6781 . -1) (undo-tree-id6782 . -1) (undo-tree-id6783 . -1) (undo-tree-id6784 . -1) (undo-tree-id6785 . -1) (undo-tree-id6786 . -1) (undo-tree-id6787 . -1) (undo-tree-id6788 . -1) (undo-tree-id6789 . -1) (undo-tree-id6790 . -1) (#(">" 0 1 (syntax-table (1) fontified t)) . -16019) (undo-tree-id6791 . -1) (undo-tree-id6792 . -1) (undo-tree-id6793 . -1) (undo-tree-id6794 . -1) (undo-tree-id6795 . -1) (undo-tree-id6796 . -1) (undo-tree-id6797 . -1) (undo-tree-id6798 . -1) (undo-tree-id6799 . -1) (undo-tree-id6800 . -1) 16020) nil (26013 12479 224799 0) 0 nil])
([nil nil ((#("," 0 1 (fontified t rear-nonsticky t)) . -16654) (undo-tree-id7197 . -1) (undo-tree-id7198 . -1) (undo-tree-id7199 . -1) (undo-tree-id7200 . -1) (undo-tree-id7201 . -1) (undo-tree-id7202 . -1) (undo-tree-id7203 . -1) 16655 (t 26013 12479 256256 587000)) nil (26013 12481 20945 0) 0 nil])
([nil nil ((15980 . 15981) (t 26013 12481 52419 35000)) nil (26013 12510 776895 0) 0 nil])
([nil nil ((15959 . 15967) (t 26013 12510 807538 653000)) nil (26013 12660 928633 0) 0 nil])
([nil nil ((15968 . 15984) (#("                    " 0 20 (fontified nil)) . 15967) (undo-tree-id7220 . -16) (undo-tree-id7221 . -16) (undo-tree-id7222 . -16) (15983 . 15987) (15966 . 15984)) nil (26013 12660 928631 0) 0 nil])
([nil nil ((15967 . 15987)) nil (26013 12660 928626 0) 0 nil])
([nil nil ((15987 . 15989)) nil (26013 12660 928625 0) 0 nil])
([nil nil ((15987 . 15993) (#("wi" 0 2 (fontified nil)) . 15987) (15987 . 15989) (#("window" 0 6 (fontified nil)) . -15987) (15987 . 15993) (#("wi" 0 2 (fontified t)) . -15987) (undo-tree-id7214 . -2) (undo-tree-id7215 . -1) (undo-tree-id7216 . -1) (undo-tree-id7217 . -1) (undo-tree-id7218 . -2) (undo-tree-id7219 . -2) 15989) nil (26013 12660 928623 0) 0 nil])
([nil nil ((15993 . 15996)) nil (26013 12660 928614 0) 0 nil])
([nil nil ((apply yas--snippet-revive 15994 16010 #s(yas--snippet nil nil #s(yas--exit 16010 nil) 58 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 16010 nil) 58 nil nil nil nil)) (15994 . 16010) (#("request_redraw()$0" 0 18 (fontified nil)) . 15994) (15994 . 16012) (#("re" 0 2 (fontified nil)) . 15994) (15994 . 15996) (#("request_redraw()" 0 16 (fontified nil)) . -15994) (15994 . 16010) (#("re" 0 2 (fontified t)) . -15994) (undo-tree-id7204 . -2) (undo-tree-id7205 . -1) (undo-tree-id7206 . -1) (undo-tree-id7207 . -2) (undo-tree-id7208 . -2) (undo-tree-id7209 . -2) (undo-tree-id7210 . -2) (undo-tree-id7211 . -2) (undo-tree-id7212 . -2) (undo-tree-id7213 . -2) 15996) nil (26013 12660 928612 0) 0 nil])
([nil nil ((16010 . 16011)) nil (26013 12660 928587 0) 0 nil])
([nil nil ((15987 . 15992) (t 26013 12660 960483 327000)) nil (26013 12674 561705 0) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -15990) (undo-tree-id7223 . -1) (undo-tree-id7224 . -1) (undo-tree-id7225 . -1) (undo-tree-id7226 . -1) (undo-tree-id7227 . -1) (undo-tree-id7228 . -1) (undo-tree-id7229 . -1) (undo-tree-id7230 . -1) (#("." 0 1 (fontified t)) . -15991) (undo-tree-id7231 . -1) (undo-tree-id7232 . -1) 15992) nil (26013 12674 561702 0) 0 nil])
([nil nil ((15990 . 15992)) nil (26013 12674 561679 0) 0 nil])
([nil nil ((#("self" 0 4 (face font-lock-keyword-face fontified t)) . -15987) (undo-tree-id7243 . -4) (undo-tree-id7244 . -3) (undo-tree-id7245 . -3) (undo-tree-id7246 . -3) (undo-tree-id7247 . -3) (undo-tree-id7248 . -3) (undo-tree-id7249 . -3) (undo-tree-id7250 . -3) (undo-tree-id7251 . -1) (undo-tree-id7252 . -1) (undo-tree-id7253 . -1) (undo-tree-id7254 . -1) (undo-tree-id7255 . -1) (undo-tree-id7256 . -1) (undo-tree-id7257 . -1) (undo-tree-id7258 . -1) (undo-tree-id7259 . -1) (undo-tree-id7260 . -1) (undo-tree-id7261 . -1) (undo-tree-id7262 . -1) (undo-tree-id7263 . -1) (undo-tree-id7264 . -1) (undo-tree-id7265 . -1) (undo-tree-id7266 . -1) (undo-tree-id7267 . -1) (undo-tree-id7268 . -1) (undo-tree-id7269 . -1) (undo-tree-id7270 . -1) (undo-tree-id7271 . -1) (undo-tree-id7272 . -1) (undo-tree-id7273 . -1) (undo-tree-id7274 . -1) (undo-tree-id7275 . -4) (undo-tree-id7276 . -4) (undo-tree-id7277 . -4) (undo-tree-id7278 . -4) (undo-tree-id7279 . -4) (undo-tree-id7280 . -4) 15991 (t 26013 12674 592734 825000)) nil (26013 12684 227897 0) 0 nil])
([nil nil ((15987 . 15990)) nil (26013 12684 227860 0) 0 nil])
([nil nil ((15987 . 15992) (#("sta" 0 3 (fontified nil)) . 15987) (15987 . 15990) (#("state" 0 5 (fontified nil)) . -15987) (15987 . 15992) (#("sta" 0 3 (fontified t)) . -15987) (undo-tree-id7233 . -3) (undo-tree-id7234 . -1) (undo-tree-id7235 . -1) (undo-tree-id7236 . -1) (undo-tree-id7237 . -2) (undo-tree-id7238 . -2) (undo-tree-id7239 . -2) (undo-tree-id7240 . -1) (undo-tree-id7241 . -3) (undo-tree-id7242 . -3) 15990) nil (26013 12684 227855 0) 0 nil])
([nil nil ((#("        info!(\"updating\");" 0 8 (fontified t) 8 13 (face font-lock-preprocessor-face fontified t) 13 14 (face (rainbow-delimiters-depth-3-face) fontified t) 14 24 (face font-lock-string-face fontified t) 24 25 (face (rainbow-delimiters-depth-3-face) fontified t) 25 26 (fontified t)) . 12628) (undo-tree-id7283 . -26) (undo-tree-id7284 . -26) (undo-tree-id7285 . -26) (undo-tree-id7286 . -26) (undo-tree-id7287 . -26) (undo-tree-id7288 . -26) (undo-tree-id7289 . -26) (t 26013 12684 259705 595000)) nil (26013 12714 220140 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 12628) (undo-tree-id7281 . -1) (undo-tree-id7282 . -1)) nil (26013 12714 220125 0) 0 nil])
([nil nil ((15833 . 15862) (t 26013 12714 253665 393000)) nil (26013 12836 47340 0) 0 nil])
([nil nil ((15862 . 15864)) nil (26013 12836 47339 0) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -15862) (undo-tree-id7310 . -1) (undo-tree-id7311 . -1) (undo-tree-id7312 . -1) (undo-tree-id7313 . -1) (undo-tree-id7314 . -1) (undo-tree-id7315 . -1) (undo-tree-id7316 . -1) (#("e" 0 1 (fontified t)) . -15863) (undo-tree-id7317 . -1) (undo-tree-id7318 . -1) (undo-tree-id7319 . -1) (undo-tree-id7320 . -1) 15864) nil (26013 12836 47337 0) 0 nil])
([nil nil ((15862 . 15865)) nil (26013 12836 47325 0) 0 nil])
([nil nil ((15862 . 15867) (#("sta" 0 3 (fontified nil)) . 15862) (15862 . 15865) (#("state" 0 5 (fontified nil)) . -15862) (15862 . 15867) (#("sta" 0 3 (fontified t)) . -15862) (undo-tree-id7302 . -3) (undo-tree-id7303 . -1) (undo-tree-id7304 . -2) (undo-tree-id7305 . -2) (undo-tree-id7306 . -3) (undo-tree-id7307 . -3) (undo-tree-id7308 . -3) (undo-tree-id7309 . -3) 15865) nil (26013 12836 47323 0) 0 nil])
([nil nil ((15867 . 15869)) nil (26013 12836 47313 0) 0 nil])
([nil nil ((15868 . 15874) (#("w" 0 1 (fontified nil)) . 15868) (15868 . 15869) (#("window" 0 6 (fontified nil)) . -15868) (15868 . 15874) (#("w" 0 1 (fontified t)) . -15868) (undo-tree-id7298 . -1) (undo-tree-id7299 . -1) (undo-tree-id7300 . -1) (undo-tree-id7301 . -1) 15869) nil (26013 12836 47311 0) 0 nil])
([nil nil ((15874 . 15877)) nil (26013 12836 47305 0) 0 nil])
([nil nil ((apply yas--snippet-revive 15875 15891 #s(yas--snippet nil nil #s(yas--exit 15891 nil) 59 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 15891 nil) 59 nil nil nil nil)) (15875 . 15891) (#("request_redraw()$0" 0 18 (fontified nil)) . 15875) (15875 . 15893) (#("re" 0 2 (fontified nil)) . 15875) (15875 . 15877) (#("request_redraw()" 0 16 (fontified nil)) . -15875) (15875 . 15891) (#("re" 0 2 (fontified t)) . -15875) (undo-tree-id7290 . -2) (undo-tree-id7291 . -1) (undo-tree-id7292 . -1) (undo-tree-id7293 . -1) (undo-tree-id7294 . -2) (undo-tree-id7295 . -2) (undo-tree-id7296 . -2) (undo-tree-id7297 . -2) 15877) nil (26013 12836 47302 0) 0 nil])
([nil nil ((15891 . 15892)) nil (26013 12836 47278 0) 0 nil])
([nil nil ((270 . 271) (t 26013 12836 79711 423000)) nil (26013 25640 507988 0) 0 nil])
([nil nil ((271 . 277)) nil (26013 25640 507986 0) 0 nil])
([nil nil ((275 . 285) (#("tr" 0 2 (fontified nil)) . 275) (275 . 277) (#("transform;" 0 10 (fontified nil)) . -275) (275 . 285) (#("tr" 0 2 (face font-lock-constant-face fontified t)) . -275) (undo-tree-id7321 . -2) (undo-tree-id7322 . -1) (undo-tree-id7323 . -1) (undo-tree-id7324 . -2) (undo-tree-id7325 . -2) 277) nil (26013 25640 507982 0) 0 nil])
([nil nil ((8432 . 8440) (#("        " 0 8 (fontified nil)) . 8431) (undo-tree-id7404 . -8) (8430 . 8440) (t 26013 25640 541813 850000)) nil (26013 27979 72482 0) 0 nil])
([nil nil ((8440 . 8449)) nil (26013 27979 72479 0) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-variable-name-face fontified t)) . -8448) (undo-tree-id7403 . -1) 8449) nil (26013 27979 72478 0) 0 nil])
([nil nil ((8448 . 8453)) nil (26013 27979 72476 0) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-variable-name-face fontified t)) . -8451) (undo-tree-id7401 . -1) (#("n" 0 1 (face font-lock-variable-name-face fontified t)) . -8452) (undo-tree-id7402 . -1) 8453) nil (26013 27979 72475 0) 0 nil])
([nil nil ((8451 . 8469)) nil (26013 27979 72471 0) 0 nil])
([nil nil ((#("C" 0 1 (face font-lock-type-face fontified t)) . -8468) (undo-tree-id7399 . -1) (undo-tree-id7400 . -1) 8469) nil (26013 27979 72470 0) 0 nil])
([nil nil ((8468 . 8473)) nil (26013 27979 72467 0) 0 nil])
([nil nil ((42 . 68) (8468 . 8468) (8468 . 8477) (#("Trans" 0 5 (fontified nil)) . 8468) (8468 . 8473) (#("Transform (use transform::Transform)" 0 36 (fontified nil)) . -8468) (8468 . 8504) (#("Trans" 0 5 (face font-lock-type-face fontified t)) . -8468) (undo-tree-id7386 . -5) (undo-tree-id7387 . -1) (undo-tree-id7388 . -2) (undo-tree-id7389 . -2) (undo-tree-id7390 . -3) (undo-tree-id7391 . -3) (undo-tree-id7392 . -4) (undo-tree-id7393 . -4) (undo-tree-id7394 . -5) (undo-tree-id7395 . -5) (undo-tree-id7396 . -5) (undo-tree-id7397 . -5) (undo-tree-id7398 . -5) 8473) nil (26013 27979 72465 0) 0 nil])
([nil nil ((8503 . 8506)) nil (26013 27979 72449 0) 0 nil])
([nil nil ((apply yas--snippet-revive 8505 8510 #s(yas--snippet nil nil #s(yas--exit 8510 nil) 73 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 8510 nil) 73 nil nil nil nil)) (8505 . 8510) (#("new()$0" 0 7 (fontified nil)) . 8505) (8505 . 8512) (#("n" 0 1 (fontified nil)) . 8505) (8505 . 8506) (#("new()" 0 5 (fontified nil)) . -8505) (8505 . 8510) (#("n" 0 1 (fontified t)) . -8505) (undo-tree-id7380 . -1) (undo-tree-id7381 . -1) (undo-tree-id7382 . -1) (undo-tree-id7383 . -1) (undo-tree-id7384 . -1) (undo-tree-id7385 . -1) 8506) nil (26013 27979 72447 0) 0 nil])
([nil nil ((#("new()" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-3-face) fontified t) 4 5 (face (rainbow-delimiters-depth-3-face) fontified t)) . -8505) (undo-tree-id7371 . -5) (undo-tree-id7372 . -5) (undo-tree-id7373 . -5) (undo-tree-id7374 . -5) (undo-tree-id7375 . -5) (undo-tree-id7376 . -5) (undo-tree-id7377 . -5) (undo-tree-id7378 . -5) (undo-tree-id7379 . -5) 8510) nil (26013 27979 72437 0) 0 nil])
([nil nil ((#("Transform::" 0 9 (face font-lock-type-face fontified t) 9 11 (fontified t)) . -8494) (undo-tree-id7348 . -11) (undo-tree-id7349 . -9) (undo-tree-id7350 . -9) (undo-tree-id7351 . -9) (undo-tree-id7352 . -10) (undo-tree-id7353 . -10) (undo-tree-id7354 . -11) (undo-tree-id7355 . -11) (undo-tree-id7356 . -11) (undo-tree-id7357 . -11) (undo-tree-id7358 . -11) (undo-tree-id7359 . -11) (undo-tree-id7360 . -11) (undo-tree-id7361 . -11) (undo-tree-id7362 . -11) (undo-tree-id7363 . -11) (undo-tree-id7364 . -11) (undo-tree-id7365 . -11) (undo-tree-id7366 . -11) (undo-tree-id7367 . -11) (undo-tree-id7368 . -11) (undo-tree-id7369 . -11) (undo-tree-id7370 . -11) 8505) nil (26013 27979 72426 0) 0 nil])
([nil nil ((8494 . 8499)) nil (26013 27979 72401 0) 0 nil])
([nil nil ((57 . 69) (62 . 69) (66 . 67) (8494 . 8494) (8494 . 8510) (#("Trans" 0 5 (fontified nil)) . 8494) (8494 . 8499) (#("TransformUniform (use transform::TransformUniform)" 0 50 (fontified nil)) . -8494) (8494 . 8544) (#("Trans" 0 5 (face font-lock-type-face fontified t)) . -8494) (undo-tree-id7332 . -5) (undo-tree-id7333 . -1) (undo-tree-id7334 . -2) (undo-tree-id7335 . -2) (undo-tree-id7336 . -2) (undo-tree-id7337 . -2) (undo-tree-id7338 . -3) (undo-tree-id7339 . -3) (undo-tree-id7340 . -3) (undo-tree-id7341 . -4) (undo-tree-id7342 . -4) (undo-tree-id7343 . -5) (undo-tree-id7344 . -5) (undo-tree-id7345 . -5) (undo-tree-id7346 . -5) (undo-tree-id7347 . -5) 8499) nil (26013 27979 72399 0) 0 nil])
([nil nil ((8530 . 8533)) nil (26013 27979 72379 0) 0 nil])
([nil nil ((apply yas--snippet-revive 8532 8537 #s(yas--snippet nil nil #s(yas--exit 8537 nil) 74 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 8537 nil) 74 nil nil nil nil)) (8532 . 8537) (#("new()$0" 0 7 (fontified nil)) . 8532) (8532 . 8539) (#("n" 0 1 (fontified nil)) . 8532) (8532 . 8533) (#("new()" 0 5 (fontified nil)) . -8532) (8532 . 8537) (#("n" 0 1 (fontified t)) . -8532) (undo-tree-id7326 . -1) (undo-tree-id7327 . -1) (undo-tree-id7328 . -1) (undo-tree-id7329 . -1) (undo-tree-id7330 . -1) (undo-tree-id7331 . -1) 8533) nil (26013 27979 72376 0) 0 nil])
([nil nil ((8537 . 8538)) nil (26013 27979 72341 0) 0 nil])
([nil nil ((8538 . 8547) (t 26013 27979 105519 596000)) nil (26013 28056 970071 0) 0 nil])
([nil nil ((8547 . 8552)) nil (26013 28056 970070 0) 0 nil])
([nil nil ((8547 . 8564) (#("trans" 0 5 (fontified nil)) . 8547) (8547 . 8552) (#("transform_uniform" 0 17 (fontified nil)) . -8547) (8547 . 8564) (#("trans" 0 5 (fontified t)) . -8547) (undo-tree-id7484 . -5) 8552) nil (26013 28056 970068 0) 0 nil])
([nil nil ((8564 . 8566)) nil (26013 28056 970064 0) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -8565) (undo-tree-id7483 . -1) 8566) nil (26013 28056 970063 0) 0 nil])
([nil nil ((8565 . 8568)) nil (26013 28056 970061 0) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -8564) (undo-tree-id7479 . -1) (#("b" 0 1 (fontified t)) . -8565) (undo-tree-id7480 . -1) (#("u" 0 1 (fontified t)) . -8566) (undo-tree-id7481 . -1) (#("i" 0 1 (fontified t)) . -8567) (undo-tree-id7482 . -1) 8568) nil (26013 28056 970059 0) 0 nil])
([nil nil ((8479 . 8487) (#("        " 0 8 (fontified nil)) . 8478) (undo-tree-id7478 . -8) (8478 . 8487) (#("        " 0 8 (fontified nil)) . 8477) (8477 . 8485) (8477 . 8478)) nil (26013 28056 970053 0) 0 nil])
([nil nil ((8487 . 8496)) nil (26013 28056 970049 0) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -8491) (undo-tree-id7473 . -1) (#("r" 0 1 (face font-lock-variable-name-face fontified t)) . -8492) (undo-tree-id7474 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -8493) (undo-tree-id7475 . -1) (#("n" 0 1 (face font-lock-variable-name-face fontified t)) . -8494) (undo-tree-id7476 . -1) (#("s" 0 1 (face font-lock-variable-name-face fontified t)) . -8495) (undo-tree-id7477 . -1) 8496) nil (26013 28056 970047 0) 0 nil])
([nil nil ((8491 . 8509)) nil (26013 28056 970040 0) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -8507) (undo-tree-id7471 . -1) (#(" " 0 1 (fontified t)) . -8508) (undo-tree-id7472 . -1) 8509) nil (26013 28056 970039 0) 0 nil])
([nil nil ((8507 . 8510)) nil (26013 28056 970035 0) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -8509) (undo-tree-id7470 . -1) 8510) nil (26013 28056 970034 0) 0 nil])
([nil nil ((8509 . 8514)) nil (26013 28097 595548 0) 0 nil])
([nil nil ((8514 . 8515)) nil (26013 28109 38074 0) 0 nil] [nil nil ((8509 . 8518) (#("Trans" 0 5 (fontified nil)) . 8509) (8509 . 8514) (#("Transform" 0 9 (fontified nil)) . -8509) (8509 . 8518) (#("Trans" 0 5 (face font-lock-type-face fontified t)) . -8509) (undo-tree-id7464 . -5) (undo-tree-id7466 . -5) (undo-tree-id7468 . -5) 8514) ((8509 . 8514) (#("Transform" 0 9 (fontified nil)) . 8509) (8509 . 8518) (#("Trans" 0 5 (fontified nil)) . 8509) (8509 . 8514) (#("Transform" 0 9 (face font-lock-type-face fontified t)) . 8509) (undo-tree-id7532 . -9) (undo-tree-id7533 . -3) (undo-tree-id7534 . -3) (undo-tree-id7535 . -9) (undo-tree-id7536 . -9) (undo-tree-id7537 . -9) (undo-tree-id7538 . -9) (undo-tree-id7539 . -9) (undo-tree-id7540 . -9)) (26013 28097 263833 0) 0 nil])
([nil nil ((#("f" 0 1 (face font-lock-type-face fontified t)) . -8514) (undo-tree-id7575 . -1) (undo-tree-id7576 . -1) (undo-tree-id7577 . -1) 8515) nil (26013 28109 38073 0) 0 nil])
([nil nil ((8518 . 8521)) ((#("::n" 0 2 (fontified t) 2 3 (fontified t)) . 8518) (undo-tree-id7526 . -3) (undo-tree-id7527 . -2) (undo-tree-id7528 . -2) (undo-tree-id7529 . -2) (undo-tree-id7530 . -2) (undo-tree-id7531 . -3)) (26013 28096 874674 0) 0 nil])
([nil nil ((8509 . 8518) (#("Trans" 0 5 (fontified nil)) . 8509) (8509 . 8514) (#("Transform" 0 9 (fontified nil)) . -8509) (8509 . 8518) (#("Trans" 0 5 (face font-lock-type-face fontified t)) . -8509) (undo-tree-id7547 . -5) (undo-tree-id7548 . -5) (undo-tree-id7549 . -5) (undo-tree-id7550 . -5) (undo-tree-id7551 . -5) (undo-tree-id7552 . -5) (undo-tree-id7553 . -5) (undo-tree-id7554 . -5) (undo-tree-id7555 . -5) (undo-tree-id7556 . -5) (undo-tree-id7557 . -5) (undo-tree-id7558 . -5) (undo-tree-id7559 . -5) (undo-tree-id7560 . -5) (undo-tree-id7561 . -5) (undo-tree-id7562 . -5) (undo-tree-id7563 . -5) (undo-tree-id7564 . -5) (undo-tree-id7565 . -5) (undo-tree-id7566 . -5) (undo-tree-id7567 . -5) (undo-tree-id7568 . -5) (undo-tree-id7569 . -5) (undo-tree-id7570 . -5) (undo-tree-id7571 . -5) (undo-tree-id7572 . -5) (undo-tree-id7573 . -5) (undo-tree-id7574 . -5) 8514) nil (26013 28109 38067 0) 0 nil])
([nil nil ((apply yas--snippet-revive 8520 8525 #s(yas--snippet nil nil #s(yas--exit #<marker at 8770 in rs-wgpu/lib.rs> nil) 75 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 8770 in rs-wgpu/lib.rs> nil) 75 nil nil nil nil)) (8520 . 8525) (#("new()$0" 0 7 (fontified nil)) . 8520) (8520 . 8527) (#("n" 0 1 (fontified nil)) . 8520) (8520 . 8521) (#("new()" 0 5 (fontified nil)) . -8520) (8520 . 8525) (#("n" 0 1 (fontified t)) . -8520) (undo-tree-id7458 . -1) (undo-tree-id7460 . -1) (undo-tree-id7462 . -1) 8521) ((8520 . 8521) (#("new()" 0 5 (fontified nil)) . 8520) (8520 . 8525) (#("n" 0 1 (fontified nil)) . 8520) (8520 . 8521) (#("new()$0" 0 7 (fontified nil)) . 8520) (8520 . 8527) (#("new()" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-3-face) fontified t) 4 5 (face (rainbow-delimiters-depth-3-face) fontified t)) . 8520) (undo-tree-id7521 . -5) (undo-tree-id7522 . -5) (undo-tree-id7523 . -5) (undo-tree-id7524 . -5) (undo-tree-id7525 . -5)) (26013 28096 296039 0) 0 nil])
([nil nil ((8518 . 8521)) nil (26013 28109 38033 0) 0 nil])
([nil nil ((8525 . 8526)) ((#(";" 0 1 (fontified t)) . 8525)) (26013 28095 942223 0) 0 nil])
([nil nil ((apply yas--snippet-revive 8520 8525 #s(yas--snippet nil nil #s(yas--exit 8525 nil) 77 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 8525 nil) 77 nil nil nil nil)) (8520 . 8525) (#("new()$0" 0 7 (fontified nil)) . 8520) (8520 . 8527) (#("n" 0 1 (fontified nil)) . 8520) (8520 . 8521) (#("new()" 0 5 (fontified nil)) . -8520) (8520 . 8525) (#("n" 0 1 (fontified t)) . -8520) (undo-tree-id7541 . -1) (undo-tree-id7542 . -1) (undo-tree-id7543 . -1) (undo-tree-id7544 . -1) (undo-tree-id7545 . -1) (undo-tree-id7546 . -1) 8521) nil (26013 28109 38030 0) 0 nil])
([nil nil ((8613 . 8614)) ((#("." 0 1 (fontified t)) . 8613) (undo-tree-id7506 . -1) (undo-tree-id7507 . -1) (undo-tree-id7508 . -1) (undo-tree-id7509 . -1) (undo-tree-id7510 . -1) (undo-tree-id7511 . -1) (undo-tree-id7512 . -1) (undo-tree-id7513 . -1) (undo-tree-id7514 . -1) (undo-tree-id7515 . -1) (undo-tree-id7516 . -1) (undo-tree-id7517 . -1) (undo-tree-id7518 . -1) (undo-tree-id7519 . -1) (undo-tree-id7520 . -1)) (26013 28095 635844 0) 0 nil])
([nil nil ((8525 . 8526)) nil (26013 28109 38011 0) 0 nil])
([nil nil ((8614 . 8615)) ((#("b" 0 1 (fontified t)) . 8614) (undo-tree-id7502 . -1) (undo-tree-id7503 . -1) (undo-tree-id7504 . -1) (undo-tree-id7505 . -1)) (26013 28095 382817 0) 0 nil])
([nil nil ((8613 . 8615) (t 26013 28109 71536 429000)) nil (26013 28115 779769 0) 0 nil])
([nil nil ((8615 . 8616)) ((#("u" 0 1 (fontified t)) . 8615) (undo-tree-id7499 . -1) (undo-tree-id7500 . -1) (undo-tree-id7501 . -1)) (26013 28095 82904 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 8637 8653 nil nil nil t #s(yas--exit 8654 nil))) #s(yas--exit 8654 nil) 78 nil #s(yas--field 1 8637 8653 nil nil nil t #s(yas--exit 8654 nil)) nil nil)) (8614 . 8647) (#("update_model_transform(${1:transform})$0" 0 40 (fontified nil)) . 8614) (8614 . 8654) (#("u" 0 1 (fontified nil)) . 8614) (8614 . 8615) (#("update_model_transform(…)" 0 25 (fontified nil)) . -8614) (8614 . 8639) (#("u" 0 1 (fontified t)) . -8614) (undo-tree-id7591 . -1) (undo-tree-id7592 . -1) (undo-tree-id7593 . -1) (undo-tree-id7594 . -1) (undo-tree-id7595 . -1) (undo-tree-id7596 . -1) 8615) nil (26013 28115 779767 0) 0 nil])
([nil nil ((8616 . 8617)) ((#("i" 0 1 (fontified t)) . 8616) (undo-tree-id7497 . -1) (undo-tree-id7498 . -1)) (26013 28094 715214 0) 0 nil])
([nil nil ((8638 . 8639) (#("transform" 0 9 (fontified nil)) . 8638) (undo-tree-id7590 . -9) (8637 . 8638)) nil (26013 28115 779757 0) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -8614) (undo-tree-id7425 . -1) (undo-tree-id7427 . -1) (undo-tree-id7429 . -1) (undo-tree-id7431 . -1) (undo-tree-id7433 . -1) (undo-tree-id7435 . -1) (undo-tree-id7437 . -1) (undo-tree-id7439 . -1) (#("u" 0 1 (fontified t)) . -8615) (undo-tree-id7441 . -1) (undo-tree-id7443 . -1) (undo-tree-id7445 . -1) (undo-tree-id7447 . -1) (undo-tree-id7449 . -1) (#("i" 0 1 (fontified t)) . -8616) (undo-tree-id7451 . -1) (undo-tree-id7453 . -1) (undo-tree-id7455 . -1) (undo-tree-id7457 . -1) 8617) ((8614 . 8617)) (26013 28094 382006 0) 0 nil])
([nil nil ((8638 . 8653) (#("m" 0 1 (fontified nil)) . 8638) (undo-tree-id7578 . -1) (8638 . 8639) (#("model_transform" 0 15 (fontified nil)) . -8638) (undo-tree-id7579 . -15) (8638 . 8653) (#("m" 0 1 (fontified t)) . -8638) (undo-tree-id7580 . -1) (undo-tree-id7581 . -1) (undo-tree-id7582 . -1) (undo-tree-id7583 . -1) (undo-tree-id7584 . -1) (undo-tree-id7585 . -1) (undo-tree-id7586 . -1) (undo-tree-id7587 . -1) (undo-tree-id7588 . -1) (undo-tree-id7589 . -1) 8639) nil (26013 28115 779753 0) 0 nil])
([nil nil ((8614 . 8616)) ((#("up" 0 2 (fontified t)) . 8614) (undo-tree-id7493 . -2) (undo-tree-id7494 . -2) (undo-tree-id7495 . -2) (undo-tree-id7496 . -2)) (26013 28093 829600 0) 0 nil])
([nil nil ((apply yas--snippet-revive 8614 8654 #s(yas--snippet nil (#s(yas--field 1 8637 8653 nil nil nil t #s(yas--exit 8654 nil))) #s(yas--exit 8654 nil) 78 nil #s(yas--field 1 8637 8653 nil nil nil t #s(yas--exit 8654 nil)) nil nil))) nil (26013 28115 779731 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 8637 8637 nil nil nil t #s(yas--exit 8647 nil))) #s(yas--exit 8647 nil) 76 nil #s(yas--field 1 8637 8637 nil nil nil t #s(yas--exit 8647 nil)) nil nil)) (8614 . 8647) (#("update_model_transform(${1:transform})$0" 0 40 (fontified nil)) . 8614) (8614 . 8654) (#("up" 0 2 (fontified nil)) . 8614) (8614 . 8616) (#("update_model_transform(…)" 0 25 (fontified nil)) . -8614) (8614 . 8639) (#("up" 0 2 (fontified t)) . -8614) (undo-tree-id7417 . -2) (undo-tree-id7419 . -1) (undo-tree-id7421 . -2) (undo-tree-id7423 . -2) 8616) ((8614 . 8616) (#("update_model_transform(…)" 0 25 (fontified nil)) . 8614) (8614 . 8639) (#("up" 0 2 (fontified nil)) . 8614) (8614 . 8616) (#("update_model_transform(${1:transform})$0" 0 40 (fontified nil)) . 8614) (8614 . 8654) (#("update_model_transform(transform)" 0 22 (fontified t) 22 23 (face (rainbow-delimiters-depth-3-face) fontified t) 23 32 (fontified t) 32 33 (face (rainbow-delimiters-depth-3-face) fontified t)) . 8614) (undo-tree-id7486 . -12) (undo-tree-id7487 . -12) (undo-tree-id7488 . -23) (undo-tree-id7489 . -12) (undo-tree-id7490 . -23) (undo-tree-id7491 . -23) (undo-tree-id7492 . -33) (apply yas--snippet-revive 8614 8647 #s(yas--snippet nil (#s(yas--field 1 8637 8637 nil nil nil t #s(yas--exit 8647 nil))) #s(yas--exit 8647 nil) 76 nil #s(yas--field 1 8637 8637 nil nil nil t #s(yas--exit 8647 nil)) nil nil))) (26013 28093 484538 0) 0 nil])
([nil nil ((8654 . 8655)) nil (26013 28115 779727 0) 0 nil])
([nil nil ((#("transform" 0 9 (fontified nil)) . 8638) (8637 . 8638)) ((#("m" 0 1 (fontified nil)) . 8637) (8638 . 8647)) (26013 28093 131606 0) 0 nil])
([nil nil ((8655 . 8664) (t 26013 28115 811770 140000)) nil (26013 28137 438384 0) 0 nil])
([nil nil ((apply yas--snippet-revive 8614 8639 #s(yas--snippet nil (#s(yas--field 1 8637 8637 nil nil nil t #s(yas--exit 8647 nil))) #s(yas--exit 8647 nil) 76 nil #s(yas--field 1 8637 8637 nil nil nil t #s(yas--exit 8647 nil)) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 8637 8637 nil nil nil t #s(yas--exit 8647 nil))) #s(yas--exit 8647 nil) 76 nil #s(yas--field 1 8637 8637 nil nil nil t #s(yas--exit 8647 nil)) nil nil))) (26013 28093 131562 0) 0 nil] [nil nil ((8637 . 8652) (#("m" 0 1 (fontified nil)) . 8637) (8637 . 8638) (#("model_transform" 0 15 (fontified nil)) . -8637) (8637 . 8652) (#("m" 0 1 (fontified t)) . -8637) (undo-tree-id7407 . -1) (undo-tree-id7409 . -1) (undo-tree-id7411 . -1) (undo-tree-id7413 . -1) (undo-tree-id7415 . -1) 8638) ((8637 . 8638) (#("model_transform" 0 15 (fontified nil)) . 8637) (8637 . 8652) (#("m" 0 1 (fontified nil)) . 8637) (8637 . 8638) (#("model_transform" 0 15 (fontified t)) . 8637) (undo-tree-id7485 . -15)) (26013 28091 360705 0) 0 nil])
([nil nil ((8664 . 8685)) nil (26013 28137 438383 0) 0 nil])
nil
([nil nil ((apply yas--snippet-revive 8614 8653 #s(yas--snippet nil (#s(yas--field 1 8637 8637 nil nil nil t #s(yas--exit 8647 nil))) #s(yas--exit 8647 nil) 76 nil #s(yas--field 1 8637 8637 nil nil nil t #s(yas--exit 8647 nil)) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 8637 8637 nil nil nil t #s(yas--exit 8647 nil))) #s(yas--exit 8647 nil) 76 nil #s(yas--field 1 8637 8637 nil nil nil t #s(yas--exit 8647 nil)) nil nil))) (26013 28090 35573 0) 0 nil])
([nil nil ((8685 . 8689)) nil (26013 28137 438382 0) 0 nil])
([nil nil ((8653 . 8654)) ((#(";" 0 1 (fontified t)) . 8653) (t 26013 28057 2308 751000)) (26013 28056 969912 0) 0 nil])
([nil nil ((8689 . 8691)) nil (26013 28137 438381 0) 0 nil])
nil
([nil nil ((8687 . 8704) (#("tran" 0 4 (fontified nil)) . 8687) (8687 . 8691) (#("transform_uniform" 0 17 (fontified nil)) . -8687) (8687 . 8704) (#("tran" 0 4 (fontified t)) . -8687) (undo-tree-id7610 . -4) (undo-tree-id7611 . -1) (undo-tree-id7612 . -2) (undo-tree-id7613 . -2) (undo-tree-id7614 . -3) (undo-tree-id7615 . -3) (undo-tree-id7616 . -4) (undo-tree-id7617 . -4) (undo-tree-id7618 . -4) (undo-tree-id7619 . -4) (undo-tree-id7620 . -4) 8691) nil (26013 28137 438379 0) 0 nil])
([nil nil ((8704 . 8709)) nil (26013 28137 438365 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 8735 8742 nil nil nil nil #s(yas--exit 8743 nil))) #s(yas--exit 8743 nil) 79 nil #s(yas--field 1 8735 8742 nil nil nil nil #s(yas--exit 8743 nil)) nil nil)) (8705 . 8743) (#("create_model_transform_buffer(${1:&device})$0" 0 45 (fontified nil)) . 8705) (8705 . 8750) (#("crea" 0 4 (fontified nil)) . 8705) (8705 . 8709) (#("create_model_transform_buffer(…)" 0 32 (fontified nil)) . -8705) (8705 . 8737) (#("crea" 0 4 (fontified t)) . -8705) (undo-tree-id7597 . -4) (undo-tree-id7598 . -1) (undo-tree-id7599 . -1) (undo-tree-id7600 . -1) (undo-tree-id7601 . -2) (undo-tree-id7602 . -2) (undo-tree-id7603 . -3) (undo-tree-id7604 . -3) (undo-tree-id7605 . -4) (undo-tree-id7606 . -4) (undo-tree-id7607 . -4) (undo-tree-id7608 . -4) (undo-tree-id7609 . -4) 8709) nil (26013 28137 438360 0) 0 nil])
([nil nil ((apply yas--snippet-revive 8705 8743 #s(yas--snippet nil (#s(yas--field 1 8735 8742 nil nil nil nil #s(yas--exit 8743 nil))) #s(yas--exit 8743 nil) 79 nil #s(yas--field 1 8735 8742 nil nil nil nil #s(yas--exit 8743 nil)) nil nil))) nil (26013 28137 438336 0) 0 nil])
([nil nil ((8743 . 8744)) nil (26013 28137 438332 0) 0 nil])
([nil nil ((8746 . 8754) (#("        " 0 8 (fontified nil)) . 8745) (undo-tree-id7638 . -8) (undo-tree-id7639 . -8) (undo-tree-id7640 . -8) (8744 . 8754) (t 26013 28137 471470 264000)) nil (26013 28155 374539 0) 0 nil])
([nil nil ((nil fontified nil 9772 . 9773) (nil fontified nil 9771 . 9772) (nil fontified nil 9770 . 9771) (nil fontified nil 9762 . 9770) (nil fontified nil 9760 . 9762) (nil fontified nil 9759 . 9760) (nil fontified nil 9740 . 9759) (nil fontified nil 9739 . 9740) (nil fontified nil 9735 . 9739) (nil fontified nil 9733 . 9735) (nil fontified nil 9728 . 9733) (nil fontified nil 9722 . 9728) (nil fontified nil 9714 . 9722) (nil fontified nil 9713 . 9714) (nil fontified nil 9700 . 9713) (nil fontified nil 9699 . 9700) (nil fontified nil 9681 . 9699) (nil fontified nil 9680 . 9681) (nil fontified nil 9679 . 9680) (nil fontified nil 9646 . 9679) (nil fontified nil 9638 . 9646) (nil fontified nil 9613 . 9638) (nil fontified nil 9606 . 9613) (nil fontified nil 9586 . 9606) (nil fontified nil 9585 . 9586) (nil fontified nil 9584 . 9585) (nil fontified nil 9583 . 9584) (nil fontified nil 9569 . 9583) (nil fontified nil 9567 . 9569) (nil fontified nil 9563 . 9567) (nil fontified nil 9546 . 9563) (nil fontified nil 9545 . 9546) (nil fontified nil 9544 . 9545) (nil fontified nil 9542 . 9544) (nil fontified nil 9535 . 9542) (nil fontified nil 9523 . 9535) (nil fontified nil 9497 . 9523) (nil fontified nil 9496 . 9497) (nil fontified nil 9494 . 9496) (nil fontified nil 9488 . 9494) (nil fontified nil 9476 . 9488) (nil fontified nil 9475 . 9476) (nil fontified nil 9474 . 9475) (nil fontified nil 9473 . 9474) (nil fontified nil 9454 . 9473) (nil fontified nil 9452 . 9454) (nil fontified nil 9448 . 9452) (nil fontified nil 9447 . 9448) (nil fontified nil 9446 . 9447) (nil fontified nil 9419 . 9446) (nil fontified nil 9402 . 9419) (nil fontified nil 9401 . 9402) (nil fontified nil 9398 . 9401) (nil fontified nil 9390 . 9398) (nil fontified nil 9389 . 9390) (nil fontified nil 9387 . 9389) (nil fontified nil 9386 . 9387) (nil fontified nil 9385 . 9386) (nil fontified nil 9377 . 9385) (nil fontified nil 9375 . 9377) (nil fontified nil 9374 . 9375) (nil fontified nil 9348 . 9374) (nil fontified nil 9347 . 9348) (nil fontified nil 9343 . 9347) (nil fontified nil 9341 . 9343) (nil fontified nil 9336 . 9341) (nil fontified nil 9322 . 9336) (nil fontified nil 9321 . 9322) (nil fontified nil 9308 . 9321) (nil fontified nil 9307 . 9308) (nil fontified nil 9289 . 9307) (nil fontified nil 9285 . 9289) (nil fontified nil 9283 . 9285) (nil fontified nil 9278 . 9283) (nil fontified nil 9256 . 9278) (nil fontified nil 9255 . 9256) (nil fontified nil 9235 . 9255) (nil fontified nil 9233 . 9235) (nil fontified nil 9229 . 9233) (nil fontified nil 9227 . 9229) (nil fontified nil 9211 . 9227) (nil fontified nil 9191 . 9211) (nil fontified nil 9185 . 9191) (nil fontified nil 9180 . 9185) (nil fontified nil 9178 . 9180) (nil fontified nil 9160 . 9178) (nil fontified nil 9134 . 9160) (nil fontified nil 9127 . 9134) (nil fontified nil 9125 . 9127) (nil fontified nil 9108 . 9125) (nil fontified nil 9106 . 9108) (nil fontified nil 9102 . 9106) (nil fontified nil 9100 . 9102) (nil fontified nil 9098 . 9100) (nil fontified nil 9073 . 9098) (nil fontified nil 9072 . 9073) (nil fontified nil 9071 . 9072) (nil fontified nil 9065 . 9071) (nil fontified nil 9063 . 9065) (nil fontified nil 9052 . 9063) (nil fontified nil 9050 . 9052) (nil fontified nil 9046 . 9050) (nil fontified nil 9044 . 9046) (nil fontified nil 9042 . 9044) (nil fontified nil 9020 . 9042) (nil fontified nil 9014 . 9020) (nil fontified nil 9012 . 9014) (nil fontified nil 9000 . 9012) (nil fontified nil 8998 . 9000) (nil fontified nil 8994 . 8998) (nil fontified nil 8992 . 8994) (nil fontified nil 8982 . 8992) (nil fontified nil 8957 . 8982) (nil fontified nil 8950 . 8957) (nil fontified nil 8929 . 8950) (nil fontified nil 8928 . 8929) (nil fontified nil 8927 . 8928) (nil fontified nil 8907 . 8927) (nil fontified nil 8905 . 8907) (nil fontified nil 8901 . 8905) (nil fontified nil 8884 . 8901) (nil fontified nil 8883 . 8884) (nil fontified nil 8882 . 8883) (nil fontified nil 8880 . 8882) (nil fontified nil 8873 . 8880) (nil fontified nil 8861 . 8873) (nil fontified nil 8860 . 8861) (nil fontified nil 8859 . 8860) (nil fontified nil 8858 . 8859) (nil fontified nil 8833 . 8858) (nil fontified nil 8831 . 8833) (nil fontified nil 8827 . 8831) (nil fontified nil 8826 . 8827) (nil fontified nil 8825 . 8826) (nil fontified nil 8791 . 8825) (nil fontified nil 8767 . 8791) (nil fontified nil 8766 . 8767) (nil fontified nil 8763 . 8766) (nil fontified nil 8755 . 8763) (nil fontified nil 8754 . 8755) (8754 . 9773)) nil (26013 28155 374528 0) 0 nil])
([nil nil ((#("camera" 0 6 (face font-lock-variable-name-face fontified t)) . -9402) (undo-tree-id7628 . -6) (undo-tree-id7629 . -6) (undo-tree-id7630 . -6) (undo-tree-id7631 . -6) (undo-tree-id7632 . -6) (undo-tree-id7633 . -6) (undo-tree-id7634 . -6) (undo-tree-id7635 . -6) (undo-tree-id7636 . -6) (undo-tree-id7637 . -6) 9408) nil (26013 28155 374491 0) 0 nil])
([nil nil ((9402 . 9409)) nil (26013 28155 374479 0) 0 nil])
([nil nil ((#("p" 0 1 (face font-lock-variable-name-face fontified t)) . -9408) (undo-tree-id7621 . -1) (undo-tree-id7622 . -1) (undo-tree-id7623 . -1) (undo-tree-id7624 . -1) (undo-tree-id7625 . -1) (undo-tree-id7626 . -1) (undo-tree-id7627 . -1) 9409) nil (26013 28155 374477 0) 0 nil])
([nil nil ((9408 . 9411)) nil (26013 28155 374457 0) 0 nil])
([nil nil ((#("camera" 0 6 (face font-lock-variable-name-face fontified t)) . -8767) (undo-tree-id7688 . -6) (undo-tree-id7689 . -6) (undo-tree-id7690 . -6) (undo-tree-id7691 . -6) (undo-tree-id7692 . -6) (undo-tree-id7693 . -6) (undo-tree-id7694 . -6) (undo-tree-id7695 . -6) (undo-tree-id7696 . -6) (undo-tree-id7697 . -6) 8773 (t 26013 28155 408877 483000)) nil (26013 28161 517015 0) 0 nil])
([nil nil ((8767 . 8771)) nil (26013 28161 516999 0) 0 nil])
([nil nil ((#("f" 0 1 (face font-lock-variable-name-face fontified t)) . -8767) (undo-tree-id7641 . -1) (undo-tree-id7642 . -1) (undo-tree-id7643 . -1) (undo-tree-id7644 . -1) (undo-tree-id7645 . -1) (undo-tree-id7646 . -1) (undo-tree-id7647 . -1) (undo-tree-id7648 . -1) (undo-tree-id7649 . -1) (undo-tree-id7650 . -1) (undo-tree-id7651 . -1) (undo-tree-id7652 . -1) (undo-tree-id7653 . -1) (undo-tree-id7654 . -1) (undo-tree-id7655 . -1) (undo-tree-id7656 . -1) (undo-tree-id7657 . -1) (#("r" 0 1 (face font-lock-variable-name-face fontified t)) . -8768) (undo-tree-id7658 . -1) (undo-tree-id7659 . -1) (undo-tree-id7660 . -1) (undo-tree-id7661 . -1) (undo-tree-id7662 . -1) (undo-tree-id7663 . -1) (undo-tree-id7664 . -1) (undo-tree-id7665 . -1) (undo-tree-id7666 . -1) (undo-tree-id7667 . -1) (undo-tree-id7668 . -1) (undo-tree-id7669 . -1) (undo-tree-id7670 . -1) (undo-tree-id7671 . -1) (#("o" 0 1 (face font-lock-variable-name-face fontified t)) . -8769) (undo-tree-id7672 . -1) (undo-tree-id7673 . -1) (undo-tree-id7674 . -1) (undo-tree-id7675 . -1) (undo-tree-id7676 . -1) (undo-tree-id7677 . -1) (undo-tree-id7678 . -1) (undo-tree-id7679 . -1) (undo-tree-id7680 . -1) (undo-tree-id7681 . -1) (#("m" 0 1 (face font-lock-variable-name-face fontified t)) . -8770) (undo-tree-id7682 . -1) (undo-tree-id7683 . -1) (undo-tree-id7684 . -1) (undo-tree-id7685 . -1) (undo-tree-id7686 . -1) (undo-tree-id7687 . -1) 8771) nil (26013 28161 516994 0) 0 nil])
([nil nil ((8767 . 8773)) nil (26013 28161 516940 0) 0 nil])
([nil nil ((8773 . 8776)) nil (26013 28161 516937 0) 0 nil])
([nil nil ((9781 . 9789) (#("        " 0 8 (fontified nil)) . 9780) (undo-tree-id7715 . -8) (undo-tree-id7716 . -8) (undo-tree-id7717 . -8) (9779 . 9789) (t 26013 28161 550226 75000)) nil (26013 28324 566635 0) 0 nil])
([nil nil ((10226 . 10227)) nil (26013 28324 566630 0) 0 nil])
([nil nil ((10227 . 10248)) nil (26013 28324 566629 0) 0 nil])
([nil nil ((10248 . 10254)) nil (26013 28324 566628 0) 0 nil])
([nil nil ((10249 . 10269) (#("trans" 0 5 (fontified nil)) . 10249) (10249 . 10254) (#("transform_bind_group" 0 20 (fontified nil)) . -10249) (10249 . 10269) (#("trans" 0 5 (fontified t)) . -10249) (undo-tree-id7708 . -5) (undo-tree-id7709 . -1) (undo-tree-id7710 . -1) (undo-tree-id7711 . -2) (undo-tree-id7712 . -3) (undo-tree-id7713 . -4) (undo-tree-id7714 . -5) 10254) nil (26013 28324 566626 0) 0 nil])
([nil nil ((10269 . 10271)) nil (26013 28324 566616 0) 0 nil])
([nil nil ((10249 . 10276) (#("transform_bind_group_l" 0 22 (fontified nil)) . 10249) (10249 . 10271) (#("transform_bind_group_layout" 0 27 (fontified nil)) . -10249) (10249 . 10276) (#("transform_bind_group_l" 0 22 (fontified t)) . -10249) (undo-tree-id7698 . -22) (undo-tree-id7699 . -20) (undo-tree-id7700 . -20) (undo-tree-id7701 . -20) (undo-tree-id7702 . -20) (undo-tree-id7703 . -21) (undo-tree-id7704 . -22) (undo-tree-id7705 . -22) (undo-tree-id7706 . -22) (undo-tree-id7707 . -22) 10271) nil (26013 28324 566613 0) 0 nil])
([nil nil ((10276 . 10277)) nil (26013 28324 566589 0) 0 nil])
([nil nil ((9781 . 9789) (#("        " 0 8 (fontified nil)) . 9780) (9780 . 9788) (9780 . 9781) (t 26013 28324 602260 957000)) nil (26013 28412 85780 0) 0 nil])
([nil nil ((9789 . 9792)) nil (26013 28412 85778 0) 0 nil])
([nil nil ((9789 . 9794) (#("que" 0 3 (fontified nil)) . 9789) (9789 . 9792) (#("queue" 0 5 (fontified nil)) . -9789) (9789 . 9794) (#("que" 0 3 (fontified t)) . -9789) (undo-tree-id7740 . -3) 9792) nil (26013 28412 85777 0) 0 nil])
([nil nil ((9794 . 9796)) nil (26013 28412 85773 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 9808 9814 nil nil nil nil #s(yas--field 2 9816 9822 nil nil nil nil #s(yas--field 3 9824 9828 nil nil nil nil #s(yas--exit 9829 nil)))) #s(yas--field 2 9816 9822 nil nil nil nil #s(yas--field 3 9824 9828 nil nil nil nil #s(yas--exit 9829 nil))) #s(yas--field 3 9824 9828 nil nil nil nil #s(yas--exit 9829 nil))) #s(yas--exit 9829 nil) 80 nil #s(yas--field 1 9808 9814 nil nil nil nil #s(yas--field 2 9816 9822 nil nil nil nil #s(yas--field 3 9824 9828 nil nil nil nil #s(yas--exit 9829 nil)))) nil nil)) (9795 . 9829) (#("write_buffer(${1:buffer}, ${2:offset}, ${3:data})$0" 0 51 (fontified nil)) . 9795) (9795 . 9846) (#("w" 0 1 (fontified nil)) . 9795) (9795 . 9796) (#("write_buffer(…)" 0 15 (fontified nil)) . -9795) (9795 . 9810) (#("w" 0 1 (fontified t)) . -9795) (undo-tree-id7739 . -1) 9796) nil (26013 28412 85772 0) 0 nil])
([nil nil ((apply yas--snippet-revive 9795 9829 #s(yas--snippet nil (#s(yas--field 1 9808 9814 nil nil nil nil #s(yas--field 2 9816 9822 nil nil nil nil #s(yas--field 3 9824 9828 nil nil nil nil #s(yas--exit 9829 nil)))) #s(yas--field 2 9816 9822 nil nil nil nil #s(yas--field 3 9824 9828 nil nil nil nil #s(yas--exit 9829 nil))) #s(yas--field 3 9824 9828 nil nil nil nil #s(yas--exit 9829 nil))) #s(yas--exit 9829 nil) 80 nil #s(yas--field 1 9808 9814 nil nil nil nil #s(yas--field 2 9816 9822 nil nil nil nil #s(yas--field 3 9824 9828 nil nil nil nil #s(yas--exit 9829 nil)))) nil nil))) nil (26013 28412 85767 0) 0 nil])
([nil nil ((#("buffer" 0 6 (fontified t)) . -9808) (undo-tree-id7737 . -6) (undo-tree-id7738 . -6) 9814) nil (26013 28412 85766 0) 0 nil])
([nil nil ((9808 . 9810)) nil (26013 28412 85763 0) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -9809) (undo-tree-id7736 . -1) 9810) nil (26013 28412 85762 0) 0 nil])
([nil nil ((9808 . 9809) (9808 . 9824) (#("t" 0 1 (fontified nil)) . 9808) (9808 . 9809) (#("&transform_buffer" 0 17 (fontified nil)) . -9808) (9808 . 9825) (#("t" 0 1 (fontified t)) . -9808) (undo-tree-id7734 . -1) (undo-tree-id7735 . -1) 9809) nil (26013 28412 85759 0) 0 nil])
([nil nil ((#("offset" 0 6 (fontified t)) . -9827) (undo-tree-id7732 . -6) (undo-tree-id7733 . -5) 9833) nil (26013 28412 85754 0) 0 nil])
([nil nil ((9827 . 9828)) nil (26013 28412 85750 0) 0 nil])
([nil nil ((#("data" 0 4 (fontified t)) . -9830) (undo-tree-id7731 . -4) 9834) nil (26013 28412 85749 0) 0 nil])
([nil nil ((9830 . 9831)) nil (26013 28412 85747 0) 0 nil])
([nil nil ((9831 . 9832)) nil (26013 28412 85746 0) 0 nil])
([nil nil ((1 . 25) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 9854 9854 nil nil nil t #s(yas--exit 9855 nil))) #s(yas--exit 9855 nil) 81 nil #s(yas--field 1 9854 9854 nil nil nil t #s(yas--exit 9855 nil)) nil nil)) (9830 . 9841) (#("bytes_of(${1:t})$0" 0 18 (fontified nil)) . 9830) (9830 . 9848) (#("by" 0 2 (fontified nil)) . 9830) (9830 . 9832) (#("bytes_of(…) (use bytemuck::bytes_of)" 0 36 (fontified nil)) . -9830) (9830 . 9866) (#("by" 0 2 (fontified t)) . -9830) (undo-tree-id7729 . -2) (undo-tree-id7730 . -1) 9832) nil (26013 28412 85744 0) 0 nil])
([nil nil ((#("of(" 0 2 (fontified t) 2 3 (face (rainbow-delimiters-depth-4-face) fontified t)) . -9860) (undo-tree-id7728 . -3) 9863) nil (26013 28412 85738 0) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -9860) (undo-tree-id7727 . -1) 9861) nil (26013 28412 85735 0) 0 nil])
([nil nil ((#("bytes_" 0 6 (fontified t)) . -9854) (undo-tree-id7726 . -6) 9860) nil (26013 28412 85733 0) 0 nil])
([nil nil ((apply yas--snippet-revive 9854 9855 #s(yas--snippet nil (#s(yas--field 1 9854 9854 nil nil nil t #s(yas--exit 9855 nil))) #s(yas--exit 9855 nil) 81 nil #s(yas--field 1 9854 9854 nil nil nil t #s(yas--exit 9855 nil)) nil nil))) nil (26013 28412 85731 0) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -9854) (undo-tree-id7725 . -1) 9855) nil (26013 28412 85729 0) 0 nil])
([nil nil ((9854 . 9858)) nil (26013 28412 85727 0) 0 nil])
([nil nil ((9854 . 9862) (#("byte" 0 4 (fontified nil)) . 9854) (9854 . 9858) (#("bytemuck" 0 8 (fontified nil)) . -9854) (9854 . 9862) (#("byte" 0 4 (fontified t)) . -9854) (undo-tree-id7724 . -4) 9858) nil (26013 28412 85726 0) 0 nil])
([nil nil ((9862 . 9866)) nil (26013 28412 85722 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 9875 9893 nil nil nil t #s(yas--exit 9894 nil))) #s(yas--exit 9894 nil) 82 nil #s(yas--field 1 9875 9893 nil nil nil t #s(yas--exit 9894 nil)) nil nil)) (9864 . 9877) (#("cast_slice(${1:a})$0" 0 20 (fontified nil)) . 9864) (9864 . 9884) (#("ca" 0 2 (fontified nil)) . 9864) (9864 . 9866) (#("cast_slice(…)" 0 13 (fontified nil)) . -9864) (9864 . 9877) (#("ca" 0 2 (fontified t)) . -9864) (undo-tree-id7723 . -2) 9866) nil (26013 28412 85720 0) 0 nil])
([nil nil ((9876 . 9878) (#("a" 0 1 (fontified nil)) . 9876) (undo-tree-id7722 . -1) (9875 . 9876)) nil (26013 28412 85715 0) 0 nil])
([nil nil ((9877 . 9879)) nil (26013 28412 85713 0) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -9878) (undo-tree-id7720 . -1) (undo-tree-id7721 . -1) 9879) nil (26013 28412 85712 0) 0 nil])
([nil nil ((9877 . 9891) (#("c" 0 1 (fontified nil)) . 9877) (9877 . 9878) (#("camera_uniform" 0 14 (fontified nil)) . -9877) (9877 . 9891) (#("c" 0 1 (fontified t)) . -9877) (undo-tree-id7718 . -1) (undo-tree-id7719 . -1) 9878) nil (26013 28412 85707 0) 0 nil])
([nil nil ((9877 . 9878)) nil (26013 28412 85696 0) 0 nil])
([nil nil ((apply yas--snippet-revive 9864 9894 #s(yas--snippet nil (#s(yas--field 1 9875 9893 nil nil nil t #s(yas--exit 9894 nil))) #s(yas--exit 9894 nil) 82 nil #s(yas--field 1 9875 9893 nil nil nil t #s(yas--exit 9894 nil)) nil nil))) nil (26013 28412 85694 0) 0 nil])
([nil nil ((9895 . 9896)) nil (26013 28412 85690 0) 0 nil])
([nil nil ((#("uniform" 0 7 (fontified t)) . -9885) (undo-tree-id7812 . -7) (undo-tree-id7813 . -7) (undo-tree-id7814 . -7) (undo-tree-id7815 . -7) (undo-tree-id7816 . -7) (undo-tree-id7817 . -7) (undo-tree-id7818 . -7) 9892 (t 26013 28412 119343 914000)) nil (26013 28425 330874 0) 0 nil])
([nil nil ((#("camera_" 0 7 (fontified t)) . -9878) (undo-tree-id7804 . -7) (undo-tree-id7805 . -7) (undo-tree-id7806 . -7) (undo-tree-id7807 . -7) (undo-tree-id7808 . -7) (undo-tree-id7809 . -7) (undo-tree-id7810 . -7) (undo-tree-id7811 . -7) 9885) nil (26013 28425 330866 0) 0 nil])
([nil nil ((9878 . 9880)) nil (26013 28425 330857 0) 0 nil])
([nil nil ((9880 . 9883)) nil (26013 28425 330856 0) 0 nil])
([nil nil ((9878 . 9895) (#("trasn" 0 5 (fontified nil)) . 9878) (9878 . 9883) (#("transform_uniform" 0 17 (fontified nil)) . -9878) (9878 . 9895) (#("trasn" 0 5 (fontified t)) . -9878) (undo-tree-id7782 . -5) (undo-tree-id7783 . -1) (undo-tree-id7784 . -1) (undo-tree-id7785 . -2) (undo-tree-id7786 . -2) (undo-tree-id7787 . -2) (undo-tree-id7788 . -2) (undo-tree-id7789 . -2) (undo-tree-id7790 . -2) (undo-tree-id7791 . -2) (undo-tree-id7792 . -3) (undo-tree-id7793 . -3) (undo-tree-id7794 . -3) (undo-tree-id7795 . -4) (undo-tree-id7796 . -4) (undo-tree-id7797 . -5) (undo-tree-id7798 . -5) (undo-tree-id7799 . -5) (undo-tree-id7800 . -5) (undo-tree-id7801 . -5) (undo-tree-id7802 . -5) (undo-tree-id7803 . -5) 9883) nil (26013 28425 330853 0) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . -9877) (undo-tree-id7741 . -1) (undo-tree-id7742 . -1) (undo-tree-id7743 . -1) (undo-tree-id7744 . -1) (undo-tree-id7745 . -1) (undo-tree-id7746 . -1) (undo-tree-id7747 . -1) (undo-tree-id7748 . -1) (undo-tree-id7749 . -1) (undo-tree-id7750 . -1) (undo-tree-id7751 . -1) (undo-tree-id7752 . -1) (undo-tree-id7753 . -1) (undo-tree-id7754 . -1) (undo-tree-id7755 . -1) (undo-tree-id7756 . -1) (undo-tree-id7757 . -1) (undo-tree-id7758 . -1) (undo-tree-id7759 . -1) (undo-tree-id7760 . -1) (undo-tree-id7761 . -1) (undo-tree-id7762 . -1) (undo-tree-id7763 . -1) (undo-tree-id7764 . -1) (undo-tree-id7765 . -1) (undo-tree-id7766 . -1) (undo-tree-id7767 . -1) (undo-tree-id7768 . -1) (undo-tree-id7769 . -1) (undo-tree-id7770 . -1) (undo-tree-id7771 . -1) (undo-tree-id7772 . -1) (undo-tree-id7773 . -1) (undo-tree-id7774 . -1) (undo-tree-id7775 . -1) (undo-tree-id7776 . -1) (undo-tree-id7777 . -1) (undo-tree-id7778 . -1) (undo-tree-id7779 . -1) (undo-tree-id7780 . -1) (undo-tree-id7781 . -1) 9878) nil (26013 28425 330825 0) 0 nil])
([nil nil ((#("        queue.write_buffer(&transform_buffer, 0, bytemuck::cast_slice(&[transform_uniform]));" 0 8 (fontified t) 8 14 (fontified t) 14 26 (fontified t) 26 27 (face (rainbow-delimiters-depth-3-face) fontified t) 27 28 (face rust-ampersand-face fontified t) 28 44 (fontified t) 44 49 (fontified t) 49 57 (face font-lock-constant-face fontified t) 57 59 (fontified t) 59 69 (fontified t) 69 70 (face (rainbow-delimiters-depth-4-face) fontified t) 70 71 (face rust-ampersand-face fontified t) 71 72 (face (rainbow-delimiters-depth-5-face) fontified t) 72 89 (fontified t) 89 90 (face (rainbow-delimiters-depth-5-face) fontified t) 90 91 (face (rainbow-delimiters-depth-4-face) fontified t) 91 92 (face (rainbow-delimiters-depth-3-face) fontified t) 92 93 (fontified t)) . 9805) (undo-tree-id7836 . -70) (undo-tree-id7837 . -72) (undo-tree-id7838 . -72) (undo-tree-id7839 . -72) (undo-tree-id7840 . -72) (undo-tree-id7841 . -72) (undo-tree-id7842 . -72) (undo-tree-id7843 . -72) (undo-tree-id7844 . -72) (undo-tree-id7845 . -72) (undo-tree-id7846 . -72) (undo-tree-id7847 . -72) (undo-tree-id7848 . -72) (undo-tree-id7849 . -72) (undo-tree-id7850 . -72) (undo-tree-id7851 . -72) (undo-tree-id7852 . -72) (undo-tree-id7853 . -72) (undo-tree-id7854 . -72) (undo-tree-id7855 . -72) (undo-tree-id7856 . -72) (undo-tree-id7857 . -72) (undo-tree-id7858 . -72) (undo-tree-id7859 . -72) (undo-tree-id7860 . -72) (undo-tree-id7861 . -72) (undo-tree-id7862 . -72) (undo-tree-id7863 . -72) (undo-tree-id7864 . -72) (undo-tree-id7865 . -72) (undo-tree-id7866 . -72) (undo-tree-id7867 . -72) (undo-tree-id7868 . -72) (undo-tree-id7869 . -72) (undo-tree-id7870 . -72) (undo-tree-id7871 . -72) (undo-tree-id7872 . -72) (undo-tree-id7873 . -72) (undo-tree-id7874 . -72) (undo-tree-id7875 . -72) (undo-tree-id7876 . -93) (undo-tree-id7877 . -72) (undo-tree-id7878 . -72) (undo-tree-id7879 . -72) (undo-tree-id7880 . -72) (undo-tree-id7881 . -72) (undo-tree-id7882 . -72) (undo-tree-id7883 . -72) (undo-tree-id7884 . -72) (undo-tree-id7885 . -72) (undo-tree-id7886 . -72) (undo-tree-id7887 . -72) (undo-tree-id7888 . -72) (undo-tree-id7889 . -72) (undo-tree-id7890 . -72) (undo-tree-id7891 . -72) (undo-tree-id7892 . -72) (undo-tree-id7893 . -72) (undo-tree-id7894 . -72) (undo-tree-id7895 . -72) (undo-tree-id7896 . -72) (undo-tree-id7897 . -72) (undo-tree-id7898 . -72) (undo-tree-id7899 . -72) (undo-tree-id7900 . -72) (undo-tree-id7901 . -72) (undo-tree-id7902 . -72) (undo-tree-id7903 . -72) (undo-tree-id7904 . -72) (undo-tree-id7905 . -72) (undo-tree-id7906 . -72) (undo-tree-id7907 . -72) (undo-tree-id7908 . -72) (undo-tree-id7909 . -72) (undo-tree-id7910 . -72) (undo-tree-id7911 . -72) (undo-tree-id7912 . -93) (undo-tree-id7913 . -93) (undo-tree-id7914 . -93) (undo-tree-id7915 . -93) (undo-tree-id7916 . -93) (undo-tree-id7917 . -93) (undo-tree-id7918 . -93) (undo-tree-id7919 . -93) (undo-tree-id7920 . -93) (undo-tree-id7921 . -93) (undo-tree-id7922 . -93) (t 26013 28425 365281 651000)) nil (26013 28453 318986 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 9805) (undo-tree-id7835 . -1)) nil (26013 28453 318893 0) 0 nil])
([nil nil ((#("        
" 0 8 (fontified t) 8 9 (fontified t)) . 9805) (undo-tree-id7820 . -8) (undo-tree-id7821 . -8) (undo-tree-id7822 . -8) (undo-tree-id7823 . -8) (undo-tree-id7824 . -8) (undo-tree-id7825 . -8) (undo-tree-id7826 . -8) (undo-tree-id7827 . -8) (undo-tree-id7828 . -8) (undo-tree-id7829 . -8) (undo-tree-id7830 . -8) (undo-tree-id7831 . -8) (undo-tree-id7832 . -8) (undo-tree-id7833 . -8) (undo-tree-id7834 . -9)) nil (26013 28453 318890 0) 0 nil])
([nil nil ((#("        
" 0 9 (fontified t)) . 9805) (undo-tree-id7819 . -9)) nil (26013 28453 318871 0) 0 nil])
([nil nil ((2857 . 2861) (#("    " 0 4 (fontified nil)) . 2856) (undo-tree-id7941 . -4) (2856 . 2861) (#("    " 0 4 (fontified nil)) . 2855) (undo-tree-id7942 . -4) (2857 . 2860) (#("  " 0 2 (fontified nil)) . 2854) (undo-tree-id7943 . -2) (undo-tree-id7944 . -2) (2856 . 2857) (t 26013 28453 354009 249000)) nil (26013 28565 689925 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 2875 . 2876) (nil fontified nil 2861 . 2876) (2861 . 2876)) nil (26013 28565 689918 0) 0 nil])
([nil nil ((2876 . 2877)) nil (26013 28565 689917 0) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -2876) (undo-tree-id7940 . -1) 2877) nil (26013 28565 689916 0) 0 nil])
([nil nil ((2876 . 2885)) nil (26013 28565 689914 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 2902 . 2903) (nil fontified nil 2885 . 2903) (2885 . 2903)) nil (26013 28565 689913 0) 0 nil])
([nil nil ((2903 . 2911) (#(" " 0 1 (fontified nil)) . -2885) (2903 . 2904)) nil (26013 28565 689911 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 2930 . 2931) (nil fontified nil 2911 . 2931) (2911 . 2931)) nil (26013 28565 689909 0) 0 nil])
([nil nil ((2902 . 2911)) nil (26013 28565 689908 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 2926 . 2927) (nil fontified nil 2911 . 2927) (2911 . 2927)) nil (26013 28565 689907 0) 0 nil])
([nil nil ((2876 . 2883)) nil (26013 28565 689905 0) 0 nil])
([nil nil ((2878 . 2887) (#("Trans" 0 5 (fontified nil)) . 2878) (2878 . 2883) (#("Transform" 0 9 (fontified nil)) . -2878) (2878 . 2887) (#("Trans" 0 5 (face font-lock-type-face fontified t)) . -2878) (undo-tree-id7939 . -5) 2883) nil (26013 28565 689904 0) 0 nil])
([nil nil ((2887 . 2888)) nil (26013 28565 689900 0) 0 nil])
([nil nil ((2914 . 2916)) nil (26013 28565 689899 0) 0 nil])
([nil nil ((2916 . 2920)) nil (26013 28565 689898 0) 0 nil])
([nil nil ((2916 . 2932) (#("Tran" 0 4 (fontified nil)) . 2916) (2916 . 2920) (#("TransformUniform" 0 16 (fontified nil)) . -2916) (2916 . 2932) (#("Tran" 0 4 (face font-lock-type-face fontified t)) . -2916) (undo-tree-id7938 . -4) 2920) nil (26013 28565 689897 0) 0 nil])
([nil nil ((2932 . 2933)) nil (26013 28565 689893 0) 0 nil])
([nil nil ((2958 . 2961)) nil (26013 28565 689892 0) 0 nil])
([nil nil ((2960 . 2964) (#("w" 0 1 (fontified nil)) . 2960) (2960 . 2961) (#("wgpu" 0 4 (fontified nil)) . -2960) (2960 . 2964) (#("w" 0 1 (fontified t)) . -2960) (undo-tree-id7937 . -1) 2961) nil (26013 28565 689891 0) 0 nil])
([nil nil ((2964 . 2967)) nil (26013 28565 689887 0) 0 nil])
([nil nil ((2966 . 2973) (#("B" 0 1 (fontified nil)) . 2966) (2966 . 2967) (#("Backend" 0 7 (fontified nil)) . -2966) (2966 . 2973) (#("B" 0 1 (face font-lock-type-face fontified t)) . -2966) (undo-tree-id7936 . -1) 2967) nil (26013 28565 689886 0) 0 nil])
([nil nil ((#("Backend" 0 7 (face font-lock-type-face fontified t)) . -2966) (undo-tree-id7935 . -7) 2973) nil (26013 28565 689882 0) 0 nil])
([nil nil ((2966 . 2968)) nil (26013 28565 689880 0) 0 nil])
([nil nil ((2966 . 2972) (#("Bu" 0 2 (fontified nil)) . 2966) (2966 . 2968) (#("Buffer" 0 6 (fontified nil)) . -2966) (2966 . 2972) (#("Bu" 0 2 (face font-lock-type-face fontified t)) . -2966) (undo-tree-id7934 . -2) 2968) nil (26013 28565 689878 0) 0 nil])
([nil nil ((2972 . 2973)) nil (26013 28565 689874 0) 0 nil])
([nil nil ((3002 . 3004)) nil (26013 28565 689873 0) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -3002) (undo-tree-id7932 . -1) (#(":" 0 1 (fontified t)) . -3003) (undo-tree-id7933 . -1) 3004) nil (26013 28565 689872 0) 0 nil])
([nil nil ((3002 . 3005)) nil (26013 28565 689868 0) 0 nil])
([nil nil ((3004 . 3008) (#("w" 0 1 (fontified nil)) . 3004) (3004 . 3005) (#("wgpu" 0 4 (fontified nil)) . -3004) (3004 . 3008) (#("w" 0 1 (fontified t)) . -3004) (undo-tree-id7931 . -1) 3005) nil (26013 28565 689867 0) 0 nil])
([nil nil ((3008 . 3014)) nil (26013 28565 689863 0) 0 nil])
([nil nil ((3010 . 3019) (#("Bind" 0 4 (fontified nil)) . 3010) (3010 . 3014) (#("BindGroup" 0 9 (fontified nil)) . -3010) (3010 . 3019) (#("Bind" 0 4 (face font-lock-type-face fontified t)) . -3010) (undo-tree-id7929 . -4) (undo-tree-id7930 . -4) 3014) nil (26013 28565 689862 0) 0 nil])
([nil nil ((3019 . 3020)) nil (26013 28565 689857 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2978) (undo-tree-id7926 . -4) (undo-tree-id7927 . -4) (undo-tree-id7928 . -4) 3020) nil (26013 28565 689855 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2893) (undo-tree-id7925 . -4) 2931) nil (26013 28565 689851 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2934) (undo-tree-id7923 . -4) (undo-tree-id7924 . -4) 2968) nil (26013 28565 689845 0) 0 nil])
([nil nil ((apply deactivate-cursor-after-undo 65)) nil (26013 28653 236588 0) 0 nil])
([nil nil ((13649 . 13661) (#("            " 0 12 (fontified nil)) . 13648) (undo-tree-id8111 . -12) (undo-tree-id8112 . -12) (undo-tree-id8113 . -12) (13648 . 13661) (#("            " 0 12 (fontified nil)) . 13647) (undo-tree-id8114 . -12) (undo-tree-id8115 . -12) (undo-tree-id8116 . -12) (13646 . 13660) (t 26013 28565 724329 139000)) nil (26013 28653 236584 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 13811 . 13812) (nil fontified nil 13811 . 13812) (nil fontified nil 13802 . 13811) (nil fontified nil 13800 . 13802) (nil fontified nil 13796 . 13800) (nil fontified nil 13794 . 13796) (nil fontified nil 13793 . 13794) (nil fontified nil 13774 . 13793) (nil fontified nil 13770 . 13774) (nil fontified nil 13769 . 13770) (nil fontified nil 13768 . 13769) (nil fontified nil 13762 . 13768) (nil fontified nil 13760 . 13762) (nil fontified nil 13756 . 13760) (nil fontified nil 13754 . 13756) (nil fontified nil 13753 . 13754) (nil fontified nil 13738 . 13753) (nil fontified nil 13734 . 13738) (nil fontified nil 13733 . 13734) (nil fontified nil 13732 . 13733) (nil fontified nil 13716 . 13732) (nil fontified nil 13714 . 13716) (nil fontified nil 13713 . 13714) (nil fontified nil 13697 . 13713) (nil fontified nil 13693 . 13697) (nil fontified nil 13692 . 13693) (nil fontified nil 13691 . 13692) (nil fontified nil 13682 . 13691) (nil fontified nil 13680 . 13682) (nil fontified nil 13679 . 13680) (nil fontified nil 13665 . 13679) (nil fontified nil 13661 . 13665) (13661 . 13812)) nil (26013 28653 236575 0) 0 nil])
([nil nil ((#("BindGroup," 0 9 (face font-lock-type-face fontified t) 9 10 (rear-nonsticky t fontified t)) . -13802) (undo-tree-id8104 . -10) (undo-tree-id8105 . -10) (undo-tree-id8106 . -10) (undo-tree-id8107 . -10) (undo-tree-id8108 . -10) (undo-tree-id8109 . -10) (undo-tree-id8110 . -10) 13812) nil (26013 28653 236561 0) 0 nil])
([nil nil ((#("wgpu::" 0 4 (face font-lock-constant-face fontified t) 4 6 (fontified t)) . -13796) (undo-tree-id8096 . -6) (undo-tree-id8097 . -6) (undo-tree-id8098 . -6) (undo-tree-id8099 . -6) (undo-tree-id8100 . -6) (undo-tree-id8101 . -6) (undo-tree-id8102 . -6) (undo-tree-id8103 . -6) 13802) nil (26013 28653 236553 0) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -13794) (undo-tree-id8073 . -1) (undo-tree-id8074 . -1) (undo-tree-id8075 . -1) (undo-tree-id8076 . -1) (undo-tree-id8077 . -1) (undo-tree-id8078 . -1) (undo-tree-id8079 . -1) (undo-tree-id8080 . -1) (undo-tree-id8081 . -1) (undo-tree-id8082 . -1) (undo-tree-id8083 . -1) (undo-tree-id8084 . -1) (#(" " 0 1 (fontified t)) . -13795) (undo-tree-id8085 . -1) (undo-tree-id8086 . -1) (undo-tree-id8087 . -1) (undo-tree-id8088 . -1) (undo-tree-id8089 . -1) (undo-tree-id8090 . -1) (undo-tree-id8091 . -1) (undo-tree-id8092 . -1) (undo-tree-id8093 . -1) (undo-tree-id8094 . -1) (undo-tree-id8095 . -1) 13796) nil (26013 28653 236541 0) 0 nil])
([nil nil ((13794 . 13795)) nil (26013 28653 236517 0) 0 nil])
([nil nil ((#("Buffer," 0 6 (face font-lock-type-face fontified t) 6 7 (fontified t)) . -13762) (undo-tree-id8065 . -7) (undo-tree-id8066 . -7) (undo-tree-id8067 . -7) (undo-tree-id8068 . -7) (undo-tree-id8069 . -7) (undo-tree-id8070 . -7) (undo-tree-id8071 . -7) (undo-tree-id8072 . -7) 13769) nil (26013 28653 236516 0) 0 nil])
([nil nil ((#("wgpu::" 0 4 (face font-lock-constant-face fontified t) 4 6 (fontified t)) . -13756) (undo-tree-id8054 . -6) (undo-tree-id8055 . -6) (undo-tree-id8056 . -6) (undo-tree-id8057 . -6) (undo-tree-id8058 . -6) (undo-tree-id8059 . -6) (undo-tree-id8060 . -6) (undo-tree-id8061 . -6) (undo-tree-id8062 . -6) (undo-tree-id8063 . -6) (undo-tree-id8064 . -6) 13762) nil (26013 28653 236507 0) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -13754) (undo-tree-id8029 . -1) (undo-tree-id8030 . -1) (undo-tree-id8031 . -1) (undo-tree-id8032 . -1) (undo-tree-id8033 . -1) (undo-tree-id8034 . -1) (undo-tree-id8035 . -1) (undo-tree-id8036 . -1) (undo-tree-id8037 . -1) (undo-tree-id8038 . -1) (undo-tree-id8039 . -1) (undo-tree-id8040 . -1) (undo-tree-id8041 . -1) (#(" " 0 1 (fontified t)) . -13755) (undo-tree-id8042 . -1) (undo-tree-id8043 . -1) (undo-tree-id8044 . -1) (undo-tree-id8045 . -1) (undo-tree-id8046 . -1) (undo-tree-id8047 . -1) (undo-tree-id8048 . -1) (undo-tree-id8049 . -1) (undo-tree-id8050 . -1) (undo-tree-id8051 . -1) (undo-tree-id8052 . -1) (undo-tree-id8053 . -1) 13756) nil (26013 28653 236494 0) 0 nil])
([nil nil ((13754 . 13755)) nil (26013 28653 236469 0) 0 nil])
([nil nil ((#("TransformUniform" 0 16 (face font-lock-type-face fontified t)) . -13716) (undo-tree-id8021 . -16) (undo-tree-id8022 . -16) (undo-tree-id8023 . -16) (undo-tree-id8024 . -16) (undo-tree-id8025 . -16) (undo-tree-id8026 . -16) (undo-tree-id8027 . -16) (undo-tree-id8028 . -16) 13732) nil (26013 28653 236468 0) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -13714) (undo-tree-id7990 . -1) (undo-tree-id7991 . -1) (undo-tree-id7992 . -1) (undo-tree-id7993 . -1) (undo-tree-id7994 . -1) (undo-tree-id7995 . -1) (undo-tree-id7996 . -1) (undo-tree-id7997 . -1) (undo-tree-id7998 . -1) (undo-tree-id7999 . -1) (undo-tree-id8000 . -1) (undo-tree-id8001 . -1) (undo-tree-id8002 . -1) (undo-tree-id8003 . -1) (undo-tree-id8004 . -1) (undo-tree-id8005 . -1) (#(" " 0 1 (fontified t)) . -13715) (undo-tree-id8006 . -1) (undo-tree-id8007 . -1) (undo-tree-id8008 . -1) (undo-tree-id8009 . -1) (undo-tree-id8010 . -1) (undo-tree-id8011 . -1) (undo-tree-id8012 . -1) (undo-tree-id8013 . -1) (undo-tree-id8014 . -1) (undo-tree-id8015 . -1) (undo-tree-id8016 . -1) (undo-tree-id8017 . -1) (undo-tree-id8018 . -1) (undo-tree-id8019 . -1) (undo-tree-id8020 . -1) 13716) nil (26013 28653 236457 0) 0 nil])
([nil nil ((#("Transform" 0 9 (face font-lock-type-face fontified t)) . -13682) (undo-tree-id7976 . -9) (undo-tree-id7977 . -9) (undo-tree-id7978 . -9) (undo-tree-id7979 . -9) (undo-tree-id7980 . -9) (undo-tree-id7981 . -9) (undo-tree-id7982 . -9) (undo-tree-id7983 . -9) (undo-tree-id7984 . -9) (undo-tree-id7985 . -9) (undo-tree-id7986 . -9) (undo-tree-id7987 . -9) (undo-tree-id7988 . -9) (undo-tree-id7989 . -9) 13691) nil (26013 28653 236426 0) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -13680) (undo-tree-id7945 . -1) (undo-tree-id7946 . -1) (undo-tree-id7947 . -1) (undo-tree-id7948 . -1) (undo-tree-id7949 . -1) (undo-tree-id7950 . -1) (undo-tree-id7951 . -1) (undo-tree-id7952 . -1) (undo-tree-id7953 . -1) (undo-tree-id7954 . -1) (undo-tree-id7955 . -1) (undo-tree-id7956 . -1) (undo-tree-id7957 . -1) (undo-tree-id7958 . -1) (undo-tree-id7959 . -1) (undo-tree-id7960 . -1) (#(" " 0 1 (fontified t)) . -13681) (undo-tree-id7961 . -1) (undo-tree-id7962 . -1) (undo-tree-id7963 . -1) (undo-tree-id7964 . -1) (undo-tree-id7965 . -1) (undo-tree-id7966 . -1) (undo-tree-id7967 . -1) (undo-tree-id7968 . -1) (undo-tree-id7969 . -1) (undo-tree-id7970 . -1) (undo-tree-id7971 . -1) (undo-tree-id7972 . -1) (undo-tree-id7973 . -1) (undo-tree-id7974 . -1) (undo-tree-id7975 . -1) 13682) nil (26013 28653 236410 0) 0 nil])
([nil nil ((13739 . 13751) (#("    " 0 4 (fontified t)) . 13739) (13709 . 13721) (#("    " 0 4 (fontified t)) . 13709) (13678 . 13690) (#("    " 0 4 (fontified t)) . 13678) (#("    " 0 4 (fontified t)) . -13661) 13647) nil (26013 28653 236360 0) 0 nil])
([nil nil ((14563 . 14571) (#("        " 0 8 (fontified nil)) . 14562) (undo-tree-id8166 . -8) (undo-tree-id8167 . -8) (undo-tree-id8168 . -8) (14561 . 14571) (t 26013 28653 273256 381000)) nil (26013 28692 404407 0) 0 nil])
([nil nil ((nil fontified nil 14796 . 14797) (nil fontified nil 14795 . 14796) (nil fontified nil 14794 . 14795) (nil fontified nil 14793 . 14794) (nil fontified nil 14778 . 14793) (nil fontified nil 14774 . 14778) (nil fontified nil 14773 . 14774) (nil fontified nil 14772 . 14773) (nil fontified nil 14771 . 14772) (nil fontified nil 14759 . 14771) (nil fontified nil 14751 . 14759) (nil fontified nil 14732 . 14751) (nil fontified nil 14728 . 14732) (nil fontified nil 14727 . 14728) (nil fontified nil 14726 . 14727) (nil fontified nil 14707 . 14726) (nil fontified nil 14703 . 14707) (nil fontified nil 14695 . 14703) (nil fontified nil 14693 . 14695) (nil fontified nil 14692 . 14693) (nil fontified nil 14685 . 14692) (nil fontified nil 14681 . 14685) (nil fontified nil 14680 . 14681) (nil fontified nil 14679 . 14680) (nil fontified nil 14647 . 14679) (nil fontified nil 14643 . 14647) (nil fontified nil 14635 . 14643) (nil fontified nil 14633 . 14635) (nil fontified nil 14632 . 14633) (nil fontified nil 14625 . 14632) (nil fontified nil 14621 . 14625) (nil fontified nil 14620 . 14621) (nil fontified nil 14617 . 14620) (nil fontified nil 14616 . 14617) (nil fontified nil 14615 . 14616) (nil fontified nil 14583 . 14615) (nil fontified nil 14579 . 14583) (nil fontified nil 14571 . 14579) (14571 . 14797)) nil (26013 28692 404400 0) 0 nil])
([nil nil ((#("
                self.camera_controller.update_camera(&mut self.camera);
        self.camera_uniform.update_view_proj(&self.camera);" 0 1 (fontified t) 1 9 (fontified t) 9 17 (fontified t) 17 21 (face font-lock-keyword-face fontified t) 21 53 (fontified t) 53 54 (face (rainbow-delimiters-depth-3-face) fontified t) 54 55 (face rust-ampersand-face fontified t) 55 58 (face font-lock-keyword-face fontified t) 58 59 (fontified t) 59 63 (face font-lock-keyword-face fontified t) 63 70 (fontified t) 70 71 (face (rainbow-delimiters-depth-3-face) fontified t) 71 73 (fontified t) 73 81 (fontified t) 81 85 (face font-lock-keyword-face fontified t) 85 117 (fontified t) 117 118 (face (rainbow-delimiters-depth-3-face) fontified t) 118 119 (face rust-ampersand-face fontified t) 119 123 (face font-lock-keyword-face fontified t) 123 130 (fontified t) 130 131 (face (rainbow-delimiters-depth-3-face) fontified t) 131 132 (fontified t)) . 14562) (undo-tree-id8142 . -132) (undo-tree-id8143 . 132) (undo-tree-id8144 . -9) (undo-tree-id8145 . -9) (undo-tree-id8146 . -9) (undo-tree-id8147 . -122) (undo-tree-id8148 . -122) (undo-tree-id8149 . -122) (undo-tree-id8150 . -122) (undo-tree-id8151 . -122) (undo-tree-id8152 . -122) (undo-tree-id8153 . -122) (undo-tree-id8154 . -122) (undo-tree-id8155 . -122) (undo-tree-id8156 . -132) (undo-tree-id8157 . -132) (undo-tree-id8158 . -132) (undo-tree-id8159 . -130) (undo-tree-id8160 . -114) (undo-tree-id8161 . -30) (undo-tree-id8162 . -23) (undo-tree-id8163 . -19) (undo-tree-id8164 . -9) (undo-tree-id8165 . -132)) nil (26013 28692 404388 0) 0 nil])
([nil nil ((14563 . 14571) (#("        " 0 8 (fontified nil)) . 14562) (14562 . 14570) (14562 . 14563)) nil (26013 28692 404360 0) 0 nil])
([nil nil ((14571 . 14581)) nil (26013 28692 404358 0) 0 nil])
([nil nil ((14576 . 14593) (#("trans" 0 5 (fontified nil)) . 14576) (14576 . 14581) (#("transform_uniform" 0 17 (fontified nil)) . -14576) (14576 . 14593) (#("trans" 0 5 (fontified t)) . -14576) (undo-tree-id8127 . -5) (undo-tree-id8128 . -1) (undo-tree-id8129 . -1) (undo-tree-id8130 . -1) (undo-tree-id8131 . -2) (undo-tree-id8132 . -2) (undo-tree-id8133 . -3) (undo-tree-id8134 . -3) (undo-tree-id8135 . -4) (undo-tree-id8136 . -4) (undo-tree-id8137 . -5) (undo-tree-id8138 . -5) (undo-tree-id8139 . -5) (undo-tree-id8140 . -5) (undo-tree-id8141 . -5) 14581) nil (26013 28692 404355 0) 0 nil])
([nil nil ((14593 . 14596)) nil (26013 28692 404338 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 14617 14638 nil nil nil t #s(yas--exit 14639 nil))) #s(yas--exit 14639 nil) 83 nil #s(yas--field 1 14617 14638 nil nil nil t #s(yas--exit 14639 nil)) nil nil)) (14594 . 14627) (#("update_model_transform(${1:transform})$0" 0 40 (fontified nil)) . 14594) (14594 . 14634) (#("up" 0 2 (fontified nil)) . 14594) (14594 . 14596) (#("update_model_transform(…)" 0 25 (fontified nil)) . -14594) (14594 . 14619) (#("up" 0 2 (fontified t)) . -14594) (undo-tree-id8119 . -2) (undo-tree-id8120 . -1) (undo-tree-id8121 . -1) (undo-tree-id8122 . -1) (undo-tree-id8123 . -2) (undo-tree-id8124 . -2) (undo-tree-id8125 . -2) (undo-tree-id8126 . -2) 14596) nil (26013 28692 404336 0) 0 nil])
([nil nil ((14618 . 14623) (#("transform" 0 9 (fontified nil)) . 14618) (undo-tree-id8118 . -9) (14617 . 14618)) nil (26013 28692 404324 0) 0 nil])
([nil nil ((14623 . 14638) (#("model_transform" 0 15 (fontified nil)) . -14623) (undo-tree-id8117 . -15) (14623 . 14638)) nil (26013 28692 404320 0) 0 nil])
([nil nil ((apply yas--snippet-revive 14594 14639 #s(yas--snippet nil (#s(yas--field 1 14617 14638 nil nil nil t #s(yas--exit 14639 nil))) #s(yas--exit 14639 nil) 83 nil #s(yas--field 1 14617 14638 nil nil nil t #s(yas--exit 14639 nil)) nil nil))) nil (26013 28692 404310 0) 0 nil])
([nil nil ((14639 . 14640)) nil (26013 28692 404306 0) 0 nil])
([nil nil ((#("buffer" 0 6 (fontified t)) . -14686) (undo-tree-id8222 . -6) (undo-tree-id8223 . -6) (undo-tree-id8224 . -6) (undo-tree-id8225 . -6) (undo-tree-id8226 . -6) (undo-tree-id8227 . -6) (undo-tree-id8228 . -6) (undo-tree-id8229 . -6) (undo-tree-id8230 . -6) (undo-tree-id8231 . -6) (undo-tree-id8232 . -6) (undo-tree-id8233 . -6) 14692 (t 26013 28692 441331 583000)) nil (26013 28704 342939 0) 0 nil])
([nil nil ((#("camera_" 0 7 (fontified t)) . -14679) (undo-tree-id8209 . -7) (undo-tree-id8210 . -7) (undo-tree-id8211 . -7) (undo-tree-id8212 . -7) (undo-tree-id8213 . -7) (undo-tree-id8214 . -7) (undo-tree-id8215 . -7) (undo-tree-id8216 . -7) (undo-tree-id8217 . -7) (undo-tree-id8218 . -7) (undo-tree-id8219 . -7) (undo-tree-id8220 . -7) (undo-tree-id8221 . -7) 14686) nil (26013 28704 342922 0) 0 nil])
([nil nil ((14679 . 14680)) nil (26013 28704 342908 0) 0 nil])
([nil nil ((14679 . 14695) (#("t" 0 1 (fontified nil)) . 14679) (14679 . 14680) (#("transform_buffer" 0 16 (fontified nil)) . -14679) (14679 . 14695) (#("t" 0 1 (fontified t)) . -14679) (undo-tree-id8202 . -1) (undo-tree-id8203 . -1) (undo-tree-id8204 . -1) (undo-tree-id8205 . -1) (undo-tree-id8206 . -1) (undo-tree-id8207 . -1) (undo-tree-id8208 . -1) 14680) nil (26013 28704 342906 0) 0 nil])
([nil nil ((#("uniform" 0 7 (fontified t)) . -14735) (undo-tree-id8192 . -7) (undo-tree-id8193 . -7) (undo-tree-id8194 . -7) (undo-tree-id8195 . -7) (undo-tree-id8196 . -7) (undo-tree-id8197 . -7) (undo-tree-id8198 . -7) (undo-tree-id8199 . -7) (undo-tree-id8200 . -7) (undo-tree-id8201 . -7) 14742) nil (26013 28704 342896 0) 0 nil])
([nil nil ((#("camera_" 0 7 (fontified t)) . -14728) (undo-tree-id8181 . -7) (undo-tree-id8182 . -7) (undo-tree-id8183 . -7) (undo-tree-id8184 . -7) (undo-tree-id8185 . -7) (undo-tree-id8186 . -7) (undo-tree-id8187 . -7) (undo-tree-id8188 . -7) (undo-tree-id8189 . -7) (undo-tree-id8190 . -7) (undo-tree-id8191 . -7) 14735) nil (26013 28704 342885 0) 0 nil])
([nil nil ((14728 . 14732)) nil (26013 28704 342872 0) 0 nil])
([nil nil ((14728 . 14745) (#("tran" 0 4 (fontified nil)) . 14728) (14728 . 14732) (#("transform_uniform" 0 17 (fontified nil)) . -14728) (14728 . 14745) (#("tran" 0 4 (fontified t)) . -14728) (undo-tree-id8169 . -4) (undo-tree-id8170 . -1) (undo-tree-id8171 . -1) (undo-tree-id8172 . -2) (undo-tree-id8173 . -2) (undo-tree-id8174 . -2) (undo-tree-id8175 . -3) (undo-tree-id8176 . -3) (undo-tree-id8177 . -4) (undo-tree-id8178 . -4) (undo-tree-id8179 . -4) (undo-tree-id8180 . -4) 14732) nil (26013 28704 342868 0) 0 nil])
([nil nil ((15948 . 15956) (t 26013 28704 378210 219000)) nil (26013 28906 812720 0) 0 nil])
([nil nil ((15956 . 15958)) nil (26013 28906 812718 0) 0 nil])
([nil nil ((15956 . 15967) (#("re" 0 2 (fontified nil)) . 15956) (15956 . 15958) (#("render_pass" 0 11 (fontified nil)) . -15956) (15956 . 15967) (#("re" 0 2 (fontified t)) . -15956) (undo-tree-id8253 . -2) (undo-tree-id8254 . -1) (undo-tree-id8255 . -2) (undo-tree-id8256 . -2) (undo-tree-id8257 . -2) (undo-tree-id8258 . -2) (undo-tree-id8259 . -2) (undo-tree-id8260 . -2) 15958) nil (26013 28906 812717 0) 0 nil])
([nil nil ((15967 . 15971)) nil (26013 28906 812706 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 15983 15984 nil nil nil t #s(yas--field 2 15986 15996 nil nil nil nil #s(yas--field 3 15998 16005 nil nil nil nil #s(yas--exit 16006 nil)))) #s(yas--field 2 15986 15996 nil nil nil nil #s(yas--field 3 15998 16005 nil nil nil nil #s(yas--exit 16006 nil))) #s(yas--field 3 15998 16005 nil nil nil nil #s(yas--exit 16006 nil))) #s(yas--exit 16006 nil) 84 nil #s(yas--field 1 15983 15984 nil nil nil t #s(yas--field 2 15986 15996 nil nil nil nil #s(yas--field 3 15998 16005 nil nil nil nil #s(yas--exit 16006 nil)))) nil nil)) (15968 . 16010) (#("set_bind_group(${1:index}, ${2:bind_group}, ${3:offsets})$0" 0 59 (fontified nil)) . 15968) (15968 . 16027) (#("set" 0 3 (fontified nil)) . 15968) (15968 . 15971) (#("set_bind_group(…)" 0 17 (fontified nil)) . -15968) (15968 . 15985) (#("set" 0 3 (fontified t)) . -15968) (undo-tree-id8238 . -3) (undo-tree-id8239 . -1) (undo-tree-id8240 . -1) (undo-tree-id8241 . -1) (undo-tree-id8242 . -1) (undo-tree-id8243 . -2) (undo-tree-id8244 . -2) (undo-tree-id8245 . -3) (undo-tree-id8246 . -3) (undo-tree-id8247 . -3) (undo-tree-id8248 . -3) (undo-tree-id8249 . -3) (undo-tree-id8250 . -3) (undo-tree-id8251 . -3) (undo-tree-id8252 . -3) 15971) nil (26013 28906 812704 0) 0 nil])
([nil nil ((#("index" 0 5 (fontified nil)) . 15984) (undo-tree-id8237 . -5) (15983 . 15984)) nil (26013 28906 812685 0) 0 nil])
([nil nil ((apply yas--snippet-revive 15968 16006 #s(yas--snippet nil (#s(yas--field 1 15983 15984 nil nil nil t #s(yas--field 2 15986 15996 nil nil nil nil #s(yas--field 3 15998 16005 nil nil nil nil #s(yas--exit 16006 nil)))) #s(yas--field 2 15986 15996 nil nil nil nil #s(yas--field 3 15998 16005 nil nil nil nil #s(yas--exit 16006 nil))) #s(yas--field 3 15998 16005 nil nil nil nil #s(yas--exit 16006 nil))) #s(yas--exit 16006 nil) 84 nil #s(yas--field 1 15983 15984 nil nil nil t #s(yas--field 2 15986 15996 nil nil nil nil #s(yas--field 3 15998 16005 nil nil nil nil #s(yas--exit 16006 nil)))) nil nil))) nil (26013 28906 812683 0) 0 nil])
([nil nil ((#("bind" 0 4 (fontified t)) . 15986) (undo-tree-id8236 . -4)) nil (26013 28906 812682 0) 0 nil])
([nil nil ((#("_group" 0 6 (fontified t)) . 15986) (undo-tree-id8235 . -6)) nil (26013 28906 812680 0) 0 nil])
([nil nil ((15986 . 15991)) nil (26013 28906 812677 0) 0 nil])
([nil nil ((15991 . 15992)) nil (26013 28906 812676 0) 0 nil])
([nil nil ((15992 . 16012) (#("transform_bind_group" 0 20 (fontified nil)) . -15992) (15992 . 16012)) nil (26013 28906 812675 0) 0 nil])
([nil nil ((#("offsets" 0 7 (fontified t)) . 16014) (undo-tree-id8234 . -7)) nil (26013 28906 812673 0) 0 nil])
([nil nil ((16014 . 16017)) nil (26013 28906 812651 0) 0 nil])
([nil nil ((16018 . 16019)) nil (26013 28906 812647 0) 0 nil])
([nil nil ((16019 . 16028) (t 26013 28906 848341 724000)) nil (26013 28908 44326 0) 0 nil])
([nil nil ((15800 . 15809) (t 26013 28908 79892 203000)) nil (26013 29045 555883 0) 0 nil])
([nil nil ((#("camera" 0 6 (face font-lock-string-face fontified t)) . -9526) (undo-tree-id8323 . -6) (undo-tree-id8324 . -5) (undo-tree-id8325 . -5) (undo-tree-id8326 . -5) (undo-tree-id8327 . -5) (undo-tree-id8328 . -5) (undo-tree-id8329 . -5) (undo-tree-id8330 . -5) (undo-tree-id8331 . -6) 9532) nil (26013 29045 555881 0) 0 nil])
([nil nil ((9526 . 9535)) nil (26013 29045 555871 0) 0 nil])
([nil nil ((#("buffer" 0 6 (fontified t)) . -9838) (undo-tree-id8313 . -6) (undo-tree-id8314 . -6) (undo-tree-id8315 . -6) (undo-tree-id8316 . -6) (undo-tree-id8317 . -6) (undo-tree-id8318 . -6) (undo-tree-id8319 . -6) (undo-tree-id8320 . -6) (undo-tree-id8321 . -6) (undo-tree-id8322 . -6) 9844) nil (26013 29045 555869 0) 0 nil])
([nil nil ((#("camera_" 0 7 (fontified t)) . -9831) (undo-tree-id8302 . -7) (undo-tree-id8303 . -7) (undo-tree-id8304 . -7) (undo-tree-id8305 . -7) (undo-tree-id8306 . -7) (undo-tree-id8307 . -7) (undo-tree-id8308 . -7) (undo-tree-id8309 . -7) (undo-tree-id8310 . -7) (undo-tree-id8311 . -7) (undo-tree-id8312 . -7) 9838) nil (26013 29045 555858 0) 0 nil])
([nil nil ((9831 . 9836)) nil (26013 29045 555846 0) 0 nil])
([nil nil ((9831 . 9847) (#("trans" 0 5 (fontified nil)) . 9831) (9831 . 9836) (#("transform_buffer" 0 16 (fontified nil)) . -9831) (9831 . 9847) (#("trans" 0 5 (fontified t)) . -9831) (undo-tree-id8290 . -5) (undo-tree-id8291 . -1) (undo-tree-id8292 . -2) (undo-tree-id8293 . -2) (undo-tree-id8294 . -3) (undo-tree-id8295 . -3) (undo-tree-id8296 . -4) (undo-tree-id8297 . -4) (undo-tree-id8298 . -5) (undo-tree-id8299 . -5) (undo-tree-id8300 . -5) (undo-tree-id8301 . -5) 9836) nil (26013 29045 555845 0) 0 nil])
([nil nil ((#("camera" 0 6 (fontified t)) . -9680) (undo-tree-id8280 . -6) (undo-tree-id8281 . -6) (undo-tree-id8282 . -6) (undo-tree-id8283 . -6) (undo-tree-id8284 . -6) (undo-tree-id8285 . -6) (undo-tree-id8286 . -6) (undo-tree-id8287 . -6) (undo-tree-id8288 . -6) (undo-tree-id8289 . -6) 9686) nil (26013 29045 555830 0) 0 nil])
([nil nil ((9680 . 9681)) nil (26013 29045 555818 0) 0 nil])
([nil nil ((9680 . 9707) (#("t_bind_group_layout" 0 1 (fontified nil) 1 19 (fontified nil)) . 9680) (undo-tree-id8275 . 18) (9680 . 9681) (#("transform_bind_group_layout" 0 27 (fontified nil)) . -9680) (9680 . 9707) (#("t" 0 1 (fontified t)) . -9680) (undo-tree-id8276 . -1) (undo-tree-id8277 . -1) (undo-tree-id8278 . -1) (undo-tree-id8279 . -1) 9681) nil (26013 29045 555816 0) 0 nil])
([nil nil ((#("camera" 0 6 (face font-lock-string-face fontified t)) . -9930) (undo-tree-id8268 . -6) (undo-tree-id8269 . -6) (undo-tree-id8270 . -6) (undo-tree-id8271 . -6) (undo-tree-id8272 . -6) (undo-tree-id8273 . -6) (undo-tree-id8274 . -6) 9936) nil (26013 29048 129581 0) 0 nil])
([nil nil ((9930 . 9939)) nil (26013 29058 965324 0) 0 nil] [nil nil ((9930 . 9939)) ((#("transfrom" 0 9 (face font-lock-string-face fontified t)) . 9930)) (26013 29046 225501 0) 0 nil])
([nil nil ((14575 . 14583) (#("        " 0 8 (fontified nil)) . 14574) (14574 . 14582) (14574 . 14575) (t 26013 29052 146774 191000)) nil (26013 29339 161444 0) 0 nil] [nil nil ((9939 . 9941) (t 26013 29052 146774 191000)) ((#("ca" 0 2 (face font-lock-string-face fontified t)) . 9939) (undo-tree-id8344 . -2)) (26013 29058 964857 0) 0 nil])
([nil nil ((10373 . 10376)) ((#("cae" 0 2 (fontified t) 2 3 (fontified t)) . 10373) (undo-tree-id8332 . -3) (undo-tree-id8333 . -3) (undo-tree-id8334 . -3) (undo-tree-id8335 . -3) (undo-tree-id8336 . -3) (undo-tree-id8337 . -3) (undo-tree-id8338 . -3) (undo-tree-id8339 . -3) (undo-tree-id8340 . -3) (undo-tree-id8341 . -3) (undo-tree-id8342 . -3) (undo-tree-id8343 . -3)) (26013 29045 556169 0) 0 nil])
([nil nil ((14583 . 14585)) nil (26013 29339 161442 0) 0 nil])
nil
([nil nil ((#("e" 0 1 (fontified t)) . -10375) (undo-tree-id8261 . -1) (undo-tree-id8262 . -1) (undo-tree-id8263 . -1) (undo-tree-id8264 . -1) (undo-tree-id8265 . -1) (undo-tree-id8266 . -1) (undo-tree-id8267 . -1) 10376) ((10375 . 10376)) (26013 29045 555795 0) 0 nil])
([nil nil ((14583 . 14587) (#("se" 0 2 (fontified nil)) . 14583) (14583 . 14585) (#("self" 0 4 (fontified nil)) . -14583) (14583 . 14587) (#("se" 0 2 (fontified t)) . -14583) (undo-tree-id8351 . -2) (undo-tree-id8352 . -1) (undo-tree-id8353 . -1) (undo-tree-id8354 . -1) (undo-tree-id8355 . -2) (undo-tree-id8356 . -2) (undo-tree-id8357 . -2) 14585) nil (26013 29339 161440 0) 0 nil])
nil
([nil nil ((14587 . 14589)) nil (26013 29339 161430 0) 0 nil])
([nil nil ((14588 . 14603) (#("m" 0 1 (fontified nil)) . 14588) (14588 . 14589) (#("model_transform" 0 15 (fontified nil)) . -14588) (14588 . 14603) (#("m" 0 1 (fontified t)) . -14588) (undo-tree-id8345 . -1) (undo-tree-id8346 . -1) (undo-tree-id8347 . -1) (undo-tree-id8348 . -1) (undo-tree-id8349 . -1) (undo-tree-id8350 . -1) 14589) nil (26013 29339 161428 0) 0 nil])
([nil nil ((14603 . 14604)) nil (26013 29339 161411 0) 0 nil])
([nil nil ((14604 . 14612) (#("rotation" 0 8 (fontified nil)) . -14604) (14604 . 14612)) nil (26013 29339 161409 0) 0 nil])
([nil nil ((14612 . 14613)) nil (26013 29339 161407 0) 0 nil])
([nil nil ((14613 . 14623)) nil (26013 29339 161403 0) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -14620) (undo-tree-id8358 . -1) (undo-tree-id8359 . -1) (undo-tree-id8360 . -1) (#("1" 0 1 (fontified t)) . -14621) (undo-tree-id8361 . -1) (undo-tree-id8362 . -1) 14622 (t 26013 29339 198051 247000)) nil (26013 29370 79723 0) 0 nil])
([nil nil ((14620 . 14621)) nil (26013 29507 545952 0) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . -7122) (undo-tree-id8724 . -1) (undo-tree-id8725 . -1) (undo-tree-id8726 . -1) (undo-tree-id8727 . -1) (undo-tree-id8728 . -1) (undo-tree-id8729 . -1) (undo-tree-id8730 . -1) (undo-tree-id8731 . -1) (undo-tree-id8732 . -1) (undo-tree-id8733 . -1) (undo-tree-id8734 . -1) (undo-tree-id8735 . -1) (undo-tree-id8736 . -1) (undo-tree-id8737 . -1) (undo-tree-id8738 . -1) (undo-tree-id8739 . -1) 7123 (t 26013 29508 830924 976000)) nil (26013 29863 44241 0) 0 nil] [nil nil ((#("        self.model_transform.rotation.z += 0.1;
        self.transform_uniform.update_model_transform(&self.model_transform);
        self.queue.write_buffer(&self.transform_buffer, 0, bytemuck::cast_slice(&[self.transform_uniform]));" 0 8 (fontified t) 8 12 (face font-lock-keyword-face fontified t) 12 13 (fontified t) 13 29 (fontified t) 29 47 (fontified t) 47 48 (fontified t) 48 56 (fontified t) 56 60 (face font-lock-keyword-face fontified t) 60 61 (fontified t) 61 79 (fontified t) 79 101 (fontified t) 101 102 (face (rainbow-delimiters-depth-3-face) fontified t) 102 103 (face rust-ampersand-face fontified t) 103 107 (face font-lock-keyword-face fontified t) 107 108 (fontified t) 108 123 (fontified t) 123 124 (face (rainbow-delimiters-depth-3-face) fontified t) 124 125 (fontified t) 125 126 (fontified t) 126 134 (fontified t) 134 138 (face font-lock-keyword-face fontified t) 138 157 (fontified t) 157 158 (face (rainbow-delimiters-depth-3-face) fontified t) 158 159 (face rust-ampersand-face fontified t) 159 163 (face font-lock-keyword-face fontified t) 163 164 (fontified t) 164 180 (fontified t) 180 185 (fontified t) 185 193 (face font-lock-constant-face fontified t) 193 205 (fontified t) 205 206 (face (rainbow-delimiters-depth-4-face) fontified t) 206 207 (face rust-ampersand-face fontified t) 207 208 (face (rainbow-delimiters-depth-5-face) fontified t) 208 212 (face font-lock-keyword-face fontified t) 212 213 (fontified t) 213 230 (fontified t) 230 231 (face (rainbow-delimiters-depth-5-face) fontified t) 231 232 (face (rainbow-delimiters-depth-4-face) fontified t) 232 233 (face (rainbow-delimiters-depth-3-face) fontified t) 233 234 (fontified t rear-nonsticky t)) . 14575) (undo-tree-id8407 . -234) (undo-tree-id8409 . -45) (undo-tree-id8411 . -46) (undo-tree-id8413 . -46) (undo-tree-id8415 . -46) (undo-tree-id8417 . -46) (undo-tree-id8419 . -46) (undo-tree-id8421 . -46) (undo-tree-id8423 . -46) (undo-tree-id8425 . -46) (undo-tree-id8427 . -46) (undo-tree-id8429 . -46) (undo-tree-id8431 . -46) (undo-tree-id8433 . -46) (undo-tree-id8435 . -46) (undo-tree-id8437 . -46) (undo-tree-id8439 . -46) (undo-tree-id8441 . -46) (undo-tree-id8443 . -46) (undo-tree-id8445 . -46) (undo-tree-id8447 . -46) (undo-tree-id8449 . -46) (undo-tree-id8451 . -46) (undo-tree-id8453 . -46) (undo-tree-id8455 . -46) (undo-tree-id8457 . -46) (undo-tree-id8459 . -46) (undo-tree-id8461 . -46) (undo-tree-id8463 . -46) (undo-tree-id8465 . -46) (undo-tree-id8467 . -46) (undo-tree-id8469 . -46) (undo-tree-id8471 . -46) (undo-tree-id8473 . -46) (undo-tree-id8475 . -46) (undo-tree-id8477 . -46) (undo-tree-id8479 . -46) (undo-tree-id8481 . -46) (undo-tree-id8483 . -46) (undo-tree-id8485 . -46) (undo-tree-id8487 . -46) (undo-tree-id8489 . -46) (undo-tree-id8491 . -46) (undo-tree-id8493 . -126) (undo-tree-id8495 . -234) (undo-tree-id8497 . -232) (undo-tree-id8499 . -125) (undo-tree-id8501 . -22) (undo-tree-id8503 . -19) (undo-tree-id8505 . -12) (undo-tree-id8507 . -10) (undo-tree-id8509 . -8) (undo-tree-id8511 . -6) (undo-tree-id8513 . -4) (undo-tree-id8515 . -1) (undo-tree-id8517 . -1) (t 26013 29370 118232 703000)) ((14575 . 14809)) (26013 29506 930001 0) 0 nil])
([nil nil ((7122 . 7123)) nil (26013 29863 44212 0) 0 nil])
([nil nil ((16769 . 16778)) ((#("
        " 0 1 (fontified t) 1 9 (fontified t)) . 16769) (undo-tree-id8665 . -9) (undo-tree-id8666 . -9) (undo-tree-id8667 . -9) (undo-tree-id8668 . -9) (undo-tree-id8669 . -9) (undo-tree-id8670 . -9) (undo-tree-id8671 . -9) (undo-tree-id8672 . -9) (undo-tree-id8673 . -9) (undo-tree-id8674 . -9) (undo-tree-id8675 . -9) (undo-tree-id8676 . -9) (undo-tree-id8677 . -9) (undo-tree-id8678 . -9) (undo-tree-id8679 . -9) (undo-tree-id8680 . -9) (undo-tree-id8681 . -9) (undo-tree-id8682 . -9) (undo-tree-id8683 . -9) (undo-tree-id8684 . -9) (undo-tree-id8685 . -9) (undo-tree-id8686 . -9) (undo-tree-id8687 . -9) (undo-tree-id8688 . -9) (undo-tree-id8689 . -9) (undo-tree-id8690 . -9) (undo-tree-id8691 . -9) (undo-tree-id8692 . -9) (undo-tree-id8693 . -9) (undo-tree-id8694 . -9) (undo-tree-id8695 . -9) (undo-tree-id8696 . -9) (undo-tree-id8697 . -9) (undo-tree-id8698 . -9) (undo-tree-id8699 . -9) (undo-tree-id8700 . -9) (undo-tree-id8701 . -9) (undo-tree-id8702 . -9) (undo-tree-id8703 . -9) (undo-tree-id8704 . -9) (undo-tree-id8705 . -9) (undo-tree-id8706 . -9) (undo-tree-id8707 . -9) (undo-tree-id8708 . -9) (undo-tree-id8709 . -9) (undo-tree-id8710 . -9) (undo-tree-id8711 . -9) (undo-tree-id8712 . -9) (undo-tree-id8713 . -9) (undo-tree-id8714 . -9) (undo-tree-id8715 . -9) (undo-tree-id8716 . -9) (undo-tree-id8717 . -9) (undo-tree-id8718 . -9) (undo-tree-id8719 . -9) (undo-tree-id8720 . -1) (undo-tree-id8721 . -9) (undo-tree-id8722 . -9) (undo-tree-id8723 . -9)) (26013 29506 703817 0) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -7122) (undo-tree-id8740 . -1) (undo-tree-id8741 . -1) (undo-tree-id8742 . -1) (undo-tree-id8743 . -1) (undo-tree-id8744 . -1) (undo-tree-id8745 . -1) (undo-tree-id8746 . -1) (undo-tree-id8747 . -1) (undo-tree-id8748 . -1) (undo-tree-id8749 . -1) (undo-tree-id8750 . -1) (undo-tree-id8751 . -1) (undo-tree-id8752 . -1) (undo-tree-id8753 . -1) (undo-tree-id8754 . -1) (undo-tree-id8755 . -1) (undo-tree-id8756 . -1) (undo-tree-id8757 . -1) (undo-tree-id8758 . -1) (undo-tree-id8759 . -1) (undo-tree-id8760 . -1) (undo-tree-id8761 . -1) (undo-tree-id8762 . -1) (undo-tree-id8763 . -1) 7123 (t 26013 29863 81238 879000)) nil (26013 29878 429282 0) 0 nil])
([nil nil ((nil fontified nil 17011 . 17012) (nil fontified nil 17010 . 17011) (nil fontified nil 17009 . 17010) (nil fontified nil 17008 . 17009) (nil fontified nil 16991 . 17008) (nil fontified nil 16990 . 16991) (nil fontified nil 16986 . 16990) (nil fontified nil 16985 . 16986) (nil fontified nil 16984 . 16985) (nil fontified nil 16983 . 16984) (nil fontified nil 16971 . 16983) (nil fontified nil 16963 . 16971) (nil fontified nil 16958 . 16963) (nil fontified nil 16942 . 16958) (nil fontified nil 16941 . 16942) (nil fontified nil 16937 . 16941) (nil fontified nil 16936 . 16937) (nil fontified nil 16935 . 16936) (nil fontified nil 16916 . 16935) (nil fontified nil 16912 . 16916) (nil fontified nil 16904 . 16912) (nil fontified nil 16903 . 16904) (nil fontified nil 16902 . 16903) (nil fontified nil 16901 . 16902) (nil fontified nil 16886 . 16901) (nil fontified nil 16885 . 16886) (nil fontified nil 16881 . 16885) (nil fontified nil 16880 . 16881) (nil fontified nil 16879 . 16880) (nil fontified nil 16857 . 16879) (nil fontified nil 16839 . 16857) (nil fontified nil 16838 . 16839) (nil fontified nil 16834 . 16838) (nil fontified nil 16826 . 16834) (nil fontified nil 16825 . 16826) (nil fontified nil 16807 . 16825) (nil fontified nil 16791 . 16807) (nil fontified nil 16790 . 16791) (nil fontified nil 16786 . 16790) (nil fontified nil 16778 . 16786) (16778 . 17012)) ((#("        self.model_transform.rotation.z += 0.1;
        self.transform_uniform.update_model_transform(&self.model_transform);
        self.queue.write_buffer(&self.transform_buffer, 0, bytemuck::cast_slice(&[self.transform_uniform]));" 0 8 (fontified nil) 8 12 (face font-lock-keyword-face fontified nil) 12 13 (fontified nil) 13 29 (fontified nil) 29 47 (fontified nil) 47 48 (fontified nil) 48 56 (fontified nil) 56 60 (face font-lock-keyword-face fontified nil) 60 61 (fontified nil) 61 79 (fontified nil) 79 101 (fontified nil) 101 102 (face (rainbow-delimiters-depth-4-face) fontified nil) 102 103 (face rust-ampersand-face fontified nil) 103 107 (face font-lock-keyword-face fontified nil) 107 108 (fontified nil) 108 123 (fontified nil) 123 124 (face (rainbow-delimiters-depth-4-face) fontified nil) 124 125 (fontified nil) 125 126 (fontified nil) 126 134 (fontified nil) 134 138 (face font-lock-keyword-face fontified nil) 138 157 (fontified nil) 157 158 (face (rainbow-delimiters-depth-4-face) fontified nil) 158 159 (face rust-ampersand-face fontified nil) 159 163 (face font-lock-keyword-face fontified nil) 163 164 (fontified nil) 164 180 (fontified nil) 180 185 (fontified nil) 185 193 (face font-lock-constant-face fontified nil) 193 205 (fontified nil) 205 206 (face (rainbow-delimiters-depth-5-face) fontified nil) 206 207 (face rust-ampersand-face fontified nil) 207 208 (face (rainbow-delimiters-depth-6-face) fontified nil) 208 212 (face font-lock-keyword-face fontified nil) 212 213 (fontified nil) 213 230 (fontified nil) 230 231 (face (rainbow-delimiters-depth-6-face) fontified nil) 231 232 (face (rainbow-delimiters-depth-5-face) fontified nil) 232 233 (face (rainbow-delimiters-depth-4-face) fontified nil) 233 234 (fontified nil rear-nonsticky t)) . 16778) (undo-tree-id8611 . -16) (undo-tree-id8612 . -45) (undo-tree-id8613 . -45) (undo-tree-id8614 . 189) (undo-tree-id8615 . -45) (undo-tree-id8616 . -45) (undo-tree-id8617 . -45) (undo-tree-id8618 . -45) (undo-tree-id8619 . -45) (undo-tree-id8620 . -45) (undo-tree-id8621 . -45) (undo-tree-id8622 . -45) (undo-tree-id8623 . -45) (undo-tree-id8624 . -45) (undo-tree-id8625 . -45) (undo-tree-id8626 . -45) (undo-tree-id8627 . -45) (undo-tree-id8628 . -45) (undo-tree-id8629 . -45) (undo-tree-id8630 . -45) (undo-tree-id8631 . -45) (undo-tree-id8632 . -45) (undo-tree-id8633 . -45) (undo-tree-id8634 . -45) (undo-tree-id8635 . -45) (undo-tree-id8636 . -45) (undo-tree-id8637 . -45) (undo-tree-id8638 . -45) (undo-tree-id8639 . -45) (undo-tree-id8640 . -45) (undo-tree-id8641 . -45) (undo-tree-id8642 . -45) (undo-tree-id8643 . -45) (undo-tree-id8644 . -45) (undo-tree-id8645 . -45) (undo-tree-id8646 . -234) (undo-tree-id8647 . -208) (undo-tree-id8648 . -208) (undo-tree-id8649 . -212) (undo-tree-id8650 . -159) (undo-tree-id8651 . -159) (undo-tree-id8652 . -163) (undo-tree-id8653 . -103) (undo-tree-id8654 . -103) (undo-tree-id8655 . -107) (undo-tree-id8656 . -134) (undo-tree-id8657 . -134) (undo-tree-id8658 . -138) (undo-tree-id8659 . -56) (undo-tree-id8660 . -56) (undo-tree-id8661 . -60) (undo-tree-id8662 . -12) (undo-tree-id8663 . -16) (undo-tree-id8664 . -45) (nil fontified t 16825 . 16826) (nil fontified t 16903 . 16904) (nil fontified t 17011 . 17012)) (26013 29506 478212 0) 0 nil])
([nil nil ((7122 . 7123)) nil (26013 29878 429245 0) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -16778) 16794) ((16778 . 16786)) (26013 29506 242152 0) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . -7122) (undo-tree-id8771 . -1) (undo-tree-id8772 . -1) (undo-tree-id8773 . -1) (undo-tree-id8774 . -1) (undo-tree-id8775 . -1) (undo-tree-id8776 . -1) (undo-tree-id8777 . -1) (undo-tree-id8778 . -1) (undo-tree-id8779 . -1) (undo-tree-id8780 . -1) (undo-tree-id8781 . -1) (undo-tree-id8782 . -1) (undo-tree-id8783 . -1) (undo-tree-id8784 . -1) (undo-tree-id8785 . -1) (undo-tree-id8786 . -1) (undo-tree-id8787 . -1) (undo-tree-id8788 . -1) (undo-tree-id8789 . -1) (undo-tree-id8790 . -1) (undo-tree-id8791 . -1) (undo-tree-id8792 . -1) (undo-tree-id8793 . -1) (undo-tree-id8794 . -1) (undo-tree-id8795 . -1) (undo-tree-id8796 . -1) 7123 (t 26013 29878 466219 494000)) nil (26013 29889 92413 0) 0 nil])
([nil nil ((#("self" 0 4 (face font-lock-keyword-face fontified t)) . -16778) (undo-tree-id8397 . -4) (undo-tree-id8398 . -4) (undo-tree-id8400 . -4) (undo-tree-id8402 . -4) (undo-tree-id8404 . -4) (undo-tree-id8406 . -4) 16782) ((16778 . 16782)) (26013 29506 40069 0) 0 nil])
([nil nil ((7122 . 7123)) nil (26013 29889 92385 0) 0 nil])
([nil nil ((16778 . 16780)) ((#("st" 0 2 (fontified t)) . 16778) (undo-tree-id8609 . -2) (undo-tree-id8610 . -2)) (26013 29505 845357 0) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . -7122) (undo-tree-id8764 . -1) (undo-tree-id8765 . -1) (undo-tree-id8766 . -1) (undo-tree-id8767 . -1) (undo-tree-id8768 . -1) (undo-tree-id8769 . -1) (undo-tree-id8770 . -1) 7123) nil (26013 29889 92383 0) 0 nil])
([nil nil ((16778 . 16783) (#("s" 0 1 (fontified nil)) . 16778) (16778 . 16779) (#("state" 0 5 (fontified nil)) . -16778) (16778 . 16783) (#("st" 0 2 (fontified t)) . -16778) (undo-tree-id8392 . -2) (undo-tree-id8394 . -2) (undo-tree-id8396 . -2) 16780) ((16778 . 16780) (#("state" 0 5 (fontified nil)) . 16778) (16778 . 16783) (#("s" 0 1 (fontified nil)) . 16778) (16778 . 16779) (#("state" 0 5 (fontified t)) . 16778)) (26013 29505 618810 0) 0 nil])
([nil nil ((7122 . 7123)) nil (26013 29889 92365 0) 0 nil])
([nil nil ((#("self" 0 4 (face font-lock-keyword-face fontified t)) . -16827) (undo-tree-id8382 . -4) (undo-tree-id8383 . -4) (undo-tree-id8385 . -4) (undo-tree-id8387 . -4) (undo-tree-id8389 . -4) (undo-tree-id8391 . -4) 16831) ((16827 . 16831)) (26013 29505 372824 0) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -7122) (undo-tree-id8803 . -1) (undo-tree-id8804 . -1) (undo-tree-id8805 . -1) (undo-tree-id8806 . -1) (undo-tree-id8807 . -1) (undo-tree-id8808 . -1) (undo-tree-id8809 . -1) (undo-tree-id8810 . -1) (undo-tree-id8811 . -1) (undo-tree-id8812 . -1) (undo-tree-id8813 . -1) (undo-tree-id8814 . -1) (undo-tree-id8815 . -1) (undo-tree-id8816 . -1) (undo-tree-id8817 . -1) (undo-tree-id8818 . -1) (undo-tree-id8819 . -1) 7123 (t 26013 29889 129775 808000)) nil (26013 29894 814871 0) 0 nil])
([nil nil ((16827 . 16829)) ((#("st" 0 2 (fontified t)) . 16827) (undo-tree-id8607 . -2) (undo-tree-id8608 . -2)) (26013 29505 172196 0) 0 nil])
([nil nil ((7122 . 7124)) nil (26013 29894 814851 0) 0 nil])
([nil nil ((16827 . 16832) (#("st" 0 2 (fontified nil)) . 16827) (16827 . 16829) (#("state" 0 5 (fontified nil)) . -16827) (16827 . 16832) (#("st" 0 2 (fontified t)) . -16827) (undo-tree-id8375 . -2) (undo-tree-id8377 . -2) (undo-tree-id8379 . -2) (undo-tree-id8381 . -2) 16829) ((16827 . 16829) (#("state" 0 5 (fontified nil)) . 16827) (16827 . 16832) (#("st" 0 2 (fontified nil)) . 16827) (16827 . 16829) (#("state" 0 5 (fontified t)) . 16827)) (26013 29504 975072 0) 0 nil])
([nil nil ((#("9" 0 1 (fontified t)) . -7122) (undo-tree-id8797 . -1) (undo-tree-id8798 . -1) (undo-tree-id8799 . -1) (undo-tree-id8800 . -1) (#("1" 0 1 (fontified t)) . -7123) (undo-tree-id8801 . -1) (undo-tree-id8802 . -1) 7124) nil (26013 29894 814849 0) 0 nil])
([nil nil ((#("self" 0 4 (face font-lock-keyword-face fontified t)) . -16906) (undo-tree-id8367 . -4) (undo-tree-id8368 . -4) (undo-tree-id8370 . -4) (undo-tree-id8372 . -4) (undo-tree-id8374 . -4) 16910) ((16906 . 16910)) (26013 29504 793422 0) 0 nil])
([nil nil ((7122 . 7124)) nil (26013 29894 814832 0) 0 nil])
([nil nil ((16906 . 16908)) ((#("st" 0 2 (fontified t)) . 16906) (undo-tree-id8605 . -2) (undo-tree-id8606 . -2)) (26013 29504 633550 0) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -7122) (undo-tree-id8820 . -1) (undo-tree-id8821 . -1) (undo-tree-id8822 . -1) (undo-tree-id8823 . -1) (undo-tree-id8824 . -1) (undo-tree-id8825 . -1) (undo-tree-id8826 . -1) (undo-tree-id8827 . -1) (undo-tree-id8828 . -1) (undo-tree-id8829 . -1) (undo-tree-id8830 . -1) (undo-tree-id8831 . -1) (undo-tree-id8832 . -1) (undo-tree-id8833 . -1) (undo-tree-id8834 . -1) (undo-tree-id8835 . -1) (undo-tree-id8836 . -1) (undo-tree-id8837 . -1) (undo-tree-id8838 . -1) (undo-tree-id8839 . -1) (undo-tree-id8840 . -1) (undo-tree-id8841 . -1) (undo-tree-id8842 . -1) (#("2" 0 1 (fontified t)) . -7123) (undo-tree-id8843 . -1) (undo-tree-id8844 . -1) (undo-tree-id8845 . -1) (undo-tree-id8846 . -1) (undo-tree-id8847 . -1) (undo-tree-id8848 . -1) (undo-tree-id8849 . -1) (undo-tree-id8850 . -1) (undo-tree-id8851 . -1) (undo-tree-id8852 . -1) (undo-tree-id8853 . -1) (undo-tree-id8854 . -1) (undo-tree-id8855 . -1) (undo-tree-id8856 . -1) (undo-tree-id8857 . -1) (undo-tree-id8858 . -1) (undo-tree-id8859 . -1) (undo-tree-id8860 . -1) (undo-tree-id8861 . -1) (undo-tree-id8862 . -1) (undo-tree-id8863 . -1) (undo-tree-id8864 . -1) 7124 (t 26013 29894 854552 225000)) nil (26013 29910 85986 0) 0 nil])
([nil nil ((16906 . 16911) (#("st" 0 2 (fontified nil)) . 16906) (16906 . 16908) (#("state" 0 5 (fontified nil)) . -16906) (16906 . 16911) (#("st" 0 2 (fontified t)) . -16906) (undo-tree-id8363 . -2) (undo-tree-id8365 . -2) 16908) ((16906 . 16908) (#("state" 0 5 (fontified nil)) . 16906) (16906 . 16911) (#("st" 0 2 (fontified nil)) . 16906) (16906 . 16908) (#("state" 0 5 (fontified t)) . 16906)) (26013 29504 482604 0) 0 nil])
([nil nil ((7122 . 7123)) nil (26013 29910 85928 0) 0 nil])
([nil nil ((#("self" 0 4 (face font-lock-keyword-face fontified t)) . -16875) (undo-tree-id8553 . -4) (undo-tree-id8554 . -4) (undo-tree-id8556 . -4) (undo-tree-id8558 . -4) (undo-tree-id8560 . -4) (undo-tree-id8562 . -4) (undo-tree-id8564 . -4) (undo-tree-id8566 . -4) 16879 (t 26013 29467 801830 857000)) ((16875 . 16879)) (26013 29504 299648 0) 0 nil])
([nil nil ((apply -3 14701 14813 undo--wrap-and-run-primitive-undo 14701 14813 ((14709 . 14712) 14809))) nil (26013 30164 686814 0) 0 nil])
([nil nil ((16875 . 16877)) ((#("st" 0 2 (fontified t)) . 16875) (undo-tree-id8603 . -2) (undo-tree-id8604 . -2)) (26013 29504 114642 0) 0 nil])
([nil nil ((355 . 356) (t 26013 30164 723963 892000)) nil (26014 12459 576543 0) 0 nil])
([nil nil ((16875 . 16880) (#("st" 0 2 (fontified nil)) . 16875) (16875 . 16877) (#("state" 0 5 (fontified nil)) . -16875) (16875 . 16880) (#("st" 0 2 (fontified t)) . -16875) (undo-tree-id8548 . -2) (undo-tree-id8550 . -1) (undo-tree-id8552 . -2) 16877) ((16875 . 16877) (#("state" 0 5 (fontified nil)) . 16875) (16875 . 16880) (#("st" 0 2 (fontified nil)) . 16875) (16875 . 16877) (#("state" 0 5 (fontified t)) . 16875)) (26013 29503 897685 0) 0 nil])
([nil nil ((356 . 363)) nil (26014 12459 576542 0) 0 nil])
([nil nil ((#("self" 0 4 (face font-lock-keyword-face fontified t)) . -16933) (undo-tree-id8541 . -4) (undo-tree-id8543 . -4) (undo-tree-id8545 . -4) (undo-tree-id8547 . -4) 16937) ((16933 . 16937)) (26013 29503 669072 0) 0 nil])
([nil nil ((360 . 369) (#("ins" 0 3 (fontified nil)) . 360) (360 . 363) (#("instance;" 0 9 (fontified nil)) . -360) (360 . 369) (#("ins" 0 3 (face font-lock-constant-face fontified t)) . -360) (undo-tree-id8865 . -3) (undo-tree-id8866 . -1) (undo-tree-id8867 . -1) (undo-tree-id8868 . -2) (undo-tree-id8869 . -2) (undo-tree-id8870 . -2) (undo-tree-id8871 . -3) (undo-tree-id8872 . -3) 363) nil (26014 12459 576537 0) 0 nil])
([nil nil ((16933 . 16935)) ((#("st" 0 2 (fontified t)) . 16933) (undo-tree-id8601 . -2) (undo-tree-id8602 . -2)) (26013 29503 432517 0) 0 nil])
([nil nil ((#("use std::io;
use std::io::prelude::*;
use std::fs::File;" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 7 (face font-lock-constant-face fontified t) 7 13 (fontified t) 13 16 (face font-lock-keyword-face fontified t) 16 17 (fontified t) 17 20 (face font-lock-constant-face fontified t) 20 22 (fontified t) 22 24 (face font-lock-constant-face fontified t) 24 26 (fontified t) 26 33 (face font-lock-constant-face fontified t) 33 38 (fontified t) 38 41 (face font-lock-keyword-face fontified t) 41 42 (fontified t) 42 45 (face font-lock-constant-face fontified t) 45 47 (fontified t) 47 49 (face font-lock-constant-face fontified t) 49 51 (fontified t) 51 55 (face font-lock-type-face fontified t) 55 56 (fontified t rear-nonsticky t)) . 424) (undo-tree-id8908 . -56) (undo-tree-id8909 . -56) (undo-tree-id8910 . -56) (undo-tree-id8911 . -56) (undo-tree-id8912 . -56) (undo-tree-id8913 . -56) (undo-tree-id8914 . -56) (undo-tree-id8915 . -56) (undo-tree-id8916 . -56) (undo-tree-id8917 . -56) (undo-tree-id8918 . -56) (undo-tree-id8919 . -28) (undo-tree-id8920 . -12) (undo-tree-id8921 . -10) (undo-tree-id8922 . -9) (undo-tree-id8923 . -7) (undo-tree-id8924 . -6) (undo-tree-id8925 . -5) (undo-tree-id8926 . -4) (undo-tree-id8927 . -3) (undo-tree-id8928 . -56) (t 26014 12459 616694 76000)) nil (26014 13345 685292 0) 0 nil])
([nil nil ((16933 . 16938) (#("st" 0 2 (fontified nil)) . 16933) (16933 . 16935) (#("state" 0 5 (fontified nil)) . -16933) (16933 . 16938) (#("st" 0 2 (fontified t)) . -16933) (undo-tree-id8536 . -2) (undo-tree-id8538 . -1) (undo-tree-id8540 . -2) 16935) ((16933 . 16935) (#("state" 0 5 (fontified nil)) . 16933) (16933 . 16938) (#("st" 0 2 (fontified nil)) . 16933) (16933 . 16935) (#("state" 0 5 (fontified t)) . 16933)) (26013 29503 218161 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -423) (undo-tree-id8873 . -1) (undo-tree-id8874 . -1) (undo-tree-id8875 . -1) (undo-tree-id8876 . -1) (undo-tree-id8877 . -1) (undo-tree-id8878 . -1) (undo-tree-id8879 . -1) (undo-tree-id8880 . -1) (undo-tree-id8881 . -1) (undo-tree-id8882 . -1) (undo-tree-id8883 . -1) (undo-tree-id8884 . -1) (undo-tree-id8885 . -1) (undo-tree-id8886 . -1) (undo-tree-id8887 . -1) (undo-tree-id8888 . -1) (undo-tree-id8889 . -1) (undo-tree-id8890 . -1) (undo-tree-id8891 . -1) (undo-tree-id8892 . -1) (undo-tree-id8893 . -1) (undo-tree-id8894 . -1) (undo-tree-id8895 . -1) (undo-tree-id8896 . -1) (undo-tree-id8897 . -1) (undo-tree-id8898 . -1) (undo-tree-id8899 . -1) (undo-tree-id8900 . -1) (undo-tree-id8901 . -1) (undo-tree-id8902 . -1) (undo-tree-id8903 . -1) (undo-tree-id8904 . -1) (undo-tree-id8905 . -1) (undo-tree-id8906 . -1) (undo-tree-id8907 . -1) 424) nil (26014 13345 685266 0) 0 nil])
([nil nil ((#("self" 0 4 (face font-lock-keyword-face fontified t)) . -16983) (undo-tree-id8524 . -4) (undo-tree-id8525 . -4) (undo-tree-id8527 . -4) (undo-tree-id8529 . -4) (undo-tree-id8531 . -4) (undo-tree-id8533 . -4) (undo-tree-id8535 . -4) 16987) ((16983 . 16987)) (26013 29503 29950 0) 0 nil])
([nil nil ((422 . 423) (t 26014 13345 722665 237000)) nil (26014 13357 928750 0) 0 nil])
([nil nil ((16983 . 16985)) ((#("st" 0 2 (fontified t)) . 16983) (undo-tree-id8599 . -2) (undo-tree-id8600 . -2)) (26013 29502 808539 0) 0 nil])
([nil nil ((423 . 430)) nil (26014 13357 928748 0) 0 nil])
([nil nil ((16983 . 16988) (#("st" 0 2 (fontified nil)) . 16983) (16983 . 16985) (#("state" 0 5 (fontified nil)) . -16983) (16983 . 16988) (#("st" 0 2 (fontified t)) . -16983) (undo-tree-id8519 . -2) (undo-tree-id8521 . -1) (undo-tree-id8523 . -2) 16985) ((16983 . 16985) (#("state" 0 5 (fontified nil)) . 16983) (16983 . 16988) (#("st" 0 2 (fontified nil)) . 16983) (16983 . 16985) (#("state" 0 5 (fontified t)) . 16983)) (26013 29502 633218 0) 0 nil])
([nil nil ((427 . 435) (#("ins" 0 3 (fontified nil)) . 427) (427 . 430) (#("instance" 0 8 (fontified nil)) . -427) (427 . 435) (#("ins" 0 3 (face font-lock-constant-face fontified t)) . -427) (undo-tree-id8929 . -3) (undo-tree-id8930 . -1) (undo-tree-id8931 . -2) (undo-tree-id8932 . -2) (undo-tree-id8933 . -3) (undo-tree-id8934 . -3) 430) nil (26014 13357 928746 0) 0 nil])
([nil nil ((17010 . 17019) (t 26013 29478 499436 65000)) ((#("
        " 0 9 (fontified t)) . 17010)) (26013 29502 369181 0) 0 nil])
([nil nil ((435 . 439)) nil (26014 13357 928728 0) 0 nil])
([nil nil ((16816 . 16817) (t 26013 29482 235291 158000)) ((#("0" 0 1 (fontified t)) . 16816) (undo-tree-id8567 . -1) (undo-tree-id8568 . -1) (undo-tree-id8569 . -1) (undo-tree-id8570 . -1) (undo-tree-id8571 . -1) (undo-tree-id8572 . -1) (undo-tree-id8573 . -1) (undo-tree-id8574 . -1) (undo-tree-id8575 . -1) (undo-tree-id8576 . -1) (undo-tree-id8577 . -1) (undo-tree-id8578 . -1) (undo-tree-id8579 . -1) (undo-tree-id8580 . -1) (undo-tree-id8581 . -1) (undo-tree-id8582 . -1) (undo-tree-id8583 . -1) (undo-tree-id8584 . -1) (undo-tree-id8585 . -1) (undo-tree-id8586 . -1) (undo-tree-id8587 . -1) (undo-tree-id8588 . -1) (undo-tree-id8589 . -1) (undo-tree-id8590 . -1) (undo-tree-id8591 . -1) (undo-tree-id8592 . -1) (undo-tree-id8593 . -1) (undo-tree-id8594 . -1) (undo-tree-id8595 . -1) (undo-tree-id8596 . -1) (undo-tree-id8597 . -1) (undo-tree-id8598 . -1) (t 26013 29484 734855 931000)) (26013 29484 697458 0) 0 nil])
([nil nil ((#("
    model_transform: Transform,
    transform_uniform: TransformUniform,
    transform_buffer: wgpu::Buffer,
    transform_bind_group: wgpu::BindGroup," 0 1 (fontified t) 1 5 (fontified t) 5 19 (face font-lock-variable-name-face fontified t) 19 20 (face font-lock-variable-name-face fontified t rear-nonsticky t) 20 22 (fontified t) 22 31 (face font-lock-type-face fontified t) 31 32 (fontified t) 32 33 (fontified t) 33 37 (fontified t) 37 53 (face font-lock-variable-name-face fontified t) 53 54 (face font-lock-variable-name-face fontified t rear-nonsticky t) 54 56 (fontified t) 56 72 (face font-lock-type-face fontified t) 72 73 (fontified t) 73 74 (fontified t) 74 78 (fontified t) 78 93 (face font-lock-variable-name-face fontified t) 93 94 (face font-lock-variable-name-face fontified t rear-nonsticky t) 94 96 (fontified t) 96 100 (face font-lock-constant-face fontified t) 100 102 (fontified t) 102 108 (face font-lock-type-face fontified t) 108 109 (fontified t) 109 110 (fontified t) 110 114 (fontified t) 114 133 (face font-lock-variable-name-face fontified t) 133 134 (face font-lock-variable-name-face fontified t rear-nonsticky t) 134 136 (fontified t) 136 140 (face font-lock-constant-face fontified t) 140 142 (fontified t) 142 151 (face font-lock-type-face fontified t) 151 152 (fontified t)) . 2830) (undo-tree-id8953 . -152) (undo-tree-id8954 . -114) (undo-tree-id8955 . -114) (undo-tree-id8956 . -1) (undo-tree-id8957 . -152) (undo-tree-id8958 . -21) (undo-tree-id8959 . -152) (undo-tree-id8960 . -152) (undo-tree-id8961 . -152) (undo-tree-id8962 . -5) (undo-tree-id8963 . -37) (undo-tree-id8964 . -78) (undo-tree-id8965 . -114) (undo-tree-id8966 . -33) (undo-tree-id8967 . -33) (undo-tree-id8968 . -33) (undo-tree-id8969 . -33) (undo-tree-id8970 . -33) (undo-tree-id8971 . -33) (undo-tree-id8972 . -33) (undo-tree-id8973 . -74) (undo-tree-id8974 . -110) (undo-tree-id8975 . -152) (undo-tree-id8976 . -152) (undo-tree-id8977 . -152) (undo-tree-id8978 . -151) (undo-tree-id8979 . -68) (undo-tree-id8980 . -32) (undo-tree-id8981 . -30) (undo-tree-id8982 . -27) (undo-tree-id8983 . -152) (t 26014 13357 966164 59000)) nil (26014 13392 715351 0) 0 nil])
nil
([nil nil ((2830 . 2834)) nil (26014 13392 715319 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 2837 . 2838) (nil fontified nil 2834 . 2838) (2834 . 2838)) nil (26014 13392 715318 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 2841 . 2842) (nil fontified nil 2838 . 2842) (2838 . 2842)) nil (26014 13392 715316 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 2905 . 2906) (nil fontified nil 2842 . 2906) (2842 . 2906)) nil (26014 13392 715314 0) 0 nil])
([nil nil ((#("            " 0 3 (fontified t) 3 4 (rear-nonsticky t fontified t) 4 7 (fontified t) 7 8 (rear-nonsticky t fontified t) 8 12 (fontified t)) . -2834) (undo-tree-id8935 . -8) (undo-tree-id8936 . -4) (undo-tree-id8937 . -4) (undo-tree-id8938 . -4) (undo-tree-id8939 . -4) (undo-tree-id8940 . -4) (undo-tree-id8941 . -4) (undo-tree-id8942 . -8) (undo-tree-id8943 . -8) (undo-tree-id8944 . -8) (undo-tree-id8945 . -8) (undo-tree-id8946 . -8) (undo-tree-id8947 . -8) (undo-tree-id8948 . -8) (undo-tree-id8949 . -8) (undo-tree-id8950 . -8) (undo-tree-id8951 . -4) (undo-tree-id8952 . -8) 2864) nil (26014 13392 715309 0) 0 nil])
([nil nil ((#("        let model_transform = Transform::new();
        let mut transform_uniform = TransformUniform::new();
        transform_uniform.update_model_transform(&model_transform);
        let transform_buffer = transform_uniform.create_model_transform_buffer(&device);" 0 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 27 (face font-lock-variable-name-face fontified t) 27 30 (fontified t) 30 39 (face font-lock-type-face fontified t) 39 41 (fontified t) 41 44 (fontified t) 44 45 (face (rainbow-delimiters-depth-3-face) fontified t) 45 46 (face (rainbow-delimiters-depth-3-face) fontified t) 46 47 (fontified t) 47 48 (fontified t) 48 56 (fontified t) 56 59 (face font-lock-keyword-face fontified t) 59 60 (fontified t) 60 63 (face font-lock-keyword-face fontified t) 63 64 (fontified t) 64 81 (face font-lock-variable-name-face fontified t) 81 84 (fontified t) 84 100 (face font-lock-type-face fontified t) 100 102 (fontified t) 102 105 (fontified t) 105 106 (face (rainbow-delimiters-depth-3-face) fontified t) 106 107 (face (rainbow-delimiters-depth-3-face) fontified t) 107 109 (fontified t) 109 117 (fontified t) 117 135 (fontified t) 135 157 (fontified t) 157 158 (face (rainbow-delimiters-depth-3-face) fontified t) 158 159 (face rust-ampersand-face fontified t) 159 174 (fontified t) 174 175 (face (rainbow-delimiters-depth-3-face) fontified t) 175 177 (fontified t) 177 185 (fontified t) 185 188 (face font-lock-keyword-face fontified t) 188 189 (fontified t) 189 205 (face font-lock-variable-name-face fontified t) 205 208 (fontified t) 208 226 (fontified t) 226 255 (fontified t) 255 256 (face (rainbow-delimiters-depth-3-face) fontified t) 256 257 (face rust-ampersand-face fontified t) 257 263 (fontified t) 263 264 (face (rainbow-delimiters-depth-3-face) fontified t) 264 265 (fontified t)) . 8539) (undo-tree-id9010 . -265) (undo-tree-id9011 . -134) (undo-tree-id9012 . -30) (t 26014 13392 753006 338000)) nil (26014 13670 388801 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -8537) (undo-tree-id9000 . -1) (undo-tree-id9001 . -1) (undo-tree-id9002 . -1) (undo-tree-id9003 . -1) (undo-tree-id9004 . -1) (#("
" 0 1 (fontified t)) . -8538) (undo-tree-id9005 . -1) (undo-tree-id9006 . -1) (undo-tree-id9007 . -1) (undo-tree-id9008 . -1) (undo-tree-id9009 . -1) 8539) nil (26014 13670 388796 0) 0 nil])
([nil nil ((#("        
        let transform_bind_group_layout = device.create_bind_group_layout(&wgpu::BindGroupLayoutDescriptor {
            entries: &[
                wgpu::BindGroupLayoutEntry {
                    binding: 0,
                    visibility: wgpu::ShaderStages::VERTEX,
                    ty: wgpu::BindingType::Buffer {
                        ty: wgpu::BufferBindingType::Uniform,
                        has_dynamic_offset: false,
                        min_binding_size: None,
                    },
                    count: None,
                }
            ],
            label: Some(\"Transfrom_bind_group_layout\"),
        });

        let transform_bind_group = device.create_bind_group(&wgpu::BindGroupDescriptor {
            layout: &transform_bind_group_layout,
            entries: &[
                wgpu::BindGroupEntry {
                    binding: 0,
                    resource: transform_buffer.as_entire_binding(),
                }
            ],
            label: Some(\"Transform_bind_group\"),
        });
" 0 8 (fontified t) 8 9 (fontified t) 9 17 (fontified t) 17 20 (face font-lock-keyword-face fontified t) 20 21 (fontified t) 21 30 (face font-lock-variable-name-face fontified t) 30 48 (face font-lock-variable-name-face fontified t) 48 82 (fontified t) 82 83 (face (rainbow-delimiters-depth-3-face) fontified t) 83 84 (face rust-ampersand-face fontified t) 84 88 (face font-lock-constant-face fontified t) 88 90 (fontified t) 90 115 (face font-lock-type-face fontified t) 115 116 (fontified t) 116 117 (face (rainbow-delimiters-depth-4-face) fontified t) 117 118 (fontified t) 118 130 (fontified t) 130 136 (face font-lock-variable-name-face fontified t) 136 137 (face font-lock-variable-name-face fontified t) 137 139 (fontified t) 139 140 (face rust-ampersand-face fontified t) 140 141 (face (rainbow-delimiters-depth-5-face) fontified t) 141 142 (fontified t) 142 158 (fontified t) 158 162 (face font-lock-constant-face fontified t) 162 164 (fontified t) 164 184 (face font-lock-type-face fontified t) 184 185 (fontified t) 185 186 (face (rainbow-delimiters-depth-6-face) fontified t) 186 207 (fontified t) 207 214 (face font-lock-variable-name-face fontified t) 214 219 (fontified t) 219 239 (fontified t) 239 249 (face font-lock-variable-name-face fontified t) 249 251 (fontified t) 251 255 (face font-lock-constant-face fontified t) 255 257 (fontified t) 257 269 (face font-lock-type-face fontified t) 269 271 (fontified t) 271 277 (face font-lock-type-face fontified t) 277 279 (fontified t) 279 299 (fontified t) 299 301 (face font-lock-variable-name-face fontified t) 301 303 (fontified t) 303 307 (face font-lock-constant-face fontified t) 307 309 (fontified t) 309 320 (face font-lock-type-face fontified t) 320 322 (fontified t) 322 328 (face font-lock-type-face fontified t) 328 329 (fontified t) 329 330 (face (rainbow-delimiters-depth-7-face) fontified t) 330 355 (fontified t) 355 357 (face font-lock-variable-name-face fontified t) 357 359 (fontified t) 359 363 (face font-lock-constant-face fontified t) 363 365 (fontified t) 365 382 (face font-lock-type-face fontified t) 382 384 (fontified t) 384 391 (face font-lock-type-face fontified t) 391 417 (fontified t) 417 435 (face font-lock-variable-name-face fontified t) 435 437 (fontified t) 437 442 (face font-lock-keyword-face fontified t) 442 448 (fontified t) 448 468 (fontified t) 468 484 (face font-lock-variable-name-face fontified t) 484 486 (fontified t) 486 490 (face font-lock-type-face fontified t) 490 492 (fontified t) 492 512 (fontified t) 512 513 (face (rainbow-delimiters-depth-7-face) fontified t) 513 535 (fontified t) 535 540 (face font-lock-variable-name-face fontified t) 540 542 (fontified t) 542 546 (face font-lock-type-face fontified t) 546 564 (fontified t) 564 565 (face (rainbow-delimiters-depth-6-face) fontified t) 565 578 (fontified t) 578 579 (face (rainbow-delimiters-depth-5-face) fontified t) 579 581 (fontified t) 581 593 (fontified t) 593 598 (face font-lock-variable-name-face fontified t) 598 600 (fontified t) 600 604 (face font-lock-type-face fontified t) 604 605 (face (rainbow-delimiters-depth-5-face) fontified t) 605 634 (face font-lock-string-face fontified t) 634 635 (face (rainbow-delimiters-depth-5-face) fontified t) 635 637 (fontified t) 637 645 (fontified t) 645 646 (face (rainbow-delimiters-depth-4-face) fontified t) 646 647 (face (rainbow-delimiters-depth-3-face) fontified t) 647 649 (fontified t) 649 650 (fontified t) 650 658 (fontified t) 658 661 (face font-lock-keyword-face fontified t) 661 662 (fontified t) 662 671 (face font-lock-variable-name-face fontified t) 671 682 (face font-lock-variable-name-face fontified t) 682 692 (fontified t) 692 695 (fontified t) 695 709 (fontified t) 709 710 (face (rainbow-delimiters-depth-3-face) fontified t) 710 711 (face rust-ampersand-face fontified t) 711 715 (face font-lock-constant-face fontified t) 715 717 (fontified t) 717 736 (face font-lock-type-face fontified t) 736 737 (fontified t) 737 738 (face (rainbow-delimiters-depth-4-face) fontified t) 738 739 (fontified t) 739 751 (fontified t) 751 757 (face font-lock-variable-name-face fontified t) 757 759 (fontified t) 759 760 (face rust-ampersand-face fontified t) 760 787 (fontified t) 787 789 (fontified t) 789 801 (fontified t) 801 808 (face font-lock-variable-name-face fontified t) 808 810 (fontified t) 810 811 (face rust-ampersand-face fontified t) 811 812 (face (rainbow-delimiters-depth-5-face) fontified t) 812 829 (fontified t) 829 833 (face font-lock-constant-face fontified t) 833 835 (fontified t) 835 849 (face font-lock-type-face fontified t) 849 850 (fontified t) 850 851 (face (rainbow-delimiters-depth-6-face) fontified t) 851 852 (fontified t) 852 872 (fontified t) 872 879 (face font-lock-variable-name-face fontified t) 879 884 (fontified t) 884 904 (fontified t) 904 912 (face font-lock-variable-name-face fontified t) 912 914 (fontified t) 914 930 (fontified t) 930 948 (fontified t) 948 949 (face (rainbow-delimiters-depth-7-face) fontified t) 949 950 (face (rainbow-delimiters-depth-7-face) fontified t) 950 952 (fontified t) 952 968 (fontified t) 968 969 (face (rainbow-delimiters-depth-6-face) fontified t) 969 982 (fontified t) 982 983 (face (rainbow-delimiters-depth-5-face) fontified t) 983 985 (fontified t) 985 991 (fontified t) 991 997 (fontified t) 997 1002 (face font-lock-variable-name-face fontified t) 1002 1004 (fontified t) 1004 1008 (face font-lock-type-face fontified t) 1008 1009 (face (rainbow-delimiters-depth-5-face) fontified t) 1009 1031 (face font-lock-string-face fontified t) 1031 1032 (face (rainbow-delimiters-depth-5-face) fontified t) 1032 1034 (fontified t) 1034 1042 (fontified t) 1042 1043 (face (rainbow-delimiters-depth-4-face) fontified t) 1043 1044 (face (rainbow-delimiters-depth-3-face) fontified t) 1044 1045 (fontified t rear-nonsticky t) 1045 1046 (fontified t)) . 8539) (undo-tree-id8997 . -1019) (undo-tree-id8998 . -1046) (undo-tree-id8999 . -1046) 9585) nil (26014 13670 388784 0) 0 nil])
([nil nil ((#("                    &transform_bind_group_layout," 0 20 (fontified t) 20 21 (face rust-ampersand-face fontified t) 21 23 (fontified t) 23 49 (fontified t)) . 8969) (undo-tree-id8985 . -49) (undo-tree-id8986 . -49) (undo-tree-id8987 . -49) (undo-tree-id8988 . -49) (undo-tree-id8989 . -49) (undo-tree-id8990 . -49) (undo-tree-id8991 . -49) (undo-tree-id8992 . -49) (undo-tree-id8993 . -49) (undo-tree-id8994 . -49) (undo-tree-id8995 . -49) (undo-tree-id8996 . -49)) nil (26014 13670 388779 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 8969) (undo-tree-id8984 . -1)) nil (26014 13670 388762 0) 0 nil])
([nil nil ((9420 . 9441) (t 26014 13670 428632 827000)) nil (26014 13688 668213 0) 0 nil])
([nil nil ((9441 . 9444)) nil (26014 13688 668212 0) 0 nil])
([nil nil ((9441 . 9449) (#("Ins" 0 3 (fontified nil)) . 9441) (9441 . 9444) (#("Instance" 0 8 (fontified nil)) . -9441) (9441 . 9449) (#("Ins" 0 3 (face font-lock-type-face fontified t)) . -9441) (undo-tree-id9084 . -3) (undo-tree-id9085 . -1) (undo-tree-id9086 . -2) (undo-tree-id9087 . -2) (undo-tree-id9088 . -3) (undo-tree-id9089 . -3) (undo-tree-id9090 . -3) (undo-tree-id9091 . -3) 9444) nil (26014 13688 668210 0) 0 nil])
([nil nil ((9449 . 9452)) nil (26014 13688 668200 0) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -9449) (undo-tree-id9041 . -1) (undo-tree-id9042 . -1) (undo-tree-id9043 . -1) (undo-tree-id9044 . -1) (undo-tree-id9045 . -1) (undo-tree-id9046 . -1) (undo-tree-id9047 . -1) (undo-tree-id9048 . -1) (undo-tree-id9049 . -1) (undo-tree-id9050 . -1) (undo-tree-id9051 . -1) (undo-tree-id9052 . -1) (undo-tree-id9053 . -1) (undo-tree-id9054 . -1) (undo-tree-id9055 . -1) (undo-tree-id9056 . -1) (undo-tree-id9057 . -1) (#(":" 0 1 (fontified t)) . -9450) (undo-tree-id9058 . -1) (undo-tree-id9059 . -1) (undo-tree-id9060 . -1) (undo-tree-id9061 . -1) (undo-tree-id9062 . -1) (undo-tree-id9063 . -1) (undo-tree-id9064 . -1) (undo-tree-id9065 . -1) (undo-tree-id9066 . -1) (undo-tree-id9067 . -1) (undo-tree-id9068 . -1) (undo-tree-id9069 . -1) (undo-tree-id9070 . -1) (undo-tree-id9071 . -1) (undo-tree-id9072 . -1) (#("d" 0 1 (fontified t)) . -9451) (undo-tree-id9073 . -1) (undo-tree-id9074 . -1) (undo-tree-id9075 . -1) (undo-tree-id9076 . -1) (undo-tree-id9077 . -1) (undo-tree-id9078 . -1) (undo-tree-id9079 . -1) (undo-tree-id9080 . -1) (undo-tree-id9081 . -1) (undo-tree-id9082 . -1) (undo-tree-id9083 . -1) 9452) nil (26014 13688 668196 0) 0 nil])
([nil nil ((9449 . 9450)) nil (26014 13688 668151 0) 0 nil])
([nil nil ((9441 . 9452) (#("InstanceR" 0 9 (fontified nil)) . 9441) (9441 . 9450) (#("InstanceRaw" 0 11 (fontified nil)) . -9441) (9441 . 9452) (#("InstanceR" 0 9 (face font-lock-type-face fontified t)) . -9441) (undo-tree-id9018 . -9) (undo-tree-id9019 . -8) (undo-tree-id9020 . -8) (undo-tree-id9021 . -8) (undo-tree-id9022 . -8) (undo-tree-id9023 . -8) (undo-tree-id9024 . -8) (undo-tree-id9025 . -8) (undo-tree-id9026 . -8) (undo-tree-id9027 . -8) (undo-tree-id9028 . -8) (undo-tree-id9029 . -8) (undo-tree-id9030 . -8) (undo-tree-id9031 . -8) (undo-tree-id9032 . -8) (undo-tree-id9033 . -8) (undo-tree-id9034 . -8) (undo-tree-id9035 . -8) (undo-tree-id9036 . -8) (undo-tree-id9037 . -8) (undo-tree-id9038 . -9) (undo-tree-id9039 . -9) (undo-tree-id9040 . -9) 9450) nil (26014 13688 668149 0) 0 nil])
([nil nil ((9452 . 9455)) nil (26014 13688 668123 0) 0 nil])
([nil nil ((apply yas--snippet-revive 9454 9460 #s(yas--snippet nil nil #s(yas--exit 9460 nil) 89 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 9460 nil) 89 nil nil nil nil)) (9454 . 9460) (#("desc()$0" 0 8 (fontified nil)) . 9454) (9454 . 9462) (#("d" 0 1 (fontified nil)) . 9454) (9454 . 9455) (#("desc()" 0 6 (fontified nil)) . -9454) (9454 . 9460) (#("d" 0 1 (fontified t)) . -9454) (undo-tree-id9013 . -1) (undo-tree-id9014 . -1) (undo-tree-id9015 . -1) (undo-tree-id9016 . -1) (undo-tree-id9017 . -1) 9455) nil (26014 13688 668121 0) 0 nil])
([nil nil ((9460 . 9461)) nil (26014 13688 668103 0) 0 nil])
([nil nil ((#("            model_transform,
            transform_uniform,
            transform_buffer,
            transform_bind_group," 0 12 (fontified t) 12 26 (fontified t) 26 27 (fontified t rear-nonsticky t) 27 28 (fontified t) 28 41 (fontified t) 41 57 (fontified t) 57 58 (fontified t rear-nonsticky t) 58 59 (fontified t) 59 72 (fontified t) 72 87 (fontified t) 87 88 (fontified t rear-nonsticky t) 88 89 (fontified t) 89 102 (fontified t) 102 121 (fontified t) 121 122 (fontified t rear-nonsticky t) 122 123 (fontified t)) . 12225) (undo-tree-id9128 . -123) (undo-tree-id9129 . -123) (undo-tree-id9130 . -123) (undo-tree-id9131 . -123) (undo-tree-id9132 . -122) (undo-tree-id9133 . -118) (undo-tree-id9134 . -84) (undo-tree-id9135 . -80) (undo-tree-id9136 . -45) (undo-tree-id9137 . -44) (undo-tree-id9138 . -42) (undo-tree-id9139 . -40) (undo-tree-id9140 . -39) (undo-tree-id9141 . -8) (undo-tree-id9142 . -7) (undo-tree-id9143 . -5) (undo-tree-id9144 . -3) (undo-tree-id9145 . -1) (undo-tree-id9146 . -123) (t 26014 13688 707460 59000)) nil (26014 13710 193512 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -12224) (undo-tree-id9101 . -1) (undo-tree-id9102 . -1) (undo-tree-id9103 . -1) (undo-tree-id9104 . -1) (undo-tree-id9105 . -1) (undo-tree-id9106 . -1) (undo-tree-id9107 . -1) (undo-tree-id9108 . -1) (undo-tree-id9109 . -1) (undo-tree-id9110 . -1) (undo-tree-id9111 . -1) (undo-tree-id9112 . -1) (undo-tree-id9113 . -1) (undo-tree-id9114 . -1) (undo-tree-id9115 . -1) (undo-tree-id9116 . -1) (undo-tree-id9117 . -1) (undo-tree-id9118 . -1) (undo-tree-id9119 . -1) (undo-tree-id9120 . -1) (undo-tree-id9121 . -1) (undo-tree-id9122 . -1) (undo-tree-id9123 . -1) (undo-tree-id9124 . -1) (undo-tree-id9125 . -1) (undo-tree-id9126 . -1) (undo-tree-id9127 . -1) 12225) nil (26014 13710 193492 0) 0 nil])
([nil nil ((#("        render_pass.set_bind_group(2, &self.transform_bind_group, &[]);" 0 8 (fontified t) 8 20 (fontified t) 20 34 (fontified t) 34 35 (face (rainbow-delimiters-depth-3-face) fontified t) 35 36 (fontified t) 36 38 (fontified t) 38 39 (face rust-ampersand-face fontified t) 39 43 (face font-lock-keyword-face fontified t) 43 44 (fontified t) 44 64 (fontified t) 64 66 (fontified t) 66 67 (face rust-ampersand-face fontified t) 67 68 (face (rainbow-delimiters-depth-4-face) fontified t) 68 69 (face (rainbow-delimiters-depth-4-face) fontified t) 69 70 (face (rainbow-delimiters-depth-3-face) fontified t) 70 71 (fontified t)) . 14460) (undo-tree-id9093 . -71) (undo-tree-id9094 . -71) (undo-tree-id9095 . -71) (undo-tree-id9096 . -71) (undo-tree-id9097 . -71) (undo-tree-id9098 . -71) (undo-tree-id9099 . -71) (undo-tree-id9100 . -71)) nil (26014 13710 193463 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 14460) (undo-tree-id9092 . -1)) nil (26014 13710 193450 0) 0 nil])
([nil nil ((#("        self.model_transform.rotation.z += 0.1;" 0 8 (fontified t) 8 12 (face font-lock-keyword-face fontified t) 12 13 (fontified t) 13 29 (fontified t) 29 47 (fontified t)) . 13015) (undo-tree-id9165 . -47) (undo-tree-id9166 . -47) (undo-tree-id9167 . -47) (undo-tree-id9168 . -47) (undo-tree-id9169 . -47) (undo-tree-id9170 . -47) (undo-tree-id9171 . -47) (undo-tree-id9172 . -47) (undo-tree-id9173 . -47) (undo-tree-id9174 . -47) (t 26014 13710 231870 586000)) nil (26014 13717 91904 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 13015) (undo-tree-id9164 . -1)) nil (26014 13717 91893 0) 0 nil])
([nil nil ((#("        self.transform_uniform.update_model_transform(&self.model_transform);" 0 8 (fontified t) 8 12 (face font-lock-keyword-face fontified t) 12 13 (fontified t) 13 31 (fontified t) 31 53 (fontified t) 53 54 (face (rainbow-delimiters-depth-3-face) fontified t) 54 55 (face rust-ampersand-face fontified t) 55 59 (face font-lock-keyword-face fontified t) 59 60 (fontified t) 60 75 (fontified t) 75 76 (face (rainbow-delimiters-depth-3-face) fontified t) 76 77 (fontified t)) . 13015) (undo-tree-id9152 . -77) (undo-tree-id9153 . -77) (undo-tree-id9154 . -77) (undo-tree-id9155 . -77) (undo-tree-id9156 . -77) (undo-tree-id9157 . -77) (undo-tree-id9158 . -77) (undo-tree-id9159 . -77) (undo-tree-id9160 . -77) (undo-tree-id9161 . -77) (undo-tree-id9162 . -77) (undo-tree-id9163 . -77)) nil (26014 13717 91890 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 13015) (undo-tree-id9150 . -1) (undo-tree-id9151 . -1)) nil (26014 13717 91877 0) 0 nil])
([nil nil ((#("        // self.queue.write_buffer(&self.transform_buffer, 0, bytemuck::cast_slice(&[self.transform_uniform]));" 0 8 (fontified t) 8 11 (face font-lock-comment-delimiter-face fontified t) 11 15 (face font-lock-comment-face fontified t) 15 32 (face font-lock-comment-face fontified t) 32 34 (face font-lock-comment-face fontified t) 34 35 (face font-lock-comment-face fontified t) 35 36 (face font-lock-comment-face fontified t) 36 40 (face font-lock-comment-face fontified t) 40 41 (face font-lock-comment-face fontified t) 41 57 (face font-lock-comment-face fontified t) 57 62 (face font-lock-comment-face fontified t) 62 70 (face font-lock-comment-face fontified t) 70 82 (face font-lock-comment-face fontified t) 82 83 (face font-lock-comment-face fontified t) 83 84 (face font-lock-comment-face fontified t) 84 85 (face font-lock-comment-face fontified t) 85 89 (face font-lock-comment-face fontified t) 89 90 (face font-lock-comment-face fontified t) 90 107 (face font-lock-comment-face fontified t) 107 108 (face font-lock-comment-face fontified t) 108 109 (face font-lock-comment-face fontified t) 109 110 (face font-lock-comment-face fontified t) 110 111 (face font-lock-comment-face fontified t rear-nonsticky t)) . 13015) (undo-tree-id9148 . -111) (undo-tree-id9149 . -111)) nil (26014 13717 91874 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 13015) (undo-tree-id9147 . -1)) nil (26014 13717 91868 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 12498 . 12499) (nil fontified nil 11669 . 12499) (11669 . 12499) (t 26014 13717 131457 22000)) nil (26014 13757 595636 0) 0 nil])
([nil nil ((11669 . 11677) (#("  " 0 2 (fontified t)) . 11669) 11668) nil (26014 13777 266818 0) 0 nil])
([nil nil ((11670 . 11678) (#("        " 0 8 (fontified nil)) . 11669) (undo-tree-id9374 . -8) (undo-tree-id9375 . -8) (undo-tree-id9376 . -8) (11669 . 11678) (#("        " 0 8 (fontified nil)) . 11668) (11668 . 11676) (11668 . 11669)) nil (26014 13782 926258 0) 0 nil] [nil nil ((#("ROW" 0 3 (face font-lock-type-face fontified t)) . -11715) (undo-tree-id9330 . -3) (undo-tree-id9331 . -3) (undo-tree-id9332 . -3) (undo-tree-id9333 . -3) (undo-tree-id9334 . -3) (undo-tree-id9335 . -3) (undo-tree-id9336 . -3) (undo-tree-id9337 . -3) (undo-tree-id9338 . -3) (undo-tree-id9339 . -3) (undo-tree-id9340 . -3) (undo-tree-id9341 . -3) (undo-tree-id9342 . -3) (undo-tree-id9343 . -3) 11718) ((11715 . 11718)) (26014 13776 262306 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 11867 . 11868) (nil fontified nil 11678 . 11868) (11678 . 11868)) nil (26014 13782 926246 0) 0 nil])
([nil nil ((#("PER_" 0 4 (face font-lock-type-face fontified t)) . -11711) (undo-tree-id9315 . -4) (undo-tree-id9316 . -4) (undo-tree-id9317 . -4) (undo-tree-id9318 . -4) (undo-tree-id9319 . -4) (undo-tree-id9320 . -4) (undo-tree-id9321 . -4) (undo-tree-id9322 . -4) (undo-tree-id9323 . -4) (undo-tree-id9324 . -4) (undo-tree-id9325 . -4) (undo-tree-id9326 . -4) (undo-tree-id9327 . -4) (undo-tree-id9328 . -4) (undo-tree-id9329 . -4) 11715) ((11711 . 11715)) (26014 13775 652816 0) 0 nil])
([nil nil ((11868 . 11876)) nil (26014 13782 926245 0) 0 nil])
([nil nil ((#("INSTANCES_" 0 10 (face font-lock-type-face fontified t)) . -11701) (undo-tree-id9299 . -10) (undo-tree-id9300 . -10) (undo-tree-id9301 . -10) (undo-tree-id9302 . -10) (undo-tree-id9303 . -10) (undo-tree-id9304 . -10) (undo-tree-id9305 . -10) (undo-tree-id9306 . -10) (undo-tree-id9307 . -10) (undo-tree-id9308 . -10) (undo-tree-id9309 . -10) (undo-tree-id9310 . -10) (undo-tree-id9311 . -10) (undo-tree-id9312 . -10) (undo-tree-id9313 . -10) (undo-tree-id9314 . -10) 11711) ((11701 . 11711)) (26014 13775 415940 0) 0 nil])
([nil nil ((11717 . 11725) 11760) nil (26014 13782 926240 0) 0 nil])
([nil nil ((#("U" 0 1 (face font-lock-type-face fontified t)) . -11698) (undo-tree-id9239 . -1) (undo-tree-id9240 . -1) (undo-tree-id9241 . -1) (undo-tree-id9242 . -1) (undo-tree-id9243 . -1) (undo-tree-id9244 . -1) (undo-tree-id9245 . -1) (undo-tree-id9246 . -1) (undo-tree-id9247 . -1) (undo-tree-id9248 . -1) (undo-tree-id9249 . -1) (undo-tree-id9250 . -1) (undo-tree-id9251 . -1) (undo-tree-id9252 . -1) (undo-tree-id9253 . -1) (undo-tree-id9254 . -1) (undo-tree-id9255 . -1) (undo-tree-id9256 . -1) (undo-tree-id9257 . -1) (undo-tree-id9258 . -1) (undo-tree-id9259 . -1) (#("M" 0 1 (face font-lock-type-face fontified t)) . -11699) (undo-tree-id9260 . -1) (undo-tree-id9261 . -1) (undo-tree-id9262 . -1) (undo-tree-id9263 . -1) (undo-tree-id9264 . -1) (undo-tree-id9265 . -1) (undo-tree-id9266 . -1) (undo-tree-id9267 . -1) (undo-tree-id9268 . -1) (undo-tree-id9269 . -1) (undo-tree-id9270 . -1) (undo-tree-id9271 . -1) (undo-tree-id9272 . -1) (undo-tree-id9273 . -1) (undo-tree-id9274 . -1) (undo-tree-id9275 . -1) (undo-tree-id9276 . -1) (undo-tree-id9277 . -1) (undo-tree-id9278 . -1) (undo-tree-id9279 . -1) (#("_" 0 1 (face font-lock-type-face fontified t)) . -11700) (undo-tree-id9280 . -1) (undo-tree-id9281 . -1) (undo-tree-id9282 . -1) (undo-tree-id9283 . -1) (undo-tree-id9284 . -1) (undo-tree-id9285 . -1) (undo-tree-id9286 . -1) (undo-tree-id9287 . -1) (undo-tree-id9288 . -1) (undo-tree-id9289 . -1) (undo-tree-id9290 . -1) (undo-tree-id9291 . -1) (undo-tree-id9292 . -1) (undo-tree-id9293 . -1) (undo-tree-id9294 . -1) (undo-tree-id9295 . -1) (undo-tree-id9296 . -1) (undo-tree-id9297 . -1) (undo-tree-id9298 . -1) 11701) ((11698 . 11701)) (26014 13775 165238 0) 0 nil])
([nil nil ((11669 . 11677) (t 26014 13782 965372 423000)) nil (26014 13795 797109 0) 0 nil])
([nil nil ((#("N" 0 1 (face font-lock-type-face fontified t)) . -11697) (undo-tree-id9217 . -1) (undo-tree-id9218 . -1) (undo-tree-id9219 . -1) (undo-tree-id9220 . -1) (undo-tree-id9221 . -1) (undo-tree-id9222 . -1) (undo-tree-id9223 . -1) (undo-tree-id9224 . -1) (undo-tree-id9225 . -1) (undo-tree-id9226 . -1) (undo-tree-id9227 . -1) (undo-tree-id9228 . -1) (undo-tree-id9229 . -1) (undo-tree-id9230 . -1) (undo-tree-id9231 . -1) (undo-tree-id9232 . -1) (undo-tree-id9233 . -1) (undo-tree-id9234 . -1) (undo-tree-id9235 . -1) (undo-tree-id9236 . -1) (undo-tree-id9237 . -1) (undo-tree-id9238 . -1) 11698) ((11697 . 11698)) (26014 13774 956550 0) 0 nil])
([nil nil ((11677 . 11683)) nil (26014 13795 797107 0) 0 nil])
([nil nil ((11697 . 11699)) ((#("1-" 0 1 (fontified t) 1 2 (fontified t)) . 11697) (undo-tree-id9368 . -2) (undo-tree-id9369 . -2) (undo-tree-id9370 . -2) (undo-tree-id9371 . -2) (undo-tree-id9372 . -1) (undo-tree-id9373 . -2)) (26014 13774 739634 0) 0 nil])
([nil nil ((11681 . 11687) (#("cg" 0 2 (fontified nil)) . 11681) (11681 . 11683) (#("cgmath" 0 6 (fontified nil)) . -11681) (11681 . 11687) (#("cg" 0 2 (face font-lock-constant-face fontified t)) . -11681) (undo-tree-id9400 . -2) (undo-tree-id9401 . -1) (undo-tree-id9402 . -1) (undo-tree-id9403 . -2) (undo-tree-id9404 . -2) (undo-tree-id9405 . -2) (undo-tree-id9406 . -2) (undo-tree-id9407 . -2) 11683) nil (26014 13795 797105 0) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -11698) (undo-tree-id9213 . -1) (undo-tree-id9214 . -1) (undo-tree-id9215 . -1) (undo-tree-id9216 . -1) 11699) ((11698 . 11699)) (26014 13774 513655 0) 0 nil])
([nil nil ((11687 . 11692)) nil (26014 13795 797095 0) 0 nil])
([nil nil ((11698 . 11699)) ((#("0" 0 1 (fontified t)) . 11698)) (26014 13774 292682 0) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -11691) (undo-tree-id9395 . -1) (undo-tree-id9396 . -1) (undo-tree-id9397 . -1) (undo-tree-id9398 . -1) (undo-tree-id9399 . -1) 11692) nil (26014 13795 797094 0) 0 nil])
([nil nil ((#("ROW" 0 3 (face font-lock-type-face fontified t)) . -11750) (undo-tree-id9205 . -3) (undo-tree-id9206 . -3) (undo-tree-id9207 . -3) (undo-tree-id9208 . -3) (undo-tree-id9209 . -3) (undo-tree-id9210 . -3) (undo-tree-id9211 . -3) (undo-tree-id9212 . -3) 11753) ((11750 . 11753)) (26014 13774 35883 0) 0 nil])
([nil nil ((11689 . 11696) (#("pr" 0 2 (fontified nil)) . 11689) (11689 . 11691) (#("prelude" 0 7 (fontified nil)) . -11689) (11689 . 11696) (#("pr" 0 2 (fontified t)) . -11689) (undo-tree-id9377 . -2) (undo-tree-id9378 . -1) (undo-tree-id9379 . -1) (undo-tree-id9380 . -1) (undo-tree-id9381 . -1) (undo-tree-id9382 . -1) (undo-tree-id9383 . -2) (undo-tree-id9384 . -2) (undo-tree-id9385 . -2) (undo-tree-id9386 . -2) (undo-tree-id9387 . -2) (undo-tree-id9388 . -2) (undo-tree-id9389 . -2) (undo-tree-id9390 . -2) (undo-tree-id9391 . -2) (undo-tree-id9392 . -2) (undo-tree-id9393 . -2) (undo-tree-id9394 . -2) 11691) nil (26014 13795 797086 0) 0 nil])
([nil nil ((#("PER_" 0 4 (face font-lock-type-face fontified t)) . -11746) (undo-tree-id9196 . -4) (undo-tree-id9197 . -4) (undo-tree-id9198 . -4) (undo-tree-id9199 . -4) (undo-tree-id9200 . -4) (undo-tree-id9201 . -4) (undo-tree-id9202 . -4) (undo-tree-id9203 . -4) (undo-tree-id9204 . -4) 11750) ((11746 . 11750)) (26014 13773 784607 0) 0 nil])
([nil nil ((11696 . 11699)) nil (26014 13795 797057 0) 0 nil])
([nil nil ((#("INSTANCES_" 0 10 (face font-lock-type-face fontified t)) . -11736) (undo-tree-id9186 . -10) (undo-tree-id9187 . -10) (undo-tree-id9188 . -10) (undo-tree-id9189 . -10) (undo-tree-id9190 . -10) (undo-tree-id9191 . -10) (undo-tree-id9192 . -10) (undo-tree-id9193 . -10) (undo-tree-id9194 . -10) (undo-tree-id9195 . -10) 11746) ((11736 . 11746)) (26014 13773 560307 0) 0 nil])
([nil nil ((11699 . 11700)) nil (26014 13795 797053 0) 0 nil])
([nil nil ((#("NUM_" 0 4 (face font-lock-type-face fontified t)) . -11732) (undo-tree-id9175 . -4) (undo-tree-id9176 . -4) (undo-tree-id9177 . -4) (undo-tree-id9178 . -4) (undo-tree-id9179 . -4) (undo-tree-id9180 . -4) (undo-tree-id9181 . -4) (undo-tree-id9182 . -4) (undo-tree-id9183 . -4) (undo-tree-id9184 . -4) (undo-tree-id9185 . -4) 11736) ((11732 . 11736)) (26014 13773 318724 0) 0 nil])
([nil nil ((12621 . 12637) (#("                " 0 16 (fontified nil)) . 12620) (undo-tree-id9516 . -16) (undo-tree-id9517 . -16) (undo-tree-id9518 . -16) (12619 . 12637) (t 26014 13795 836005 254000)) nil (26014 13838 589058 0) 0 nil])
([nil nil ((11732 . 11734)) ((#("10" 0 2 (fontified t)) . 11732) (undo-tree-id9344 . -2) (undo-tree-id9345 . -2) (undo-tree-id9346 . -2) (undo-tree-id9347 . -2) (undo-tree-id9348 . -2) (undo-tree-id9349 . -2) (undo-tree-id9350 . -2) (undo-tree-id9351 . -2) (undo-tree-id9352 . -2) (undo-tree-id9353 . -2) (undo-tree-id9354 . -2) (undo-tree-id9355 . -2) (undo-tree-id9356 . -2) (undo-tree-id9357 . -2) (undo-tree-id9358 . -2) (undo-tree-id9359 . -2) (undo-tree-id9360 . -2) (undo-tree-id9361 . -2) (undo-tree-id9362 . -2) (undo-tree-id9363 . -2) (undo-tree-id9364 . -2) (undo-tree-id9365 . -2) (undo-tree-id9366 . -2) (undo-tree-id9367 . -2) (t 26014 13757 635876 632000)) (26014 13757 595427 0) 0 nil])
([nil nil ((12637 . 12649)) nil (26014 13838 589053 0) 0 nil])
nil
([nil nil ((#(" " 0 1 (fontified t)) . -12648) (undo-tree-id9514 . -1) (undo-tree-id9515 . -1) 12649) nil (26014 13838 589052 0) 0 nil])
([nil nil ((12648 . 12653)) nil (26014 13838 589049 0) 0 nil])
([nil nil ((12651 . 12657) (#("cg" 0 2 (fontified nil)) . 12651) (12651 . 12653) (#("cgmath" 0 6 (fontified nil)) . -12651) (12651 . 12657) (#("cg" 0 2 (fontified t)) . -12651) (undo-tree-id9506 . -2) (undo-tree-id9507 . -1) (undo-tree-id9508 . -1) (undo-tree-id9509 . -2) (undo-tree-id9510 . -2) (undo-tree-id9511 . -2) (undo-tree-id9512 . -2) (undo-tree-id9513 . -2) 12653) nil (26014 13838 589047 0) 0 nil])
([nil nil ((12657 . 12662)) nil (26014 13838 589037 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 12664 12665 nil nil nil nil #s(yas--field 2 12667 12668 nil nil nil nil #s(yas--field 3 12670 12671 nil nil nil nil #s(yas--exit 12672 nil)))) #s(yas--field 2 12667 12668 nil nil nil nil #s(yas--field 3 12670 12671 nil nil nil nil #s(yas--exit 12672 nil))) #s(yas--field 3 12670 12671 nil nil nil nil #s(yas--exit 12672 nil))) #s(yas--exit 12672 nil) 90 nil #s(yas--field 1 12664 12665 nil nil nil nil #s(yas--field 2 12667 12668 nil nil nil nil #s(yas--field 3 12670 12671 nil nil nil nil #s(yas--exit 12672 nil)))) nil nil)) (12659 . 12672) (#("vec3(${1:x}, ${2:y}, ${3:z})$0" 0 30 (fontified nil)) . 12659) (12659 . 12689) (#("vec" 0 3 (fontified nil)) . 12659) (12659 . 12662) (#("vec3(…)" 0 7 (fontified nil)) . -12659) (12659 . 12666) (#("vec" 0 3 (fontified t)) . -12659) (undo-tree-id9495 . -3) (undo-tree-id9496 . -1) (undo-tree-id9497 . -1) (undo-tree-id9498 . -1) (undo-tree-id9499 . -2) (undo-tree-id9500 . -2) (undo-tree-id9501 . -3) (undo-tree-id9502 . -3) (undo-tree-id9503 . -3) (undo-tree-id9504 . -3) (undo-tree-id9505 . -3) 12662) nil (26014 13838 589034 0) 0 nil])
([nil nil ((apply yas--snippet-revive 12659 12672 #s(yas--snippet nil (#s(yas--field 1 12664 12665 nil nil nil nil #s(yas--field 2 12667 12668 nil nil nil nil #s(yas--field 3 12670 12671 nil nil nil nil #s(yas--exit 12672 nil)))) #s(yas--field 2 12667 12668 nil nil nil nil #s(yas--field 3 12670 12671 nil nil nil nil #s(yas--exit 12672 nil))) #s(yas--field 3 12670 12671 nil nil nil nil #s(yas--exit 12672 nil))) #s(yas--exit 12672 nil) 90 nil #s(yas--field 1 12664 12665 nil nil nil nil #s(yas--field 2 12667 12668 nil nil nil nil #s(yas--field 3 12670 12671 nil nil nil nil #s(yas--exit 12672 nil)))) nil nil))) nil (26014 13838 589020 0) 0 nil])
([nil nil ((12659 . 12660)) nil (26014 13838 589019 0) 0 nil])
([nil nil ((#("vec3(x, y, z)" 0 4 (face font-lock-type-face fontified t) 4 5 (face (rainbow-delimiters-depth-7-face) fontified t) 5 12 (fontified t) 12 13 (face (rainbow-delimiters-depth-7-face) fontified t)) . 12660) (undo-tree-id9470 . -13) (undo-tree-id9471 . -13) (undo-tree-id9472 . -5) (undo-tree-id9473 . -5) (undo-tree-id9474 . -5) (undo-tree-id9475 . -5) (undo-tree-id9476 . -5) (undo-tree-id9477 . -5) (undo-tree-id9478 . -5) (undo-tree-id9479 . -5) (undo-tree-id9480 . -5) (undo-tree-id9481 . -5) (undo-tree-id9482 . -5) (undo-tree-id9483 . -5) (undo-tree-id9484 . -5) (undo-tree-id9485 . -5) (undo-tree-id9486 . -5) (undo-tree-id9487 . -4) (undo-tree-id9488 . -4) (undo-tree-id9489 . -4) (undo-tree-id9490 . -3) (undo-tree-id9491 . -2) (undo-tree-id9492 . -1) (undo-tree-id9493 . 13) (undo-tree-id9494 . -13)) nil (26014 13838 589017 0) 0 nil])
([nil nil ((#("K" 0 1 (face font-lock-type-face fontified t)) . -12659) (undo-tree-id9437 . -1) (undo-tree-id9438 . -1) (undo-tree-id9439 . -1) (undo-tree-id9440 . -1) (undo-tree-id9441 . -1) (undo-tree-id9442 . -1) (undo-tree-id9443 . -1) (undo-tree-id9444 . -1) (undo-tree-id9445 . -1) (undo-tree-id9446 . -1) (undo-tree-id9447 . -1) (undo-tree-id9448 . -1) (undo-tree-id9449 . -1) (undo-tree-id9450 . -1) (undo-tree-id9451 . -1) (undo-tree-id9452 . -1) (undo-tree-id9453 . -1) (undo-tree-id9454 . -1) (undo-tree-id9455 . -1) (undo-tree-id9456 . -1) (undo-tree-id9457 . -1) (undo-tree-id9458 . -1) (undo-tree-id9459 . -1) (undo-tree-id9460 . -1) (undo-tree-id9461 . -1) (undo-tree-id9462 . -1) (undo-tree-id9463 . -1) (undo-tree-id9464 . -1) (undo-tree-id9465 . -1) (undo-tree-id9466 . -1) (undo-tree-id9467 . -1) (undo-tree-id9468 . -1) (undo-tree-id9469 . -1) 12660) nil (26014 13838 588991 0) 0 nil])
([nil nil ((12659 . 12662)) nil (26014 13838 588957 0) 0 nil])
([nil nil ((12659 . 12666) (#("Vec" 0 3 (fontified nil)) . 12659) (12659 . 12662) (#("Vector3" 0 7 (fontified nil)) . -12659) (12659 . 12666) (#("Vec" 0 3 (face font-lock-type-face fontified t)) . -12659) (undo-tree-id9426 . -3) (undo-tree-id9427 . -1) (undo-tree-id9428 . -1) (undo-tree-id9429 . -2) (undo-tree-id9430 . -2) (undo-tree-id9431 . -2) (undo-tree-id9432 . -3) (undo-tree-id9433 . -3) (undo-tree-id9434 . -3) (undo-tree-id9435 . -3) (undo-tree-id9436 . -3) 12662) nil (26014 13838 588955 0) 0 nil])
([nil nil ((12666 . 12669)) nil (26014 13838 588941 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 12672 12675 nil nil nil t #s(yas--field 2 12677 12678 nil nil nil nil #s(yas--field 3 12680 12681 nil nil nil nil #s(yas--exit 12682 nil)))) #s(yas--field 2 12677 12678 nil nil nil nil #s(yas--field 3 12680 12681 nil nil nil nil #s(yas--exit 12682 nil))) #s(yas--field 3 12680 12681 nil nil nil nil #s(yas--exit 12682 nil))) #s(yas--exit 12682 nil) 91 nil #s(yas--field 1 12672 12675 nil nil nil t #s(yas--field 2 12677 12678 nil nil nil nil #s(yas--field 3 12680 12681 nil nil nil nil #s(yas--exit 12682 nil)))) nil nil)) (12668 . 12680) (#("new(${1:x}, ${2:y}, ${3:z})$0" 0 29 (fontified nil)) . 12668) (12668 . 12697) (#("n" 0 1 (fontified nil)) . 12668) (12668 . 12669) (#("new(…)" 0 6 (fontified nil)) . -12668) (12668 . 12674) (#("n" 0 1 (fontified t)) . -12668) (undo-tree-id9420 . -1) (undo-tree-id9421 . -1) (undo-tree-id9422 . -1) (undo-tree-id9423 . -1) (undo-tree-id9424 . -1) (undo-tree-id9425 . -1) 12669) nil (26014 13838 588938 0) 0 nil])
([nil nil ((12673 . 12675) (#("x" 0 1 (fontified nil)) . 12673) (undo-tree-id9419 . -1) (12672 . 12673)) nil (26014 13838 588929 0) 0 nil])
([nil nil ((apply yas--snippet-revive 12668 12682 #s(yas--snippet nil (#s(yas--field 1 12672 12675 nil nil nil t #s(yas--field 2 12677 12678 nil nil nil nil #s(yas--field 3 12680 12681 nil nil nil nil #s(yas--exit 12682 nil)))) #s(yas--field 2 12677 12678 nil nil nil nil #s(yas--field 3 12680 12681 nil nil nil nil #s(yas--exit 12682 nil))) #s(yas--field 3 12680 12681 nil nil nil nil #s(yas--exit 12682 nil))) #s(yas--exit 12682 nil) 91 nil #s(yas--field 1 12672 12675 nil nil nil t #s(yas--field 2 12677 12678 nil nil nil nil #s(yas--field 3 12680 12681 nil nil nil nil #s(yas--exit 12682 nil)))) nil nil))) nil (26014 13838 588926 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -12676) (undo-tree-id9411 . -1) (undo-tree-id9412 . -1) (undo-tree-id9413 . -1) (undo-tree-id9414 . -1) (undo-tree-id9415 . -1) (#("y" 0 1 (fontified t)) . -12677) (undo-tree-id9416 . -1) (undo-tree-id9417 . -1) (undo-tree-id9418 . -1) 12678) nil (26014 13838 588924 0) 0 nil])
([nil nil ((12676 . 12680)) nil (26014 13838 588915 0) 0 nil])
([nil nil ((#("z" 0 1 (fontified t)) . -12682) (undo-tree-id9408 . -1) (undo-tree-id9409 . -1) (undo-tree-id9410 . -1) 12683) nil (26014 13838 588913 0) 0 nil])
([nil nil ((12682 . 12685)) nil (26014 13838 588902 0) 0 nil])
([nil nil ((12686 . 12687)) nil (26014 13838 588898 0) 0 nil])
([nil nil ((12755 . 12758) (t 26014 13838 630686 154000)) nil (26014 13842 843012 0) 0 nil])
([nil nil ((12756 . 12763) (#("sc" 0 2 (fontified nil)) . 12756) (12756 . 12758) (#("scaling" 0 7 (fontified nil)) . -12756) (12756 . 12763) (#("sc" 0 2 (fontified t)) . -12756) (undo-tree-id9519 . -2) (undo-tree-id9520 . -1) (undo-tree-id9521 . -2) (undo-tree-id9522 . -2) 12758) nil (26014 13842 843008 0) 0 nil])
([nil nil ((12830 . 12838) (#("        " 0 8 (fontified nil)) . 12829) (undo-tree-id9523 . -8) (undo-tree-id9524 . -8) (undo-tree-id9525 . -8) (12828 . 12838) (t 26014 13842 882681 195000)) nil (26014 13878 547998 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 12917 . 12918) (nil fontified nil 12838 . 12918) (12838 . 12918)) nil (26014 13878 547988 0) 0 nil])
([nil nil ((12918 . 12926)) nil (26014 13878 547984 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 12944 . 12945) (nil fontified nil 12926 . 12945) (12926 . 12945) (t 26014 13878 587329 513000)) nil (26014 13905 18200 0) 0 nil])
([nil nil ((12945 . 12948)) nil (26014 13905 18198 0) 0 nil])
([nil nil ((12948 . 12951)) nil (26014 13905 18197 0) 0 nil])
([nil nil ((#("I" 0 1 (face font-lock-type-face fontified t)) . -12948) (undo-tree-id9545 . -1) (undo-tree-id9546 . -1) (undo-tree-id9547 . -1) (undo-tree-id9548 . -1) (undo-tree-id9549 . -1) (undo-tree-id9550 . -1) (undo-tree-id9551 . -1) (undo-tree-id9552 . -1) (undo-tree-id9553 . -1) (undo-tree-id9554 . -1) (undo-tree-id9555 . -1) (undo-tree-id9556 . -1) (undo-tree-id9557 . -1) (undo-tree-id9558 . -1) (undo-tree-id9559 . -1) (undo-tree-id9560 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -12949) (undo-tree-id9561 . -1) (undo-tree-id9562 . -1) (undo-tree-id9563 . -1) (undo-tree-id9564 . -1) (undo-tree-id9565 . -1) (undo-tree-id9566 . -1) (undo-tree-id9567 . -1) (undo-tree-id9568 . -1) (undo-tree-id9569 . -1) (undo-tree-id9570 . -1) (undo-tree-id9571 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -12950) (undo-tree-id9572 . -1) (undo-tree-id9573 . -1) (undo-tree-id9574 . -1) (undo-tree-id9575 . -1) (undo-tree-id9576 . -1) 12951) nil (26014 13905 18194 0) 0 nil])
([nil nil ((12948 . 12956)) nil (26014 13905 18161 0) 0 nil])
([nil nil ((12948 . 12956) (#("instance" 0 8 (fontified nil)) . 12948) (12948 . 12956) (#("instance" 0 8 (fontified t)) . -12948) (undo-tree-id9526 . -8) (undo-tree-id9527 . -1) (undo-tree-id9528 . -2) (undo-tree-id9529 . -2) (undo-tree-id9530 . -3) (undo-tree-id9531 . -3) (undo-tree-id9532 . -4) (undo-tree-id9533 . -4) (undo-tree-id9534 . -5) (undo-tree-id9535 . -5) (undo-tree-id9536 . -6) (undo-tree-id9537 . -6) (undo-tree-id9538 . -7) (undo-tree-id9539 . -7) (undo-tree-id9540 . -8) (undo-tree-id9541 . -8) (undo-tree-id9542 . -8) (undo-tree-id9543 . -8) (undo-tree-id9544 . -8) 12956) nil (26014 13905 18159 0) 0 nil])
([nil nil ((12956 . 12958)) nil (26014 13905 18128 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 12982 12989 nil nil nil nil #s(yas--field 2 12991 13005 nil nil nil nil #s(yas--exit 13006 nil))) #s(yas--field 2 12991 13005 nil nil nil nil #s(yas--exit 13006 nil))) #s(yas--exit 13006 nil) 92 nil #s(yas--field 1 12982 12989 nil nil nil nil #s(yas--field 2 12991 13005 nil nil nil nil #s(yas--exit 13006 nil))) nil nil)) (12958 . 13006) (#("create_instances_buffer(${1:&device}, ${2:instances_data})$0" 0 60 (fontified nil)) . 12958) (12958 . 13018) (#("create_instances_buffer(…)" 0 26 (fontified nil)) . -12958) (12958 . 12984)) nil (26014 13905 18126 0) 0 nil])
([nil nil ((apply yas--snippet-revive 12958 13006 #s(yas--snippet nil (#s(yas--field 1 12982 12989 nil nil nil nil #s(yas--field 2 12991 13005 nil nil nil nil #s(yas--exit 13006 nil))) #s(yas--field 2 12991 13005 nil nil nil nil #s(yas--exit 13006 nil))) #s(yas--exit 13006 nil) 92 nil #s(yas--field 1 12982 12989 nil nil nil nil #s(yas--field 2 12991 13005 nil nil nil nil #s(yas--exit 13006 nil))) nil nil))) nil (26014 13905 18124 0) 0 nil])
([nil nil ((13006 . 13007)) nil (26014 13905 18120 0) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -12999) (undo-tree-id9577 . -1) (undo-tree-id9578 . -1) (undo-tree-id9579 . -1) (undo-tree-id9580 . -1) (undo-tree-id9581 . -1) (undo-tree-id9582 . -1) (undo-tree-id9583 . -1) (undo-tree-id9584 . -1) (undo-tree-id9585 . -1) (undo-tree-id9586 . -1) 13000 (t 26014 13905 58284 712000)) nil (26014 13916 514797 0) 0 nil])
([nil nil ((12991 . 12992) (t 26014 13916 554866 403000)) nil (26014 13925 617137 0) 0 nil])
([nil nil ((13562 . 13574) (t 26014 13925 657190 15000)) nil (26014 13943 978390 0) 0 nil])
([nil nil ((13574 . 13577)) nil (26014 13943 978389 0) 0 nil])
([nil nil ((13574 . 13583) (#("ins" 0 3 (fontified nil)) . 13574) (13574 . 13577) (#("instances" 0 9 (fontified nil)) . -13574) (13574 . 13583) (#("ins" 0 3 (fontified t)) . -13574) (undo-tree-id9618 . -3) (undo-tree-id9619 . -1) (undo-tree-id9620 . -2) (undo-tree-id9621 . -2) (undo-tree-id9622 . -3) (undo-tree-id9623 . -3) (undo-tree-id9624 . -3) (undo-tree-id9625 . -3) (undo-tree-id9626 . -3) 13577) nil (26014 13943 978387 0) 0 nil])
([nil nil ((#("instances" 0 9 (fontified t)) . -13574) (undo-tree-id9609 . -9) (undo-tree-id9610 . -9) (undo-tree-id9611 . -9) (undo-tree-id9612 . -9) (undo-tree-id9613 . -9) (undo-tree-id9614 . -9) (undo-tree-id9615 . -9) (undo-tree-id9616 . -9) (undo-tree-id9617 . -9) 13583) nil (26014 13943 978375 0) 0 nil])
([nil nil ((13574 . 13576)) nil (26014 13943 978365 0) 0 nil])
([nil nil ((13574 . 13583) (#("in" 0 2 (fontified nil)) . 13574) (13574 . 13576) (#("instances" 0 9 (fontified nil)) . -13574) (13574 . 13583) (#("in" 0 2 (face font-lock-keyword-face fontified t)) . -13574) (undo-tree-id9602 . -2) (undo-tree-id9603 . -1) (undo-tree-id9604 . -2) (undo-tree-id9605 . -2) (undo-tree-id9606 . -2) (undo-tree-id9607 . -2) (undo-tree-id9608 . -2) 13576) nil (26014 13943 978363 0) 0 nil])
([nil nil ((13583 . 13584)) nil (26014 13943 978353 0) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -13583) (undo-tree-id9598 . -1) (undo-tree-id9599 . -1) (undo-tree-id9600 . -1) (undo-tree-id9601 . -1) 13584) nil (26014 13943 978352 0) 0 nil])
([nil nil ((13583 . 13584)) nil (26014 13943 978347 0) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -13583) (undo-tree-id9594 . -1) (undo-tree-id9595 . -1) (undo-tree-id9596 . -1) (undo-tree-id9597 . -1) 13584) nil (26014 13943 978345 0) 0 nil])
([nil nil ((13583 . 13584)) nil (26014 13943 978340 0) 0 nil])
([nil nil ((13584 . 13597)) nil (26014 13943 978339 0) 0 nil])
([nil nil ((13597 . 13599)) nil (26014 13943 978338 0) 0 nil])
([nil nil ((13597 . 13612) (#("in" 0 2 (fontified nil)) . 13597) (13597 . 13599) (#("instance_buffer" 0 15 (fontified nil)) . -13597) (13597 . 13612) (#("in" 0 2 (face font-lock-keyword-face fontified t)) . -13597) (undo-tree-id9587 . -2) (undo-tree-id9588 . -1) (undo-tree-id9589 . -2) (undo-tree-id9590 . -2) (undo-tree-id9591 . -2) (undo-tree-id9592 . -2) (undo-tree-id9593 . -2) 13599) nil (26014 13943 978335 0) 0 nil])
([nil nil ((13612 . 13613)) nil (26014 13943 978317 0) 0 nil])
([nil nil ((15691 . 15692) (t 26014 13944 19223 77000)) nil (26014 13964 196413 0) 0 nil])
([nil nil ((#("'" 0 1 (fontified t)) . -15691) (undo-tree-id9629 . -1) (undo-tree-id9630 . -1) (undo-tree-id9631 . -1) (undo-tree-id9632 . -1) (undo-tree-id9633 . -1) (undo-tree-id9634 . -1) (undo-tree-id9635 . -1) (undo-tree-id9636 . -1) (undo-tree-id9637 . -1) (undo-tree-id9638 . -1) (undo-tree-id9639 . -1) (undo-tree-id9640 . -1) (undo-tree-id9641 . -1) 15692) nil (26014 13970 109798 0) 0 nil] [nil nil ((nil rear-nonsticky nil 15757 . 15758) (nil fontified nil 15692 . 15758) (15692 . 15758)) ((#("render_pass.set_vertex_buffer(1, self.instance_buffer.slice(..));
" 0 11 (face font-lock-variable-name-face fontified nil) 11 29 (fontified nil) 29 30 (face (rainbow-delimiters-depth-3-face) fontified nil) 30 33 (fontified nil) 33 37 (face font-lock-keyword-face fontified nil) 37 59 (fontified nil) 59 60 (face (rainbow-delimiters-depth-4-face) fontified nil) 60 62 (fontified nil) 62 63 (face (rainbow-delimiters-depth-4-face) fontified nil) 63 64 (face (rainbow-delimiters-depth-3-face) fontified nil) 64 65 (fontified nil) 65 66 (rear-nonsticky nil fontified nil)) . 15692) (undo-tree-id9627 . -66) (undo-tree-id9628 . -66) (nil rear-nonsticky t 15757 . 15758)) (26014 13964 195948 0) 0 nil])
([nil nil ((15691 . 15700)) nil (26014 13970 109777 0) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 15765 . 15766) (nil fontified nil 15700 . 15766) (15700 . 15766)) nil (26014 13970 109773 0) 0 nil])
([nil nil ((15868 . 15876) (#("        " 0 8 (fontified nil)) . 15867) (undo-tree-id9651 . -8) (undo-tree-id9652 . -8) (undo-tree-id9653 . -8) (15866 . 15876) (t 26014 13970 151354 446000)) nil (26014 13986 559612 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 15955 . 15956) (nil fontified nil 15876 . 15956) (15876 . 15956)) nil (26014 13986 559607 0) 0 nil])
([nil nil ((#("        render_pass.draw_indexed(0..self.num_indices, 0, 0..1); // 2." 0 26 (fontified t) 26 27 (fontified t) 27 32 (fontified t) 32 33 (face (rainbow-delimiters-depth-3-face) fontified t) 33 36 (fontified t) 36 40 (face font-lock-keyword-face fontified t) 40 46 (fontified t) 46 59 (fontified t) 59 61 (fontified t) 61 62 (face (rainbow-delimiters-depth-3-face) fontified t) 62 64 (fontified t) 64 67 (face font-lock-comment-delimiter-face fontified t) 67 69 (face font-lock-comment-face fontified t)) . 15957) (undo-tree-id9643 . -15) (undo-tree-id9644 . -69) (undo-tree-id9645 . -69) (undo-tree-id9646 . -69) (undo-tree-id9647 . -69) (undo-tree-id9648 . -69) (undo-tree-id9649 . -69) (undo-tree-id9650 . -69)) nil (26014 13986 559605 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 15957) (undo-tree-id9642 . -1)) nil (26014 13986 559592 0) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -7008) (undo-tree-id9654 . -1) (undo-tree-id9655 . -1) (undo-tree-id9656 . -1) (undo-tree-id9657 . -1) (undo-tree-id9658 . -1) (undo-tree-id9659 . -1) (undo-tree-id9660 . -1) (undo-tree-id9661 . -1) 7009 (t 26014 13986 600457 523000)) nil (26014 14097 457603 0) 0 nil])
([nil nil ((7008 . 7009)) nil (26014 14097 457576 0) 0 nil])
([nil nil ((14089 . 14091) (t 26014 14097 498728 449000)) nil (26014 14743 6129 0) 0 nil])
([nil nil ((14152 . 14160) (14089 . 14097) (14143 . 14144)) nil (26014 14743 6128 0) 0 nil])
([nil nil ((14160 . 14168)) nil (26014 14743 6127 0) 0 nil])
([nil nil ((14166 . 14171) (#("ev" 0 2 (fontified nil)) . 14166) (14166 . 14168) (#("event" 0 5 (fontified nil)) . -14166) (14166 . 14171) (#("ev" 0 2 (fontified t)) . -14166) (undo-tree-id9770 . -2) 14168) nil (26014 14743 6125 0) 0 nil])
([nil nil ((14171 . 14174)) nil (26014 14743 6122 0) 0 nil])
([nil nil ((14175 . 14183) (#("            " 0 12 (fontified nil)) . 14174) (undo-tree-id9769 . -8) (14182 . 14186) (14173 . 14183)) nil (26014 14743 6120 0) 0 nil])
([nil nil ((14174 . 14186)) nil (26014 14743 6118 0) 0 nil])
([nil nil ((14186 . 14187)) nil (26014 14743 6117 0) 0 nil])
([nil nil ((#("W" 0 1 (face font-lock-type-face fontified t)) . -14186) (undo-tree-id9768 . -1) 14187) nil (26014 14743 6115 0) 0 nil])
([nil nil ((14186 . 14187)) nil (26014 14743 6113 0) 0 nil])
([nil nil ((14187 . 14189)) nil (26014 14743 6112 0) 0 nil])
([nil nil ((14186 . 14197) (#("Win" 0 3 (fontified nil)) . 14186) (14186 . 14189) (#("WindowEvent" 0 11 (fontified nil)) . -14186) (14186 . 14197) (#("Win" 0 3 (face font-lock-type-face fontified t)) . -14186) (undo-tree-id9767 . -3) 14189) nil (26014 14743 6111 0) 0 nil])
([nil nil ((14197 . 14200)) nil (26014 14743 6107 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 14224 14224 nil nil nil nil #s(yas--field 2 14231 14231 nil nil nil nil #s(yas--field 3 14245 14245 nil nil nil nil #s(yas--exit 14247 nil)))) #s(yas--field 2 14231 14231 nil nil nil nil #s(yas--field 3 14245 14245 nil nil nil nil #s(yas--exit 14247 nil))) #s(yas--field 3 14245 14245 nil nil nil nil #s(yas--exit 14247 nil))) #s(yas--exit 14247 nil) 93 nil #s(yas--field 1 14224 14224 nil nil nil nil #s(yas--field 2 14231 14231 nil nil nil nil #s(yas--field 3 14245 14245 nil nil nil nil #s(yas--exit 14247 nil)))) nil nil)) (14199 . 14247) (#("KeyboardInput { device_id$1, event$2, is_synthetic$3 }$0" 0 56 (fontified nil)) . 14199) (14199 . 14255) (#("K" 0 1 (fontified nil)) . 14199) (14199 . 14200) (#("KeyboardInput {…}" 0 17 (fontified nil)) . -14199) (14199 . 14216) (#("K" 0 1 (face font-lock-type-face fontified t)) . -14199) (undo-tree-id9766 . -1) 14200) nil (26014 14743 6106 0) 0 nil])
([nil nil ((apply yas--snippet-revive 14199 14247 #s(yas--snippet nil (#s(yas--field 1 14224 14224 nil nil nil nil #s(yas--field 2 14231 14231 nil nil nil nil #s(yas--field 3 14245 14245 nil nil nil nil #s(yas--exit 14247 nil)))) #s(yas--field 2 14231 14231 nil nil nil nil #s(yas--field 3 14245 14245 nil nil nil nil #s(yas--exit 14247 nil))) #s(yas--field 3 14245 14245 nil nil nil nil #s(yas--exit 14247 nil))) #s(yas--exit 14247 nil) 93 nil #s(yas--field 1 14224 14224 nil nil nil nil #s(yas--field 2 14231 14231 nil nil nil nil #s(yas--field 3 14245 14245 nil nil nil nil #s(yas--exit 14247 nil)))) nil nil))) nil (26014 14743 6101 0) 0 nil])
([nil nil ((#("id, " 0 4 (fontified t)) . -14222) (undo-tree-id9764 . -4) (undo-tree-id9765 . -2) 14226) nil (26014 14743 6100 0) 0 nil])
([nil nil ((#("device_" 0 7 (fontified t)) . -14215) (undo-tree-id9762 . -7) (undo-tree-id9763 . -7) 14222) nil (26014 14743 6097 0) 0 nil])
([nil nil ((#("synthetic" 0 9 (fontified t)) . -14225) (undo-tree-id9761 . -9) 14234) nil (26014 14743 6094 0) 0 nil])
([nil nil ((#("is_" 0 3 (fontified t)) . -14222) (undo-tree-id9759 . -3) (undo-tree-id9760 . -3) 14225) nil (26014 14743 6091 0) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -14220) (undo-tree-id9755 . -1) (undo-tree-id9756 . -1) (#(" " 0 1 (fontified t)) . -14221) (undo-tree-id9757 . -1) (undo-tree-id9758 . -1) 14222) nil (26014 14743 6087 0) 0 nil])
([nil nil ((14222 . 14230)) nil (26014 14743 6081 0) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -14229) (undo-tree-id9754 . -1) 14230) nil (26014 14743 6080 0) 0 nil])
([nil nil ((14229 . 14242)) nil (26014 14743 6078 0) 0 nil])
([nil nil ((14242 . 14243)) nil (26014 14743 6077 0) 0 nil])
([nil nil ((14243 . 14249)) nil (26014 14743 6076 0) 0 nil])
([nil nil ((14248 . 14249)) nil (26014 14743 6075 0) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -14248) (undo-tree-id9753 . -1) 14249) nil (26014 14743 6074 0) 0 nil])
([nil nil ((#("{" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -14247) (undo-tree-id9751 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -14248) (undo-tree-id9752 . -1) 14249) nil (26014 14743 6071 0) 0 nil])
([nil nil ((14247 . 14250)) nil (26014 14743 6067 0) 0 nil])
([nil nil ((apply yas--snippet-revive 14247 14252 #s(yas--snippet nil nil nil 94 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 94 nil nil nil nil)) (14247 . 14252) (#("false" 0 5 (fontified nil)) . 14247) (14247 . 14252) (#("fal" 0 3 (fontified nil)) . 14247) (14247 . 14250) (#("false" 0 5 (fontified nil)) . -14247) (14247 . 14252) (#("fal" 0 3 (fontified t)) . -14247) (undo-tree-id9750 . -3) 14250) nil (26014 14743 6065 0) 0 nil])
([nil nil ((14229 . 14241) (#("                " 0 16 (fontified nil)) . 14228) (14228 . 14244) (#("            " 0 12 (fontified nil)) . 14228) (undo-tree-id9749 . -12) (14227 . 14241)) nil (26014 14743 6060 0) 0 nil])
([nil nil ((14230 . 14242) (#("                " 0 16 (fontified nil)) . 14229) (14229 . 14245) (#("            " 0 12 (fontified nil)) . 14229) (undo-tree-id9748 . -12) (14241 . 14242)) nil (26014 14743 6057 0) 0 nil])
([nil nil ((14229 . 14245)) nil (26014 14743 6054 0) 0 nil])
([nil nil ((14222 . 14234) (#("                                         " 0 41 (fontified nil)) . 14221) (14221 . 14262) (#("            " 0 12 (fontified nil)) . 14221) (undo-tree-id9746 . -12) (14221 . 14234) (#(" " 0 1 (fontified nil)) . 14220) (undo-tree-id9747 . -1) (14221 . 14222)) nil (26014 14743 6052 0) 0 nil])
([nil nil ((14215 . 14231) (#(" " 0 1 (fontified nil)) . 14214) (undo-tree-id9745 . -1) (14215 . 14216)) nil (26014 14743 6047 0) 0 nil])
([nil nil ((14236 . 14239)) nil (26014 14743 6045 0) 0 nil])
([nil nil ((14238 . 14246) (#("K" 0 1 (fontified nil)) . 14238) (14238 . 14239) (#("KeyEvent" 0 8 (fontified nil)) . -14238) (14238 . 14246) (#("K" 0 1 (face font-lock-type-face fontified t)) . -14238) (undo-tree-id9744 . -1) 14239) nil (26014 14743 6043 0) 0 nil])
([nil nil ((14246 . 14249)) nil (26014 14743 6039 0) 0 nil])
([nil nil ((14250 . 14266) (#("                    " 0 20 (fontified nil)) . 14249) (undo-tree-id9743 . -16) (14265 . 14269) (14248 . 14266)) nil (26014 14743 6038 0) 0 nil])
([nil nil ((14249 . 14269)) nil (26014 14743 6035 0) 0 nil])
([nil nil ((14269 . 14271)) nil (26014 14743 6034 0) 0 nil])
([nil nil ((14269 . 14274) (#("st" 0 2 (fontified nil)) . 14269) (14269 . 14271) (#("state" 0 5 (fontified nil)) . -14269) (14269 . 14274) (#("st" 0 2 (fontified t)) . -14269) (undo-tree-id9742 . -2) 14271) nil (26014 14743 6033 0) 0 nil])
([nil nil ((14274 . 14276)) nil (26014 14743 6029 0) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -14275) (undo-tree-id9740 . -1) (undo-tree-id9741 . -1) 14276) nil (26014 14743 6028 0) 0 nil])
([nil nil ((14275 . 14277)) nil (26014 14743 6025 0) 0 nil])
([nil nil ((#("K" 0 1 (face font-lock-type-face fontified t)) . -14276) (undo-tree-id9739 . -1) 14277) nil (26014 14743 6024 0) 0 nil])
([nil nil ((14276 . 14279)) nil (26014 14743 6021 0) 0 nil])
([nil nil ((14279 . 14280)) nil (26014 14743 6020 0) 0 nil])
([nil nil ((#("M" 0 1 (face font-lock-type-face fontified t)) . -14279) (undo-tree-id9738 . -1) 14280) nil (26014 14743 6019 0) 0 nil])
([nil nil ((14279 . 14284)) nil (26014 14743 6017 0) 0 nil])
([nil nil ((#("m" 0 1 (face font-lock-type-face fontified t)) . -14282) (undo-tree-id9736 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -14283) (undo-tree-id9737 . -1) 14284) nil (26014 14743 6016 0) 0 nil])
([nil nil ((14282 . 14290)) nil (26014 14743 6012 0) 0 nil])
([nil nil ((apply yas--snippet-revive 14290 14297 #s(yas--snippet nil nil #s(yas--exit 14297 nil) 95 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 14297 nil) 95 nil nil nil nil)) (14290 . 14297) (#("Pressed$0" 0 9 (fontified nil)) . 14290) (14290 . 14299) (#("Pressed" 0 7 (fontified nil)) . -14290) (14290 . 14297)) nil (26014 14743 6010 0) 0 nil])
([nil nil ((14297 . 14298)) nil (26014 14743 6008 0) 0 nil])
([nil nil ((14298 . 14319)) nil (26014 14743 6007 0) 0 nil])
([nil nil ((14319 . 14320)) nil (26014 14743 6006 0) 0 nil])
([nil nil ((#("P" 0 1 (face font-lock-type-face fontified t)) . -14319) (undo-tree-id9734 . -1) (undo-tree-id9735 . -1) 14320) nil (26014 14743 6005 0) 0 nil])
([nil nil ((14319 . 14321)) nil (26014 14743 6002 0) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -14320) (undo-tree-id9732 . -1) (undo-tree-id9733 . -1) 14321) nil (26014 14743 6000 0) 0 nil])
([nil nil ((14320 . 14321)) nil (26014 14743 5997 0) 0 nil])
([nil nil ((14319 . 14331) (#("ph" 0 2 (fontified nil)) . 14319) (14319 . 14321) (#("physical_key" 0 12 (fontified nil)) . -14319) (14319 . 14331) (#("ph" 0 2 (fontified t)) . -14319) (undo-tree-id9730 . -2) (undo-tree-id9731 . -2) 14321) nil (26014 14743 5996 0) 0 nil])
([nil nil ((14331 . 14332)) nil (26014 14743 5991 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -14331) (undo-tree-id9728 . -1) (undo-tree-id9729 . -1) 14332) nil (26014 14743 5990 0) 0 nil])
([nil nil ((14331 . 14334)) nil (26014 14743 5987 0) 0 nil])
([nil nil ((14333 . 14341) (#("K" 0 1 (fontified nil)) . 14333) (14333 . 14334) (#("KeyEvent" 0 8 (fontified nil)) . -14333) (14333 . 14341) (#("K" 0 1 (face font-lock-type-face fontified t)) . -14333) (undo-tree-id9726 . -1) (undo-tree-id9727 . -1) 14334) nil (26014 14743 5985 0) 0 nil])
([nil nil ((14341 . 14347)) nil (26014 14743 5980 0) 0 nil])
([nil nil ((14347 . 14348)) nil (26014 14743 5979 0) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-type-face fontified t)) . -14346) (undo-tree-id9722 . -1) (undo-tree-id9723 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -14347) (undo-tree-id9724 . -1) (undo-tree-id9725 . -1) 14348) nil (26014 14743 5978 0) 0 nil])
([nil nil ((14346 . 14353)) nil (26014 14743 5973 0) 0 nil])
([nil nil ((#("C" 0 1 (face font-lock-type-face fontified t)) . -14352) (undo-tree-id9720 . -1) (undo-tree-id9721 . -1) 14353) nil (26014 14743 5971 0) 0 nil])
([nil nil ((#("KeyCode::" 0 7 (face font-lock-type-face fontified t) 7 9 (fontified t)) . -14343) (undo-tree-id9718 . -9) (undo-tree-id9719 . -9) 14352) nil (26014 14743 5968 0) 0 nil])
([nil nil ((#("KeyEvent::" 0 8 (face font-lock-type-face fontified t) 8 10 (fontified t)) . -14333) (undo-tree-id9716 . -10) (undo-tree-id9717 . -10) 14343) nil (26014 14743 5964 0) 0 nil])
([nil nil ((14333 . 14344)) nil (26014 14743 5961 0) 0 nil])
([nil nil ((14344 . 14346)) nil (26014 14743 5960 0) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-type-face fontified t)) . -14345) (undo-tree-id9707 . -1) (undo-tree-id9708 . -1) (undo-tree-id9709 . -1) (undo-tree-id9710 . -1) (undo-tree-id9711 . -1) (undo-tree-id9712 . -1) (undo-tree-id9713 . -1) (undo-tree-id9714 . -1) (undo-tree-id9715 . -1) 14346) nil (26014 14743 5959 0) 0 nil])
([nil nil ((#("Cod" 0 3 (face font-lock-type-face fontified t)) . -14342) (undo-tree-id9695 . -3) (undo-tree-id9696 . -3) (undo-tree-id9697 . -3) (undo-tree-id9698 . -3) (undo-tree-id9699 . -3) (undo-tree-id9700 . -3) (undo-tree-id9701 . -3) (undo-tree-id9702 . -3) (undo-tree-id9703 . -3) (undo-tree-id9704 . -3) (undo-tree-id9705 . -3) (undo-tree-id9706 . -3) 14345) nil (26014 14743 5945 0) 0 nil])
([nil nil ((#("KeyCode::" 0 7 (face font-lock-type-face fontified t) 7 9 (fontified t)) . -14333) (undo-tree-id9682 . -9) (undo-tree-id9683 . -9) (undo-tree-id9684 . -9) (undo-tree-id9685 . -9) (undo-tree-id9686 . -9) (undo-tree-id9687 . -9) (undo-tree-id9688 . -9) (undo-tree-id9689 . -9) (undo-tree-id9690 . -9) (undo-tree-id9691 . -9) (undo-tree-id9692 . -9) (undo-tree-id9693 . -9) (undo-tree-id9694 . -9) 14342) nil (26014 14743 5931 0) 0 nil])
([nil nil ((14333 . 14346)) nil (26014 14743 5916 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 14351 14365 nil nil nil t #s(yas--exit 14366 nil))) #s(yas--exit 14366 nil) 96 nil #s(yas--field 1 14351 14365 nil nil nil t #s(yas--exit 14366 nil)) nil nil)) (14346 . 14352) (#("Code($1)$0" 0 10 (fontified nil)) . 14346) (14346 . 14356) (#("Code(…)" 0 7 (fontified nil)) . -14346) (14346 . 14353)) nil (26014 14743 5914 0) 0 nil])
([nil nil ((14351 . 14354)) nil (26014 14743 5912 0) 0 nil])
([nil nil ((14354 . 14355)) nil (26014 14743 5911 0) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-type-face fontified t)) . -14354) (undo-tree-id9675 . -1) (undo-tree-id9676 . -1) (undo-tree-id9677 . -1) (undo-tree-id9678 . -1) (undo-tree-id9679 . -1) (undo-tree-id9680 . -1) (undo-tree-id9681 . -1) 14355) nil (26014 14743 5910 0) 0 nil])
([nil nil ((14354 . 14363)) nil (26014 14743 5901 0) 0 nil])
([nil nil ((apply yas--snippet-revive 14360 14365 #s(yas--snippet nil nil #s(yas--exit 14365 nil) 97 nil nil #s(yas--field 1 14351 14365 nil nil nil t #s(yas--exit 14366 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 14365 nil) 97 nil nil #s(yas--field 1 14351 14365 nil nil nil t #s(yas--exit 14366 nil)) nil)) (14360 . 14365) (#("Space$0" 0 7 (fontified nil)) . 14360) (undo-tree-id9662 . -7) (14360 . 14367) (#("Spa" 0 3 (fontified nil)) . 14360) (undo-tree-id9663 . -3) (14360 . 14363) (#("Space" 0 5 (fontified nil)) . -14360) (undo-tree-id9664 . -5) (14360 . 14365) (#("Spa" 0 3 (face font-lock-type-face fontified t)) . -14360) (undo-tree-id9665 . -3) (undo-tree-id9666 . -3) (undo-tree-id9667 . -1) (undo-tree-id9668 . -1) (undo-tree-id9669 . -1) (undo-tree-id9670 . -2) (undo-tree-id9671 . -2) (undo-tree-id9672 . -3) (undo-tree-id9673 . -3) (undo-tree-id9674 . -3) 14363) nil (26014 14743 5898 0) 0 nil])
([nil nil ((apply yas--snippet-revive 14346 14366 #s(yas--snippet nil (#s(yas--field 1 14351 14365 nil nil nil t #s(yas--exit 14366 nil))) #s(yas--exit 14366 nil) 96 nil #s(yas--field 1 14351 14365 nil nil nil t #s(yas--exit 14366 nil)) nil nil))) nil (26014 14743 5876 0) 0 nil])
([nil nil ((14366 . 14367)) nil (26014 14743 5875 0) 0 nil])
([nil nil ((14367 . 14388)) nil (26014 14743 5873 0) 0 nil])
([nil nil ((14388 . 14390)) nil (26014 14743 5869 0) 0 nil])
([nil nil ((14409 . 14425) (t 26014 14743 48632 810000)) nil (26014 14751 737034 0) 0 nil])
([nil nil ((14408 . 14409)) nil (26014 14751 737033 0) 0 nil])
([nil nil ((14409 . 14426)) nil (26014 14751 737032 0) 0 nil])
([nil nil ((#("                
" 0 16 (fontified t) 16 17 (fontified t)) . 14410) (undo-tree-id9771 . -17) (undo-tree-id9772 . -17) (undo-tree-id9773 . -17) (undo-tree-id9774 . -17) (undo-tree-id9775 . -17) (undo-tree-id9776 . -16) (undo-tree-id9777 . -16) (undo-tree-id9778 . -16) (undo-tree-id9779 . -16) (undo-tree-id9780 . -16) (undo-tree-id9781 . -16) (undo-tree-id9782 . -16) (undo-tree-id9783 . -17)) nil (26014 14751 737029 0) 0 nil])
([nil nil ((14426 . 14428)) nil (26014 14751 737006 0) 0 nil])
([nil nil ((14465 . 14467) (t 26014 14751 779405 121000)) nil (26014 14758 770459 0) 0 nil])
([nil nil ((25 . 51) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 14497 14502 nil nil nil nil #s(yas--exit 14503 nil))) #s(yas--exit 14503 nil) 98 nil #s(yas--field 1 14497 14502 nil nil nil nil #s(yas--exit 14503 nil)) nil nil)) (14465 . 14477) (#("trace(${1:&self})$0" 0 19 (fontified nil)) . 14465) (14465 . 14484) (#("tr" 0 2 (fontified nil)) . 14465) (14465 . 14467) (#("trace(…) (use cgmath::SquareMatrix)" 0 35 (fontified nil)) . -14465) (14465 . 14500) (#("tr" 0 2 (fontified t)) . -14465) (undo-tree-id9814 . -2) (undo-tree-id9815 . -1) (undo-tree-id9816 . -1) (undo-tree-id9817 . -2) (undo-tree-id9818 . -2) 14467) nil (26014 14758 770456 0) 0 nil])
([nil nil ((apply yas--snippet-revive 14491 14503 #s(yas--snippet nil (#s(yas--field 1 14497 14502 nil nil nil nil #s(yas--exit 14503 nil))) #s(yas--exit 14503 nil) 98 nil #s(yas--field 1 14497 14502 nil nil nil nil #s(yas--exit 14503 nil)) nil nil))) nil (26014 14758 770448 0) 0 nil])
([nil nil ((#("                trace(&self)" 0 16 (fontified t) 16 21 (fontified t) 21 22 (face (rainbow-delimiters-depth-5-face) fontified t) 22 23 (face rust-ampersand-face fontified t) 23 27 (face font-lock-keyword-face fontified t) 27 28 (face (rainbow-delimiters-depth-5-face) fontified t)) . 14475) (undo-tree-id9784 . -16) (undo-tree-id9785 . -16) (undo-tree-id9786 . -16) (undo-tree-id9787 . -16) (undo-tree-id9788 . -16) (undo-tree-id9789 . -16) (undo-tree-id9790 . -16) (undo-tree-id9791 . -16) (undo-tree-id9792 . -16) (undo-tree-id9793 . -16) (undo-tree-id9794 . -16) (undo-tree-id9795 . -16) (undo-tree-id9796 . -16) (undo-tree-id9797 . -16) (undo-tree-id9798 . -16) (undo-tree-id9799 . -16) (undo-tree-id9800 . -16) (undo-tree-id9801 . -16) (undo-tree-id9802 . -16) (undo-tree-id9803 . -16) (undo-tree-id9804 . -16) (undo-tree-id9805 . -16) (undo-tree-id9806 . -28) (undo-tree-id9807 . -28) (undo-tree-id9808 . -22) (undo-tree-id9809 . -22) (undo-tree-id9810 . -22) (undo-tree-id9811 . -22) (undo-tree-id9812 . -22) (undo-tree-id9813 . -28)) nil (26014 14758 770445 0) 0 nil])
([nil nil ((14475 . 14491)) nil (26014 14758 770404 0) 0 nil])
([nil nil ((14491 . 14495)) nil (26014 14758 770400 0) 0 nil])
([nil nil ((14474 . 14490) (t 26014 14758 812334 955000)) nil (26014 14910 446307 0) 0 nil])
([nil nil ((14490 . 14495)) nil (26014 14910 446306 0) 0 nil])
([nil nil ((14495 . 14498)) nil (26014 14910 446305 0) 0 nil])
([nil nil ((14495 . 14504) (#("ins" 0 3 (fontified nil)) . 14495) (14495 . 14498) (#("instances" 0 9 (fontified nil)) . -14495) (14495 . 14504) (#("ins" 0 3 (fontified t)) . -14495) (undo-tree-id9851 . -3) 14498) nil (26014 14910 446304 0) 0 nil])
([nil nil ((14504 . 14505)) nil (26014 14910 446300 0) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -14504) (undo-tree-id9850 . -1) 14505) nil (26014 14910 446299 0) 0 nil])
([nil nil ((14504 . 14507)) nil (26014 14910 446297 0) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -14505) (undo-tree-id9848 . -1) (#("m" 0 1 (fontified t)) . -14506) (undo-tree-id9849 . -1) 14507) nil (26014 14910 446295 0) 0 nil])
([nil nil ((14505 . 14506)) nil (26014 14910 446292 0) 0 nil])
([nil nil ((14506 . 14508)) nil (26014 14910 446291 0) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -14504) (undo-tree-id9844 . -1) (#("m" 0 1 (fontified t)) . -14505) (undo-tree-id9845 . -1) (#("a" 0 1 (fontified t)) . -14506) (undo-tree-id9846 . -1) (#("p" 0 1 (fontified t)) . -14507) (undo-tree-id9847 . -1) 14508) nil (26014 14910 446289 0) 0 nil])
([nil nil ((14504 . 14508)) nil (26014 14910 446283 0) 0 nil])
([nil nil ((#("map" 0 3 (fontified t)) . -14505) (undo-tree-id9843 . -3) 14508) nil (26014 14910 446282 0) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -14504) (undo-tree-id9842 . -1) 14505) nil (26014 14910 446279 0) 0 nil])
([nil nil ((14504 . 14507)) nil (26014 14910 446277 0) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -14505) (undo-tree-id9840 . -1) (#("p" 0 1 (fontified t)) . -14506) (undo-tree-id9841 . -1) 14507) nil (26014 14910 446275 0) 0 nil])
([nil nil ((14505 . 14506)) nil (26014 14910 446272 0) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -14505) (undo-tree-id9839 . -1) 14506) nil (26014 14910 446270 0) 0 nil])
([nil nil ((14505 . 14508)) nil (26014 14910 446268 0) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -14504) (undo-tree-id9835 . -1) (#("m" 0 1 (fontified t)) . -14505) (undo-tree-id9836 . -1) (#("a" 0 1 (fontified t)) . -14506) (undo-tree-id9837 . -1) (#("p" 0 1 (fontified t)) . -14507) (undo-tree-id9838 . -1) 14508) nil (26014 14910 446266 0) 0 nil])
([nil nil ((14504 . 14508)) nil (26014 14910 446257 0) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -14505) (undo-tree-id9832 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -14506) (undo-tree-id9833 . -1) (#("t" 0 1 (fontified t)) . -14507) (undo-tree-id9834 . -1) 14508) nil (26014 14910 446256 0) 0 nil])
([nil nil ((14505 . 14509)) nil (26014 14910 446251 0) 0 nil])
([nil nil ((apply yas--snippet-revive 14505 14515 #s(yas--snippet nil nil #s(yas--exit 14515 nil) 99 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 14515 nil) 99 nil nil nil nil)) (14505 . 14515) (#("iter_mut()$0" 0 12 (fontified nil)) . 14505) (14505 . 14517) (#("iter" 0 4 (fontified nil)) . 14505) (14505 . 14509) (#("iter_mut()" 0 10 (fontified nil)) . -14505) (14505 . 14515) (#("iter" 0 4 (fontified t)) . -14505) (undo-tree-id9831 . -4) 14509) nil (26014 14910 446249 0) 0 nil])
([nil nil ((14515 . 14517)) nil (26014 14910 446244 0) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -14516) (undo-tree-id9830 . -1) 14517) nil (26014 14910 446243 0) 0 nil])
([nil nil ((14516 . 14517)) nil (26014 14910 446241 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 14520 14558 nil nil nil t #s(yas--exit 14559 nil))) #s(yas--exit 14559 nil) 100 nil #s(yas--field 1 14520 14558 nil nil nil t #s(yas--exit 14559 nil)) nil nil)) (14516 . 14522) (#("map(${1:f})$0" 0 13 (fontified nil)) . 14516) (14516 . 14529) (#("m" 0 1 (fontified nil)) . 14516) (14516 . 14517) (#("map(…) (as Iterator)" 0 20 (fontified nil)) . -14516) (14516 . 14536) (#("m" 0 1 (fontified t)) . -14516) (undo-tree-id9829 . -1) 14517) nil (26014 14910 446238 0) 0 nil])
([nil nil ((14521 . 14522) (#("f" 0 1 (fontified nil)) . 14521) (undo-tree-id9828 . -1) (14520 . 14521)) nil (26014 14910 446234 0) 0 nil])
([nil nil ((14521 . 14529)) nil (26014 14910 446231 0) 0 nil])
([nil nil ((14530 . 14534)) nil (26014 14910 446230 0) 0 nil])
([nil nil ((14531 . 14539) (#("ins" 0 3 (fontified nil)) . 14531) (undo-tree-id9824 . -3) (14531 . 14534) (#("instance" 0 8 (fontified nil)) . -14531) (undo-tree-id9825 . -8) (14531 . 14539) (#("ins" 0 3 (fontified t)) . -14531) (undo-tree-id9826 . -3) (undo-tree-id9827 . -3) 14534) nil (26014 14910 446228 0) 0 nil])
([nil nil ((14539 . 14540)) nil (26014 14910 446222 0) 0 nil])
([nil nil ((14540 . 14548) (#("rotation" 0 8 (fontified nil)) . -14540) (undo-tree-id9823 . -8) (14540 . 14548)) nil (26014 14910 446220 0) 0 nil])
([nil nil ((14548 . 14550)) nil (26014 14910 446218 0) 0 nil])
([nil nil ((14549 . 14550) (#("s" 0 1 (fontified nil)) . 14549) (undo-tree-id9819 . -1) (14549 . 14550) (#("s" 0 1 (fontified t)) . -14549) (undo-tree-id9820 . -1) (undo-tree-id9821 . -1) (undo-tree-id9822 . -1) 14550) nil (26014 14910 446216 0) 0 nil])
([nil nil ((14550 . 14558)) nil (26014 14910 446203 0) 0 nil])
([nil nil ((apply yas--snippet-revive 14516 14559 #s(yas--snippet nil (#s(yas--field 1 14520 14558 nil nil nil t #s(yas--exit 14559 nil))) #s(yas--exit 14559 nil) 100 nil #s(yas--field 1 14520 14558 nil nil nil t #s(yas--exit 14559 nil)) nil nil))) nil (26014 14910 446202 0) 0 nil])
([nil nil ((14531 . 14532)) nil (26014 14910 446198 0) 0 nil])
([nil nil ((14560 . 14561) (t 26014 14910 489378 223000)) nil (26014 14913 698191 0) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . -14531) (undo-tree-id9852 . -1) (undo-tree-id9853 . -1) (undo-tree-id9854 . -1) (undo-tree-id9855 . -1) (undo-tree-id9856 . -1) (undo-tree-id9857 . -1) (undo-tree-id9858 . -1) (undo-tree-id9859 . -1) (undo-tree-id9860 . -1) (undo-tree-id9861 . -1) (undo-tree-id9862 . -1) (undo-tree-id9863 . -1) 14532 (t 26014 14913 740170 435000)) nil (26014 14920 584507 0) 0 nil])
([nil nil ((#("01)" 0 2 (fontified t) 2 3 (face (rainbow-delimiters-depth-5-face) fontified t)) . -14556) (undo-tree-id10114 . 1) (undo-tree-id10115 . -3) (undo-tree-id10116 . -3) (undo-tree-id10117 . -3) (undo-tree-id10118 . -3) (undo-tree-id10119 . -3) (undo-tree-id10120 . -3) (undo-tree-id10121 . -3) (undo-tree-id10122 . -3) (undo-tree-id10123 . -3) (undo-tree-id10124 . -3) (undo-tree-id10125 . -3) (undo-tree-id10126 . -3) (undo-tree-id10127 . -3) (undo-tree-id10128 . -3) (undo-tree-id10129 . -3) (undo-tree-id10130 . -3) (undo-tree-id10131 . -3) (undo-tree-id10132 . -3) 14559 (t 26014 14920 627144 312000)) nil (26014 14950 568672 0) 0 nil])
([nil nil ((#("0." 0 2 (fontified t)) . -14554) (undo-tree-id10095 . -2) (undo-tree-id10096 . -2) (undo-tree-id10097 . -2) (undo-tree-id10098 . -2) (undo-tree-id10099 . -2) (undo-tree-id10100 . -2) (undo-tree-id10101 . -2) (undo-tree-id10102 . -2) (undo-tree-id10103 . -2) (undo-tree-id10104 . -2) (undo-tree-id10105 . -2) (undo-tree-id10106 . -2) (undo-tree-id10107 . -2) (undo-tree-id10108 . -2) (undo-tree-id10109 . -2) (undo-tree-id10110 . -2) (undo-tree-id10111 . -2) (undo-tree-id10112 . -2) (undo-tree-id10113 . -2) 14556) nil (26014 14950 568652 0) 0 nil])
([nil nil ((#("s += " 0 5 (fontified t)) . -14549) (undo-tree-id10075 . -5) (undo-tree-id10076 . -5) (undo-tree-id10077 . -5) (undo-tree-id10078 . -5) (undo-tree-id10079 . -5) (undo-tree-id10080 . -5) (undo-tree-id10081 . -5) (undo-tree-id10082 . -5) (undo-tree-id10083 . -5) (undo-tree-id10084 . -5) (undo-tree-id10085 . -5) (undo-tree-id10086 . -5) (undo-tree-id10087 . -5) (undo-tree-id10088 . -5) (undo-tree-id10089 . -5) (undo-tree-id10090 . -5) (undo-tree-id10091 . -5) (undo-tree-id10092 . -5) (undo-tree-id10093 . -5) (undo-tree-id10094 . -5) 14554) nil (26014 14950 568631 0) 0 nil])
([nil nil ((#("rotation." 0 9 (fontified t)) . -14540) (undo-tree-id10051 . -9) (undo-tree-id10052 . -9) (undo-tree-id10053 . -4) (undo-tree-id10054 . -9) (undo-tree-id10055 . -9) (undo-tree-id10056 . -9) (undo-tree-id10057 . -9) (undo-tree-id10058 . -9) (undo-tree-id10059 . -9) (undo-tree-id10060 . -9) (undo-tree-id10061 . -9) (undo-tree-id10062 . -9) (undo-tree-id10063 . -9) (undo-tree-id10064 . -9) (undo-tree-id10065 . -9) (undo-tree-id10066 . -9) (undo-tree-id10067 . -9) (undo-tree-id10068 . -9) (undo-tree-id10069 . -9) (undo-tree-id10070 . -9) (undo-tree-id10071 . -9) (undo-tree-id10072 . -9) (undo-tree-id10073 . -9) (undo-tree-id10074 . -9) 14549) nil (26014 14950 568610 0) 0 nil])
([nil nil ((#("instance." 0 9 (fontified t)) . -14531) (undo-tree-id10026 . -9) (undo-tree-id10027 . -9) (undo-tree-id10028 . -9) (undo-tree-id10029 . -9) (undo-tree-id10030 . -9) (undo-tree-id10031 . -9) (undo-tree-id10032 . -9) (undo-tree-id10033 . -9) (undo-tree-id10034 . -9) (undo-tree-id10035 . -9) (undo-tree-id10036 . -9) (undo-tree-id10037 . -9) (undo-tree-id10038 . -9) (undo-tree-id10039 . -9) (undo-tree-id10040 . -9) (undo-tree-id10041 . -9) (undo-tree-id10042 . -9) (undo-tree-id10043 . -9) (undo-tree-id10044 . -9) (undo-tree-id10045 . -9) (undo-tree-id10046 . -9) (undo-tree-id10047 . -9) (undo-tree-id10048 . -9) (undo-tree-id10049 . -9) (undo-tree-id10050 . -9) 14540) nil (26014 14950 568584 0) 0 nil])
([nil nil ((#("instance| " 0 8 (fontified t) 8 10 (fontified t)) . -14521) (undo-tree-id9961 . -10) (undo-tree-id9962 . -10) (undo-tree-id9963 . -10) (undo-tree-id9964 . -10) (undo-tree-id9965 . -10) (undo-tree-id9966 . -10) (undo-tree-id9967 . -10) (undo-tree-id9968 . -10) (undo-tree-id9969 . -10) (undo-tree-id9970 . -10) (undo-tree-id9971 . -10) (undo-tree-id9972 . -10) (undo-tree-id9973 . -10) (undo-tree-id9974 . -10) (undo-tree-id9975 . -10) (undo-tree-id9976 . -10) (undo-tree-id9977 . -10) (undo-tree-id9978 . -10) (undo-tree-id9979 . -10) (undo-tree-id9980 . -10) (undo-tree-id9981 . -10) (undo-tree-id9982 . -10) (undo-tree-id9983 . -10) (undo-tree-id9984 . -10) (undo-tree-id9985 . -10) (undo-tree-id9986 . -10) (undo-tree-id9987 . -10) (undo-tree-id9988 . -10) (undo-tree-id9989 . -10) (undo-tree-id9990 . -10) (undo-tree-id9991 . -10) (undo-tree-id9992 . -10) (undo-tree-id9993 . -10) (undo-tree-id9994 . -10) (undo-tree-id9995 . -10) (undo-tree-id9996 . -10) (undo-tree-id9997 . -10) (undo-tree-id9998 . -10) (undo-tree-id9999 . -10) (undo-tree-id10000 . -10) (undo-tree-id10001 . -10) (undo-tree-id10002 . -10) (undo-tree-id10003 . -10) (undo-tree-id10004 . -10) (undo-tree-id10005 . -10) (undo-tree-id10006 . -10) (undo-tree-id10007 . -10) (undo-tree-id10008 . -10) (undo-tree-id10009 . -10) (undo-tree-id10010 . -10) (undo-tree-id10011 . -10) (undo-tree-id10012 . -10) (undo-tree-id10013 . -10) (undo-tree-id10014 . -10) (undo-tree-id10015 . -10) (undo-tree-id10016 . -10) (undo-tree-id10017 . -10) (undo-tree-id10018 . -10) (undo-tree-id10019 . -10) (undo-tree-id10020 . -10) (undo-tree-id10021 . -10) (undo-tree-id10022 . -10) (undo-tree-id10023 . -10) (undo-tree-id10024 . -10) (undo-tree-id10025 . -10) 14531) nil (26014 14950 568554 0) 0 nil])
([nil nil ((#("map(|" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-5-face) fontified t) 4 5 (fontified t)) . -14516) (undo-tree-id9894 . -5) (undo-tree-id9895 . -5) (undo-tree-id9896 . -4) (undo-tree-id9897 . -5) (undo-tree-id9898 . -5) (undo-tree-id9899 . -5) (undo-tree-id9900 . -5) (undo-tree-id9901 . -5) (undo-tree-id9902 . -5) (undo-tree-id9903 . -5) (undo-tree-id9904 . -5) (undo-tree-id9905 . -5) (undo-tree-id9906 . -5) (undo-tree-id9907 . -5) (undo-tree-id9908 . -5) (undo-tree-id9909 . -5) (undo-tree-id9910 . -5) (undo-tree-id9911 . -5) (undo-tree-id9912 . -5) (undo-tree-id9913 . -5) (undo-tree-id9914 . -5) (undo-tree-id9915 . -5) (undo-tree-id9916 . -5) (undo-tree-id9917 . -5) (undo-tree-id9918 . -5) (undo-tree-id9919 . -5) (undo-tree-id9920 . -5) (undo-tree-id9921 . -5) (undo-tree-id9922 . -5) (undo-tree-id9923 . -5) (undo-tree-id9924 . -5) (undo-tree-id9925 . -5) (undo-tree-id9926 . -5) (undo-tree-id9927 . -5) (undo-tree-id9928 . -5) (undo-tree-id9929 . -5) (undo-tree-id9930 . -5) (undo-tree-id9931 . -5) (undo-tree-id9932 . -5) (undo-tree-id9933 . -5) (undo-tree-id9934 . -5) (undo-tree-id9935 . -5) (undo-tree-id9936 . -5) (undo-tree-id9937 . -5) (undo-tree-id9938 . -5) (undo-tree-id9939 . -5) (undo-tree-id9940 . -5) (undo-tree-id9941 . -5) (undo-tree-id9942 . -5) (undo-tree-id9943 . -5) (undo-tree-id9944 . -5) (undo-tree-id9945 . -5) (undo-tree-id9946 . -5) (undo-tree-id9947 . -5) (undo-tree-id9948 . -5) (undo-tree-id9949 . -5) (undo-tree-id9950 . -5) (undo-tree-id9951 . -5) (undo-tree-id9952 . -5) (undo-tree-id9953 . -5) (undo-tree-id9954 . -5) (undo-tree-id9955 . -5) (undo-tree-id9956 . -5) (undo-tree-id9957 . -5) (undo-tree-id9958 . -5) (undo-tree-id9959 . -5) (undo-tree-id9960 . -5) 14521) nil (26014 14950 568487 0) 0 nil])
([nil nil ((14516 . 14519)) nil (26014 14950 568416 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 14525 14562 nil nil nil t #s(yas--exit 14563 nil))) #s(yas--exit 14563 nil) 101 nil #s(yas--field 1 14525 14562 nil nil nil t #s(yas--exit 14563 nil)) nil nil)) (14516 . 14527) (#("for_each(${1:f})$0" 0 18 (fontified nil)) . 14516) (14516 . 14534) (#("for" 0 3 (fontified nil)) . 14516) (14516 . 14519) (#("for_each(…) (as Iterator)" 0 25 (fontified nil)) . -14516) (14516 . 14541) (#("for" 0 3 (face font-lock-keyword-face fontified t)) . -14516) (undo-tree-id9883 . -3) (undo-tree-id9884 . -1) (undo-tree-id9885 . -1) (undo-tree-id9886 . -2) (undo-tree-id9887 . -2) (undo-tree-id9888 . -3) (undo-tree-id9889 . -3) (undo-tree-id9890 . -3) (undo-tree-id9891 . -3) (undo-tree-id9892 . -3) (undo-tree-id9893 . -3) 14519) nil (26014 14950 568414 0) 0 nil])
([nil nil ((14526 . 14527) (#("f" 0 1 (fontified nil)) . 14526) (undo-tree-id9882 . -1) (14525 . 14526)) nil (26014 14950 568399 0) 0 nil])
([nil nil ((14526 . 14534)) nil (26014 14950 568396 0) 0 nil])
([nil nil ((14535 . 14539)) nil (26014 14950 568395 0) 0 nil])
([nil nil ((14536 . 14544) (#("ins" 0 3 (fontified nil)) . 14536) (undo-tree-id9871 . -3) (14536 . 14539) (#("instance" 0 8 (fontified nil)) . -14536) (undo-tree-id9872 . -8) (14536 . 14544) (#("ins" 0 3 (fontified t)) . -14536) (undo-tree-id9873 . -3) (undo-tree-id9874 . -3) (undo-tree-id9875 . -1) (undo-tree-id9876 . -2) (undo-tree-id9877 . -2) (undo-tree-id9878 . -3) (undo-tree-id9879 . -3) (undo-tree-id9880 . -3) (undo-tree-id9881 . -3) 14539) nil (26014 14950 568393 0) 0 nil])
([nil nil ((14544 . 14545)) nil (26014 14950 568380 0) 0 nil])
([nil nil ((14545 . 14553) (#("rotation" 0 8 (fontified nil)) . -14545) (undo-tree-id9870 . -8) (14545 . 14553)) nil (26014 14950 568379 0) 0 nil])
([nil nil ((14553 . 14560)) nil (26014 14950 568376 0) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -14559) (undo-tree-id9864 . -1) (undo-tree-id9865 . -1) (undo-tree-id9866 . -1) (undo-tree-id9867 . -1) (undo-tree-id9868 . -1) (undo-tree-id9869 . -1) 14560) nil (26014 14950 568374 0) 0 nil])
([nil nil ((14559 . 14562)) nil (26014 14950 568357 0) 0 nil])
([nil nil ((apply yas--snippet-revive 14516 14563 #s(yas--snippet nil (#s(yas--field 1 14525 14562 nil nil nil t #s(yas--exit 14563 nil))) #s(yas--exit 14563 nil) 101 nil #s(yas--field 1 14525 14562 nil nil nil t #s(yas--exit 14563 nil)) nil nil))) nil (26014 15118 606619 0) 0 nil])
([nil nil ((14896 . 14904) (#("        " 0 8 (fontified nil)) . 14895) (undo-tree-id10202 . -8) (14894 . 14904) (t 26014 14950 611495 154000)) nil (26014 15118 606618 0) 0 nil])
([nil nil ((14904 . 14909)) nil (26014 15118 606615 0) 0 nil])
([nil nil ((#("        self." 0 8 (fontified t) 8 12 (face font-lock-keyword-face fontified t) 12 13 (fontified t)) . 14896)) nil (26014 15118 606614 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 14896)) nil (26014 15118 606613 0) 0 nil])
([nil nil ((14896 . 14904)) nil (26014 15118 606612 0) 0 nil])
([nil nil ((14896 . 14904) (#("        " 0 8 (fontified nil)) . 14895) (14895 . 14903) (14895 . 14896)) nil (26014 15118 606611 0) 0 nil])
([nil nil ((14904 . 14907)) nil (26014 15118 606609 0) 0 nil])
([nil nil ((14904 . 14908) (#("sel" 0 3 (fontified nil)) . 14904) (14904 . 14907) (#("self" 0 4 (fontified nil)) . -14904) (14904 . 14908) (#("sel" 0 3 (fontified t)) . -14904) (undo-tree-id10201 . -3) 14907) nil (26014 15118 606608 0) 0 nil])
([nil nil ((14908 . 14911)) nil (26014 15118 606604 0) 0 nil])
([nil nil ((14909 . 14924) (#("in" 0 2 (fontified nil)) . 14909) (14909 . 14911) (#("instance_buffer" 0 15 (fontified nil)) . -14909) (14909 . 14924) (#("in" 0 2 (face font-lock-keyword-face fontified t)) . -14909) (undo-tree-id10200 . -2) 14911) nil (26014 15118 606602 0) 0 nil])
([nil nil ((14924 . 14925)) nil (26014 15118 606599 0) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -14924) (undo-tree-id10199 . -1) 14925) nil (26014 15118 606598 0) 0 nil])
([nil nil ((#("buffer" 0 6 (fontified t)) . -14918) (undo-tree-id10197 . -6) (undo-tree-id10198 . -6) 14924) nil (26014 15118 606595 0) 0 nil])
([nil nil ((#("instance_" 0 9 (fontified t)) . -14909) (undo-tree-id10195 . -9) (undo-tree-id10196 . -9) 14918) nil (26014 15118 606591 0) 0 nil])
([nil nil ((#("self." 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t)) . -14904) (undo-tree-id10193 . -5) (undo-tree-id10194 . -5) 14909) nil (26014 15118 606587 0) 0 nil])
([nil nil ((14904 . 14908)) nil (26014 15118 606584 0) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -14906) (undo-tree-id10191 . -1) (#("f" 0 1 (fontified t)) . -14907) (undo-tree-id10192 . -1) 14908) nil (26014 15118 606582 0) 0 nil])
([nil nil ((14906 . 14908)) nil (26014 15118 606578 0) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -14905) (undo-tree-id10188 . -1) (#("l" 0 1 (fontified t)) . -14906) (undo-tree-id10189 . -1) (#("f" 0 1 (fontified t)) . -14907) (undo-tree-id10190 . -1) 14908) nil (26014 15118 606577 0) 0 nil])
([nil nil ((14905 . 14908)) nil (26014 15118 606572 0) 0 nil])
([nil nil ((#("        self" 0 8 (fontified t) 8 12 (face font-lock-keyword-face fontified t)) . 14896) (undo-tree-id10181 . -8) (undo-tree-id10182 . -11) (undo-tree-id10183 . -12) (undo-tree-id10184 . -12) (undo-tree-id10185 . -12) (undo-tree-id10186 . -12) (undo-tree-id10187 . -12)) nil (26014 15118 606570 0) 0 nil])
([nil nil ((14896 . 14904)) nil (26014 15118 606563 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil)) . 14904) (undo-tree-id10139 . -1) (undo-tree-id10140 . -1) (undo-tree-id10141 . -1) (undo-tree-id10142 . -1) (undo-tree-id10143 . -1) (undo-tree-id10144 . -1) (undo-tree-id10145 . -1) (undo-tree-id10146 . -1) (undo-tree-id10147 . -1) (undo-tree-id10148 . -1) (undo-tree-id10149 . -1) (undo-tree-id10150 . -1) (undo-tree-id10151 . -1) (undo-tree-id10152 . -1) (undo-tree-id10153 . -1) (undo-tree-id10154 . -1) (undo-tree-id10155 . -1) (undo-tree-id10156 . -1) (undo-tree-id10157 . -1) (undo-tree-id10158 . -1) (undo-tree-id10159 . -1) (undo-tree-id10160 . -1) (undo-tree-id10161 . -1) (undo-tree-id10162 . -1) (undo-tree-id10163 . -1) (undo-tree-id10164 . -1) (undo-tree-id10165 . -1) (undo-tree-id10166 . -1) (undo-tree-id10167 . -1) (undo-tree-id10168 . -1) (undo-tree-id10169 . -1) (undo-tree-id10170 . -1) (undo-tree-id10171 . -1) (undo-tree-id10172 . -1) (undo-tree-id10173 . -1) (undo-tree-id10174 . -1) (undo-tree-id10175 . -1) (undo-tree-id10176 . -1) (undo-tree-id10177 . -1) (undo-tree-id10178 . -1) (undo-tree-id10179 . -1) (undo-tree-id10180 . -1) (14903 . 14904) (#(" " 0 1 (fontified nil)) . 14902) (14903 . 14904) 14904) nil (26014 15118 606559 0) 0 nil])
([nil nil ((nil fontified nil 14991 . 14992) (nil fontified nil 14990 . 14991) (nil fontified nil 14989 . 14990) (nil fontified nil 14988 . 14989) (nil fontified nil 14987 . 14988) (nil fontified nil 14986 . 14987) (nil fontified nil 14985 . 14986) (nil fontified nil 14984 . 14985) (nil fontified nil 14981 . 14984) (nil fontified nil 14980 . 14981) (nil fontified nil 14970 . 14980) (nil fontified nil 14969 . 14970) (nil fontified nil 14961 . 14969) (nil fontified nil 14953 . 14961) (nil fontified nil 14952 . 14953) (nil fontified nil 14948 . 14952) (nil fontified nil 14947 . 14948) (nil fontified nil 14946 . 14947) (nil fontified nil 14929 . 14946) (nil fontified nil 14916 . 14929) (nil fontified nil 14915 . 14916) (nil fontified nil 14912 . 14915) (nil fontified nil 14904 . 14912) (14904 . 14992)) nil (26014 15118 606515 0) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -14904) 14937) nil (26014 15118 606508 0) 0 nil])
([nil nil ((14924 . 14926)) nil (26014 15118 606507 0) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -14925) (undo-tree-id10133 . -1) (undo-tree-id10134 . -1) (undo-tree-id10135 . -1) (undo-tree-id10136 . -1) (undo-tree-id10137 . -1) (undo-tree-id10138 . -1) 14926) nil (26014 15118 606505 0) 0 nil])
([nil nil ((14925 . 14929)) nil (26014 15118 606487 0) 0 nil])
([nil nil ((14988 . 14997) (t 26014 15118 650073 467000)) nil (26014 15188 205574 0) 0 nil])
([nil nil ((14997 . 15005)) nil (26014 15188 205573 0) 0 nil])
([nil nil ((15002 . 15007) (#("que" 0 3 (fontified nil)) . 15002) (15002 . 15005) (#("queue" 0 5 (fontified nil)) . -15002) (15002 . 15007) (#("que" 0 3 (fontified t)) . -15002) (undo-tree-id10586 . -3) 15005) nil (26014 15188 205571 0) 0 nil])
([nil nil ((15007 . 15009)) nil (26014 15188 205568 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 15021 15042 nil nil nil t #s(yas--field 2 15044 15050 nil nil nil nil #s(yas--field 3 15052 15056 nil nil nil nil #s(yas--exit 15057 nil)))) #s(yas--field 2 15044 15050 nil nil nil nil #s(yas--field 3 15052 15056 nil nil nil nil #s(yas--exit 15057 nil))) #s(yas--field 3 15052 15056 nil nil nil nil #s(yas--exit 15057 nil))) #s(yas--exit 15057 nil) 102 nil #s(yas--field 1 15021 15042 nil nil nil t #s(yas--field 2 15044 15050 nil nil nil nil #s(yas--field 3 15052 15056 nil nil nil nil #s(yas--exit 15057 nil)))) nil nil)) (15008 . 15042) (#("write_buffer(${1:buffer}, ${2:offset}, ${3:data})$0" 0 51 (fontified nil)) . 15008) (15008 . 15059) (#("w" 0 1 (fontified nil)) . 15008) (15008 . 15009) (#("write_buffer(…)" 0 15 (fontified nil)) . -15008) (15008 . 15023) (#("w" 0 1 (fontified t)) . -15008) (undo-tree-id10585 . -1) 15009) nil (26014 15188 205566 0) 0 nil])
([nil nil ((15022 . 15024) (#("buffer" 0 6 (fontified nil)) . 15022) (15021 . 15022)) nil (26014 15188 205562 0) 0 nil])
([nil nil ((15024 . 15035)) nil (26014 15188 205560 0) 0 nil])
([nil nil ((15027 . 15042) (#("instance" 0 8 (fontified nil)) . 15027) (15027 . 15035) (#("instance_buffer" 0 15 (fontified nil)) . -15027) (15027 . 15042) (#("instance" 0 8 (fontified t)) . -15027) (undo-tree-id10583 . -8) (undo-tree-id10584 . -8) 15035) nil (26014 15188 205559 0) 0 nil])
([nil nil ((apply yas--snippet-revive 15008 15057 #s(yas--snippet nil (#s(yas--field 1 15021 15042 nil nil nil t #s(yas--field 2 15044 15050 nil nil nil nil #s(yas--field 3 15052 15056 nil nil nil nil #s(yas--exit 15057 nil)))) #s(yas--field 2 15044 15050 nil nil nil nil #s(yas--field 3 15052 15056 nil nil nil nil #s(yas--exit 15057 nil))) #s(yas--field 3 15052 15056 nil nil nil nil #s(yas--exit 15057 nil))) #s(yas--exit 15057 nil) 102 nil #s(yas--field 1 15021 15042 nil nil nil t #s(yas--field 2 15044 15050 nil nil nil nil #s(yas--field 3 15052 15056 nil nil nil nil #s(yas--exit 15057 nil)))) nil nil))) nil (26014 15188 205554 0) 0 nil])
([nil nil ((#("offset" 0 6 (fontified t)) . -15044) (undo-tree-id10582 . -6) 15050) nil (26014 15188 205553 0) 0 nil])
([nil nil ((15044 . 15045)) nil (26014 15188 205551 0) 0 nil])
([nil nil ((#("data" 0 4 (fontified t)) . -15047) (undo-tree-id10581 . -4) 15051) nil (26014 15188 205550 0) 0 nil])
([nil nil ((15047 . 15049)) nil (26014 15188 205548 0) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -15048) (undo-tree-id10580 . -1) 15049) nil (26014 15188 205547 0) 0 nil])
([nil nil ((15048 . 15050)) nil (26014 15188 205544 0) 0 nil])
([nil nil ((15050 . 15052)) nil (26014 15188 205543 0) 0 nil])
([nil nil ((15047 . 15055) (#("bytem" 0 5 (fontified nil)) . 15047) (15047 . 15052) (#("bytemuck" 0 8 (fontified nil)) . -15047) (15047 . 15055) (#("bytem" 0 5 (fontified t)) . -15047) (undo-tree-id10579 . -5) 15052) nil (26014 15188 205542 0) 0 nil])
([nil nil ((15055 . 15059)) nil (26014 15188 205538 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 15068 15069 nil nil nil nil #s(yas--exit 15070 nil))) #s(yas--exit 15070 nil) 103 nil #s(yas--field 1 15068 15069 nil nil nil nil #s(yas--exit 15070 nil)) nil nil)) (15057 . 15070) (#("cast_slice(${1:a})$0" 0 20 (fontified nil)) . 15057) (15057 . 15077) (#("ca" 0 2 (fontified nil)) . 15057) (15057 . 15059) (#("cast_slice(…)" 0 13 (fontified nil)) . -15057) (15057 . 15070) (#("ca" 0 2 (fontified t)) . -15057) (undo-tree-id10578 . -2) 15059) nil (26014 15188 205536 0) 0 nil])
([nil nil ((apply yas--snippet-revive 15057 15070 #s(yas--snippet nil (#s(yas--field 1 15068 15069 nil nil nil nil #s(yas--exit 15070 nil))) #s(yas--exit 15070 nil) 103 nil #s(yas--field 1 15068 15069 nil nil nil nil #s(yas--exit 15070 nil)) nil nil))) nil (26014 15188 205532 0) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -15068) (undo-tree-id10562 . -1) (undo-tree-id10563 . -1) (undo-tree-id10564 . -1) (undo-tree-id10565 . -1) (undo-tree-id10566 . -1) (undo-tree-id10567 . -1) (undo-tree-id10568 . -1) (undo-tree-id10569 . -1) (undo-tree-id10570 . -1) (undo-tree-id10571 . -1) (undo-tree-id10572 . -1) (undo-tree-id10573 . -1) (undo-tree-id10574 . -1) (undo-tree-id10575 . -1) (undo-tree-id10576 . -1) (undo-tree-id10577 . -1) 15069) nil (26014 15188 205530 0) 0 nil])
([nil nil ((15068 . 15070)) nil (26014 15188 205514 0) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -15068) (undo-tree-id10550 . -1) (undo-tree-id10551 . -1) (undo-tree-id10552 . -1) (undo-tree-id10553 . -1) (undo-tree-id10554 . -1) (undo-tree-id10555 . -1) (undo-tree-id10556 . -1) (undo-tree-id10557 . -1) (#("e" 0 1 (fontified t)) . -15069) (undo-tree-id10558 . -1) (undo-tree-id10559 . -1) (undo-tree-id10560 . -1) (undo-tree-id10561 . -1) 15070) nil (26014 15188 205512 0) 0 nil])
([nil nil ((15068 . 15071)) nil (26014 15188 205499 0) 0 nil])
([nil nil ((15070 . 15081)) nil (26014 15188 205498 0) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -15070) (undo-tree-id10210 . -1) (undo-tree-id10211 . -1) (undo-tree-id10212 . -1) (undo-tree-id10213 . -1) (undo-tree-id10214 . -1) (undo-tree-id10215 . -1) (undo-tree-id10216 . -1) (undo-tree-id10217 . -1) (undo-tree-id10218 . -1) (undo-tree-id10219 . -1) (undo-tree-id10220 . -1) (undo-tree-id10221 . -1) (undo-tree-id10222 . -1) (undo-tree-id10223 . -1) (undo-tree-id10224 . -1) (undo-tree-id10225 . -1) (undo-tree-id10226 . -1) (undo-tree-id10227 . -1) (undo-tree-id10228 . -1) (undo-tree-id10229 . -1) (undo-tree-id10230 . -1) (undo-tree-id10231 . -1) (undo-tree-id10232 . -1) (undo-tree-id10233 . -1) (undo-tree-id10234 . -1) (undo-tree-id10235 . -1) (undo-tree-id10236 . -1) (undo-tree-id10237 . -1) (undo-tree-id10238 . -1) (undo-tree-id10239 . -1) (undo-tree-id10240 . -1) (undo-tree-id10241 . -1) (undo-tree-id10242 . -1) (undo-tree-id10243 . -1) (undo-tree-id10244 . -1) (undo-tree-id10245 . -1) (undo-tree-id10246 . -1) (undo-tree-id10247 . -1) (undo-tree-id10248 . -1) (undo-tree-id10249 . -1) (undo-tree-id10250 . -1) (undo-tree-id10251 . -1) (undo-tree-id10252 . -1) (undo-tree-id10253 . -1) (undo-tree-id10254 . -1) (undo-tree-id10255 . -1) (undo-tree-id10256 . -1) (undo-tree-id10257 . -1) (undo-tree-id10258 . -1) (undo-tree-id10259 . -1) (undo-tree-id10260 . -1) (undo-tree-id10261 . -1) (undo-tree-id10262 . -1) (#("e" 0 1 (fontified t)) . -15071) (undo-tree-id10263 . -1) (undo-tree-id10264 . -1) (undo-tree-id10265 . -1) (undo-tree-id10266 . -1) (undo-tree-id10267 . -1) (undo-tree-id10268 . -1) (undo-tree-id10269 . -1) (undo-tree-id10270 . -1) (undo-tree-id10271 . -1) (undo-tree-id10272 . -1) (undo-tree-id10273 . -1) (undo-tree-id10274 . -1) (undo-tree-id10275 . -1) (undo-tree-id10276 . -1) (undo-tree-id10277 . -1) (undo-tree-id10278 . -1) (undo-tree-id10279 . -1) (undo-tree-id10280 . -1) (undo-tree-id10281 . -1) (undo-tree-id10282 . -1) (undo-tree-id10283 . -1) (undo-tree-id10284 . -1) (undo-tree-id10285 . -1) (undo-tree-id10286 . -1) (undo-tree-id10287 . -1) (undo-tree-id10288 . -1) (undo-tree-id10289 . -1) (undo-tree-id10290 . -1) (undo-tree-id10291 . -1) (undo-tree-id10292 . -1) (undo-tree-id10293 . -1) (undo-tree-id10294 . -1) (undo-tree-id10295 . -1) (undo-tree-id10296 . -1) (undo-tree-id10297 . -1) (undo-tree-id10298 . -1) (undo-tree-id10299 . -1) (undo-tree-id10300 . -1) (undo-tree-id10301 . -1) (undo-tree-id10302 . -1) (undo-tree-id10303 . -1) (undo-tree-id10304 . -1) (undo-tree-id10305 . -1) (undo-tree-id10306 . -1) (undo-tree-id10307 . -1) (undo-tree-id10308 . -1) (undo-tree-id10309 . -1) (undo-tree-id10310 . -1) (undo-tree-id10311 . -1) (undo-tree-id10312 . -1) (#("l" 0 1 (fontified t)) . -15072) (undo-tree-id10313 . -1) (undo-tree-id10314 . -1) (undo-tree-id10315 . -1) (undo-tree-id10316 . -1) (undo-tree-id10317 . -1) (undo-tree-id10318 . -1) (undo-tree-id10319 . -1) (undo-tree-id10320 . -1) (undo-tree-id10321 . -1) (undo-tree-id10322 . -1) (undo-tree-id10323 . -1) (undo-tree-id10324 . -1) (undo-tree-id10325 . -1) (undo-tree-id10326 . -1) (undo-tree-id10327 . -1) (undo-tree-id10328 . -1) (undo-tree-id10329 . -1) (undo-tree-id10330 . -1) (undo-tree-id10331 . -1) (undo-tree-id10332 . -1) (undo-tree-id10333 . -1) (undo-tree-id10334 . -1) (undo-tree-id10335 . -1) (undo-tree-id10336 . -1) (undo-tree-id10337 . -1) (undo-tree-id10338 . -1) (undo-tree-id10339 . -1) (undo-tree-id10340 . -1) (undo-tree-id10341 . -1) (undo-tree-id10342 . -1) (undo-tree-id10343 . -1) (undo-tree-id10344 . -1) (undo-tree-id10345 . -1) (undo-tree-id10346 . -1) (undo-tree-id10347 . -1) (undo-tree-id10348 . -1) (undo-tree-id10349 . -1) (undo-tree-id10350 . -1) (undo-tree-id10351 . -1) (undo-tree-id10352 . -1) (undo-tree-id10353 . -1) (undo-tree-id10354 . -1) (undo-tree-id10355 . -1) (undo-tree-id10356 . -1) (undo-tree-id10357 . -1) (undo-tree-id10358 . -1) (undo-tree-id10359 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -15073) (undo-tree-id10360 . -1) (undo-tree-id10361 . -1) (undo-tree-id10362 . -1) (undo-tree-id10363 . -1) (undo-tree-id10364 . -1) (undo-tree-id10365 . -1) (undo-tree-id10366 . -1) (undo-tree-id10367 . -1) (undo-tree-id10368 . -1) (undo-tree-id10369 . -1) (undo-tree-id10370 . -1) (undo-tree-id10371 . -1) (undo-tree-id10372 . -1) (undo-tree-id10373 . -1) (undo-tree-id10374 . -1) (undo-tree-id10375 . -1) (undo-tree-id10376 . -1) (undo-tree-id10377 . -1) (undo-tree-id10378 . -1) (undo-tree-id10379 . -1) (undo-tree-id10380 . -1) (undo-tree-id10381 . -1) (undo-tree-id10382 . -1) (undo-tree-id10383 . -1) (undo-tree-id10384 . -1) (undo-tree-id10385 . -1) (undo-tree-id10386 . -1) (undo-tree-id10387 . -1) (undo-tree-id10388 . -1) (undo-tree-id10389 . -1) (undo-tree-id10390 . -1) (undo-tree-id10391 . -1) (undo-tree-id10392 . -1) (undo-tree-id10393 . -1) (undo-tree-id10394 . -1) (undo-tree-id10395 . -1) (undo-tree-id10396 . -1) (undo-tree-id10397 . -1) (undo-tree-id10398 . -1) (undo-tree-id10399 . -1) (undo-tree-id10400 . -1) (undo-tree-id10401 . -1) (undo-tree-id10402 . -1) (undo-tree-id10403 . -1) (#("." 0 1 (fontified t)) . -15074) (undo-tree-id10404 . -1) (undo-tree-id10405 . -1) (undo-tree-id10406 . -1) (undo-tree-id10407 . -1) (undo-tree-id10408 . -1) (undo-tree-id10409 . -1) (undo-tree-id10410 . -1) (undo-tree-id10411 . -1) (undo-tree-id10412 . -1) (undo-tree-id10413 . -1) (undo-tree-id10414 . -1) (undo-tree-id10415 . -1) (undo-tree-id10416 . -1) (undo-tree-id10417 . -1) (undo-tree-id10418 . -1) (undo-tree-id10419 . -1) (undo-tree-id10420 . -1) (undo-tree-id10421 . -1) (undo-tree-id10422 . -1) (undo-tree-id10423 . -1) (undo-tree-id10424 . -1) (undo-tree-id10425 . -1) (undo-tree-id10426 . -1) (undo-tree-id10427 . -1) (undo-tree-id10428 . -1) (undo-tree-id10429 . -1) (undo-tree-id10430 . -1) (undo-tree-id10431 . -1) (undo-tree-id10432 . -1) (undo-tree-id10433 . -1) (undo-tree-id10434 . -1) (undo-tree-id10435 . -1) (undo-tree-id10436 . -1) (undo-tree-id10437 . -1) (undo-tree-id10438 . -1) (undo-tree-id10439 . -1) (undo-tree-id10440 . -1) (undo-tree-id10441 . -1) (undo-tree-id10442 . -1) (undo-tree-id10443 . -1) (#("i" 0 1 (fontified t)) . -15075) (undo-tree-id10444 . -1) (undo-tree-id10445 . -1) (undo-tree-id10446 . -1) (undo-tree-id10447 . -1) (undo-tree-id10448 . -1) (undo-tree-id10449 . -1) (undo-tree-id10450 . -1) (undo-tree-id10451 . -1) (undo-tree-id10452 . -1) (undo-tree-id10453 . -1) (undo-tree-id10454 . -1) (undo-tree-id10455 . -1) (undo-tree-id10456 . -1) (undo-tree-id10457 . -1) (undo-tree-id10458 . -1) (undo-tree-id10459 . -1) (undo-tree-id10460 . -1) (undo-tree-id10461 . -1) (undo-tree-id10462 . -1) (undo-tree-id10463 . -1) (undo-tree-id10464 . -1) (undo-tree-id10465 . -1) (undo-tree-id10466 . -1) (undo-tree-id10467 . -1) (undo-tree-id10468 . -1) (undo-tree-id10469 . -1) (undo-tree-id10470 . -1) (undo-tree-id10471 . -1) (undo-tree-id10472 . -1) (undo-tree-id10473 . -1) (undo-tree-id10474 . -1) (undo-tree-id10475 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -15076) (undo-tree-id10476 . -1) (undo-tree-id10477 . -1) (undo-tree-id10478 . -1) (undo-tree-id10479 . -1) (undo-tree-id10480 . -1) (undo-tree-id10481 . -1) (undo-tree-id10482 . -1) (undo-tree-id10483 . -1) (undo-tree-id10484 . -1) (undo-tree-id10485 . -1) (undo-tree-id10486 . -1) (undo-tree-id10487 . -1) (undo-tree-id10488 . -1) (undo-tree-id10489 . -1) (undo-tree-id10490 . -1) (undo-tree-id10491 . -1) (undo-tree-id10492 . -1) (undo-tree-id10493 . -1) (undo-tree-id10494 . -1) (undo-tree-id10495 . -1) (undo-tree-id10496 . -1) (undo-tree-id10497 . -1) (undo-tree-id10498 . -1) (undo-tree-id10499 . -1) (undo-tree-id10500 . -1) (undo-tree-id10501 . -1) (undo-tree-id10502 . -1) (#("s" 0 1 (fontified t)) . -15077) (undo-tree-id10503 . -1) (undo-tree-id10504 . -1) (undo-tree-id10505 . -1) (undo-tree-id10506 . -1) (undo-tree-id10507 . -1) (undo-tree-id10508 . -1) (undo-tree-id10509 . -1) (undo-tree-id10510 . -1) (undo-tree-id10511 . -1) (undo-tree-id10512 . -1) (undo-tree-id10513 . -1) (undo-tree-id10514 . -1) (undo-tree-id10515 . -1) (undo-tree-id10516 . -1) (undo-tree-id10517 . -1) (undo-tree-id10518 . -1) (undo-tree-id10519 . -1) (undo-tree-id10520 . -1) (undo-tree-id10521 . -1) (undo-tree-id10522 . -1) (#("t" 0 1 (fontified t)) . -15078) (undo-tree-id10523 . -1) (undo-tree-id10524 . -1) (undo-tree-id10525 . -1) (undo-tree-id10526 . -1) (undo-tree-id10527 . -1) (undo-tree-id10528 . -1) (undo-tree-id10529 . -1) (undo-tree-id10530 . -1) (undo-tree-id10531 . -1) (undo-tree-id10532 . -1) (undo-tree-id10533 . -1) (undo-tree-id10534 . -1) (undo-tree-id10535 . -1) (#("a" 0 1 (fontified t)) . -15079) (undo-tree-id10536 . -1) (undo-tree-id10537 . -1) (undo-tree-id10538 . -1) (undo-tree-id10539 . -1) (undo-tree-id10540 . -1) (undo-tree-id10541 . -1) (undo-tree-id10542 . -1) (undo-tree-id10543 . -1) (undo-tree-id10544 . -1) (#("n" 0 1 (fontified t)) . -15080) (undo-tree-id10545 . -1) (undo-tree-id10546 . -1) (undo-tree-id10547 . -1) (undo-tree-id10548 . -1) (undo-tree-id10549 . -1) 15081) nil (26014 15188 205480 0) 0 nil])
([nil nil ((15070 . 15072)) nil (26014 15188 205145 0) 0 nil])
([nil nil ((15070 . 15083) (#("in" 0 2 (fontified nil)) . 15070) (15070 . 15072) (#("instance_data" 0 13 (fontified nil)) . -15070) (15070 . 15083) (#("in" 0 2 (face font-lock-keyword-face fontified t)) . -15070) (undo-tree-id10203 . -2) (undo-tree-id10204 . -1) (undo-tree-id10205 . -2) (undo-tree-id10206 . -2) (undo-tree-id10207 . -2) (undo-tree-id10208 . -2) (undo-tree-id10209 . -2) 15072) nil (26014 15188 205143 0) 0 nil])
([nil nil ((15086 . 15087)) nil (26014 15188 205122 0) 0 nil])
([nil nil ((15070 . 15071) (t 26014 15188 250600 740000)) nil (26014 15205 779358 0) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . -15068) (undo-tree-id10597 . -1) (undo-tree-id10598 . -1) (undo-tree-id10599 . -1) (undo-tree-id10600 . -1) (undo-tree-id10601 . -1) (undo-tree-id10602 . -1) (undo-tree-id10603 . -1) (undo-tree-id10604 . -1) (undo-tree-id10605 . -1) (undo-tree-id10606 . -1) (undo-tree-id10607 . -1) (undo-tree-id10608 . -1) (undo-tree-id10609 . -1) (undo-tree-id10610 . -1) (undo-tree-id10611 . -1) (undo-tree-id10612 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -15069) (undo-tree-id10613 . -1) (undo-tree-id10614 . -1) (undo-tree-id10615 . -1) (undo-tree-id10616 . -1) (undo-tree-id10617 . -1) (undo-tree-id10618 . -1) (undo-tree-id10619 . -1) (undo-tree-id10620 . -1) (undo-tree-id10621 . -1) (undo-tree-id10622 . -1) (undo-tree-id10623 . -1) (undo-tree-id10624 . -1) (undo-tree-id10625 . -1) (undo-tree-id10626 . -1) (undo-tree-id10627 . -1) 15070 (t 26014 15205 823590 210000)) nil (26014 15226 807147 0) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -15082) (undo-tree-id10587 . -1) (undo-tree-id10588 . -1) (undo-tree-id10589 . -1) (undo-tree-id10590 . -1) (undo-tree-id10591 . -1) (undo-tree-id10592 . -1) (undo-tree-id10593 . -1) (undo-tree-id10594 . -1) (undo-tree-id10595 . -1) (undo-tree-id10596 . -1) 15083) nil (26014 15226 807112 0) 0 nil])
([nil nil ((14473 . 14490) (t 26014 15226 850959 59000)) nil (26014 15253 120336 0) 0 nil])
([nil nil ((14490 . 14493)) nil (26014 15253 120335 0) 0 nil])
([nil nil ((apply yas--snippet-revive 14490 14497 #s(yas--snippet nil nil #s(yas--exit 14496 nil) 104 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 14496 nil) 104 nil nil nil nil)) (14490 . 14497) (#("info!($0)" 0 9 (fontified nil)) . 14490) (14490 . 14499) (#("inf" 0 3 (fontified nil)) . 14490) (14490 . 14493) (#("info!(…)" 0 8 (fontified nil)) . -14490) (14490 . 14498) (#("inf" 0 3 (fontified t)) . -14490) (undo-tree-id10633 . -3) (undo-tree-id10634 . -1) (undo-tree-id10635 . -2) (undo-tree-id10636 . -2) (undo-tree-id10637 . -3) (undo-tree-id10638 . -3) (undo-tree-id10639 . -3) (undo-tree-id10640 . -3) 14493) nil (26014 15253 120333 0) 0 nil])
([nil nil ((14496 . 14498)) nil (26014 15253 120321 0) 0 nil])
([nil nil ((14497 . 14501)) nil (26014 15253 120320 0) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-string-face fontified t)) . -14499) (undo-tree-id10628 . -1) (undo-tree-id10629 . -1) (undo-tree-id10630 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -14500) (undo-tree-id10631 . -1) (undo-tree-id10632 . -1) 14501) nil (26014 15253 120318 0) 0 nil])
([nil nil ((14499 . 14512)) nil (26014 15253 120305 0) 0 nil])
([nil nil ((14514 . 14515)) nil (26014 15253 120301 0) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . -14603) (undo-tree-id10740 . -1) (undo-tree-id10741 . -1) (undo-tree-id10742 . -1) (undo-tree-id10743 . -1) 14604 (t 26014 15253 164990 463000)) nil (26014 15764 361712 0) 0 nil])
([nil nil ((#("0." 0 2 (fontified t)) . -14601) (undo-tree-id10736 . -2) (undo-tree-id10737 . -2) (undo-tree-id10738 . -2) (undo-tree-id10739 . -2) 14603) nil (26014 15764 361705 0) 0 nil])
([nil nil ((#("s += " 0 5 (fontified t)) . -14596) (undo-tree-id10732 . -5) (undo-tree-id10733 . -5) (undo-tree-id10734 . -5) (undo-tree-id10735 . -5) 14601) nil (26014 15764 361700 0) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -14595) (undo-tree-id10728 . -1) (undo-tree-id10729 . -1) (undo-tree-id10730 . -1) (undo-tree-id10731 . -1) 14596) nil (26014 15764 361695 0) 0 nil])
([nil nil ((14595 . 14598)) nil (26014 15764 361690 0) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -14596) (undo-tree-id10726 . -1) (#("o" 0 1 (fontified t)) . -14597) (undo-tree-id10727 . -1) 14598) nil (26014 15764 361688 0) 0 nil])
([nil nil ((14596 . 14597)) nil (26014 15764 361685 0) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -14596) (undo-tree-id10725 . -1) 14597) nil (26014 15764 361683 0) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -14595) (undo-tree-id10723 . -1) (undo-tree-id10724 . -1) 14596) nil (26014 15764 361681 0) 0 nil])
([nil nil ((14595 . 14602)) nil (26014 15764 361678 0) 0 nil])
([nil nil ((14598 . 14604) (#("cgma" 0 4 (fontified nil)) . 14598) (14598 . 14602) (#("cgmath" 0 6 (fontified nil)) . -14598) (14598 . 14604) (#("cgma" 0 4 (fontified t)) . -14598) (undo-tree-id10722 . -4) 14602) nil (26014 15764 361676 0) 0 nil])
([nil nil ((14604 . 14607)) nil (26014 15764 361673 0) 0 nil])
([nil nil ((#("R" 0 1 (face font-lock-type-face fontified t)) . -14606) (undo-tree-id10721 . -1) 14607) nil (26014 15764 361671 0) 0 nil])
([nil nil ((14606 . 14607)) nil (26014 15764 361668 0) 0 nil])
([nil nil ((14606 . 14616) (#("Q" 0 1 (fontified nil)) . 14606) (14606 . 14607) (#("Quaternion" 0 10 (fontified nil)) . -14606) (14606 . 14616) (#("Q" 0 1 (face font-lock-type-face fontified t)) . -14606) (undo-tree-id10720 . -1) 14607) nil (26014 15764 361666 0) 0 nil])
([nil nil ((14616 . 14622)) nil (26014 15764 361662 0) 0 nil])
([nil nil ((37 . 38) (49 . 61) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 14647 14689 nil nil nil t #s(yas--field 2 14689 14689 nil nil nil nil #s(yas--exit 14690 nil))) #s(yas--field 2 14689 14689 nil nil nil nil #s(yas--exit 14690 nil))) #s(yas--exit 14690 nil) 105 nil #s(yas--field 1 14647 14689 nil nil nil t #s(yas--field 2 14689 14689 nil nil nil nil #s(yas--exit 14690 nil))) nil nil)) (14618 . 14646) (#("from_axis_angle(${1:axis}, ${2:angle})$0" 0 40 (fontified nil)) . 14618) (14618 . 14658) (#("from" 0 4 (fontified nil)) . 14618) (14618 . 14622) (#("from_axis_angle(…) (use cgmath::Rotation3)" 0 42 (fontified nil)) . -14618) (14618 . 14660) (#("from" 0 4 (fontified t)) . -14618) (undo-tree-id10718 . -4) (undo-tree-id10719 . -4) 14622) nil (26014 15764 361660 0) 0 nil])
([nil nil ((14648 . 14649) (#("axis" 0 4 (fontified nil)) . 14648) (undo-tree-id10717 . -4) (14647 . 14648)) nil (26014 15764 361654 0) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 14668 14670 nil nil nil nil #s(yas--field 2 14675 14677 nil nil nil nil #s(yas--field 3 14682 14684 nil nil nil nil #s(yas--exit 14686 nil)))) #s(yas--field 2 14675 14677 nil nil nil nil #s(yas--field 3 14682 14684 nil nil nil nil #s(yas--exit 14686 nil))) #s(yas--field 3 14682 14684 nil nil nil nil #s(yas--exit 14686 nil))) #s(yas--exit 14686 nil) 106 nil #s(yas--field 1 14668 14670 nil nil nil nil #s(yas--field 2 14675 14677 nil nil nil nil #s(yas--field 3 14682 14684 nil nil nil nil #s(yas--exit 14686 nil)))) #s(yas--field 1 14647 14689 nil nil nil t #s(yas--field 2 14689 14689 nil nil nil nil #s(yas--exit 14690 nil))) nil)) (14647 . 14686) (#("cgmath::Vector3 { x: ${1:()}, y: ${2:()}, z: ${3:()} }$0" 0 56 (fontified nil)) . 14647) (undo-tree-id10712 . -56) (14647 . 14703) (#("cg" 0 2 (fontified nil)) . 14647) (undo-tree-id10713 . -2) (14647 . 14649) (#("cgmath::Vector3 {…}" 0 19 (fontified nil)) . -14647) (undo-tree-id10714 . -19) (14647 . 14666) (#("cg" 0 2 (fontified t)) . -14647) (undo-tree-id10715 . -2) (undo-tree-id10716 . -2) 14649) nil (26014 15764 361650 0) 0 nil])
([nil nil ((apply yas--snippet-revive 14647 14686 #s(yas--snippet nil (#s(yas--field 1 14668 14670 nil nil nil nil #s(yas--field 2 14675 14677 nil nil nil nil #s(yas--field 3 14682 14684 nil nil nil nil #s(yas--exit 14686 nil)))) #s(yas--field 2 14675 14677 nil nil nil nil #s(yas--field 3 14682 14684 nil nil nil nil #s(yas--exit 14686 nil))) #s(yas--field 3 14682 14684 nil nil nil nil #s(yas--exit 14686 nil))) #s(yas--exit 14686 nil) 106 nil #s(yas--field 1 14668 14670 nil nil nil nil #s(yas--field 2 14675 14677 nil nil nil nil #s(yas--field 3 14682 14684 nil nil nil nil #s(yas--exit 14686 nil)))) #s(yas--field 1 14647 14689 nil nil nil t #s(yas--field 2 14689 14689 nil nil nil nil #s(yas--exit 14690 nil))) nil))) nil (26014 15764 361642 0) 0 nil])
([nil nil ((#(" { x" 0 1 (fontified t) 1 2 (face (rainbow-delimiters-depth-7-face) fontified t) 2 3 (fontified t) 3 4 (face font-lock-variable-name-face fontified t)) . 14662)) nil (26014 15764 361641 0) 0 nil])
([nil nil ((#(": (), y" 0 2 (fontified t) 2 3 (face (rainbow-delimiters-depth-7-face) fontified t) 3 4 (face (rainbow-delimiters-depth-7-face) fontified t) 4 6 (fontified t) 6 7 (face font-lock-variable-name-face fontified t)) . 14662) (undo-tree-id10711 . -2)) nil (26014 15764 361640 0) 0 nil])
([nil nil ((#(": (), z" 0 2 (fontified t) 2 3 (face (rainbow-delimiters-depth-7-face) fontified t) 3 4 (face (rainbow-delimiters-depth-7-face) fontified t) 4 6 (fontified t) 6 7 (face font-lock-variable-name-face fontified t)) . 14662)) nil (26014 15764 361638 0) 0 nil])
([nil nil ((#(": () }, angle" 0 2 (fontified t) 2 3 (face (rainbow-delimiters-depth-7-face) fontified t) 3 4 (face (rainbow-delimiters-depth-7-face) fontified t) 4 5 (fontified t) 5 6 (face (rainbow-delimiters-mismatched-face) fontified t) 6 13 (fontified t)) . 14662) (undo-tree-id10708 . -6) (undo-tree-id10709 . -8) (undo-tree-id10710 . -13)) nil (26014 15764 361637 0) 0 nil])
([nil nil ((14662 . 14665)) nil (26014 15764 361633 0) 0 nil])
([nil nil ((apply yas--snippet-revive 14664 14672 #s(yas--snippet nil nil #s(yas--exit 14672 nil) 107 nil nil #s(yas--field 1 14647 14689 nil nil nil t #s(yas--field 2 14689 14689 nil nil nil nil #s(yas--exit 14690 nil))) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 14672 nil) 107 nil nil #s(yas--field 1 14647 14689 nil nil nil t #s(yas--field 2 14689 14689 nil nil nil nil #s(yas--exit 14690 nil))) nil)) (14664 . 14672) (#("unit_z()$0" 0 10 (fontified nil)) . 14664) (undo-tree-id10694 . -10) (undo-tree-id10695 . -10) (undo-tree-id10696 . -10) (14664 . 14674) (#("u" 0 1 (fontified nil)) . 14664) (undo-tree-id10697 . -1) (undo-tree-id10698 . -1) (undo-tree-id10699 . -1) (14664 . 14665) (#("unit_z()" 0 8 (fontified nil)) . -14664) (undo-tree-id10700 . -8) (undo-tree-id10701 . -8) (undo-tree-id10702 . -8) (14664 . 14672) (#("u" 0 1 (fontified t)) . -14664) (undo-tree-id10703 . -1) (undo-tree-id10704 . -1) (undo-tree-id10705 . -1) (undo-tree-id10706 . -1) (undo-tree-id10707 . -1) 14665) nil (26014 15764 361631 0) 0 nil])
([nil nil ((14672 . 14675)) nil (26014 15764 361614 0) 0 nil])
([nil nil ((14675 . 14678)) nil (26014 15764 361613 0) 0 nil])
([nil nil ((14674 . 14680) (#("cgma" 0 4 (fontified nil)) . 14674) (undo-tree-id10672 . -4) (undo-tree-id10673 . -4) (undo-tree-id10674 . -4) (14674 . 14678) (#("cgmath" 0 6 (fontified nil)) . -14674) (undo-tree-id10675 . -6) (undo-tree-id10676 . -6) (undo-tree-id10677 . -6) (14674 . 14680) (#("cgma" 0 4 (fontified t)) . -14674) (undo-tree-id10678 . -4) (undo-tree-id10679 . -4) (undo-tree-id10680 . -4) (undo-tree-id10681 . -4) (undo-tree-id10682 . -1) (undo-tree-id10683 . -1) (undo-tree-id10684 . -2) (undo-tree-id10685 . -2) (undo-tree-id10686 . -2) (undo-tree-id10687 . -3) (undo-tree-id10688 . -3) (undo-tree-id10689 . -4) (undo-tree-id10690 . -4) (undo-tree-id10691 . -4) (undo-tree-id10692 . -4) (undo-tree-id10693 . -4) 14678) nil (26014 15764 361611 0) 0 nil])
([nil nil ((14680 . 14683)) nil (26014 15764 361587 0) 0 nil])
([nil nil ((14682 . 14685) (#("D" 0 1 (fontified nil)) . 14682) (undo-tree-id10655 . -1) (undo-tree-id10656 . -1) (undo-tree-id10657 . -1) (14682 . 14683) (#("Deg" 0 3 (fontified nil)) . -14682) (undo-tree-id10658 . -3) (undo-tree-id10659 . -3) (undo-tree-id10660 . -3) (14682 . 14685) (#("D" 0 1 (face font-lock-type-face fontified t)) . -14682) (undo-tree-id10661 . -1) (undo-tree-id10662 . -1) (undo-tree-id10663 . -1) (undo-tree-id10664 . -1) (undo-tree-id10665 . -1) (undo-tree-id10666 . -1) (undo-tree-id10667 . -1) (undo-tree-id10668 . -1) (undo-tree-id10669 . -1) (undo-tree-id10670 . -1) (undo-tree-id10671 . -1) 14683) nil (26014 15764 361585 0) 0 nil])
([nil nil ((14685 . 14687)) nil (26014 15764 361566 0) 0 nil])
([nil nil ((14686 . 14688)) nil (26014 15764 361565 0) 0 nil])
([nil nil ((apply yas--snippet-revive 14631 14690 #s(yas--snippet nil (#s(yas--field 1 14647 14689 nil nil nil t #s(yas--field 2 14689 14689 nil nil nil nil #s(yas--exit 14690 nil))) #s(yas--field 2 14689 14689 nil nil nil nil #s(yas--exit 14690 nil))) #s(yas--exit 14690 nil) 105 nil #s(yas--field 1 14647 14689 nil nil nil t #s(yas--field 2 14689 14689 nil nil nil nil #s(yas--exit 14690 nil))) nil nil))) nil (26014 15764 361564 0) 0 nil])
([nil nil ((14690 . 14695)) nil (26014 15764 361563 0) 0 nil])
([nil nil ((14693 . 14701) (#("in" 0 2 (fontified nil)) . 14693) (14693 . 14695) (#("instance" 0 8 (fontified nil)) . -14693) (14693 . 14701) (#("in" 0 2 (face font-lock-keyword-face fontified t)) . -14693) (undo-tree-id10648 . -2) (undo-tree-id10649 . -1) (undo-tree-id10650 . -2) (undo-tree-id10651 . -2) (undo-tree-id10652 . -2) (undo-tree-id10653 . -2) (undo-tree-id10654 . -2) 14695) nil (26014 15764 361561 0) 0 nil])
([nil nil ((14701 . 14704)) nil (26014 15764 361550 0) 0 nil])
([nil nil ((14702 . 14710) (#("ro" 0 2 (fontified nil)) . 14702) (14702 . 14704) (#("rotation" 0 8 (fontified nil)) . -14702) (14702 . 14710) (#("ro" 0 2 (fontified t)) . -14702) (undo-tree-id10641 . -2) (undo-tree-id10642 . -1) (undo-tree-id10643 . -1) (undo-tree-id10644 . -1) (undo-tree-id10645 . -2) (undo-tree-id10646 . -2) (undo-tree-id10647 . -2) 14704) nil (26014 15764 361545 0) 0 nil])
([nil nil ((14591 . 14642) (#(" " 0 1 (fontified nil)) . 14590) (undo-tree-id10744 . -1) (undo-tree-id10745 . -1) (undo-tree-id10746 . -1) (undo-tree-id10747 . -1) (undo-tree-id10748 . -1) (undo-tree-id10749 . -1) (undo-tree-id10750 . -1) (undo-tree-id10751 . -1) (undo-tree-id10752 . -1) (undo-tree-id10753 . -1) (undo-tree-id10754 . -1) (undo-tree-id10755 . -1) (undo-tree-id10756 . -1) (undo-tree-id10757 . -1) (undo-tree-id10758 . -1) (undo-tree-id10759 . -1) (14591 . 14592) (t 26014 15764 406812 720000)) nil (26014 15789 621412 0) 0 nil])
([nil nil ((14662 . 14713) (#(" " 0 1 (fontified nil)) . 14661) (undo-tree-id10767 . -1) (undo-tree-id10768 . -1) (undo-tree-id10769 . -1) (undo-tree-id10770 . -1) (undo-tree-id10771 . -1) (undo-tree-id10772 . -1) (undo-tree-id10773 . -1) (14662 . 14663) (t 26014 15789 666119 171000)) nil (26014 15796 390890 0) 0 nil])
([nil nil ((14793 . 14844) (#(" " 0 1 (fontified nil)) . 14792) (undo-tree-id10760 . -1) (undo-tree-id10761 . -1) (undo-tree-id10762 . -1) (undo-tree-id10763 . -1) (undo-tree-id10764 . -1) (undo-tree-id10765 . -1) (undo-tree-id10766 . -1) (14793 . 14794)) nil (26014 15796 390873 0) 0 nil])
([nil nil ((14790 . 14792) (t 26014 15796 438146 827000)) nil (26014 15806 513079 0) 0 nil])
([nil nil ((#("z" 0 1 (fontified t)) . -14771) (undo-tree-id10774 . -1) (undo-tree-id10775 . -1) (undo-tree-id10776 . -1) (undo-tree-id10777 . -1) (undo-tree-id10778 . -1) (undo-tree-id10779 . -1) (undo-tree-id10780 . -1) (undo-tree-id10781 . -1) 14772 (t 26014 15806 557961 681000)) nil (26014 15828 910418 0) 0 nil])
([nil nil ((14771 . 14772)) nil (26014 15843 223111 0) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -6893) 6920 (t 26014 15843 885524 709000)) nil (26014 16282 768770 0) 0 nil] [nil nil ((15292 . 15294) (t 26014 15828 955926 859000)) ((#("//" 0 2 (face font-lock-comment-delimiter-face fontified t)) . 15292) (undo-tree-id10782 . -2) (undo-tree-id10783 . -2) (undo-tree-id10784 . -2) (undo-tree-id10785 . -2) (undo-tree-id10786 . -2) (undo-tree-id10787 . -2) (undo-tree-id10788 . -2) (undo-tree-id10789 . -2) (undo-tree-id10790 . -2) (undo-tree-id10791 . -2) (undo-tree-id10792 . -2) (undo-tree-id10793 . -2) (undo-tree-id10794 . -2) (undo-tree-id10795 . -2) (undo-tree-id10796 . -2) (undo-tree-id10797 . -2) (undo-tree-id10798 . -2) (undo-tree-id10799 . -2) (undo-tree-id10800 . -2) (undo-tree-id10801 . -2) (undo-tree-id10802 . -2) (undo-tree-id10803 . -2) (undo-tree-id10804 . -2) (undo-tree-id10805 . -2) (undo-tree-id10806 . -2) (undo-tree-id10807 . -2) (undo-tree-id10808 . -2) (undo-tree-id10809 . -2) (undo-tree-id10810 . -2) (undo-tree-id10811 . -2) (t 26014 15835 689011 964000)) (26014 15835 643866 0) 0 nil])
([nil nil ((6884 . 6892) (#("        " 0 8 (fontified nil)) . 6883) (undo-tree-id10838 . -8) (undo-tree-id10839 . -8) (undo-tree-id10840 . -8) (6882 . 6892)) nil (26014 16282 768768 0) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 6986 . 6987) (nil fontified nil 6892 . 6987) (6892 . 6987)) nil (26014 16282 768763 0) 0 nil])
([nil nil ((#("            depth_stencil: None, // 1." 0 12 (fontified t) 12 25 (face font-lock-variable-name-face fontified t) 25 27 (fontified t) 27 31 (face font-lock-type-face fontified t) 31 33 (fontified t) 33 36 (face font-lock-comment-delimiter-face fontified t) 36 38 (face font-lock-comment-face fontified t)) . 10719) (undo-tree-id10814 . -38) (undo-tree-id10815 . -2) (undo-tree-id10816 . -38) (undo-tree-id10817 . -38) (undo-tree-id10818 . -38) (undo-tree-id10819 . -36) (undo-tree-id10820 . -35) (undo-tree-id10821 . -32) (undo-tree-id10822 . -28) (undo-tree-id10823 . -26) (undo-tree-id10824 . -23) (undo-tree-id10825 . -20) (undo-tree-id10826 . -17) (undo-tree-id10827 . -15) (undo-tree-id10828 . -12) (undo-tree-id10829 . -11) (undo-tree-id10830 . -9) (undo-tree-id10831 . -7) (undo-tree-id10832 . -6) (undo-tree-id10833 . -4) (undo-tree-id10834 . -3) (undo-tree-id10835 . -2) (undo-tree-id10836 . -1) (undo-tree-id10837 . -38)) nil (26014 16282 768760 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 11017 . 11018) (nil fontified nil 10719 . 11018) (10719 . 11018)) nil (26014 16282 768723 0) 0 nil])
([nil nil ((11059 . 11071) (#("    " 0 4 (fontified t)) . 11059) (11004 . 11020) (#("        " 0 8 (fontified t)) . 11004) (10942 . 10958) (#("        " 0 8 (fontified t)) . 10942) (10876 . 10892) (#("        " 0 8 (fontified t)) . 10876) (undo-tree-id10812 . -8) (undo-tree-id10813 . -7) (10833 . 10849) (#("        " 0 8 (fontified t)) . 10833) (10777 . 10793) (#("        " 0 8 (fontified t)) . 10777) (10719 . 10731) (#("    " 0 4 (fontified t)) . 10719) 10725) nil (26014 16282 768718 0) 0 nil])
([nil nil ((2696 . 2697) (t 26014 16282 814517 404000)) nil (26014 16313 223059 0) 0 nil])
([nil nil ((#("‘" 0 1 (face font-lock-comment-face fontified t)) . -2696) (undo-tree-id10841 . -1) (undo-tree-id10842 . -1) (undo-tree-id10843 . -1) (undo-tree-id10844 . -1) (undo-tree-id10845 . -1) (undo-tree-id10846 . -1) 2697) nil (26014 16313 223058 0) 0 nil])
([nil nil ((2696 . 2701)) nil (26014 16313 223043 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 2728 . 2729) (nil fontified nil 2701 . 2729) (2701 . 2729)) nil (26014 16313 223042 0) 0 nil])
([nil nil ((2729 . 2733)) nil (26014 16313 223040 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2701) 2724) nil (26014 16313 223035 0) 0 nil])
([nil nil ((13910 . 13922) (#("            " 0 12 (fontified nil)) . 13909) (undo-tree-id10847 . -12) (undo-tree-id10848 . -12) (undo-tree-id10849 . -12) (13908 . 13922) (t 26014 16313 269109 538000)) nil (26014 16378 763250 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 13931 . 13932) (nil fontified nil 13909 . 13932) (13909 . 13932)) nil (26014 16378 763237 0) 0 nil])
([nil nil ((13932 . 13944)) nil (26014 16378 763235 0) 0 nil])
([nil nil ((13917 . 13921) 13921) nil (26014 16378 763230 0) 0 nil])
([nil nil ((14555 . 14568) (t 26014 16378 809606 962000)) nil (26014 16410 274852 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 14677 . 14678) (nil fontified nil 14568 . 14678) (14568 . 14678)) nil (26014 16410 274851 0) 0 nil])
([nil nil ((14678 . 14690)) nil (26014 16410 274849 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -14568) 14622) nil (26014 16410 274844 0) 0 nil])
([nil nil ((#("            depth_stencil_attachment: None," 0 12 (fontified t) 12 23 (face font-lock-variable-name-face fontified t) 23 33 (face font-lock-variable-name-face fontified t) 33 36 (face font-lock-variable-name-face fontified t) 36 38 (fontified t) 38 41 (face font-lock-type-face fontified t) 41 42 (face font-lock-type-face fontified t) 42 43 (fontified t)) . 16867) (undo-tree-id10851 . -43) (undo-tree-id10852 . -43) (undo-tree-id10853 . -43) (undo-tree-id10854 . -43) (undo-tree-id10855 . -42) (undo-tree-id10856 . -37) (undo-tree-id10857 . -34) (undo-tree-id10858 . -32) (undo-tree-id10859 . -28) (undo-tree-id10860 . -24) (undo-tree-id10861 . -19) (undo-tree-id10862 . -16) (undo-tree-id10863 . -13) (undo-tree-id10864 . -10) (undo-tree-id10865 . -8) (undo-tree-id10866 . -7) (undo-tree-id10867 . -6) (undo-tree-id10868 . -5) (undo-tree-id10869 . -3) (undo-tree-id10870 . -2) (undo-tree-id10871 . -1) (undo-tree-id10872 . -43) (t 26014 16410 320430 6000)) nil (26014 16452 904247 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 17156 . 17157) (nil fontified nil 16867 . 17157) (16867 . 17157)) nil (26014 16452 904223 0) 0 nil])
([nil nil ((17206 . 17218) (#("    " 0 4 (fontified t)) . 17206) (17171 . 17187) (#("        " 0 8 (fontified t)) . 17171) (17151 . 17167) (#("        " 0 8 (fontified t)) . 17151) (17102 . 17122) (#("            " 0 12 (fontified t)) . 17102) (17050 . 17070) (#("            " 0 12 (fontified t)) . 17050) (16999 . 17015) (#("        " 0 8 (fontified t)) . 16999) (undo-tree-id10850 . -5) (16951 . 16967) (#("        " 0 8 (fontified t)) . 16951) (16867 . 16879) (#("    " 0 4 (fontified t)) . 16867) 16835) nil (26014 16452 904218 0) 0 nil])
([nil nil ((#("                info!(\"rotate instance\");" 0 16 (fontified t) 16 21 (face font-lock-preprocessor-face fontified t) 21 22 (face (rainbow-delimiters-depth-5-face) fontified t) 22 39 (face font-lock-string-face fontified t) 39 40 (face (rainbow-delimiters-depth-5-face) fontified t) 40 41 (fontified t)) . 15118) (undo-tree-id10874 . -41) (undo-tree-id10875 . -41) (undo-tree-id10876 . -41) (undo-tree-id10877 . -41) (undo-tree-id10878 . -41) (undo-tree-id10879 . -41) (undo-tree-id10880 . -41) (t 26014 16452 951705 553000)) nil (26014 18421 345561 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 15118) (undo-tree-id10873 . -1)) nil (26014 18421 345548 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 20383 . 20384) (nil fontified nil 20383 . 20384) (nil fontified nil 20382 . 20383) (nil fontified nil 20381 . 20382) (nil fontified nil 20367 . 20381) (nil fontified nil 20360 . 20367) (nil fontified nil 20359 . 20360) (nil fontified nil 20354 . 20359) (20354 . 20384) (t 26014 18421 393118 580000)) nil (26014 18469 443249 0) 0 nil])
([nil nil ((#("redraw();" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-6-face) fontified t) 7 8 (face (rainbow-delimiters-depth-6-face) fontified t) 8 9 (rear-nonsticky t fontified t)) . -20375) (undo-tree-id11089 . -9) (undo-tree-id11090 . -9) (undo-tree-id11091 . -9) (undo-tree-id11092 . -9) (undo-tree-id11093 . -9) (undo-tree-id11094 . -9) (undo-tree-id11095 . -9) (undo-tree-id11096 . -9) (undo-tree-id11097 . -9) (undo-tree-id11098 . -9) (undo-tree-id11099 . -9) (undo-tree-id11100 . -9) (undo-tree-id11101 . -9) (undo-tree-id11102 . -9) (undo-tree-id11103 . -9) (undo-tree-id11104 . -9) (undo-tree-id11105 . -9) (undo-tree-id11106 . -9) (undo-tree-id11107 . -9) (undo-tree-id11108 . -9) 20384 (t 26014 18469 489399 32000)) nil (26014 18484 342526 0) 0 nil])
([nil nil ((#("request_" 0 8 (fontified t)) . -20367) (undo-tree-id11068 . -8) (undo-tree-id11069 . -8) (undo-tree-id11070 . -8) (undo-tree-id11071 . -8) (undo-tree-id11072 . -8) (undo-tree-id11073 . -8) (undo-tree-id11074 . -8) (undo-tree-id11075 . -8) (undo-tree-id11076 . -8) (undo-tree-id11077 . -8) (undo-tree-id11078 . -8) (undo-tree-id11079 . -8) (undo-tree-id11080 . -8) (undo-tree-id11081 . -8) (undo-tree-id11082 . -8) (undo-tree-id11083 . -8) (undo-tree-id11084 . -8) (undo-tree-id11085 . -8) (undo-tree-id11086 . -8) (undo-tree-id11087 . -8) (undo-tree-id11088 . -8) 20375) nil (26014 18484 342504 0) 0 nil])
([nil nil ((#("window." 0 7 (fontified t)) . -20360) (undo-tree-id11046 . -7) (undo-tree-id11047 . -7) (undo-tree-id11048 . -7) (undo-tree-id11049 . -7) (undo-tree-id11050 . -7) (undo-tree-id11051 . -7) (undo-tree-id11052 . -7) (undo-tree-id11053 . -7) (undo-tree-id11054 . -7) (undo-tree-id11055 . -7) (undo-tree-id11056 . -7) (undo-tree-id11057 . -7) (undo-tree-id11058 . -7) (undo-tree-id11059 . -7) (undo-tree-id11060 . -7) (undo-tree-id11061 . -7) (undo-tree-id11062 . -7) (undo-tree-id11063 . -7) (undo-tree-id11064 . -7) (undo-tree-id11065 . -7) (undo-tree-id11066 . -7) (undo-tree-id11067 . -7) 20367) nil (26014 18484 342481 0) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -20354) (undo-tree-id10881 . -1) (undo-tree-id10882 . -1) (undo-tree-id10883 . -1) (undo-tree-id10884 . -1) (undo-tree-id10885 . -1) (undo-tree-id10886 . -1) (undo-tree-id10887 . -1) (undo-tree-id10888 . -1) (undo-tree-id10889 . -1) (undo-tree-id10890 . -1) (undo-tree-id10891 . -1) (undo-tree-id10892 . -1) (undo-tree-id10893 . -1) (undo-tree-id10894 . -1) (undo-tree-id10895 . -1) (undo-tree-id10896 . -1) (undo-tree-id10897 . -1) (undo-tree-id10898 . -1) (undo-tree-id10899 . -1) (undo-tree-id10900 . -1) (undo-tree-id10901 . -1) (undo-tree-id10902 . -1) (undo-tree-id10903 . -1) (undo-tree-id10904 . -1) (undo-tree-id10905 . -1) (undo-tree-id10906 . -1) (undo-tree-id10907 . -1) (undo-tree-id10908 . -1) (undo-tree-id10909 . -1) (undo-tree-id10910 . -1) (#("t" 0 1 (fontified t)) . -20355) (undo-tree-id10911 . -1) (undo-tree-id10912 . -1) (undo-tree-id10913 . -1) (undo-tree-id10914 . -1) (undo-tree-id10915 . -1) (undo-tree-id10916 . -1) (undo-tree-id10917 . -1) (undo-tree-id10918 . -1) (undo-tree-id10919 . -1) (undo-tree-id10920 . -1) (undo-tree-id10921 . -1) (undo-tree-id10922 . -1) (undo-tree-id10923 . -1) (undo-tree-id10924 . -1) (undo-tree-id10925 . -1) (undo-tree-id10926 . -1) (undo-tree-id10927 . -1) (undo-tree-id10928 . -1) (undo-tree-id10929 . -1) (undo-tree-id10930 . -1) (undo-tree-id10931 . -1) (undo-tree-id10932 . -1) (undo-tree-id10933 . -1) (undo-tree-id10934 . -1) (undo-tree-id10935 . -1) (undo-tree-id10936 . -1) (undo-tree-id10937 . -1) (undo-tree-id10938 . -1) (undo-tree-id10939 . -1) (#("a" 0 1 (fontified t)) . -20356) (undo-tree-id10940 . -1) (undo-tree-id10941 . -1) (undo-tree-id10942 . -1) (undo-tree-id10943 . -1) (undo-tree-id10944 . -1) (undo-tree-id10945 . -1) (undo-tree-id10946 . -1) (undo-tree-id10947 . -1) (undo-tree-id10948 . -1) (undo-tree-id10949 . -1) (undo-tree-id10950 . -1) (undo-tree-id10951 . -1) (undo-tree-id10952 . -1) (undo-tree-id10953 . -1) (undo-tree-id10954 . -1) (undo-tree-id10955 . -1) (undo-tree-id10956 . -1) (undo-tree-id10957 . -1) (undo-tree-id10958 . -1) (undo-tree-id10959 . -1) (undo-tree-id10960 . -1) (undo-tree-id10961 . -1) (undo-tree-id10962 . -1) (undo-tree-id10963 . -1) (undo-tree-id10964 . -1) (undo-tree-id10965 . -1) (undo-tree-id10966 . -1) (undo-tree-id10967 . -1) (#("t" 0 1 (fontified t)) . -20357) (undo-tree-id10968 . -1) (undo-tree-id10969 . -1) (undo-tree-id10970 . -1) (undo-tree-id10971 . -1) (undo-tree-id10972 . -1) (undo-tree-id10973 . -1) (undo-tree-id10974 . -1) (undo-tree-id10975 . -1) (undo-tree-id10976 . -1) (undo-tree-id10977 . -1) (undo-tree-id10978 . -1) (undo-tree-id10979 . -1) (undo-tree-id10980 . -1) (undo-tree-id10981 . -1) (undo-tree-id10982 . -1) (undo-tree-id10983 . -1) (undo-tree-id10984 . -1) (undo-tree-id10985 . -1) (undo-tree-id10986 . -1) (undo-tree-id10987 . -1) (undo-tree-id10988 . -1) (undo-tree-id10989 . -1) (undo-tree-id10990 . -1) (undo-tree-id10991 . -1) (undo-tree-id10992 . -1) (undo-tree-id10993 . -1) (undo-tree-id10994 . -1) (#("e" 0 1 (fontified t)) . -20358) (undo-tree-id10995 . -1) (undo-tree-id10996 . -1) (undo-tree-id10997 . -1) (undo-tree-id10998 . -1) (undo-tree-id10999 . -1) (undo-tree-id11000 . -1) (undo-tree-id11001 . -1) (undo-tree-id11002 . -1) (undo-tree-id11003 . -1) (undo-tree-id11004 . -1) (undo-tree-id11005 . -1) (undo-tree-id11006 . -1) (undo-tree-id11007 . -1) (undo-tree-id11008 . -1) (undo-tree-id11009 . -1) (undo-tree-id11010 . -1) (undo-tree-id11011 . -1) (undo-tree-id11012 . -1) (undo-tree-id11013 . -1) (undo-tree-id11014 . -1) (undo-tree-id11015 . -1) (undo-tree-id11016 . -1) (undo-tree-id11017 . -1) (undo-tree-id11018 . -1) (undo-tree-id11019 . -1) (undo-tree-id11020 . -1) (#("." 0 1 (fontified t)) . -20359) (undo-tree-id11021 . -1) (undo-tree-id11022 . -1) (undo-tree-id11023 . -1) (undo-tree-id11024 . -1) (undo-tree-id11025 . -1) (undo-tree-id11026 . -1) (undo-tree-id11027 . -1) (undo-tree-id11028 . -1) (undo-tree-id11029 . -1) (undo-tree-id11030 . -1) (undo-tree-id11031 . -1) (undo-tree-id11032 . -1) (undo-tree-id11033 . -1) (undo-tree-id11034 . -1) (undo-tree-id11035 . -1) (undo-tree-id11036 . -1) (undo-tree-id11037 . -1) (undo-tree-id11038 . -1) (undo-tree-id11039 . -1) (undo-tree-id11040 . -1) (undo-tree-id11041 . -1) (undo-tree-id11042 . -1) (undo-tree-id11043 . -1) (undo-tree-id11044 . -1) (undo-tree-id11045 . -1) 20360) nil (26014 18484 342447 0) 0 nil])
([nil nil ((408 . 409) (t 26014 18484 388982 998000)) nil (26014 18913 237516 0) 0 nil])
([nil nil ((409 . 415)) nil (26014 18913 237515 0) 0 nil])
([nil nil ((413 . 424) (#("de" 0 2 (fontified nil)) . 413) (413 . 415) (#("depth_pass;" 0 11 (fontified nil)) . -413) (413 . 424) (#("de" 0 2 (face font-lock-constant-face fontified t)) . -413) (undo-tree-id11109 . -2) (undo-tree-id11110 . -1) (undo-tree-id11111 . -1) (undo-tree-id11112 . -2) (undo-tree-id11113 . -2) (undo-tree-id11114 . -2) (undo-tree-id11115 . -2) 415) nil (26014 18913 237510 0) 0 nil])
([nil nil ((2984 . 2988) (#("    " 0 4 (fontified nil)) . 2983) (undo-tree-id11116 . -4) (undo-tree-id11117 . -4) (undo-tree-id11118 . -4) (undo-tree-id11119 . -4) (2982 . 2988) (t 26014 18913 283394 495000)) nil (26014 19502 427987 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 3014 . 3015) (nil fontified nil 2988 . 3015) (2988 . 3015)) nil (26014 19502 427970 0) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2988) 2984) nil (26014 19502 427964 0) 0 nil])
([nil nil ((494 . 495) (t 26014 19502 474337 730000)) nil (26014 19512 822409 0) 0 nil])
([nil nil ((495 . 501)) nil (26014 19512 822407 0) 0 nil])
([nil nil ((499 . 509) (#("de" 0 2 (fontified nil)) . 499) (499 . 501) (#("depth_pass" 0 10 (fontified nil)) . -499) (499 . 509) (#("de" 0 2 (face font-lock-constant-face fontified t)) . -499) (undo-tree-id11120 . -2) (undo-tree-id11121 . -1) (undo-tree-id11122 . -1) (undo-tree-id11123 . -2) (undo-tree-id11124 . -2) (undo-tree-id11125 . -2) (undo-tree-id11126 . -2) (undo-tree-id11127 . -2) 501) nil (26014 19512 822405 0) 0 nil])
([nil nil ((509 . 513)) nil (26014 19512 822384 0) 0 nil])
([nil nil ((13559 . 13567) (#("        " 0 8 (fontified nil)) . 13558) (undo-tree-id11135 . -8) (undo-tree-id11136 . -8) (undo-tree-id11137 . -8) (13557 . 13567) (t 26014 19512 868458 982000)) nil (26014 19535 489718 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 13625 . 13626) (nil fontified nil 13567 . 13626) (13567 . 13626)) nil (26014 19535 489713 0) 0 nil])
([nil nil ((13626 . 13634)) nil (26014 19535 489711 0) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -13567) 13612) nil (26014 19535 489710 0) 0 nil])
([nil nil ((14287 . 14299) (#("            " 0 12 (fontified nil)) . 14286) (undo-tree-id11132 . -12) (undo-tree-id11133 . -12) (undo-tree-id11134 . -12) (14285 . 14299)) nil (26014 19535 489708 0) 0 nil])
([nil nil ((14299 . 14301)) nil (26014 19535 489703 0) 0 nil])
([nil nil ((14299 . 14309) (#("de" 0 2 (fontified nil)) . 14299) (14299 . 14301) (#("depth_pass" 0 10 (fontified nil)) . -14299) (14299 . 14309) (#("de" 0 2 (fontified t)) . -14299) (undo-tree-id11128 . -2) (undo-tree-id11129 . -1) (undo-tree-id11130 . -2) (undo-tree-id11131 . -2) 14301) nil (26014 19535 489701 0) 0 nil])
([nil nil ((14309 . 14310)) nil (26014 19535 489685 0) 0 nil])
([nil nil ((14831 . 14844) (t 26014 19535 535869 443000)) nil (26014 19570 73792 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 14907 . 14908) (nil fontified nil 14844 . 14908) (14844 . 14908)) nil (26014 19570 73791 0) 0 nil])
([nil nil ((#("            " 0 12 (fontified t)) . -14844) 14832) nil (26014 19570 73785 0) 0 nil])
([nil nil ((14714 . 14716) (t 26014 19570 119939 970000)) nil (26014 19572 804987 0) 0 nil])
([nil nil ((#("view" 0 4 (fontified t)) . -17176) (undo-tree-id11195 . -4) (undo-tree-id11196 . -4) 17180 (t 26014 19572 851375 310000)) nil (26014 19638 123240 0) 0 nil])
([nil nil ((#("texture." 0 8 (fontified t)) . -17168) (undo-tree-id11190 . -8) (undo-tree-id11191 . -8) (undo-tree-id11192 . -8) (undo-tree-id11193 . -8) (undo-tree-id11194 . -8) 17176) nil (26014 19638 123237 0) 0 nil])
([nil nil ((#("depth_" 0 6 (fontified t)) . -17162) (undo-tree-id11184 . -6) (undo-tree-id11185 . -6) (undo-tree-id11186 . -6) (undo-tree-id11187 . -6) (undo-tree-id11188 . -6) (undo-tree-id11189 . -6) 17168) nil (26014 19638 123230 0) 0 nil])
([nil nil ((17162 . 17164)) nil (26014 19638 123223 0) 0 nil])
([nil nil ((17162 . 17172) (#("de" 0 2 (fontified nil)) . 17162) (17162 . 17164) (#("depth_pass" 0 10 (fontified nil)) . -17162) (17162 . 17172) (#("de" 0 2 (fontified t)) . -17162) (undo-tree-id11178 . -2) (undo-tree-id11179 . -1) (undo-tree-id11180 . -2) (undo-tree-id11181 . -2) (undo-tree-id11182 . -2) (undo-tree-id11183 . -2) 17164) nil (26014 19638 123222 0) 0 nil])
([nil nil ((17172 . 17174)) nil (26014 19638 123213 0) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -17173) (undo-tree-id11174 . -1) (undo-tree-id11175 . -1) (undo-tree-id11176 . -1) (undo-tree-id11177 . -1) 17174) nil (26014 19638 123212 0) 0 nil])
([nil nil ((17173 . 17174)) nil (26014 19638 123207 0) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -17172) (undo-tree-id11151 . -1) (undo-tree-id11152 . -1) (undo-tree-id11153 . -1) (undo-tree-id11154 . -1) (undo-tree-id11155 . -1) (undo-tree-id11156 . -1) (undo-tree-id11157 . -1) (undo-tree-id11158 . -1) (undo-tree-id11159 . -1) (undo-tree-id11160 . -1) (undo-tree-id11161 . -1) (undo-tree-id11162 . -1) (undo-tree-id11163 . -1) (undo-tree-id11164 . -1) (undo-tree-id11165 . -1) (undo-tree-id11166 . -1) (#("v" 0 1 (fontified t)) . -17173) (undo-tree-id11167 . -1) (undo-tree-id11168 . -1) (undo-tree-id11169 . -1) (undo-tree-id11170 . -1) (undo-tree-id11171 . -1) (undo-tree-id11172 . -1) (undo-tree-id11173 . -1) 17174) nil (26014 19638 123204 0) 0 nil])
([nil nil ((17172 . 17175)) nil (26014 19638 123179 0) 0 nil])
([nil nil ((#("v" 0 1 (fontified t)) . -17173) (undo-tree-id11138 . -1) (undo-tree-id11139 . -1) (undo-tree-id11140 . -1) (undo-tree-id11141 . -1) (undo-tree-id11142 . -1) (undo-tree-id11143 . -1) (undo-tree-id11144 . -1) (undo-tree-id11145 . -1) (undo-tree-id11146 . -1) (#("i" 0 1 (fontified t)) . -17174) (undo-tree-id11147 . -1) (undo-tree-id11148 . -1) (undo-tree-id11149 . -1) (undo-tree-id11150 . -1) 17175) nil (26014 19638 123176 0) 0 nil])
([nil nil ((17173 . 17176)) nil (26014 19638 123152 0) 0 nil])
([nil nil ((17176 . 17185)) nil (26014 19638 123148 0) 0 nil])
([nil nil ((18110 . 18118) (#("        " 0 8 (fontified nil)) . 18109) (undo-tree-id11197 . -8) (undo-tree-id11198 . -8) (undo-tree-id11199 . -8) (18108 . 18118) (t 26014 19638 170644 2000)) nil (26014 19657 155670 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 18170 . 18171) (nil fontified nil 18118 . 18171) (18118 . 18171)) nil (26014 19657 155656 0) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -18118) 18151) nil (26014 19657 155649 0) 0 nil])
([nil nil ((18110 . 18112) (t 26014 19657 202058 374000)) nil (26014 20044 588670 0) 0 nil])
([nil nil ((apply -51 15048 15802 undo--wrap-and-run-primitive-undo 15048 15802 ((" " . 15048) (15798 . 15801) (15772 . 15775) (15754 . 15757) (15730 . 15733) (15654 . 15657) (15518 . 15521) (15444 . 15447) (15379 . 15382) (15357 . 15360) (15335 . 15338) (15313 . 15316) (15287 . 15290) (15215 . 15218) (15162 . 15165) (15125 . 15128) (15081 . 15084) (15056 . 15059) (15048 . 15049)))) nil (26014 20091 560959 0) 0 nil])
([nil nil ((apply 3 14990 15043 undo--wrap-and-run-primitive-undo 14990 15043 ((#("// " 0 2 (face font-lock-comment-delimiter-face fontified t) 2 3 (face font-lock-comment-delimiter-face fontified t)) . -14992) 15046))) nil (26014 20091 560954 0) 0 nil])
([nil nil ((#("       " 0 7 (fontified t)) . -14992) 15043 (t 26014 20091 607459 122000)) nil (26014 20092 668845 0) 0 nil])
([nil nil ((apply -3 11101 11159 undo--wrap-and-run-primitive-undo 11101 11159 ((11117 . 11120) 11155))) nil (26014 20476 599398 0) 0 nil])
([nil nil ((11158 . 11175)) nil (26014 20476 599397 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 11377 . 11378) (nil fontified nil 11175 . 11378) (11175 . 11378)) nil (26014 20476 599396 0) 0 nil])
([nil nil ((#("                " 0 16 (fontified t)) . -11175)) nil (26014 20476 599389 0) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . 18358) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 18358) (t 26014 20476 645458 304000)) nil (26014 20576 154919 0) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . -7241) (undo-tree-id11200 . -1) (undo-tree-id11201 . -1) (undo-tree-id11202 . -1) (undo-tree-id11203 . -1) (undo-tree-id11204 . -1) (undo-tree-id11205 . -1) (undo-tree-id11206 . -1) (undo-tree-id11207 . -1) (undo-tree-id11208 . -1) (undo-tree-id11209 . -1) (undo-tree-id11210 . -1) (undo-tree-id11211 . -1) (undo-tree-id11212 . -1) (undo-tree-id11213 . -1) (undo-tree-id11214 . -1) (undo-tree-id11215 . -1) 7242 (t 26014 20576 200093 781000)) nil (26014 20698 797628 0) 0 nil])
([nil current ((7241 . 7242)) nil (26014 20698 797594 0) 0 nil])
nil
